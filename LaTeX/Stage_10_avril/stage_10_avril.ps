%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: stage_10_avril.dvi
%%CreationDate: Wed May 07 22:06:47 2014
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: SFRM1200 SFTT1200 SFBX1200 CMR12 CMMI12 CMR8 CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o stage_10_avril.ps
%+ stage_10_avril.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.05.07:2206
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.17, 2013/07/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 805 2013-07-11 13:18:11Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def

/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2010/10/02 $
% Version         : 0.62 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 692 2012-06-04 06:47:40Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore}bind
def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave
pgfsoa .setopacityalpha stroke grestore}bind def}bind def /pgffoa 1
def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 49 /infinity put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D452804B3142DCDCAB22773DE75726823F1BB198
1C1CA8D89B59FF008B054F0322A543DBCCABA518AB9945020DF8C049A6E112C5
3F67BB74E95B7EB282BEF714737DD0FDAEC970DBAC5166AFBEDABC7C47532B4B
49D40C79E7FA3A86BC27A87EBB46E078461E83B9D7DF0487194CD588159983DA
FD56D30245F9C7A63410D33B2E08D47E509878F90BC3B6319D1E4952D5CFA821
8625798E2D85F4B6D90117BAB9F95F94F9885C7918E5A8AD155746084EF82544
02CF22CD2C0DAD5A168778D850B9AA0966CCFAC875F5554398185E3F19814D10
FBC2D8E5297D676F838ABEBC5AB15B6B2486877494AAC51FFD61D09E03BBF16B
AEE3DBCA6F5C337230B752F75704C8B3760EC3F12845CE5955AF8D73E7847E28
2AE2152F6AD2C6A496CD10561D19EDED5D1020A86386E91E1B62E8E3370A788D
11EBEAF6BC22262D6BA169246FEFE9AC44AD3830E71674D57DD8A74F9A8A93FB
9AD3D908EBF1EDD91011AAAF61
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/UniqueID 5000791 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DEB8CF0BE87C59313978F28295C0E3A01D2B5682DA86A38F390982A8FE
C3E81B8D3532C92C4A4A4BCB421D248F786EC50B3BBBF3BD829F18A73BA4F676
4C5EDA59C34FA85648E492C5794D0910F67F9B6ED89E5BD09B9DBFC65046D77A
2AB706D3312335A3486A067593EC0DF7D334F5D37B818D991D1666459120C75E
6D21A12D75234C22F4F92A4EC10C056298F89550F48605432133895D51B0AAA6
0A8E4020C84D14E4FBBB9E7C095468EFDECD7BC8444DED90ECDE07F2518CCA84
78935CBF8B620C324A87D6049942E772A1FD7BDD577A27869C88841C83D4BC18
6D2FEFADE998BC7D9189300F7C7DBC3F666FCA9D53EE447E310BD22EAD502BDF
33D33A50C61F575E1D3A1F70B8D72F34A9E9E8250627BDDCC62852DD37EB92DC
93D7CB4409D10AF291303362483134E434F682BCBA364206F55EC698416AB3B7
04C31B1D45882A3AFD4037A692272C4ACEFCF08389ACB43A6857C369CED4BBC0
2C487C9A30C787BB3E003017AE803E93C77E413CDEA8563EFC875A95706C980B
1DC2638914FCF6A9BC11CC2CEF0AF3544D2F74938FB2BDA52602D1693D93FF4B
F44DFFD5B2ED04F22D23804CB869CA04480363D6EF55C905D384CB11A28F8555
F2641801E97E84355979CB41EE876C9845
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 102 /f put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709013933E3B325C8685C61
048660562D70CC0055BA8777786CCD161049903DF61A5AF6DBFB02668AC5DE57
3D52C3FA13DBD74DE4AB848DDC5DF11DA16E7AE728A1B19B8832EFAAAD7263D8
DD78BB34C58DC2439747CC82B1937B920E8500DEF5293C01896B10A6DA71A168
4F6DE6DDB7E2910A0D9226ABDCDA689F20A867450D5C57181D23CE3779136295
0FB6833E98F45B76D98F7F115A67578C90CE30A316B3A041849901838D0A12D4
7F8BCF5CC5768C0AB33CE1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E4135D3DB
AB5C51E5FFC0F527C5B59A59FE5C3360A0C3CD978DEC483D4DCDDD173894CAB7
0B73187E5BB9C5480BFC02FC45F2B1240C294133F7627AEFC03823146D0735CA
D73632F8EE970DC0EBA43D2C700A1D5DFBD179A2BF9BA6CB5818D72CDD90E52D
FACB64955479363CDDBF4C141FCFE9A9A2D73D1AD3D3FB7699F4A04B5B078DBE
76729D694396683D4125C68AB8F0DEBA88B876C71B13A737A00B245A1571E9CB
B63FB2EBF35B5BA2F0E744ACCF23EAB3C9E0437A2F11AADC43B5D23573EDF779
8A4397FC6B28F7DFB72F5895A6BBE071E3442C0A00DD938476920CF67869A9DD
F5A29AA5030369D13477E95EAA9BBC038E0530B2AD398A9B03C8BC5AC4B184E1
3F3ABA4A18487B10878E9D8009F85672B756BA24DB51A2A131B516923D5CC746
A429FC5B2E565CFA592C54A42801A142883EBF015FA81AB52E34F91345BEBA6A
CB555778CC267DEA91A4C2179322E46D3E61F8C996A63AA3D616B447B0D88B53
37ADF6E4CC84EEA24F77BB33582B268EED29D4C4A28C745F663D97F370141456
A5DA72442BDC46D862F6CE1D7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A8
1587361F7897A2D28A562A935226FF823955C3AEC37FCFC416D861B0E313E938
7668640FB271BA91799E6A004D436C27CC46EEF80FA1A05AB90D788643BDAD10
366C6192D003985BAB6E49DA96211DF7CA971E34661E17C5DD710E6DE3B94D85
3362CCB1538C5D0664BDB72A57757B2CBFC6F5D915C260859C43D16849F29A1E
78AE53B6B477C24A622EBE5C0DA2A9745F1B53F1FBB54E46FF405BCCB859F8A6
83E2B84CEDAED3264A1C2683C4F28A6E0B9E86433E56DB72AB068F56185A95E1
B0429A0F9DCA37CB2C9CEC2CBDBDC9CD49C47C8E31E70FF75FC4E34D15C0BBFE
D0EAFDFAE2C502881246F7254CB4F3A196D257CFF8AC01064DC59B43DF12DCA6
26F8A2147DFB161F8F98CC3027FB5FDF901190949B4B6A3297C9891193419E3A
48D571DEE01E6C1591107758A825000F27BE974490F2C2A1EDF171B5A5F7ED24
B33D2C3F965E6C31138546BB8DA583B835BD8F8D290BD895D061C711128C794F
77BD223CF144C0FDBF1576BC1C236F66A3B79E7942082A69DFA7F1756D39C28D
5D07475970D8D7A6DF940E23FDF870E2858CDBC2A3303984E8B4733D35471A43
C4AC733BB92B64091D3187C8F9855C044F5810B772FE37524027FB1807E2EBB9
5CBC2A6834B6D297D934C7F01CCFC190FF085E5DB40B26A4E0D9D68BA661840C
4858D1D3E67DEA90A16FF693AF98E2212BCB115345D433ED23F7B0B9A7414BA0
6EA5776A594A9275834F2E56C9A5C9BD35B8B288FAC8AC56D0136C16C2109C87
627A1CFEA2A6707D6B09A863A2A8F766E04C09553BFD0F222FF93038A2BC3C57
1220FBB27843BA1D65F542D596F3647FFC1E8D9BE2EDCF1873856390460A71BE
7F8CB0CF3CC477C61D0EF5E89EB39A06E8C322EDAD6BCAB99554EB604AE9B420
676B67A1327D1B24763C86AB04B92DC96A134302DA50B8A4407F3BEF35342DE8
85B0C370FB10C954E05C0B06328B105F55B6BE5E98D4BAC0C5A0DDEF52497AF1
884E8417F48DC367E753C02975BFD389D8522C13C6F6DDFB92318957AD19DBD7
3060872B34150A6740E2603C6640F01E7447B387DE7A86DCEDE5D937A1D6CFA4
7CAC6AF026F078702B4A462B902E7C0AC152C699019C8A6517B7FFC0018CC434
A190E7A542F72209B35D067B383AE1AB7624FCD55BA55016F1C8B4AD93D603C8
F4F0BA12673BBA2DB7A63C6DBB9532AC14EEC75C4E1EC9D8DF404179EBB1D4ED
D001A865D59FE365381705E9BE668D68624D8BB113F0FC3E59373AE26A994F73
BEF088B97B078B2B3922972A6E3B9E65B09F072DDA726280C441D3F73D13FE68
FB28C02B93131C92B4D0E7DC6B5BE078B5061E26B4AD3B8F587CD254AE53D2AD
726A8B53D0B03B58303A10A1BCCFFCB38C9C0A1418E3FE62344FF23C6BE43AFD
338AA22CB6315E3C029DD7A26085AB3536DE1C06053C928EEAEAEADBDF7DA728
4D7166E40709510E0A2019680A7B179FCB462C395B6ED996864F79DCE405B51C
0D7316340FA3EB768514D378E7D13E73AECC34E8899E287BD35C17F1120F6296
0BF68751519EABD8B1E1C090F72C877365D638F5E1E8C85C73DEFC7EEB7169C6
46C1F90361A32F0782492B045C102264E21AA5A1155F7432C09736E7B716A8AF
7952D9C821FA5F4EE49F4233B6320AD2351957A5AC9BAEC2230BEF44A4F9DDA1
099DBBBC967C427FE77B7372B290662F1865D7BEAA889461B68B262802A1F208
717D6299D445DD30F2C77EDEB1D5EDF8200196EA4BCB09F0B52C71CF4BC8ACCE
42BBA7BCD8190B3F8F27368E661DC66B3A25933CFB82B86197B5E77013850D3F
994937B6B21D518DB5897FA0A41670ECD2F924805B6C9CE2B8896789D1F4AC97
91DB391B0210D15A517D238EB0E0E968EF8CD759AE4F9376E595014AB718A001
F6F50E67AEFCFA2E4450543631CB4A9BDAFC0B35C7843D6F88359263CDB7EA32
C634A916C3AA0A0E631CF6411AD370032A02BC23107ACD68B2EA35DAE7D1A176
7292D2DF0069884CFA0A2D7B239F80E1BEE447530CD106FB79B343C00BD6A175
D127F2A08D450A712190C0076425835BFD824C0B9C0E43F1F456D5C6BC2614A1
B1E073F107FBEE55851FBDFFFD3CD888BD79944C12F9F9AB826F622A5C090366
442FCD3D2688FBB7B79D3769CE02D3FCE37DDC8B5F0D77A6E20F9A920DC8523C
C56D6D7C3ACDFD892F03A9B3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518693AEC75AC0AADD0C11B0065E2ABCF51132F3
82E3718B9A9FAAF727F2D8286177EE27BAD040C66D0D2D7C092B45D9330265B5
6B5C8E29F71C9EF548BFA4BAFAB242B26455E4B7FC1882D68E408D25E6F58EC3
03AE9B7A5F45D61E02D0AB82AFBE793D708ABEF45FEE865969895654C00A5FA2
093A297AE74BF625A96FD85F58FF994921C9F1276635C8CB65FECFEE37C77BD7
FBD692DBDF1079AD35F8A8198D63A3526ACB37FD59ADE6BABAC0778B38CD5AED
130AB468643EC39B4B5B2198A2AE940B4D80826B2C67C697D65740BB4E2866B1
2F2295E3F42B07FB242DC1CD09C87096B0D94B0B5DFE84D30A16B67AB108CAA8
F46DB51F050F693017C805D302EE8166B793ED11EDD93B12F6BB9172585A76DD
F1B0F775186410CB8BCD78B0BA98CDA553760DE8A8D4078A77A45E985314F410
F023D1F19CB6AA31ECD0A55198440C609A0F1BD917A25DE81295D3C0EF6843DC
FC7DAF18B5E91C6849BE28D96C037786FDA53F03DE5EA2D21D86C61F8ABCE1DA
45D021BB4E035561CA942CA446CEA21C95408BF4FE40DF5E8BCD589EB366D459
C3888670982ACE2376827FA17032816360D77941A7838C4E449412AAF31ACDC4
5B3230CA82B03E0DA42363990CF581D82B67E7D1C4C546B009B0CBEF1A6CAC58
A03921B84138B959B5DD3930B1E9608346E65DD23CD1EDE98DCE77F324C202BF
F3BF3A6C6440DB2F3D71318CC98BC303DE05EA079D0556BC5606BEF31F354FEB
33FA0A898FBDCF908E2645C54CD3D3270BDB75E2A06FFACC8D7578B6DE0862C0
FF19082674849BD0448A2727B354BDFDBDFB080018333989B883F1AF86C2918D
C1D764FB8446F989840AF4739FF0C15097A659636A5FEE9E1410E425C392EB04
2F47F2F04DE1ED16EC28C4E8C2B6FE5F63F87212E96C963884E6C58622983F87
EBF44D3362BB1090B333E299E2E4861FAC8542A7514C05534C0981800D6496E9
E3ECBBFCB99B1E06B3CBB9754EAA219C8E879A24EF5E2E5B69CE01598AFD2DE8
5DE05F02651F915CCD14705842C64A0B1DF0CCE74E99C1DB82AC245BBC1C1377
0A1A4937B3C21D029AF74FA3FCB4178C40E8C637723FD221FE653C10C212DF00
272C261BD0C84BE1A695FFBFD0FD3AB0B5A72A6CBB208DCA46CBE65D13145A9E
710C01B57CECB1DC0234018FADBFA583261A9C71147F3D03196EEF9A1BAA6646
34874272193245A43456519503E096FA40F14A7B3BE293E01F4B71945D3F0043
459C4B76504F8CC41962D8AB61C61C5D4C8F6007612E68F7D970E18271FA7E7B
D8A5EAA87CEEE7322A81BAEF13EA5BC35F47A19DC201F14C6517222722D0CDFC
F93D7C02209F11EB0CC999D98F4E656D1BC622B9E480A83119455646940E3257
7704C37CE0CED262A5D17680D13A308C67886462BB0D1392D1C549ED779BC71D
1E16BBECB558082CBEDF4FBE3EF666E04C09553BFD0F10121D3EC3532501B785
B48549FD23EED0FF1D2AD99E81B09A89E4DF79B1C71253C413A021D0B7AB28FC
B11717F4FA3A4FC94E77FBFFBB8433FDC46033FB51935736AF44B32EBDE0624F
28D1986778E5EEB4A87DD35A8564FFF1DAC195D17D6FC3ED41D775D898E293DB
04A8FB55F15DBCFB6B01E256E7078F09C83D5D71577395527A095B901E2DF027
2E6082452E433A7F793B7277DD0FD3E830BA4D565DD2D8BB722EB6D4387E2B23
B0B1C9925134C34008BA01CC39C691353609475307B285AC3CFB652B58C65B66
23A0D37791D7B21CF1A41BC49875B117431B19C2F51C5A3D31661ACA4F27108A
5BF0FABA3158C57386DFFF230B84F914C57797F836010C60AF50BC9DA6B44DDF
5C734E243CF71170AD23698912BE4BAC1E79B458BD1D24F9F22A692D68818854
4C6C99E66D652D20169A8C9888A517F1C8117B7315EA3B385381F08F985DFCE1
E2F0012342E63BE84EAA60FF883A24056C141B1092111B674D734A438F2A000B
00F1A6E41378D902F9F1CB43563E325AA544EA1799A87A42A7A36DD49E5A26CE
AE4898BC7E940A0147A245E1FBE25046C86D5E0FBDCC96E8B009AB6D8D2E16F6
D72B2BCBFE0D72E41493DF41A4A050BE87A38516075AAD3B06A11DDB4A2310C0
5E1388B7936C3EB3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1200
%!FontType1-1.0: SFBX1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1200, tcbx1200, labx1200, lbbx1200, lcbx1200, rxbx1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-223 -316 1694 925}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EDDDF3B8AD19
A05A98215C1A2AF1E98BA6D25E3EE92459564B169EE8915C4C3A77E21AD623DE
4B78A134EC9973C88752BA636665292269AE953747C9605B9769A15E719E8036
4E368E46C8FCE60112D1F5FABB556AD834401D6250529F3A1BBAA7679464B857
F4746C58E043D98AAFFB21E0368B3110A911F98D0C1B16A668D8B3CE65260AA7
E9A3FA32A95349AF8AADB1AE65C05D8C83A10ABB656256C77C42E4E4E7DE2DCD
F47BD54EABD080A844C8E3D14CC76E40490EAA3E94371067AE92388A8875BCDE
93EFD646F6FEAE17E4C52BEE62060D2107B620D9A948B3B3D8D3E06E63A714AE
B5932E76384D2E2B15A5A7827EA3A3C15EE807555607FFAA1AE58C5A95B6956F
A16D46AE1028B81C056BAEE21114AE2C87B3419663837BB87F79416D58E30833
1FF10EF0D5B2112E088F63D9E747D792CFF5B74F2F95DBF5C54245C517F937BA
90AFD6EAEBBEB6707C6C751315331053A0BEE3678476A7BCDA1F939D98923679
067F136F7824411A8D5148998105E3E823D55A18FAA99F4AC12EF14C4BCA4736
E465782FE9E81CE4F3BE271CE14CAC803470BF4D71CAA1DCB8F66E98C454EC3E
87EA1A0591FE3E17ABB7966756814704B5B6971CD5168C3C7C381ACF661CD3D9
4E07D5A40127D809162D41C277AF022DF05690A5D28CC034DB5EFF7D982B49C1
C4D3703E06D8003492160D8CDB8D23725C9449C9CA76A5E0D230265D842D7862
81F98AF840B33AE6DD45A4E08299A90609352D6A761DD6AD8FDBD48DAA0E8957
37C37C1C12562304C4A18A407BCDC51B40F81D04F967FABF692C887C60341EDB
E3E04A1BF6DDC3EE17F2E7CB32BB7CFA94083E1630C801CC2579109133C5F44E
0739678FDDD206F4785DE0B562CD3A620BC82415CD2633CCA61631084AFAF971
A387AE94050418585ED2A4D7010D493631FE0BBB09C8ACC305F5D7738987F800
96844722729076811B50509092A4CADC9A15C7C7B5CEDEA451FF9F4E29FCC7A3
DB1DE373A473D20350A044A2910182DE13CF8447CFF335C364E58BBF983D16C7
A517FC3C7F52B7D55F17EC7CC16BC15E3286B063B5AE98A4AFF2C2F73F5D20C1
1660D4AB1D0016ED45E953D8BB744D1A2E50FE03BF04DECC857C4132825AD4DB
8FE9CDDB588E6392FC187AAE12D2F059C2F67BA14B4395CB6BEC9D41F6835898
9E2F9B20B3E47EEF53A3EF6DFA272335113319E08DF13BDC325DA9CD01A1E689
51CA025473663372C3934C75115E186C0044E8D49EAC202FC8AC292A44C3FD0E
44B0814BC16221ECCD0277A8EFF5FD694306E67ABB1C140022F6C73360FE005D
8F077FD71D34B257F6603A3CA10E8E5A60F96D0509F2E640F993B110FD9A0FE7
A7C11B2440A0CA36225270005EE7C57E4C4C6F050BFCF9BAAB9BD1FC1B93ABFE
FA990E3A02996C15700CDAF51AF265A0EDB38706989C4FC0D5801083AB91E137
6AEC28F7A626F8A2147DF4B1DF76957A76DADA4ED62A6472020963C356C00DB4
6CB828BA39482E44A9736DCF7C1CDDA077DC936BE934C223F5AA9C05566D7D18
5B57BEBE114AA2E311754DC893E47AA009F8E2F7482604F556E96630427A679B
DDF1532095CCC8786F858B2377F62793F3EF3112825B14C2FE7BC8121C5C7676
59481EAA1F0371C24C76627DD5C6C2796720C0BC08F10D3367C3CF348C07D8E4
F366B1F840B33AE6DD45B20223A49961CE69EA44DDB61B2D4B9BD463FBFCF9C2
C08D9A1E33FB4633FEB06A99ED8EBA3C7818D866268C0F308675C1DC1B4AA94D
669A10B0A9ADB963D5174E6D96F25C87EA17D7D74CD0CED210B42FFB4F20C4F1
9866AA097C42A6ED10B1D55FA03BD6C6DCA0844F3E2B85300044581684451F04
C0605DF0C55D898644B7D17FAF2312879A9AD921499A87C0AD100899B406E03A
B83AD8AD9F239D989C98618A37D3DEBAFAF68DAAEA19A2D965A47E136EDFC573
33B7EC064F1010CC1DE2EF13D3DE8924475F94D55DA454D0EB81E42A39BAC75A
88A6BD0D339F6D451A553705B8DDEB76DA57E5D269C67B6E0BE556180D5F8902
09A45418E89ABAA7573A8A2E20E04A03A942FEA75FE1E9E278FFE0CF44FB6CB8
4CF25321B119518F891199D4D6EBE275AC2A9BD780CE9FFD45497FD4F72A9F9E
491BF693CE0781919E008B2E3FAADA8C4F862175961827750F0FBF40C8D25787
0A18C5A469611D9D4D5E1FAACE67A172A5C9DA43DBA3419C63412470E63DB629
ADA9E9F5B010AA035CF38D0E32FA7607C3D76B44BA44B66A84601FC740523B09
DA00185831850FE284B53047B1059986EC5FF4A8073376B5C1564A91266178B2
ADC607D752495F20DFBBDE75DD427C47DF2E86E9D5E3D302754455FD5C0576E9
59C3C2A98C5CB21BE9581B3CC671A04517DBE55634544330A9A9B8645F8FCAC9
600CEC36EB714781BBCB3A8226C5CE066E09CEBB4DED573B6888DD5A38C44652
325C27444C5C2EE1F1736B3BDF0910A04F5F90E3593CD86F510C5A45FA308C4B
5E979D2A540BE0E00613C7B3B39D8710A0770BE0D75CFE65E10B56E179CF8F45
AFF8B43FF0AC533EB8F6F98BADB64DAD461DB208B1E2A2787710512E7D552EC7
E68D937AAC4375C01701DD7CC8629586EAA470CE3ADE6D0B9209B3A3248952D4
5B73E0A16BD31793309267A633F08029C8EA0DD5DA1F1E6EBE978187B92905C1
1D92424C23C4B9C0085FC241D5B657F4A9A37FF60CEBF7927D50E14665B4EC45
66FA5DD7161E1D6B6DBC2A931A3C680419A924C8D725F63A6FF632A18BD2EDA3
B906F40CD741FD762A5573994F6B0FB3C71B91E30FDDEE7FD765F9C16D15DD52
C897FA9DBBA18CC0A925E842C5963A22432C31A5EA1F66EADC3C43EA06AB5BE8
447BF8EA00A6FA40FCCAA38042FC738A2DAA04D63516D012A2CEDAA185DF4DDD
6F895D9FC9D4EEDFE9BAF1A48710E338F800C14BF66EF5EB040C571FA1A71FD8
560AC8EEBBD0761D1A17B9C3C1F87C7533976302E94A0BFD7ABAFE5A74A72DB5
2DDCF0ADADC0492E94840A2977DE5459620413798E38D03AE2B38F253DB2EDCC
BF1ED209BC977F81499A926FA86E4865A3895E22564CE6F97449F8EC14DE67DC
D1377A88135BB9525550DD7729C3CD32B812AEFD3C14DA2B71C1D3B1E0F6C9E1
0E5C132A14DFE92EEA4D44E9F55577D929DC9CC15F06EBD4C3B6EB4A1F64951B
61206C2FAACF129DB7ECA3A6443D1C9183EE8D8F3B20D7BBFD074FBA5ADA9761
8AFDBAC7A28A8C80391DC2AAC2EEECBD5B6653A0D1D1174412FBCF498A374D7F
1CED41412DDA2311F5EFE49FD9878200E31B407B8B557E0D03B5CBC32511D668
F859928989263FE700AB011D3216BBEABE33982235CC383CE5CD307370B9B2B5
B0E0E5660DC9507357B0C375734EC8BCE9CC075148C96C95080D2AA8FAE9B611
CA4A9E712E9A3CB5E4720060CD1A0F83C502F04B1B6642AE8AE51D66557224BA
AB0AACA2517D9AA7AF0B6820671816D89CD01AABE628A4C9DAF1CFCED2D55829
09709CE5C835CFADCD363C8A29A53C6F2AE9CFD6D76B126910E6B3539B9ACF4C
51DD5A21176B554D602E293239EC675BF3F31779C209DBEA4954C439AEC27DCC
2FE096C603217FCA575EC3FAEAA3E920C592414DE3DAAA1471D434A1F621C31C
6F2FCDBFE45B28922B25DFFD56C9E3D03F67B2EFE63589DEA6B1B7E7DDD257B2
90C342F36DB750674BB72DD46FD1727060DC7D560442A175D5D921AD79C03132
1F59C0127D85435A622646EF0FE410BD667BEB0A2B421DD8A51DD1156ADFDDCB
ECD3A1E9FA7C81EFB6EBBD8D1CAF2AACA65D196D846AC0DCE9993C761BED2144
0B7C3DE27AB0D578879DD21E4603028F37952E2B1ABA1511176AB680AE19B225
F24A554547A97A70A700AAFF7C1EF56269E6A0D8A78E9B513CBADCFB1E70FAEC
49579509E0E68D2D6260BF41D33D9E3568F2D456B6634E8EA3C0579D9536A292
93C51004CDF0CF112256778B0EDF7CE218FC019236C635ED02AAB2BDD7C204C0
33E27BAAC9E2E0BAEAD258867FEDB433DE11773B6435A8647133E26E8FFA1B73
C3DC5A29A2046E9015A0643A09FE99F66586474FCF20136A7752B5B49FF23147
83390EC6AFC1092DB89314B761168009FD6214A6BA9FE7F42F5A85F871FC1B80
589515CA27290AC88D73F1BC4562EF4C8E9D8483F5C9ECE5F23D7163300E0683
74E935385ADCECFB7B49A95CD2A3473F8080E6D0AD337E916B76592A8D6687AD
59B499C192207C1E52F523C2D6CF25CC2762F1C0B865CF8B7DDE664F040B07BB
52D18580550ECCB910D55B7A327DF7FC87C34C5F2255689179436E210DFCFDF1
30B91370C57342386892092FDD82641F051985D09746C4C556603469105EC3D4
E2F0230BBD4D6CEF385F61A3ECE62FD42B5EA2E691BEA19083F955C761F9DFBC
B2E11A6248C7DCB8850E70A1C76CE2FE16746FA3102EAD33F38988BD59CBDBB9
54D765955F91EC0D87795B75EA0B8DBE54EF20CE1A4F498B5B27EB2505661FBD
1274FF7D5C7E8DD9DB7459464AAF8FD595D960183BDA3D4B6BCA89BC83D6FA63
EC0E281810D8178CA4DBEE8226BF6A839A4569B3230E525C1F345C050D4510F0
506783F46AA8FD489009B86F08034062CED0FC066E8B1E5C8BEB2B5F75EBB7B3
AC8BECA3A7C5369311E96E941651E32454E24D500718E6E5DF23D803EEBA2C52
8EE6B1D4B7C8624D19515579C5D6087F1FE53A187A016ED439FE987D39F4E68D
B6BD2FD6F6B59619EE36A1C85BB7192F87B72ACFD82C3FBD1EB9BCCA5FF9D0E0
CD879B9C6F30B61F6154B5B458D75D286477D04EBE5477EDC9D3C50FD3D15E26
62DB76DF56229A421528DFF079AD9A04A7CDDE80F21E903304144DE777E639EB
5AB858571975046E2796CFEEFAFF5EA16A6C58C4AB17977A1A7F35AA92D93832
BF7DAA190CF4FCFB72DD0EFD9D9F725C9F22B1D624111AA472AD0ACF9E1D7F35
83C928AC511AC78C55193AD8B3E548053444F32758E4D815166B89E3B7FF64D3
1188521D971DF2414B1899B0597C59FD3A96E0699D64ADEDD399BE7298EF4FB8
F1ACC58B7FA43183502FD119F77BB2CC4BA7D3474A68FC6CDFC9042320F0B5E2
2C16EED8D9FF10CF6875195B574AB03A95CE57F96CD9780C7D8734A78055B674
6E856EDF00866EB0C943DB580D2C3055BBA48E5A20B79426BF4DDA4526DB94F8
F48B74CC49AA4BE6BD4A284E2E82C45DD1EA7E0890575DB1EB5F0788E1E32BAD
8DB5E67BF9EF6CC29EE588C82C6BAAE2FA86B3B7D3A09203AE2AABDF64613DE4
AEF006E38ADA0085E2A908984D9CE89333C945A9DFE37E5F34BA68E4A07B2821
1FD91795806B801DBE77B00AB0AB6053EC38986EFA0A8768FA0ED545B9D27CA8
03B9C9D46D12FF53A354718283E524117F6B0646E6A6698D1C5271D998208A80
B02AA47C18D442FD9E99F94B35937A278122704B9FADD1FE48300A6DFBE6AD8D
49D2791FA339E9F762F07BA2577035FF3493BC739DDDA068E597DBBE42FC930B
4299141676A80245214A12F093B7D84A05DD11C979CC4F788724AB4F8E511D0E
4B9C2EDEB213538E2E9A1BF9D2E5842CDDBF74140C3907FF153ADF0E4A1BD0EF
F80FD505A1343EE1B71891283B252098408013C5AFCF78EF18CB185CB98D42D4
00A94461DDCC6AD811C275D67FD09717C6DF992584C499D5C2F4745030E356D9
9EF4A911847B04FBE057967C17FB4B643B69ED7D8F45E68F2A60A8438BA33302
CAECCC09D411CCFFBA9018C10EE62785F4A95922F60861D99911E33447D9048B
2F1BE4F3B7139F4118DCAF6612217ED7F5AEAB8699AE660BD63C76CFDCEC914F
6117E5C6AD6D53EB2CC157554DE510D2AB1DF7ED7A6F36F438B5E728D9798A83
E2D5DE817EF045A2B5C74A9F619072461F746B1F7A53FC830929423A18AF3378
762504B7524DA7E5079C9E4A07D6973812E5070287F77CE1C0BD1E7F80896547
5EBFA9FFD29979F9F46AF28A864F5223072B4CCCEAA8C4068DFDD226D6CCC752
0FD814AE67936893A955098965C08EDA5FC70762DA6AB4EB2828D4321EDC1A13
77E19BE29FE17DE9159E3E8B2D77A2132AA5F798DDCEFE21BD4D5600FE98DF28
F3492339B3E98F8D7F803B5ED0AF07C11E9848170A39E20D60F86764C7AF7DD8
02C348D37C26899FD2187BC906EECE46A747E3F7FF9B3FC935C17762B43E6C8E
18FFA611DC8147CBD79254353F36F4E15A6ED054260CD14DE0B1D0DA484F02F5
317A433C21BE7E5229AF91FA8E16B5AE0ACF6AADA23271148BE4D5B2C86A8FA9
ECE135CA2D15B53EDCDF27B191A6D35CF856DCB8AAB67DC05CC647FF24EB3974
C26588628B04AD44231D6304B956F4FEA9D490254D0B8864A9C6F1300D40EBFA
7EC828A7A115597CA6213C08F4E26D46FEF743C756A23827721A3A21BF427191
53CF8C7E37F9117E9E5BD3007C6DBB2E929ADF2C40726B1EC0FD12A7B8065BC6
40A89E853DDACF543889736D44092416DCD0607120A2E0DD954ABFE3690DB844
45E85E8D8315D0A0E3E26DB60B2B15649012946227CEE29ECE62D3E940616A16
73E0083658152AD806535CC136845920230CC099948E18DBE4729B2C0C883208
1EEF90FC7FB8886903A5034BD2361E66C2F667AA20BCE3049F990744F6BF1261
BF5C825D0927CEE90A6F2BA1B705CC49DC251202FA35F6ACE8A844D683580300
CC2654A6185766A02FE509C306CD759B2F6F443D3C4E383990F0A6322BB9F0F6
89A83788729A60A77D901A1D503D7B9E6CACB70C5FA5BA17C9020D56E982500E
C026511BF3BF932382721807AD83DFBC5571780A658A9CA19C5B7DC1B9E6F9C8
EBA470199DA187810E20F22FC0888A0A7B1DEB05FC3974E19DEE2CB096B0FA51
4300B8FA63640710D369A374A7860855DAEC77460A589AF94A5018BB47F8316D
4CE59261BAEF736F7D096DC2576BD40658ADF464DA89A9EFB5AAD525FE8024CA
9E20CD2C692DF06DA1487FBC4AB1C182B799703B1A6305226A778429292BC3DB
C09194546C14FE40ECB40DF7181104E45B6F7B030CC40799D7FC06D16F028A30
4E0EEECE9DEA78ED5B83E37B694FCA3B171E6A9939A37675454BF1C1BACE3570
83C64A1E298574764ACD56B6D724F4A403284E8596255876CEE6DB755299321E
BD85BD17E8FB9AEC0B1B4DCC72AC6BF31E280AAD4A686AD5F63BA60AB0D3CE3D
F27D18D2C6FCDDCB3538B09068C7FE59165715E91E84D9573C7AD3C7D6B93EC3
EFC78B8FE701BFB6C1B68AA4992FFFA828A43AE0EB5B07B48DE067F29CCB7936
8A13C6477E31978CEB2E24EC8A96BD328F0F33E01211788A1BCB560C5ADEDC8F
497DC8BC02F0CCDF68502CCF78BFF30420F3980B753CBE7EF196BA3201D6F243
EB6B27A37B3104F600A41D5788F094FF49CAECA6EAC6A2DD4106E84136E8D757
02DFB2539421A0D77272A97ACBFE4003BED0D37EF3B7EF1010AB5E002FE0DCB3
A7254137B4C28DB569B44E4D9F3F26C231610AB9794A0A4C250155AAF2CBE5AE
AA3AE49DF09126A4F19BC54EE197A6D96505DBB304B08E98E845DBA6AA91E474
31E4874F529E4AF50C4C4F10241FDF5359811480E9A1700FB890AEBA2B0737DA
6A718DCE5C60D6A103761D37F09A92D8625617A080C5D35A9A2F0F6D97473FDF
0C82C2930188C769172BA997FBCD3CD9C85C793F28CC845E0B9CBB39B01EF643
673A0E4190244B84241A7F524988F225D844A8BC72A229AE654BF23BDBD709B5
E64FD756618264F76C76DAFA8F7470FD9CDEFCEBFE9E30CAD29DB8E9EE69C254
34FE6F8EF313A78EF9FE4B498DA00E281EE05BF33528B820BF23BE40CD7A4D9F
18FE04CA4863CA51ADEB90A95DE5C9F334426B39DE32CBFC3CFE4FB3F4FEC235
AF963BAD3560D482F3F53A695FE9FC44EE3FBBBB32155966595F9DB3D291CCB5
7D378F52F29CBD8718380A31A4F8BC51B5028A6D3A83F79E0482EA95D7A0B980
CCCE759A4B186761667ABD98B1CC22BC42F4ED7DF6AAD0A5B018FB186F8BC12F
769725BB6F9B211312359A043D953B7A57B09CBC628EB50E739854F422BF454E
25ED440B96E48381BD10AB44489C140EE592887151C1120B32EA5C7722C7D222
40FF6FDFC51331159CB693B5C418619CF2385CB51FAA9735E707BBC255BC6296
BDF2116137F90097A01C135EF8EFA8A4C5346707E81FEBBFBA9B57354447371F
903178EC5A6CC3EAB277063CE08BB890C650C8D90586A653BAF8D824F3C05627
944F56F269FB0F2A05B84A25BDFDF5CFC9F211418299C13A80D1DA739C0A1C4F
6EAAB676E724C971A36CB09FCB96470F81292E4437C8A6C4A320C5B59443388E
DB91F8A569CFE3C0B1EC4D8E019ECB955B2F7DBF533F4F66EE7C1C3CC43A9EC0
8671F27F3AE6C9A73E8476611F0CDA226142B47EBE6BD5E3C4F6E4677D7B32CD
62522C1CCA23610FDFEBB5775CA7386AAAED72B3917699DF6BE1D14392E16DD1
B0560078BAF7E37B176D5AC145073435A0CA0D78BE21756FFE10C285C6EF49CE
3C544E8E08FC137734462287D05C655B6BDB56CE3FE7E4A5E5978D85FF7F8DA0
0CFC6ED81ED12323E80E8AE0A5BD1C0F42234DE5A9337F7B399827BAC3C4256D
FAF06223473C4D656F6B16DEF40CEED7BA19EBB91844A379C61C3A67973AD0EB
E07456E08551B025216561C53A74F14C03E16BC55BE5525AA1F3A3EDC51EC45A
382C601097A421DD9D6F4DC4A4E0C28870D4084780235678B7C9ACDABBEEB174
13FD711E490F98595E29B0E239AC902E2000C7CCAE9AD9EDF128A76236561EA1
85C51DB33A342D0455A8BBED700E8131D312A1EF0B94D1AB5ADC6A15CF83AEE6
A86792FF4EA12E204954D108F79DCCC296009E826E0D450C77D8044418A344C9
C58DFE93C6030D2442E0BBB5C70BF03267938588E301FED76F013D3C1FA1E0C5
A192A58B944BF4F146A482C0E5874E7E5957E042E7EF03335102A5C5EB10AA66
992B331C188905E287B8CAE372D829C8885F4D3B21FA091F4A2993447855C921
A379DC7E75FF37C4F4E6E54F2CF979D74A4371EE98321437608A09A85D3E0BFB
F36DE4BFEEEF9B8FD45B00850408419DCC00287410BA97121E180BCB0A7AEE54
419F03BD0CE1BCD1E4DCBEECFE4CE877C1D794F656BC0F0698CF1720BA31A6CE
C86001D740462B21BB06A88DC601CE3DA0A1EFB86047652767E4C7225B8B0F4C
9859E7102C994BEA29CF56B8B3192CEAAA995013A6370F6E780467A3D43924F1
AC2C3EBDEC7F3BD01D1049073A5ABAA502BC592C6B4C9637AA8C8AE9FE512054
7C39B0EA13152AC2DD7582AF50C4C93D9086B140640EF49F4A8EF9053116194E
625020B56DA1BEAB2C74FAF6EE950215BE50DC846374B50FFF9397E9EEE027E4
FF7F9E729F60656D2F7EA6752AE99AE00B384F2E8D9F9ACDC867171B301E3FAD
2555AC73A00DE95290C58F00B3541F7701C3DA1CFC8365542C295F6E4A7F42C7
47761FD011C2BB03F49A4CACBA2B6C5C540247481EB469B5CF4655B10EFD0A2F
50DA659BC63B2EA8E01BD618F6DC6A84B1D55E38197141988F8E37C732BE2701
0BF75CB18EDB0806398170FD7B15E3752792059D48A3D4066B849D94DFDB52A7
68EB316981B1CC91835AC8D9FB87BDC4EDD96E2FCC3EEAE15816D755162BB65C
9CD7A99A0A499FB0001FF84A224A5708922D7B8B21BBB7923734952A992FC73B
DF4D549ECAF223CEA5C7CF649D2DABA1B65484A8BF808F6C9677B9FCC7644499
C185943681708357AE0A20570B2C58D41D6180AF94C6F9A6360E095962241257
4460855284A7E474A7881D6854DA355C99F833B652335C0B24A4624B7CD1FEC6
CCCE2EFD24963E6320101FDA77B3495C36FCE2AF20B9030D9B03214FACEC5C7B
9EAA776966D47BCF55FA15BD4598E813BAF9B2323BA4362C8E0C3A310D141AA7
D2DDD0ED31210D6E71730EC8ECC634BB80A6425EBCF019D39406AEFFD8E8A564
72EFC2B256AA0D0D6D0F2F2EE0599DE870005977FC252EAE25C9DEB76C265EE8
7BF0C78BD17C233F7CC66BAFCEC9C5CBE4A17FCC9DDC6614900F839677552E6F
16A95192F77048AF2E3732A037EE5AB667E12FC753E872587790B602A881842D
708067E24E0A032DBE38A6CB9BDA28017AF15A1EC43794608135EF9F838CEC2B
1E35F8FF5E90258AC675B8516E8CD149D3313EDAFA13D67F1501A6C384E8DC74
50F67070B833A41FCA23CBA78F935B9F08A67558969CE843C914E2567A49326F
EA00B5E6E855F2532796B42E8FAEC3780A5D0DD42AE1D121E834CD0FDE050B72
C05ABEEB9A9CB574BA413AB8B3C9EA194FC895DC4945F4326516968FE24DF8D1
D40866EF497D16DB90D36A3E2D044358A847174AE9FDB41FCC4DD6D4ADB58110
334082D656CB2264C6E68C1271FC8201ABE06A15D477108E99FC959B5DF5A826
9430E401DDC9640C89CEC2CF066B7C03D4703A071F91C9FFE5BC3F3E2793F526
A5FD94C653AF17EB8AECF14F6E981D851B9888E6847DF6E75BABB66A9E662F87
3268BE43DCB6A708BD77540B257B6B5122669D8AB8418651E4FCF2186F103AF5
A3DFB8861ED69DC71DEFB87F74C52CBB4FF70125DCCABB86087F2A5BEC5D9E88
694DADE5A4270E576D84C6AC331204138428ED9AA90AE0D47EB9AA39EA307978
32CFAAC18E884D88EF691E21A7F6DD1F456D2C4AEB8820227F8520EC2DEDB5FA
F90B3EE28DDD9B321D244386844FA4FC1F56E5864C1331AB9B3BDDEFF0232674
6562B0A0447DB6BE3D5FBCA2C323DC0D3D1C6512495A0587F63EF638B2152C88
A05B2EEA2C344530011A6C998BFFA3914574309A37C6B0D5D5EF68BF04A10D8B
1EF2EF6FA7783AD2E2CF588003BC33A7696722D1D5639F4E3AE8B4BA45C37A5E
9239F450F94733AD3006954A8340391BE1552E6510FD62DF6B201E88EE711E35
B2AEEEA33560393969672FE7E2FB487E6791AC2B631756B1FB6D6357B5065D5D
C4D3315A0F031E7BCAAF3CE9C3E2D8D232223125306393573CF9EDD67845BB12
6F4681C01F9E97796415085A08D169DA22BE7C8B5E04EBF216A6EE79233AE5D5
E2BA32941BCBF0B7EDE7186CFC7CBC9B49395A7D111093EA3EC2F36B325ABDC5
0D746432C4420B870792BCE5BDF0FBE0A66F6E7ECE144C001AD0EFAEF5466552
38E9D569E313143A452A60C0500292C8A10A9424781272D98FE42E409207535C
12F48EE1AC6DDFAA83397EA0867C9F04F156053EA224D9009D13AD56F4D64EB1
70145F783D98497CD36F34BD68FCF68DF5BEC6A0A706A7D5753748DB19C5BFE3
F72187D83B605BB3B702947F1735000152CD17FF11CD94CFFBD649A80FEBBECC
37ECD8C0C887F047AB42580B818E1014EC40BCEF621BA2F39AF2E852B6198A76
DB1F32120378E72150CE745A7B1FA6C0FF0B351AA04074FBFC45E14F185776E5
CE25B4B457ABE252DF4C9BC1D95AEFD7D7C983AB5B84AFB1ED342AF400984CF0
92D566392B6D09EAB90B034E40FC3538982BBDA229F9630955F5E06F62F72BAC
CCC7DCAA724ED77E5891BD1D6F2EE82417F3BC4E2243128A17FA37115F9D3DF5
ED49D00F3D5FA52AC2C5166693821F7D563C43E9CABE1A184D08BA196154866A
305C8C2630EDAB9A80ED6B677E8BFC6A21F15C186C006CC8D763B0796B52B9CE
3455855865BCFFE23CE570D4E60DB985C34FE531B3D50F22D7B23DE9221612C2
42FE5E5280D4906698A5DC0F1AF1FCA95352346A8511C416B77D01DC9C1ACA7C
66DBD0164E0255D8600D48329329A835A4B353A03525596402DD10D0C63C3174
09CFC8A289F6043C0D2975E2A88347F88C56AA583D9EB50CB5E61560E0D26E6F
B1073280AAC634E4C9049ED1F1E501D942BCB1ED62EB05663005B8DDEB76DA57
E5D269C67B6E0BE731AF06177F270A4BACBC25DFEFAE449070E480ADE3BEBA99
AF060848BEBA0FE32D76047B1E44D1A57DC01920BC0C34193E943C74A97849C9
EC825165CEE8D7EFFCD4773CF963FF7805D8E62BA2233AACF09C0ED3589EA575
1750EA79B62BBCF91B8031B5BA4ABAC268CA010E901C9B73E4F226222C66A24D
27A09ABD3A2AF3DD7DCC038CB06F0D3EC79FA863328306616D6CA1EC8188DFCB
310D14E96413271D137379FECD9831BE0D76DE9A49A268F4DD5998AB3CA7F0E2
0A50B8CA1C495DFECA687188DB92519A8F57C66E2EE943517C181A50ECDF8808
3A0632F0B351CDA467CCB63F69992569E9AEDE627DFD2428488F18621213BBAD
2A38EEC93B49C0B97E4106F927B774C765D95FFD8EDC960CE81889AFFA5AEDAD
17627B6D2DF2127A09254595901DE34548714B0B7633B7B500DA22CA47297814
DB7127987A58A64D898BF7EE5667075DBCDABF880B838F5ED8F61CD973CB0E52
0E49CE542DEE4A125CB404D02520B208409819E929B93AB90CB9C15859CDC7C7
B9BC737546E24AE249AB4C865B2AF89C095DD58862661B758B106F1E6178611E
141A1D5D990745270E021D0773C49196DD8C345ECDF84AE523A10B01EBA34E1C
E1CEF3D75ACEB7AC2A629B8CA46BA7281D8EA05D658EF8BF62B9CB5097E8399A
88408CA41A74366BE40CEF625588742BD9D8ACB7A81600770B97AF58479E225A
85580DBDAE3AE4A054C9CE5F18C7796AC06CD35E6CA6953126ADCB1B8FB274A1
6300BF66BD5949AE733E6E7D624EBEFF3CE8EA56D72B5DB6526E7B415485EBF1
4829EEF46E439D76990019313CECD47A947AFD7FD015C0747BCAC97E155C07D2
A72B24842D78FFDFA703938403CD0713D9DDCF50F0EF0C2148458327A48F32A3
6E3D41949042DA15744BBF9CD44C4941A2989A5C51D03E8EAC9980872F1CA425
B08E15D6784C5AC1FDFDCB2A44227063C657AD4D3293F16743102D422F0B90DF
D9A438C10C809879DE1EDC1AC05D11D6BBC75DA300C5ECFC3148B1FA403CFD1C
F2E9460509D27D26BBD95166ED13BC6D31006A05E3E9309DD19B725D53BE88F6
4DAC3484D8D00A3AB4DBDDA5F9CF2657D92DE483D83A8FBDF1D9E7DE198FA053
D274DE8139ED56E647F572315D9552F68C572AC9D746F98D06A7F2CA1B208E15
3286360211F98519E38B8A52695DF15B5AC239CD6B5916F80D1174D364AC6F66
EEDDA25311DE089537D0B222173F938A120730EAE15620DE025E7BD26C85FB52
E1315F402DAF387686C0B244A0B56F607408B73C1404206359A6E172B0C8482D
5D60AA6480B35EDEE451C6476825FF71D867A5C22E44CA1E32A69B1BF1A86878
B09CAF574AAEFB7BC883B887D8DB055FEA9302799F79DC68219A9EF72046C6EE
6E806A4FC6E2B9D8BA2324135B42DC6120A5FC6785D789EC70F0360DDBD54CBC
DED0E62F1FAE81D67CC6D865CA8E07E44A39BA8AEDACF19E4DA7EE31F42E01F0
0A581799474E601E5777A6AA41D1C3C12D2D64A2FBB9A704A5B8BA502E3E1EDA
41F35544D20B8035F3F57C7EC6D95687EA01E49AD59068407FA2B8653EB61D65
DA66D74AA2EB59FC0D3FDB2794C89F88FE56BC5ACA753EFB1341F7D8916F1317
2F03AA767DCE9F1C83124D7431021FF25BD6B2885FAEEBD5C855210352DE4713
38783E0FE4996E2F89850A36F4B133C4B287DE2BC0E144741A5E33F7F615D0D9
D800815758C17452BCA74F55CCD0A543996E8DDCBAC6B6F8A5A8BCECF5ACCC22
097C6A9E9982214AF736766026C0CA624CAEE7370504B06E45C09D0A6F37A616
3CA96771CEA1BC623369D3427C1EB6FA8CD2F7E06CD07F696742DD1282E88B74
12A8E6C0FC5A88DB2EE8FE03A2B3BB867FC2D57D91649A30F52F1B5FB3FA75F0
3A32A8A8407C6672B154AB703231F48E00F53C397D3A6A09BE41C78F15A88498
1451631E23C341DD6643418EDC7A6A4CDB53341540A7105121A404843A671CCE
3C31299E190B346BAE397406596065FFEE9B5EE009F0DDA89F041A8CD17906BF
8FB1FE994E71787506FB2D9B1346CF80AADC64F9C394E03D5DDF8E334BCA87A5
F93800FA21DDF266897267B871C4F625FFB8B4943C9BEFEC13E8959F4AA17D1E
CE01846234F35A6D4F0E5FC592945FDF64560F73E73AF99A2BB5D4C5A2984CA4
2C1E3B1CB56B8C783D1881C7CD3EEB02481EE8953A31327D0C18C58E56256FE0
C49E3C5B2E6B578C01A5A951943168217AF8CE264A54EF5113200087B90D3600
B2E7A82064FB45509597935B5B96947BB511A8BBB396E1E2B1DE1C4407A87BD8
B36F118C02FC5B7450F72DB2419B474B685D9B7212D78F59362AB0877F6EDE6F
B5C70EA1B13CD2E6989643FBDA8D2D3AB573AAF0356F920AA1088FFE6E78EF90
71A59D8E0AA5C66934BF2D0A559D3F50033478C24821ED1BE04762EC4BC2ACF9
092BB23917B757245DE689A9561CB203D6FDABB69B08B6D80C11481372C30C78
7DAF1AEC2C6361722544CF22B0E2E04CD9FFE2A1605C3F5DD909409452536F4A
2907BF0B3E3AE22A74C4952DAD1AA1D6744A1AC88242BDCA44BA45569C093EDE
6B5C1EB267717F7BC0D077C1B4D14F723AAFD28CFE3D98AFD3B1EC22FAED3A72
08D716FC555487125EFBCE07B2DC3C4ED113752F2736BE4FFE4396C70EF6EE01
6D0958C497392AA33AFD02A4EE9383B7BEC3AB517D0E458E711F41E32BFDE719
920BC49A2372369C3D4314A1C9ED4CA29CD5AE36C1CC21CE865A0C7AB1896E8A
E717CE291E7F42D3347E871C0C146E6C2C7D7669BFAFF7F13BCEE5412B6F4DC9
0824B76659D8B2823B5A1C823444618502D50FE5F27E3AD1061C9FE1C17171FA
9AA802AFECEA98813D44207BE632EFE4F15C908490B2FB9D5F7AF900AEFF50CC
FBA9841F501ECB38F40E9EFB11480321A15E9F2B5AED3DAFA2EBF23B3EBE69B1
A348B2EE22F228CB16A5283D87C49A9110D3938A517E2BDB8A914380B8BD1482
0F423ADEF3EA3D4747C185550E93CB22DA39E93522D91B7BB2DFACA4F595F2E5
89DF6F68E5807700D34AF7679066762D6FF0AF18D6C990C51035A045A54E8158
9248E85BA26BB41241D9B23230A7D327B54D89ADA1836E2F9EC42A1F2777E275
52E3058800E066B598BAF3D6961823E5D1819C5BD382AA7033204B2DC348A09C
60455EDF97AFEEA54E04CBCCF83144D2B0E28016556D0B2C865D06E4352B2B4A
2C6A75E6DAE29A270887BD5F01128C34BCF786BF4C89EEBDCD1D13D80884D129
D259DB580216D29E0129F09D9EF12BF3C6ADD3F49869D585358A8F94F9CF39C6
CEED600A9EDE329DAECFAE64E7BA5AC12739A4B81BB43F6983E7A08E6DE3E402
E056156E9C71160518E79ED3982F2799D16BF703747065448B21A1041E886A9B
49B5BDB668E2EFD2F36AC7028DC449675A9526A7A64C3CD544EAED05AFDEF26E
C1F1AE0073D4D041BEC479151432A6360EF109BC9D64EBE206D0BB00F8E748E4
B1BCD14214A29471D846D1BE04D26672F5BAED69B65645B86271AD430AAA871B
1A87696FC10CD2F07F4D8A68C1257CB93BFF4BDB9BB6899E1CD48B36DCE35627
268B3C54C22B153058EBB2EC74D98BB7FFD3E6DF3444D8428A8407666DB8372E
EFC8BE839AAB8800E031895BB446AF643DC54FE54701A8EB9C85D9876B7B5777
07B834BB625FBDCB7D8A5AD9717A21884DA57396982683CA51DD1291A30FC614
7D1EB79799EA82C0DD95A8B92432DFBF2455AC9034BD0B355CDE8BF849284B59
BCC2386BBD2A862B4F09EA152282D1FE71877E4782E10C6E73AA631AC2F57F01
BD9E390B77B604949BB56C856983202504C273692960765FEBA298437E6578D4
C059C7A534A6CA543DBDA8CAB16FC743CBA6535C618AB23631357DCACAADAA4A
5861EE011383EFE84A20F117378604C06BC206586B80520DCA42922DE8041E52
27602435CF710D0AA5034E77F54FA7EAB710C97DFF9B0E3480ACDF3FD6E9E3F1
D798829F9572CC5265922378EA15728E7BE48FA010C5939D0AD180004059A28E
54A4E4556895821CB69740E5B16B0888CBDD778C1B283E2158657AB269AA390C
F82A628C958EB6A3490B928656868274FAAB3A2AB8CFF2860231056C019546FD
B09BE62F3B3EA321C4750CAAB3D29C2E4B9F2F4374B1348E5288F9943E7E14B2
64F1828467DA23890DCF53C3595C41FBEFB5753CD63CDFE5BC9243DAD7C0CC74
0671DB79B3809EF3C4DD40D876FFC468088CABE34C717816A083BDA5D36B2A4E
5D5139FA05704637D5B608C138B685CAD4A1EF8E50A358834745F7DBD331BBF1
0ACE419A0B2501AC7CE65FA1DCBB20397374CF54E367107CCCED215D65B1498E
168EE75FC7F69D5A83A20167C818174621032F5EC3C4EFC5029F852E86EE964C
6AA3900A8AFC267062B0CBF0BD7588968709066BF7DFB9BD13826126663AF6A3
3E7CD1A08BB7BE927D30E654D86FEBD44443F56DC02634DBC1BDB2D9B3E95DB2
D1646659F6D948D9BB1CDBC0948104CD50F9519EB5D37635BC530A9A882EDFDC
AF54948E2D89AB99338B0E8D8982879A0A5BAEC170A02AED06639277D9888171
4639233CC9AF882D946B4CEA50D1D998D20A641054C5DB7DC0F45B2D2E899C4C
88D772BEB08AD6B9DF4423CAA2483DAFC42C0EBEB3B928364E7E5B3932B811E9
D7BE6A633CB02287BB8749FAC36963CDFC1CD595B4DE3EDC94EC631B4DA9BFB0
7B8F6A0BE0E6AEF6447B9C9FBF11D502D8100E0F8B9E34BFB101335266C0F5D9
4F5B003BD089C9042F34FE8EE4337EAB8C6B7CDB3996D7EB08DC0B3CE7E6B3D1
1A6565CB3BD42BB1BEC2EE0B70D76FBF61254964C353BA08DDA13EB192D8A569
5345A565DD229F3663E8076B08D3C97FEF17FFD34B267BB72DC6D192EFD139F8
8D296E2F5C36C296D3AEA57A8A6BC765254BBD39ABFB2C6CA3D4B8EDA7922BDE
B86C8B476C0B930105A3E060BA0840BECDED439947BDFE408575AA3BD2303F19
3E521308263C1E8D91A8BED83F6B49885A326E09FCB6B7D0953EA42EA16708E7
D83B7C724BF7139C47FBC20FF07B9F42D908CF08B445EB41FFD56A44FFCD3535
EB8B7D075246FCAA35A513C40DA8B7309123BD8582776E1CDE530FF2743C835A
CC28A783C39605B9B33C7FA3E2F53E00E1E8D374B552B6B45E04887DE569EC13
F3FA2EAAAD3B761B400D7B3E3B8C503DECAFFB77FF31EA143C92596EF1003C76
476E5B39B12941ADF3E71530DDF7B6865C1241AA093BB8E8CE78474113CD6573
6A8802AE3DB7A69D715EBEE20AAAF7FF86B20AC6237922C522ABC17F3C01FA01
01315493DA592F2A2F722926851E5CF610208E231F9EC4DAE236A3B32F54DE1F
3063A99131605BECC73A4FE2516484466FFD65C692DF020F6174631A51C9A78D
09AF9FF94639E656F7C65BD08C9D21C93E954748BB2332B65A00FBEB487CE889
EFEEFA9F06C50D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFTT1200
%!FontType1-1.0: SFTT1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1200, tctt1200, latt1200, lbtt1200, lctt1200, rxtt1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-202 -360 1341 829}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA11E7AC15F01C3384F89075B25B2605
942C0A2CECA9A7B578D31EAB935BE7B9AB3ADC0F524C109CEDC6C957EC56766C
0FC50BFC16A9442F5E255F3B0A67EE59204698AB70A1A39761E9B16DD89BB0F3
B2DCDF661B96C1C95C934AB9466827D2E4AC2F341B8CC4A08AB82A5D1E25B865
E925740538369BD1FAFD3AF962D17D14899B1BAD67B780B2D06D6D6743CEACB9
A77A234354E7767050119B9EE47F033B8B3AD59BC17B84C3B929265ECEB12176
454594C17B4C8A9BE7CFDB06CAE1B189B7B72FA023F2F671095CA1679D71C627
40DDA7EE2E28EB5EC2F297B019B93073CE0219E736F88F03E11B8F8D61132ABA
E20CB0C148E47FB495C9FC70AFBF6D9260FEA67AC4FF14D9CE253D43CE471E4B
09C61209FCA852453561C54B179D77D8D7B4BEF2852FDE1CF7A3D5DA6081944E
735D7BB3ACECA094F6717571CC15B2FD29D40FE9AD1BCCE3208DB35EF1515BE3
D4F0CD696FE9B889069B62BD57252AFA4E675A9EBCDF695915446FBA1E0DA982
DE636E320753B3FC033138F766D844E965C1B266F165839DDFAE9127316602E2
0B8635508042F84EC62AC29AE1E6CB020009200B52F025E7D7EC7FE441F242EB
DFFD1341C8928EFE881A3D40E9E62FED03BD3F83346AD2B6C5AC99D5F2C775E7
F7067EA1BF99B552EB3D1EF83AFF1B0C1C58650FD2487C2178954BA58D991C4C
7CFAACF1A0E0F4DF7FA73A74C1813C2348D02916B225A6CF9BE1E9E7BF3D8D34
8873F6E51D7F7BF679ACC5B00BB56FE8532B2CD4138A774184F24718DDD67E0A
154F2D35A8053DEEA29458A13E8CEA3DCEC48548BB1CB4FFFC10A3D9F0DB24F1
F9D8A1DA540D8F47290E5A92A5002BEED80BB6931213C81C429004456D932C39
D6EAD9A623D5E1CAB2F1BF8D6EB6EEEA1134788A7679F344E0B88D80B8D78EEF
9EC6AAAB712B7BDD9CBF4684BEC046257CAC1E172C6888AD2B2C705183CC6EF2
A381AA4C08677E2DD20026CC8EF06577BFFDDD05F8D6E5F139055FB696F9BA93
1D2557FEDBCBF776018703D691491B08704C697974946962DDD4272CCDA13608
EFD1AC48808D0DC4DDF57981ADD8B88F023A188049AE0E61EB82E072DA5CC2D9
19ABB7F300C4EA3D625D735132BC55089A05E0F146977B58B669AEBD0AE160A6
453D3FA9B74CFE6F51B35AF9D264B7CFFD26B799B63AF43BEBB437E8E5843DA6
DD248539293103897076A6AA9E0F475C9BE97A2DA06700572785C5DC13939FFC
5263B750443043E98EB63F1631D4372EE9DBD87E624EBEFF3CE8EA56D72B5DB6
526E7D20DB22BE291F9BA0187CF78E246AFA80E783135E19ED39DF5B13CB8E97
F39B43F1B1AA03A9B5A93FF989115A0DBDF30DAD3228C8AF34B1D822F5734039
87B58B525647491E885469725CF356762F0170308DD309BFD81EF1FF564FC8E7
CBA25FB12948BF12F26C82B2DAC99069F162BFBC04C45A491D7AEB0B0E2C7C17
768554BD031B3C6B4DABDCE116723618BBD0D0406457A56AB135635519F76EE1
819C6998A31A9E626093C72EB9CC2F5DA0FE34D426CA23499B246FB327A72991
180F9B57D6819D2452D01F393D464FCEBF55E949291139D7416C049A4A61DF84
FCD8AB75EB70754F96C4AFDD54CFEFF5DDAB968F436BF64E3D45AD017A79638E
2360C202DC07EF8C00D4CD148236B55033A1115289A603AAB1A2DDB6BE67999E
A354882594A8738DA93A519D977E32CCDC0E9CB9AAE0C83797C6F0BB7CDB692A
B5733526BF5E815184A99FF881557200C80A7F4988023BA7950DE737725D8462
C5383B72DBE5829B25FD6950ED83A538251EE11869482C0DA1F26530A4CFA735
6588569124688D7A5C89C60EC5FBE63BEFFEC3ECBC8E13F77EE258154973C91A
06718000AE2831F9B1B8EEF3DF08B8792776E06815C039CAAD1A59C372423B42
6EFCACC561DE7A5FF4FB561FEC56863E893BF9401A2DA9C7659330AC48D9033E
A065C075876B6089B8FB12422B0DF8A4E2478189C79714C09925C4BE3E37C018
3425365B3E0D58649AC22991D32CB08E341A39172EBDC30B3A7A2DC59BD6510D
A3D9123EE74995ABFD9FFA8828C51F1913FF9530F09F82291D173F33CBD3E07F
A1D55F2578919EE799712FCE00B4B05FAB870AD331240D73C246E1376C11214C
B26E1A7E40BAD1BC57B7E5C3D80FD1CDEE64FC69D2AA662E20F4C6AFC1072A1A
22806C5684432DF7E0357C68BA95130DFB445383893ECA20F660AECFC174B5E4
19A57031115F832D6BDAB2A74B7DB07ADDE071D83201C75DFB142D13285E87CC
401FBD6A4CFCD5941E1ADF112E98F0AB2D166F24688329A67197208B143D124A
D0A3F91FE622FD7A989A30A8045CF0544EE7E172BD791BFA4F63C47980173A18
59C74326238AB63A27176E01E666192930CE10CF0679E2734071EC96B546D6D2
235AE11CF380F5908F71C64BF427B4DB733D87CEFE5B01C2BFDEBB08778F0097
DEE9BBE5079A089B53657D08318B70D386CEF706B6DF733A417209BE2E55EAFB
D3CB9016487ECCD3585CE0CD283391C768E5D536FCA1E1704B427217AD08584C
65DAC02096E15D7C3D781959DAB1F20D320C6DD7F480A7C9E7ECC8B3B01B9B88
C659B6930070482597F92C1E61C861F9E8D0EBB50C21D9F224F79B136344171C
48CF7FBD746E9553F419166351984A761286CECBE2A29CC5D822C902542159CD
55630DFA7F0650F94223D4EC9D5F50FD125C519B316B30095F1A12A726EC3F0A
A14FDFDAB007222B745D0B23C18060C4CB1839C7EC7736215CB144B249E1FCF4
A6659DD030C98BD07CD232DCF46AB32DC91F6758FDFD61111A87142D10A85947
25A426D002B3602546EA6208DAFEADE6308DA4954208D32EEA00FCF173033D88
5B728103FF7212B8EF53FD38639989DB792F78B7B6680DEA945FC4E9E1DCB2C2
AA2FD86B6607C97B6CF5355EA327F0CB185D0DDC55D5CE9EDBB49C20EA64AE53
3D0F9017E571E9F50F28674AC2328BA271A63DAD5009559AD249F0E784E17A08
991F068274CB0CFCAC525A242788C2C5D2025950BAC30EFF20CEE269F9BB3662
B4BE39F5EBC58B22D1C12672805142A615238EA4F783BAA3BD325FA762B5C477
083AC47640886D9551F2781CDE7D3E28BEA6D1DE94CCCBB0CDA6BD3339C57059
DC1F13253AAFD66EA16F95FDE80B8D207AE531E1BF18499DF8C812F33AD148A2
69D832ADAC241FB11DA950F2D8AB2A78AF7495280A63EDFBAC9B5BF5782FF485
48E3CB947F083768C7254FC019CBDB6A1BAE5DA55DBA4C17A3D50656FB061F8D
558B3F55AA5EC94F083AC6179548E836C974239AA4BCAC8B2BAE0442CA0E82DF
C5CD06C70727EEA1F8653C2AB91B083B067352984B2D6041BF900704EB62CAF9
9FC8433B66C3B1DC1C67BF47432AFCE2BC50AB82D47677C28C69BBE333A7D198
D2C09BDC20454E7C79565507AB1C2EF74DFA21FA829A4AACD811B9B1D1BC2B47
072E027E074B7C51A713C4DED97F31E9F13B916254FD2F6DA950B68EF6AF1DD0
DC39B8E0766CF5C9CE924F1BD6605CAA4C95CA0F5F9692841D59253A7544F66E
39270B8C5D827B0364CCD5E7D86AA3D18EFD237CDA5188EC4E8E194AA8CC9A72
8CEBCF6DCC924A2DA88ADA05BAD3227B40E968467CB2180AB288B377321DDF1C
E1579952D19F81B2125F91CA5C7824C90A26342FDB0DD55434CC91C20F133759
89FEFF4282F15A81B96A24B40C896C7F47BA59E6A82696B5D82B4223430243FE
D3A6F47397210C899E84A773A3DEF60FA759063824C587DC78314F142A4E6061
5AC71EBA63959DD3FD42BAAAAF50F334AE4061F97988E5FA97105607AB6EA762
35ADC755BF19962DDBCB0944F1E152127ADE5152A1E913CC7032892FB4AFEEDB
9891A761E7EE266654748C6E6F4D3325DCF159B14C5834097D008029BFB0B125
5C71D033EE15619D779AB714AF58061E02D3D4F36FEB698BF6E98BD70CB0171A
7CA46D17DA14ACDDA50775263344BC64EF110B5E03A723CFC0BF33B78044F1B2
53CB484E59B5BF520B325EF8C5C3DACFAA2DD7725940927893B27414683DE40A
BDA63FFB517E6A23F0C583DCB091444E262CD6B7E72A0116E3379AAB8E879F0E
77C5F82DFDD90063425D1BCC3512973F23F384C14341D8A12A491E774EBA7AFB
021D7411C3EDB94244B0CA3175A514FE7A21797C419082A4CCB553642D6C2D27
018D7BE0F6A23A0A00B7DF4F412C71012E02FA42D8EFA464089F9630E2EC94D8
F61D09D9CCEE543713BF89B36FEE919899A88E1D8399317C280BF79FCE3F6461
B27E1D61F64A001E79E93ACB2D392D67E486248EF55F67C1D54FDF0CC21E1CF4
1114CC7163FE23750935B61CAC1810F2A3F873B61D70DD87F9FA7D454CF0E9CC
71AB834E7BD5B719260E93D04C8C2092366C0BF82379048B16863471A9940D14
4500275820B208068E481EA02C123A3E4A0D08987AA9E2BBAFD0DFF1E2602C96
56760F2DA467C6325B8C959BE9301F487F30883D4F9DEB15ECD759876271502E
AADF7A9A1D219564801CC51BE0EA92D5BB61C62736BDB3B6770E0FAC89BECDAB
6F3BDF0910A04F5F90E3593CD86F5105F015C724EAEB3B72A578578626A29B22
DC5E7BC63D825B9779416CABD078E7F78FDF6D72D67F83D02EF06E22BDD9F9A8
223F7BAEF8696733EA9C1C39719331443C40E10BF87F1BE86A570C97468D29E2
8C7A75E36D4AB43C8B3F378447C8E1BB394FC627C1D04866BFE6C55B2908E8B7
4369B32230D2A7891D48CDFC1C45E49C7E2274CAFDFCFA1F8922683335AB8D2D
AF410A24C23DF65B82A072DFD198DBAE9190FA53F3E9D5D12E397D195ED1FFE6
658F7427E023092555066C29A8D236AB49C7C80BF10F75456EED6A8C023ABAA8
6C6977AB0F3BAF8BFF264A3C90F9DD03ACAEC538481C2F3F2E6CB4FD94F3D6A6
C6E2B24E58BC3C8ECC17F6EA82A48179EEBE72593FA74460273BB54A16ACA137
B7A5454AB687749D64A533722F67CCE46F8CDD28EF8EBBBD71D73864A115239F
B86CA2671F0F9258F11D6C3B8814BB10FACF6AE16FF74F2243CC44022AB91C8A
9ACF420C96184B61F5B691F04E526C85C657D1C6E0625684432DF7E0357C68BA
95130DFB4454BB5CE95E23033CA985A8DB383D154BB5E43A0695F9014D2A1A03
09DC2C1CFA6831E413142C64CC8072A8698B54F5FCAF6216719C8164E7D4D065
2D03E8F108B6F6BC35F7F91BDB2F7276DB3FDA1B7E38A93F53D2ECD2388FF7CE
836FBE1F7313572CCDA10E3EF9A17518541EDCF3C52FA3A54558F298E38AB5E3
B7AA0FF50F0BCDD154810310CB0C0D4D9CD3A55C99FDEC1A8828E531D41C57B3
98C166E1B2A18C094003D174A42C50B6A8D9ECD7BB7D063C152982D388DB7A0B
4AB2BD74810FEFAE83CF025B89C875F6331474B0CEC2150D3DDB330B4EE45E69
9A220908C34A472B7E804EC49CCEF57A08E04B4385C01F2C97BA913F31FC39D2
88DAF8F0B03D2ED6DA183F13D1971976CE0E766EED218DC46312E8AE8EE9C0A8
97C677C97362015FF23DA50164A7BEA283E69EE576CEB4FBB695A73F5310A256
623D80CD0B8ED3D3A25FBAE4BF7758D8208497F656BC0FADD46D6D04C9E8E173
771E768B474AEF7C77EAAFFEF217A8F0F00CAA8576DB7E1505E1D29447EAB248
C9DA6B47BA5B9D91EB4EB8CDD1218C6AE4B11AC3418B3C51635102E3D0E3C1A3
1AE65449B7561A5869D1FFE7D8602887626DC6888C8C2B4E9560A88F841BA56A
8FDF9644EB7A153ACFA0675D193AC9F98B0B7A087496601A5D4213F2BD685641
5393453217FDA98ABBDE6291DE915CBC72586D85A70DDD020405AD3BF4EA59F8
45DF7ACFC6D373D90FC819F5056B09E05D07ACEA1E0C79F91CFB0E4D7D5C5D77
EAEEA8118F3696EC103D85FE62F9DA6DC4972C27A19844EACCEDC43D83F2E814
88637ED5C6424C6D0961F6E76E111FCBB03DF2E415E36687F76FF1D194079545
65AF36B781F953706FC727041771C03FF78A1622A8A8FC43B261E1B1FC738B47
57C7C3265348CB94D7FC7861CB9635E29332EEE4E3948315AF02693C47AB9A40
984979F0389CC81875A3AFC7C565DC121C01B12956FFB8952F6B5C40ED58FFD4
BB9F198E7F155F65A791488DA1E2FB3A034C6AE1AC4C1A47D8C21B77D566104E
12AA4C1EDB2F7276DB3FDA1B7E38A93F53D2EF65C07042E7B5F2E05817100EEA
6E6D9A0527C88944E017B54F23E754BD8357CD1B60A28A94E51A6D15A431DC46
15727CE914A237A66D6CA26568543383E4CA56302BF10C48C29D13A506E0FDC6
CF5DFE97F035098130F5E9D30E9BA2F10E2310FF111F801E30CE160CAD9CB819
20FA34C959CBFB2869B4C60A559AD249F0E784E17A08991F06827755D48B92A7
A54E325E9CAEFE4F8D74710AA972DE469CCFE45AE9FFA4BEDCC2539F8F283EC4
5BF053F2262C802828C1F79C796BEE6CEF360443196FCD88D4D4A12FE6896500
80355FBD7179E7038CAC1EF93C280ED666EF7C901B613E57C772DE044DBD4B92
45E55F0BDCECB475EB9F63DAF08C1C16A1EB2949E61A0981301CEA8573FC8049
19E0EF72599A7E92E23207322B4086F90030D75F7FDA36AB0E62E7BB23FCDD72
756F06AD294F0A6ADADE29FA6BD4C69836AD8E947AF5EEC5DA7584972FA19B4F
AED722934E2A19F193B2611963063E5E4796EB958166DA98E950E1CB3A828F88
7AE21B415FDE78634FB0D5904CC6334875A3707847B339AF3764A3076E642A18
E93486AE94CB06AF224E917EE3CA7DE1DEC9CBAF8CD37D9B695DAE2E28F91F88
EE2275D80DC54D63A409D01F64CE35A2E25131FE2BABD4EB267492DFC164E2A0
FD4F91EB43E2AA79E0E516A901673B75FF929A8D46126AB0BA0B026AFD8C09AB
0F909BEB09C956D40B0F99B5DB8B72E96305EE7CAF72194C36192E5779DFEBA7
463054E9C76A0C7028974C473885D4AF6BEA47D4DCEB4E04B744597C49AB980E
868D345C0720FE131B5FAD9FED24ACDD65EE0692067B1C10682EC3969670D92F
E494406B1DC9C21C53F9969B1949C3A7348421C00059416ACCDE6C99A53E14D6
B2C971B5E71F57DD7A60CA493C2263C6E29E42F38DF09636DB15E24662FBA143
242CCE50B8DBD44016C5BC176AA26433DA670C5A660EA3317DDCB3BB3AD76D1F
C1B8D5177921B9883C1E6206B5B25B3305A0A4CE124EF668B77ADEFC29A6008A
616251A86BFD4705006E4AF46A871F04C2C498B263476EC7C4E8D394410EA5BA
103A384B9ED8428B5F78A33D5F60213A13F982E50519C70D8FFB9E3D1D248B84
40688547585C4FF8B53B351028CFBE965A148BCD2C482200E1D19F3AFEE8E6D9
8286C5A73C0E107349B52736C7A63D13294E8BA5B1ABAF71A35D308F86E13ED2
A97A66042CD0F0FCA8D2C5873E19E57747C4D7CAF7AA3D1C010A40A2D5B7110C
DC5D7ABDB735306C67A28D41E87A5BBF77CEA55B99F99354D88D27831269D740
E8A8500D58C483D7FF0E0752D104FA14EC2573FA964AAFB8B83F6DEE93515ABB
899ECD41A3EFEB8BD9CC8F7FC3C81CD9E76A7746FE708E9507296470859B94B1
70F4583E59DBEEF0D4617855140B3DB6E751F50E15063320504287EC58C2D859
30BE230E064F3A4BAA517013293B64DE6EFE447E2C637610BB3C28CE5379DF15
71F9F64924357F35A84394D299968B4F6089E7F8BDC7A645FAFF1C295EF8657C
16D7D621A3DC25DEE1F4679511814B81C3BF0A43E9D0EF916A1AF39949C008FF
6F718FCDFF1EE14548C350D6351E3E2DFA49FFAE374F2F0B44B7ACB83F6CB6BB
A31F19C0E99A654615785BC7D5E5BAE31F9598B8F600BF0561A7C188CE6C27D3
BDFA280E28B55B0A0D22B1CA762E04F1E85A73A98F1E0C9BF26E913A517BFD3A
143C1781D4AE8896896D1D114A096736CC14534ED336D13DD46EE180E4B23070
3591AED5D6F05FF164B01B822780D96A5A001AFA8C970B99310912F82C15F455
167E9EA6CF39B3A3215459CEA41AEB9427D4117AF56E1ADD781FA309DD311514
1F83FFE5E812D782E0D8BBD4F5A123918E093F586685D7FE3A1B4411106895AA
84AC2CFF3C2ADDD654449218636C01A0DA635F17CB03099164A387A291D3F205
31AD5A66967B759198B1FE0E2ECBDB83A4BEF03D4E3242D9A6605B713B1A2C06
275347E7FBAE8B109F4A12A91C883DC902B6B3C8CB7DC9CB0006F13F8BB10D61
25458E11A0373883394BA9DD68605C3DF3807AD7E728F406B3E19297E9BEBC73
7546E24AE249AB4C865B2AF89C0E4216AB5DB2BE8EA62E5B91104C7E5AC056CB
CD78DB09121DD4D44F9B68221AD59991F8C3275F60D1CE4B3D3F9554C664B7E1
594FB320A9CD1EB7D96DC444D4237442FE1AA67BE4A5542CF83545BE60C3D095
4E2ED407F7088F19E0E32B7254DC35A2EC4540005595E07D7E8C8304DB4BACA2
959D02E0B9C9E2F3DDAAD947AC94C3A46F131B9AEA5743945E6A7C55EF9B64A6
C440824CEE4ACCC5A315CA34919E35D405B6394D0E08138CF77ED39A39525BD6
52ABFEDD8F72FC219D27FC0DAE0019110105D0EAFCF4DB66DFCBFE4003BED0D2
463A465B1E532775829638D4669BFC209A6822C8E94A311FE520676B4631CC17
35A6515664BD95F70000CDA74E1F3B0BC96C305B168E25069FAF85EA661CFED2
3D99FAE3018AF36446AE1C5FB7B84F9020B0F1C043E5D40D9B1A32371BF8968C
928F012F5549D535CA4D783EB132609EF1C4A4717E492F3F161094164C7F54CD
183144A9952F2BD14323C751080105AB62872DAFA57F04D721CB05C4F93C4AFA
1670A6E0C0B79A51A1E8927837F1F8DFC31AE31F8C52A8B075EAB4EE2D502C4E
0E4FB09B4CD634C434A73B689615E41F41B244122629F3C62991DBAF28309596
881AE238BFC6A128924E073E4F64E0A98976A8A883C5D2B3B7895B4A6DBA6E3D
5D3418239B26A213AD5635DE2294E55E73138B531C9B87EEFB1ABC2BF900D292
CED8447E651DFCED5CFF852770A62714EA409A82FF79923A4E999D20CD6BBC8A
04E5C5F772BA8972725A7335712B45438A4B0AED0CAE4D67873F6970BC9A18AE
E918DC5A38C44652325C27444C5C2EE1F17850608A359B672BDEC90507DC46D8
62F6CFCDEAE8E32E34E41B841E91A16B44FAC0BB50535F38B4842D82FB04C02E
57BB179CB43FFC3F4296DFF77444F752EA9759D337AA257EAE11CF12DFF092B3
CFBC34234AEDFFB6003806759B3EB47C4F6B73CC7E21368BBDDF5449CF2CD2F2
77D1A76BDD781F814F6F53270CCD20F49B3A8C0164A7BEA283E749D616D06419
AFA9CB8CC98986C54B7C3CB6A7B108257AEAC4F506E0274D0AB16E1EE547C01B
912C8F4F551E5A649B1A4C795D5FBF0881EE82A7D62AAB06863CCCDBE52C4104
63EECAD6D59F89698ABC09A67527FF74BC9FBDF89FD4BF8A4892CD8C34A61955
2A31EC78B5215F97C1C5B68217979B676BF1B87F0548949614AD8DD0E06B8C27
F12416075A47ADADE56F84C54FF159915AAC8DEF3F736DE09BAFDC23595E97B2
47647F445D3FF7B9BBC5928BB2B1DD8C76F2AE6BFAF25A5EFABA2AB2A420AA51
72BB252CDA74D15AE70E0C9565FAEEC1CF91238DDB80A47A63642D4B907A28EB
5E987BA7156A62055288058F637CD4F1D95F17DAD6F1F3C78FF7AC4DA62989DB
373F4DB905B0C26E175FA8BFA903F17D2E82FFDAE689DB8DE8E6B6EDCA297EE6
D1ADFEE6997516EEBC8E13F77EE258154973C91A0671863FCDA49ABA5AC0CA5C
7651952D4A4FBBF64C8E699782899A282AC59603C2E0ED549C27C2A49FF76E37
5676DD7139F018998F235B5131DA60F5543282F3012AD99FEAB932F6F2543E08
FAA61EB0CF6DD8F3E81B476343095C6806469B92AADE39D1600D7F6223974BF5
81285CC01B48A3CBAE77C7BF35459D3EC9C06E133407613AF58800443F32CEB5
1BD3993603E6EA87D6BFF3DBC9351631289AC0BDA35807CBED45E1BC9C9BEF4E
5EC1F7F49FBF611DBE01673A1A38FEB95067EA44DF73495CA295BE6933B1441A
82533965B1A4D3E6D68ABF7C3BE55F7E8C5822996DB97CB9D1B9D4A51BAF59C6
667EB5AE7FDCA2AA1F89AADEEF3A25323C376B5ACCAB07AA9084FDC8ECC8B548
AA7DD5980ED1DB1B98871C89A59B4A0299620DB951517598D3F9C16F99AA81B8
1C00CE15EB4853B5FF4EE0FCFED7C21CE3CB4ABE0686F6574C8EBFDA3F1D83B8
214F70B1040980EF82F43E89BC01971F293CF8FB11761D1070FEA878725F0957
5EB388D6223BFA5EC1E77D32A2D2938A2D27FBDAFF156DA72848745C4BAD2901
71790393BFCD8EB9786D465B4A494557DE3BF15CA0E776EAD954C29319FCF539
4BD4520E60C7831D59C1F5C98A5C5AB829E01174A04B93A1430A5A17730962F6
3C8A8F8764E3A538B59DDF76292E06897C596120D38ABA2A6FF34564E210312D
6BBBFAAFABCC78A67C18271C5711A59D248BAB6592F77C97C848C3D061C82E64
F559D6AD28E295C3ECA5F4B1FC8DA0FDEFD09B9A6A9831CF08D3CE45D0EBF96A
D373B546D16B29687DBF9EF0F535263A3BBED2BBD18664E38BFB6A54A7C3FE5B
9AF8D6A281B1F6B9E2B7C91AA753C64952433ED2A0024A08493656E5F18D4450
A2082AF7613C9E9C4CDAF003FF0B0BBDC9344D588710F949CB937ED3D9910E4B
C8BED1ABE47EA36D0F5282F3331329F2C6B62B4D31605C39D7F66D0C4D01EFFF
F2BC84A46FC5DCA7B74E64CF75F70F6BA63E2EE94A90590C86B70758B295832B
48B5B05774B911556F0220B5B8FA36670B11AD6B0ED0B6E40743F4EDCF7FD67F
410278F5DA03AFB4F758E91C11C1E067598E1B8ABAF16C6731BD6A3341101B12
315F712F72486B0DF736C833BB3B575A26F7631C8EF9C435A6BE3247BF08A4E2
A4A517FE6F9C58D9CF80A7D861AA9E9199E7BD065BD7A4D16C82D8622E12265F
474F17110F97D9D17DB6184BAF8EF1405978DABD2F9A4F2FC04761B7F9579554
FAE69C7E6C89C6B147D970DBE6B4DBB880EA882070F2F90F450E7B25A330B242
128B907F82CA9CA946E84E8396F6FAC07680D1A9AD9007EB369B2A6B80AE5DD7
5D38B53FE8640630145D300EAA72C4389B1EA97AD1C68EF86B3E728A64E1981A
8639F6AC561EE22F3E0EA888AE47A9F07EDFDC7D222D4427DDAF25B2CF72E1EC
79A542786155224B10366A907C2216EE842B199E6A83947E38189E15B73ADD18
7BC906E814EF116AB215993E7A1C87B7A8C644DE5F6CE278052BC5112A254264
CE7065B5AB9F631CB8289DF460183800170F935D7B9F808026D7342373D4E53A
78307DBBAF5E1E4410690F6370CBB942F7245826F1AF1262E20A3A42673B12CB
1A93B70C6550FADDC77E776743B84BEE7156AA61FF86610BFE936CE1C18DB4E8
20A9C80C774B6CAE5930FD5EBE413AEDF14EED0B547210B7F3E7C1A599560D8B
5B31C515E1E22B56ACBFD61E96768F6D6E2141C71484767D47560F3B3905C13D
D3ED65925229F55181B42F9ED1C700A8648D59BAD924E1B1215AB24A06C058C5
09295D8BFA0BEDE265FE19025157FB5FAF027B83E095B8695FD0435E3D66D8ED
27FA15B9609B53D5C79BAC678AC5C650C13A327A95D7A794780F058017C29881
B54E0DBE14362EB88C6BF167AE1472CEE87060FC7E391BA7C005B2F9D9339499
37FB67AF9124F269BB636388FF90546CFB8EE78F2BE1A10FDC6D4135758AAEC9
99AA5917A5F51E22F1A41460D47FB341FA02A41E73A4A2B6C8880BD926969731
97C599ADB9E7EF9153005F20227D4488AB58230E33278D4D3415222C4E2727E4
5FA87477C089BD5495A5A98EAD98921925326D792E33A4C2C1EA29EA44F55F64
3044B10987945AFC328FE6F40F1E03A91CB7CDCE9101E9D2276CCACFB36B9EC0
E6469FB576C4780F9C0E8AA51C16D88F90005CEBC424334598A39EAEF8DDFBC7
E90DF91802AD30BD6B0F88B4527F4D92C7AB7A2CE8441DE00CEDE05B9A97C826
E2C4F58FBF285D2B4F2D75BD27B64126F927CBE82F3B963B30DCFA044CC98441
8398A374BC45572F4DFA9DEEA8461FB485F0CBB97C471883083EEB6A54C48062
E65752300EFDB990EB652DE45BE4BE0F07194335C06A0069BBDDE15362A67A12
D1C12B5A5548C8E22E98E615DD94F29206BB99E17C899E634D20497455EC52EE
B4C6FB4641CFAD1888AF214099931B78B8331726CBF5082F51E732138537E4BB
74DFCC812C5F61CADABCC6E166902E92CF5324B234B7AD11899B24774D879F61
93B5915A8D468C9E2BD390F3AB2CEDFB06BDB42E20555D5ADDC8C06DDF34E806
EC1BAE0588342EE56C5FDB5ABF8F27A17CC6D9DE66241BE5F59A1F791E1D5319
361C76735D8CA24551F4A79B4B6A6A3EA918A1EC66C4E2A60BD3A37312AECAED
F8B9701455891499FDADF3C21F161FAA1E28EC28D50AA60D9F24465DD39A710B
E21EE92FA7DDBB16752AEB1FEB0A2143AC3B9FA6618A09DCCAD277175054175A
89C04ADA9BE53A8BF0863B86B43A188CFEA5FDEE7BEA9D73FB43AB0150109601
8E95E6497BA3A8DDF6BE4B9DDC89FF49D878AD86269CA02D9EED1923923D1392
7CF20515ED111EB98D6953FFDD3820440A0814E8D60DC715C87987C4699FDEB8
FDB30356A4B4830D49C639FCE1C3E2F0A117027002AA99A88921716A714D8676
5933807258DB1902402B30A79590B14D3244AA391257080F6684C90F828A19AE
931435B0B999827BD4387FEAA0AEA3A6093170CB0398895A84357FA5238974B9
258017927908197B73A65B733FEBF7E573678A57F54C0C4D00F98DD64711458A
B1CF630553044C8DECB81B6E104147985CC6614DA60CB38580EC1B78D48DA9CE
C69CF956218DA3741E6B5F6CB21ADCA3D5069A272613C152B6F939704DD7049E
B6604424A7F95F6BFF0F63CADC14D6676853A4FB7069709BD5C0BAC6E7273B00
9DC8440D9435B786CF4611FB68D04749B2DDDC4745442FB7EB6E6CBFF847DB05
E4A4D5FB9B390BF82106DF4CE93BBB633AE281B650BE421626157E9EFBC0B2E5
44A718174809E3C057C10FDA8B73C4896D2D1DCB64C20BED9337EF41F89804D4
1C0D8C055EE46A4617A43ED2D2DFCBBDCF4CE16F57A7B565115A8BC2C71AED17
F3C26B025CEE796C5083512B168BCF1ED1E1CA07C4BFB11EF62CDA62E8BF15A2
B75F595BBA1D593D4F4CAD9445EF65D5D26F3C5557E3F913EA41CD3056939D18
8F24ABA4D376D8965954C3AC053B554F128CD52DDEC2D7DC0A883AA74F0471B6
C6F5ADEAAAEB4173E5A4AED4BA03F60F0C7D018DE4AA3D9A44E38C88D64DA337
648A509E793C5D6ED62F157F612472B9131CF9A9C17B28E97167510CB9B9CC8A
AC45C94657B38B3D9CB2C1B406CDFB629297411CCC42204ADEDE8735D67B58D2
2D36C09D3484710193D79B9B3EACAE513E39C040E4C728D45B67153BA19E77E6
A6B201C4E9D9D4888D8E53921741047CFB29C706C6DDBEBC18AB27295641C5D5
05522255D41F58C1FED947B9EF7A40EA032F249E95FAD868B007214F243E5751
2495CD7FF3F461EA5D8268B206F850503538F9EB68420E7ABB56F710B16CB242
9D0486EE22E3AEF5D86C2BD3A09490AB47B60E204B1696747CC38C36ABDF19DD
5DD945D5FC78AE839430232035CF710DAB7C416541C9150BDB782DB6B6D5B0C8
2BDAC2B0D3BF8AF70F6AFA1B63D5FE4D976FB069377831EBC8ADB0EA8AC24164
47AF69B47636BE516106FEA1C6AC5790610A4B74812BC536D0293C0102FBA6FA
BF2B71AEA4E13C9B978671AC30C91DB87DC59AAB0204F3ACB5E2D51F2FD2AF80
83AAB5B4324597863BDB6F0216EC69971250D710AB3372255902DA4FB16F76AB
22910EA39E774B9835D4F8691B029ED37E227262D7F2EB36CD271CCD7C9DC188
856922048FE6A9C16030EBF4BD48245FD0D207950676691E9CE5D30FD8B30DD0
2E62A1BF814E0BDBFA600C17257C1BF291985A236F498D588E5F5E6123AE36B8
64DB0640E85AC7406326F610CB203BF6483F93831F1DAFC7F872F99D376BFD72
358862A7F5CD9AC21A8531C362246E23C068CCCDFE10E8C7049382D29A4BAF62
C181896463A2DD0036C9CB34D68837D471B49CB239B1BF4C4D4D95230CF22673
38BEB45B768DCC141075B747F766DB4261086E6FEFF7F0DF0E29D2F08BB125C2
F15A62AE472F4982A3EB22E3422EBCD491C4CA203F1F385260358504330449B7
A038BA0D81412AB77BC8E1874CF329240A0F00EAFC4678FCB28696287307A965
F5EB51C5959FC89ED7FD23B474B943DF0EA5AB1BFA3B8ABF87C9A459DC3FC100
3EA18ED9A8A6FE7B0C2F5FA4150713F6FF5A943CE820D0567FEAA8AF70A57A1E
1C7FD25344A0A36AC657330F6CE76C7397F810EBCC6809DB937B474209957BC4
428FD4BAFA99438E758255E2350B2BB74461C02347A9D9D5302C4F2523EC6088
0FC421088D56F247AA6F41CBDF2AE5C6281A01076686837B4A93A6AD70D75CFF
62AD2B62B5ECD9E8A74DB6DAAE7D67924722964C551FF3BE35B4D797294E06B1
5AA92D6C3259ED06FD78E23E35AB8663FBBF2A6D2BBF92A3B82F98C02657D25F
8E81A227624ABC9AD4FAA821B48CC849DA9C00703A35B829FE5D20F4E8415EDF
E22D2C3BFE9285ABDF0FB6A5BCD1D7FA7DC60DFEDF86095037158D122737C891
A8CB5DB770D39DF17FC3F6988F4361D1FFCF627D37389568C41E6212F98300AC
30E4FE9E45FDBC8A25AF50162E52B33B4990833C22684AB21230735CA8CDF472
87CC3DE786B58D7B53FC35EBF9CDBEF951044730BAEC36E5EDE3EE29DFAD6620
D3B60F1A0B0AACA77344831AB91BBC39E03219956CD7BF88F9A1728176CBDE80
14C97D9505D9E7C7EBD59CFA22F84EA0EB9D79B69404B279337804156D3E97BD
3F25F8E449AA68EA8828FB7DC78B6F70A4578C7B951311C0C44BAEB2FC41FE32
50F160EED71843B9EA5A218FE065BC9844E64A98091CF24DCF30AD3A4AE79D34
2969AB1D04F95B4C11422AE12ACF74C3678747162534E82750938543066F7E02
555CBE8FE3C730299CD99BC82F9E61598ECE5BC6FA05FB049C4D7AC5C474C224
7A0B2525B9452EC6D4D2E1C39A2F11B6493FE38E0447A910B249A2BA2744E04D
BC4FFF499F219599442B47A487A6F9489925EA09AD858217DC0BF96FDB7EE82D
45762F01AEF2D2356B7292E324471A9A4A7F1062066CF520A2948712F2A95856
5671E184F87B4EE44DC6AF001D37068B3ECB9EE5C6E46AF5F5F195497E452553
206C9C0ACF9F4ADE0644C0F1782943FC68BA13596FE0F5B5FE22A12BF31ED4A8
2383A3C48B5F3FDCCD65865D0A260E2CA73221F6C261FB223E55574BC6C5F5CC
FAFE66E2256ED7410A5B3B359FBC14AA0AD63C1D85E0635BF92AC4DEF726AACE
32980F3D8E79684898128ED727E19E2AD333EB0499B406E03AB83AD8AD9F239D
989C9BF255553A4C292FBA19C4C1D8B52029D414232EFA538CC4B41FA164FF81
06B8B14445BBFEDBCBAAB3E2FDC05E64C08215013ED31868DB1ED2A57CE4D3F8
1A8CDDB5880CBF608AB4EF12581BA1C3AFBC3096F164D60BF42B7958B39D4D7B
E19965A9845BBFD1CAC75FE864140B729364F831B26C86ABBABFFF7AC8A0BD3D
7641F6A3993CE7A124D7F3B1DBF5FC32FAAC56EE4CD0607D92DA9CC444B5AF99
632083D35FA687DF7DC3B76EEA16F4349EAB8C1CDAD8F20BCDFAEFA66D2A1887
E0C5FAD2EA4E1671E4F05B5E06C7BAF70B5E0C4710EB66498F516A07A1EE6BEE
1F8C3763B42236B9228999E3E1BB901E6F6C1905DE74ADEE20EF53751328E391
BA0EDFD7EEF20019BB3BD4588CD590178590DB3649CE03A9334023409EDEC09D
EC10AA5BC2885F0C00217FCA575EC3FAEAA3E920C592414DE4877D3714DD8BA2
559F5FC2111AC51724AD3AE92202AF1990B6332B41AD348E1D30482DCA28EA9E
AAD051713194ECF42FA5581C50674851D8A184C40A73B1792DA8AA542BC5B3FD
129ACB9E0AE0063B7C708F0F49D6A20D57ECE2A2474D2A25D566BDDBC0507A19
03ACD21F5E7C9A2AEEF447CA03D0B02B82C5B86A43142E60EC7C240AA332B334
864C06D20988E7A7DC6A88F5BD6D7ACB8A107149B50F56EF46402BFBA4BDB61E
E45F2F68656F4C56501D8F92FE901455EEF8582425ADDBD4D9066B7CB33AD29E
39C507C16108465EFBADDE9133D29ED3A314294C0654F4D037DF90A94D5B290D
6AB5A6EE8BC58B8ADD033D6A0D6CD7B5291AB473A00410E7BBE87B957DFC093B
CAED513867B5EAE023186F9F0FE9DF90A4E53CB17A8B2CF58042F6BD6C8150FB
4B1F512BC814690EE00F81523BFC235B31A8E43A709BB562F1EE467544328BA2
71A63DAAC6BA84E0D63B0D45977533343E96F9A6F78F8442305A20B83FA6E396
7A4B59B724BD62059EF77660B5C55357D0754B5F8B5BBE6F4C3DC973328D1587
DB636AF6422F76D7CA95D7A7AE03CFB40C4EB2FA5041E7938AFDE40037161869
BE48305957C64FC87F81EBEBECCA16B463510E46BE227D79DE336F1994F81624
8A865AD025CC86FF8E84C413D17DDB3409422243DBA3419C63412969166A73B0
8161617869DE162509EF78431049EF8B4BB1CBB26DE6C89C8B9D68CDE45C74AB
302E6AB6382F097BEE53ED44591984D9EFB79E4F03EC852EB0AF4B4F2CB8B02C
425CD36023BBDA9B4EC965F208748AA7700B7B8568B71C8B8225B94347394B11
BC800FD8DDFFCCCF5D51F0C2F881B2809B3D1FF2A8548062688301214D6ABCF4
C85CCF00AE6A7DD08D6267A27072FDB14C78148EDC103D1F47D431E9502241F6
1F5148791C6FB259C0AF46D0339DEEDBD48EFF2EA4BD68A172C697EE45B95F25
568382B0594FBD382E15CC87C3BBD6EFB2EC02F29908C3FD76A36DAA4518EFDB
A77ECD2466DD7F99BFF30B68DF67030C652C44EDB09C76ECB3C414A0E704BCB1
1332B780C812B5C8E9E6F3D32DE6EEBC3FE04780589579481B79CE028D562806
F08FE3D9853D4AA01ACEB9CCF1F475C7827E40CC9ED578C838BBA02506798076
FF2052936A97A3CAE0991A889A2A6C9C59AA9B4CD7598D47E8EEC552365442CF
EA7930B462DA6515BF7DAC364AB98E95EFE93167AC0F1570A09034A62418DD27
8B998341E416AF236D18F5428A34187B49C2885E64F753D2F08CEF3916FF2566
4D6A7806EC0535F1C78AFD3662E63CD010DF142AE4C02992B7D92D3BE4E77B3C
39A2B343B0FEC3618FED4968B44D1B4F62B69B4336402CEA9F64BEADBC2583F7
9BFE49C89263702143233DC2F09589FEAD46B1BF56EA1E87EF5EAACFBC5739C8
802417EC216EC3F9C89CD4B2F8CC3862063C0BD05E6A21926CDDF89A13C1B0D0
D9B84426F5D63A16D513A048F34512336F94DAF5104DC49350936CDC7F144401
3F75A67FFC936C5A55443043E98EB63F1631D4372EE9DBDCB2AB8DF54BAD95A0
8EEB74CACB293FE23AE72B6DB9B5C63F50644ECB46C1915B6A7715CDADC0FB47
7E64F1AD9FDB31B4D44458F6A21F988C7C2F917F8BB0C6E94AD9361B9073FC7A
8BEEBBC4E4E67C38AAC6952E449CEA149DABDD8DFC9DBB510DE3C875DDD9D07D
79FF81C19973ACB3BABDA1DDA80E3C63BD684FA0EA1C7F0EA5B2946E56800421
8E3CE2DE12E25445B5B0BA0C2848C9192824704ABCF5244BBC9B556ECE7C35FC
E0A7E672DEF91B9DC088BA10FE1CB5B571D21EB7CFFE583BB52FECA268F0CAB7
F5B7AD183A8707786064099C2AEC2D5C86E975DA662ABCFDE0403E2EFA6AD3BE
983B25B8B8CE02AFEE694D1BC7F57292ABA161F72C875480F6DDB4B03B511226
B4CBF49BD6526B99A83D54FC8225D53D20EBE822C060B15F1B4F29A5E0CB97C7
8C466F5486F57773C201B5E3CCE56623CAE0EF9833304CB4345C84A0D045741F
CF13FF1AA2A96963D5BC3B8EC8519375A9B166261366AC491EB93BA3617EBD1C
6D89B77133B66BFD0B214773D46818E498AAB117F882EA21A0DD1FCA7AA5982C
3F24253002492DE17D9EAEA089CD2DF10A7AFEB40B82C230B7CE3D65FE578857
787C417A3FB10237E3048E1484DD2C1375B510DE7069217F6FE156CB666CF07B
F6629B4F962484E3783FB06BF950F0BB85EC5565D2B6C61F9AD271AF645A0234
08EA380C737C34057534B53B7C5CDA4D7349742ED08E465153FBFF4269126B48
BDDE9BEEF7896CBA75D752F5C5125253A6EA9D0A5E2F2BC44421E4E9C15B3F7F
A971C311215AE27DE83945150CAD6A977FCBB3DDD04F411D2BB7F9B47163587E
677981F6EB744D3FDDD905D1BFC83CD827FC14B5504FA3CA823CCE5FCFD075D3
ADD70E4A83479A1446D42290F62CFD5B5469D5ADCA7CC8617FB3A8CF7BBB5FEE
BAF7AC42A39660A1DBFDEC30F706A089228F43EB33CC19216DEADF6749F67164
F0307C7525338B7051BA543E4C0606D37D3D9E2A7EF5ADD865F2D88574171E19
920DF95D3FCF72946A4632272FF5E9FA644F2EE53EB7C79AB70B8E091126686A
F3E15C7DD676EA49AF7C39771687A4BC7BB2FB2F403BEE5B112B0E50AC18ACBE
C6FEF76B826F1DCE25932E891F3C1909ACC3F57E504A973733AE3847EC47E14F
B8DC4CE563B9333E6FFB101085FE1821A9C9280BA2466E2833618171F581DC65
D7E2223F244D2A97ECE636E38D41FD4AE2433F68091FAFEDC6E2540411B8CDB2
F647EFA25B6D2A9665C8D2D47CE829BC79052BB701348EDD0DA38D05E1FC22FD
D4E97BF4AEC7CCD0268F14842D16062155E1A4C9FA9D30CC55384267425303B8
03E967E4738D638A4585F4357916C6CFD3E0130951DB119A72C7A06D69873049
9815431BA1D59DF01BA0531BA38D053F96BD81DA6961EB7D2AA576AD57D84FF3
EFFA537BAACFED343B5E06924D7C2BD63D85BF7B6D1D28E8668F1E896F1F9E1E
4F6839CF10752E1A650591DC99359DF0A561D627CF29E7A68D8B403BB53CA745
8DB1F0D03553A59656256DFEBAEC556D86354CC449154C53C445258C77223108
DDB2486695C93B141878500BF59BD16EC9F360A9928D2BC5F2734A28F478CCCE
492BA5A26A100D667F68C2548E805F7F4487473D33A63F657FB68AAA09D309DE
2D6776FB11DDDB271F67E8743EC5C79B3B8B9BA0F7652BFAE0741E38FD63ABF5
2F6FE53909DCC4ECB8DEAE8876B25C222688524E16583D99796027AF3A503CDC
F91DF02DE67D3BAE272D970C44D5A3A9750ED3C0CB211F00E35F365E44B15A9F
64F133445F9E096C5473A1B7E683190E909BE24F5531E93CEB6E347A4D2A218E
B4597330DF959CEB49FA7F84560638D95F3D588D6E07F1E26F018BC277FF8225
2708F4E2953342626EF81C2B4D446BF56AE8729CC272431F91B8EA98AFD526CA
23499B246FB327A72991180F9F9DE5D47CCCD28C3C93C0F5C9580B3E2E755769
C8707B78A922F87EFF98C044CB32FCD2D88225C2BFF4B134C14C5A176F950C07
F0E5C2E6BE6AF459607FB35F4CBD9F351AEC16E6547760BABCAE42ED260629F7
82979B65C328A8336CE9E023CDF46742DC29B8217CAA5243CAE1FBBF5CA8416C
53CB94E2291B1D6511AA5594BAFB29F04614DDA703B5A9675A50CE83B05B899C
8E82821E5CF0B2FB0D72DC6F4ED70B0DD23E1C4CA1744CBE05136729351500CF
6B9A99867EB1007E5DCAF39D44961946DFF17C6913E50594C534B26FE6DB7F1A
C4CB0787E20624CF500757712F7A57D061F1C0DE31E4E520360DCB5829CB45EB
3ECC6DC1DF2DEBF0BC70A92D3B64D1FDF723DF328FA53B687ECBB2B1157A745C
6FAA1077FB214F632945A228982E7FE722341BD44BD17E6435BC5C92A9C3D03C
C74064EF022FAD235EE7911690B14B5D5735FC32C14EF01C4135306D53CB87CD
3DE08AA4F174F5B4A74726B1359EC6DA173DE89BF1E944DC0DC95215C1308337
901052A4555178C85774D97E16AA2977F20E41A7717565DA8D9FB81E989585C9
944AFDD6947B83E8B5352D8A626621778463D1287DB8D742D0F5BE14D5A231A0
9979BB0513AE174DEA4F0C2F9F3F5457AF842764D4B737D0DB9A5B6240AC7E72
413CD776F6C050E13EA4209A69E7402019CCC731797ED712DB06411FBD3A25E9
CBE741C7B60C63A6068F6391E1132A54B8167A1F66CAA220DA9A6A7A1BC4BA55
496C0C77C42C60EC89057F26F5E4F6171B31D46DAE56DA99BAAA556E0B313B90
AC40FC6F74B5B04895E789468CFC4637F4933B75742225BB34F89A3574AFEAC3
0467A03BD91D479940083864985777C8A5BA4222F9154247033748DE73BA49C8
5787E95D7A9BF1793A45F26C3E50DB2F5A0E419838B90CBE99C3EEE7488A9BF5
55A38A4FBCC99D5EB2A1DA10A8E6DF74732E3574C79697847062E9963EB47A64
382BE1466B4EDF5FB541AEB4790866CC1AC60E2D1453BA73139F40406AB5B85B
9F238C2316D93F833F07277DE774C7FB48F1A84E6786CC7A4E70B37A68B5B208
35C443840C9227DF1B8DFB66FA826D5D18DD8A1AD441D014DCD8AF161D0E0B0E
172BDAB17C31C4CE7A17C95C439EE6919FEFA7A69B500258AF10F2FA61EA1F01
DCBC99C4CA203F1F385260358504330449B5CED22D6602D34EACF9377BE8BD5D
2381424FEF0E88E1EDB27CEFC507626F0B4DF1B164293BFE9285ABDF0FB6A5BC
D1D7FA7DC4A7F5079597335E4FB69E5B69AAB13BF630C5CFE4FE37D476FFB448
BDD1F21D1088C5CD0C1BC05E12EAA9FC7C6CBEF3425C783999188859D32239B6
007B19DC77D05356385213B439363E9F46CA8954F6682842531892BB3AA9FAFD
714B4846CE2FC46C7963BCD282368ACF50E62D805687378B4774860E74F64932
91F94CD02E5346CDEF66B458A7E9FD538C4C773FD371A74B3E5F1DBA970621A8
ADE75F2DD9A2FDA0A2B3930AAF03E7142C6AA825489B50AC85677C29B9F1DA3A
6B7D6FB8840DC311864B0BB25BFC04884AB06BF9953B6EC5E635F9A47DCF8DC8
29927255ACEA830AB44CBE5FC0E07E5A83E25F55292361DE380EB188AFD6F470
4C489F0CD3E72D803879CDC698C5A5FAE6DC51EB23CD6DDE6CD9FB5225113BE2
DE12E25445B5B0BA0C2848C919264F81B62976D67C102B4F34174CB609C4ADDE
5358A6C9AAE60E7397F04924E8C5E9933F8E6EEC9B12429E963460C34989D8F7
A0F2E2035A5A217D52955542B510E2CE345CC58A28F06FA3C689BA1CCA96626B
180336CA72638E191D8F214A4789336CF08B318064FB68D7430CD0F7156859F1
4340C1D152A2DA3F3B299CBA11BB127FC8EE14A542EC970409266674CA23110F
B41F84F87B753D4E164909431DCB3105E95CB820CD23263D861C05DC4B6B7388
5E3AC77CD382224BA5DF8463E73BAB631ACE06A9A9F408F961EF4D9227E18769
DE6B9E1439111031E33FE1BA0754F9E8EEB1966924F1246DB2D6220FD68D1E5F
12D02D00C3C5BA1F532C57F310F7ED59FC8E1E3D0A14C6B17D8BE665682F3D9A
7E7BFCAE7C793CC4431126E3B638CCB3023CA8994808ACC2B41BED130313F050
6783F46AA8FD489009B86F080A2932233E8B2ABF7405C9E6A7DE351875FF0869
85ED76735DE0D9B5D5AA9F42C1330293C69D47B2F1C3073656878BA2EF4AA378
0EEEA49503ABD2CED207C1020263756FD51799B6C636C40EE488A3E336F15AE6
CC3420B7A84BC2039B9FFBD30BC89C93F9E51B9C56BD4A28DAC0AD0E56E165EC
80686FE5B77FEF8E3A680DB3C059E7605992E6081CB9BC17245EC59F2E4C0805
13488792144F1312C88CE6F570493D23D5EFBD40EE88BA32B5C52E9F3D0149CB
E85CD5B73362DF270346824DA25039316F029C90903DF9E07EA5FD5B584A49FB
E4CFD85A8793E50FA3CBCE1B9C60F64B2A71130B02D379447D36A772DF16A009
E3E118D03A94ABD8C5C4B8CA43239813383277B0B56C0B8140A92B6C9D37E426
8D2ABD68B91A74DFC7290036D77B5B4B244FBBC1376246CC21AC01A034A3C4D8
0F0C4D87AA984006EC9F9D926A9D12F7C33907D4D4ED0584DFB64895AC8E10A5
99B21463A922E378F0595162E77B0C8E5B7C2C9E4AFE095D52173B0C8C92B62B
FC6542F59A904602DDC56B1721F61EAEECFD14BC8A3574D32F41B39AFAB6B53C
5BFDE1D1885ECD110CBC06499768714F15C2BD1CB082128480884ADDD8385CA5
28D6DA183F13D1971976CE0E766EED2BF920A90DB495BD99B3BC81FAB5780847
9541337E08D5AAC545FA14D690FE87FF6A58D1C04DF62217946ACE5A1C9CC82C
A5E6A5F03F9BCADFD0B4C19A2E64ED17D8B025E145FF19F880213E426BBE1EFE
790C84AEB2C5F1EE46586A09B4A90D855A949850BD9ECAB39A1911E2CF61496F
879FBD731E4AC529026DBC56EEAA9623B867479D10E2CBEC69988D32C01912C7
64B686F16785013494C30A922F7D0080FC2A395F396B04F41AA5F5ED79FDE408
C1112097012F7B583BA7017D2C31FA4F88EE95D0F9608E5A8B4724D13A676C07
1F4EF3E84242BE30BFDC9A162FD4A49C1F783A6172A1F73B7705EA9D2CFF17FC
AB94C48FBCD88B7420879AB45E3303786A7607BECDD416F7AD7332C3070578AF
13C8BB5B28D9280FE5690CCA21957CA04798EB526091B48A469C7251174DC59E
BEF1610EAE9DF274670265FC8FA6BFFF450B7CEECDB18848B35A678B1DE0E387
1B9772A10863D1DF3733A1556A83E69A827DEC3C39C3EA34872F08E9A65FF1BF
D40F28EF7A6FE31D566CAC82BB19B020FF72AA3FD18B9D45680A1056CFBBD6B3
B90E59CDD67D58638D06C4F2BE92E356803EA7FBB940945B8D7443BF05AF8C5A
CE666F7471D05E30546054D59077B88BA7B8E7C5BB2A6E27B8B7C8DE2271B98A
822228F3BA58D1F81BECD4B4AEF6E848135C62CD131EC19E447F8E1854BCDD50
8A43843C45AC8006EEA335B5BDE9B4A6A9529192B990DD89155E893486EEF30D
2458A4FBDA7987842BCA05F9EC6EDDCFEC345B1DE999FB71D9EA7C3AE7505C3F
A023D3E9A9FF494FE85C80808FDF8DF56A8CD38856D9893071CA406BC7EA13E2
B29FA242F0F85615B6221ADD5CF5A93A375C05D798766608CCD92057F8ABCC63
832CE329EC933F97BCCC46558E7A9E73F41162443F7D5EEBDFF5117F9E66700E
415678CD1F0A09C6233D6895E2831719E406925AD42883914D309DE08A1DD6CA
F629346C4086912C057D2E70E63DB629ADA9E9F5B010AA035CFCC754B361181F
19B2FE23261A0372C6F83527B331901B60C8CE3599759719B0786C46BB4648D1
2D957E29EDF33299E0D111D9EAC039BFCE726918BF7C033F43738476013DD189
8E7DC7D1ABE87AB5ED97ADE412010BC15B2E62492494B72478231A2C878EC226
3D54A4C91F0801D1189E27349D68F0EAE6D8A6DF698A8752AF673A8C62617EA6
9E2B48DF60424B97A278219F4A084B5770BB589DBBD4E5911315A68856190EE9
780487C5ED4907CFA527A25893A16A60ADF3A2B81624D3DBB60AD2A5349A98C0
65AB2EDEB13E3E9417A35F3FC84D19DC4D12DE59776825CB5837F41E0401AC98
3C39331DC4E3AD0C5ECBAEA417718376BD08859EB1346F69FBD1A9E0A9F4A9AA
5192144E65B0F10EB696F2131726BAA768F5A9F93690EAAD13ACD5A89AC0DFD1
33BEDBB60109AE1F4BCB401296DD232F1A9B95CE14D6AEF6AA4912E8C6290329
FF4B4C5C5DC52F371FA6569FB8D2AA104DB7349001835F9FA687F8AB0735D57A
62DE67D5DC9EB9E491D69A5D39FBF00F1BDD94006C446E3875D4410C22B6B539
9326C2BF6A96D8B52302D9B7E47FD932AE04BA817FB01593AEC935EE8A0656A4
7AC07B622BCB1DF72CC6D6D0BF556FB0ADE032280F7406FDA1CB405BFCDADD2E
C65CD54295C5EA36B2A8AC8EF0C740139AA3E0DDE695774D91245A2C54FB5914
0F85B887E8C2B17A59F2792B930CE8CD62854D2E45FB4B4704B91E1662F6BF78
8DDD8CD1419595FD349D05D2E43D7BB9142314C9139965CB3278F5B8D2A3614F
F276B14DAAB44FD3C9AA412D1838123CA985B7213FB2CDA7BBAD5C07718D5122
A9BCAC252E0F4AFA0E1BE834F7BB15682208E71A1340BB0F561C92E0E82F2177
EDA75F2B4EBAA872EF19A6A71040D5DC5A90DC5728286CA4F69060C9BF7BB9A7
597D0E18CC78A2102C26D2E3DC0DD2F3FF5C45D42C88237921F661CBB2CE96DC
DA097E8D3AE1B34A897C2AB13BEBF2C55C94E4D98F13EE5E2ADFFCA58A508FB9
70BA901AD4A04678257E20547A9B74D21C385D27DB50BCB8D34D37295E0E561D
2252541FFB482F6954E9BE82313BB7D404580C2AE056AFEDCF64116A84ECE8C9
CAD9F3098958044133137D23189C8BC8FCE7446418CC895161EAE1A963D2581F
1A77DBFF84C166A052850F5D93D2526417ED195E670751E5AC200AC8A3AD9D18
287B9517A107946097D66B4011E6AFC6E89B158A3D2C57C9AFCF90C51A1BB708
625CBFCD275620886DBDC17EAB2EA17873AA2414D6E10BFBC9AB1840B74A8440
3CBB0D9E9955638DE8BFC8C65F0F3FDF27F12583DEDFC03B251D809BB70190EB
4B23B5937861769321306181E9E2CA7A287CBB48C561EAD1AF652E4222F2A768
BB3DA8E55145305ECFB83AE2AF6E5D5A023BFA7A4F3D14A72A94F57A327C49D1
2FDDC972851A55112F3DAABA54285DE07128B4328C5527865C18F9FAC104D598
BFACA21D1442706F04D0E68D704039DAFC521EE20F172C7429021B4EA191A19A
2C0898DEA3A8CB2FB58A5EC96C7E879EB79905EBC7E6ADEA67F55F01CF6AB6EC
BDAD3753F6878A0F45EA1AD07B6AEBDE328BB5C86275237520E8AD164551F58A
49FE2896541CB435FE7D6CFD5DA7A965D754C30476CF9BD874A8F836F1EBD4B6
A664FC328949B97B109B450536C96ED9B12E06790DB1D88A78A312B6B0527FEB
50212522C8D4156C9152AD15467469D677CAF816001D373F368AA90C3B362FA2
A63C0333315F81E1BDA0E7CEA438B7F59D3AB45C3439CD7A6E0AAE0D0D45FB5D
3566F05FC9E5D7661DA8BB4E577282DFE96C32A0D271B50529ACB4D2823CAA06
79645BB3C5DCF4C788F0386335DACF74288C4734BF5FD638E51CFB83E058572D
D1550027B87A0F0F66340A5261401970E95C970D7F3EC78BA8970AB60F08C7D6
A1ED696AF20EB109482C565D43A03596E15ABA3DA7C883B8E7606603846D540C
271AB7A0A57095840BAB3FE93BA181D1B468D85563C52F9F0A99E6FC2BEE9144
8A98BC5C472C2F28E48BD3E0A0EAD36BC29D5786AC356DCB3BB34C9D419A7B41
DE2086095037158D122737C891A8CB51E1D187D715EFB27AA6A7F3C4AAE701C1
A505CA41D2FD68C16252824E10F5F3AB39E4EBF53602AEBFD9390E3FC28A05B6
884A56370886247B9B72A401DB454BC7A96676B97173077168EC833E0D0E11FB
14EFA29D8E79636CA5ECF506F5D16D395690130C7296C900D4538863BA10A9B6
0FD394FDFF0A4DF05367CA13A6D639BBD9DEB0B3B90C0447136A09B5B50C50FD
894E2A97DE24DD3EE51106578C9D5893DE77E43C32E5FFE3C5B6A3B9A825C426
7005A4EE08B34539CC85C4B8A62CC594D3F728929BE8371D9A963DEEE6E7F9D6
EF08527A1F1498026E46AFFB612385ED2BFC0D2C9C548E791D6A4756BD982692
37B8DDF61526A391F2AF677D7FBC6085FF827B5B7469010EF8B8AC23F0E5955E
1A8D60E5DDBEAC2BF2AD38B72C73D7578BCE8478BE4BF1B1C3732FEB33DB0F02
35D303DDAB83BEA0A587D1619E1DB68005C79657516F100F0CADDE14027BF6FB
DEDCE73EDA61A62C0902850B15BBA561D090ED9AFAF476B100EF0997855F6102
02811347A66C608F7CECE80469201E64134B67FB45D99C6CB057D530D802A8F3
AC2AC68E708D941633986305894861DDA8CF5C700AF4467E32CBE60B39A63B21
F2E15C2A8EF9193CFEF55B42DB0A2538EA7D20E51721C5738F80181FF1C260DF
0DEA886BBBC3E73DDF5A452B46406BE85B482AED1D486993126439106138C21F
43FCCFFC795515FAD3F36B0BA4F930DDB4CD897B15813F788E173A9562B1104C
2314787C93884718FC3859FBA0D8D918216DD740B6429FB7A7E6E1AF9C41E140
F1C541BCA63E7919499D35A59EB29ACEB942C05214F6DB7412F9D12BF3C5886C
DCB3E423D286C414E89C31A0167D93B989863463B66AA62A116184C6C5B704B2
7833591325433321D64CF452EB380DF50471A4FECFF494B11A92EBE175BA27DC
7A8A1D371951C0A8393CDC93684229CF727D193C7592CB75AFCFE3185C5FD35B
69958BF13A56EB0B085EEF08BC5570BCF02E1F02DE4106039AEAE823A4B40357
D41B6ECED3C2AC9DCFCA6AB0A05A8F919A4322FDE76A5572D85CCF9EF0E4CA26
E456BF0DA9650A0450E7DB80351B54AE0BA1503BD54F76BDDDE9AE8187B3C39A
72F38FEA8DBFDEE5B253B2CB0267AF3E2C0B51AB4A815C595C6D27BE18B22BE2
13AECB0851A8F2833D07F69440802C01CAE5D074B05C3DB2A40A60D8183F8B38
D55884FAE6EFE9FED819BEB1A910FCE93AC6728499C995F60E19B33727449515
7F65287FDD24E75FDC445E81242665226135A424EFDC7811C168273F8F2C5A51
34CB06C4B62D9833B3F245DDE4A1C6D8B7F87627FD66595BCFC6CF05C98CB5D9
0C9B0E863AED1658058D7BE0F6A23A0A00B7DF4F412C71012E07E3EB5F05500E
7DE017B81EDB18676BA82CE0FFFC44E016ABDBA0325F3739665F4BF416265FAE
D6F239AA5DF6BEDE948640D0E9347CC0E5C46C8755FF56BA84416298E17F6D7F
9B583DF353C4AFEB411ED79F3B5DFB9E11A2C91885BF0474F39552FCEE1DEAD7
EE18FABC778722B7F0E560E379B1432DAFDDD732C8EA65842C0547A35DCED596
E4461AB7FFB7086E252C647F7DB91DE5F4711537140F9DA77BDA7D2CF60377DA
882DBB81EAE547713D0F7BA5103EFA5504A340883AA1399A9A55DBAE3348398F
E2C85057B9DFAFEF64FE3C79A1FE96E5ECBBA96B682DC5CD0B04F7B65BF5FD83
A8D8864B1971C294EC522138816EB455639AB72C071BF138C5B4A7AED9DEF307
7545E1D5849AE5D929D81799A00414321DEC936F1B477E9E7B18493A48790D40
25E339F8A7ACA13BCDBD1536AE12167DF97439215C7F715C1CD466145A55806E
F57B1105A8A6665A975C7489358361A418173352170FB896A21F6CC7A175FEAB
DA87AC97944D371843611D0BB625E227C1394A01618348E5020A4F2C1F00C8E9
4B900DFAB7D1E9C330653DE9F59D4C43F4754FBF01CDFE626DA9D8780D41A69D
04185E2327A7A7082943E582D23E7057104EB02036FA8CC986D7902A67538697
E8EE03DCE4A2AA7442F5FE445587F80F4771961D74B39533FAAD78F695DC2F34
5A5CE222FFF674ED12261D3CC8431931D83825A375E76E1AFF0D3119E033384E
202C3BE0477B78309881B2701538F8154BD644837246BF34C977EF82F1DB24A4
B42AB1C0D49992D407A39CD863EB0E2578114C12F1BA77AE866F905FF2822D6B
A98669433EC4619C3924D513B08FE3720C7938161863B28AB406FB94F250A9EA
043BF9C355A5C29EF4F8C47ED334CBA37E4AE492AFD20270E12D1DEEDAE0D53E
96F006F5D4C08C461346FF5026D7A9A7D9B68DFEC0180103E86A4492DC064440
69FFF2FDE459BE054D017BD65B3ED72939301FFDBAAECAB95CA9997B59EDC852
9AB2E11DC24AC1E0C6EEB0AF22124E69BD1EB87F4FC16D1DED415D4D7FC7C51C
446F7FDCCE431FD5A12CAD1DBC4458FCAF25A910309DF21A36F683F9E33947C7
A1CFFBF9A6FF4BAF29CBA1C9653649786486611601E4A766BB994C46A720D80F
5BE8A86EE4F5BC37B60243B355841A7D57E124AA239239C86AEEC6128A29EEBE
373DDA7B54BE6F7F3B8AFC4627675EA3EFDC0531C2D35985FF892B957B12C327
308E0DED1AD1DED572771D52C752A57557A0E2A3D4852694EA3D0E37D6B04B88
1C8FB1108673D867B3930FC9BE78B78C61625F9C025870648DFBD5035EA3B088
AEAB78EA8536E2DF4A0A6826013AC84FE96507D9BCF43C148C57A35DB63BC83E
43F6E03946F3F63A4C8453B16D2D70509F138331B411637F556AF71FE00DB900
5DC58973248CAB6870FB1C1E6E7DC11B95954B10C7D3E55F65BF2FD09781439D
BD3A74F8C81E8069DD79D334CBA37CDA8C3EC797C2AC024E9921B693B384A541
4D59589E8BC97D736A3E996ED314ADCB543A4073111D90C98206E38D49AF3C01
28B0329ED4A0CE904E413BB2FBE9E0B18E93BC17C32D8C0894CDD4823C41E0C6
3AAABF817C3990E09365C968D3941F834E31EC43C4F74DA06BEB64C77DF2CA6F
A4F62601F29EA58CC3FCFA0CD420B22C5C6050F61800C9F578302026F8579F5E
C59B1EB4FA5CD4D7937042F6E114D3CE47E422D552BFC12C9271BCC7992E5135
0CA746B9B2AC7A81207DFB271A932A81F9283D67C51AA6778D660523C145EBA0
4B00038E4A53EEAD65D734493EA0114E40A7F2697F3D6B8BE2D6E442621C7712
CD82CAF8D083AF733802C8BCD7B27C047D9CAE387378FC232393D8A6A8CE7C65
C7090E0B50C4AAAA6BF374F459C0E3254BA94E922685374F269A20EDAEE67A64
3418AFB430AB8928C1428BD35A79B6D617CF7B1C81238B28F0768DC7F3FB4445
692A49102E0396B455ECFEB768F3B782074D8BD9B9FF76C4B3019F45B91AFF2F
F230F01CD0131330652AA0C651AF60E25167D87981F4D01BA8187AF0316E6A62
DCF819BF6E2C912C9FB6141435DB31F0BBC759AD4869F599D83FB8BC85358CFA
8268ABF028FDD8ECF80C851E4D571D289B7A73E9F3C74E1469C6BCBA90B74ABA
CB58EDD741B9CD089176A2EE201807CB287B9DDFCE564A7319896A4C79F145AB
2868B391D3161FB30580BC877854D66B4B0230C67883D02114651BB55F93496D
24B80EAF77C4678AA8978194000FDB5AA24437978F5FBF5CA18BA896A54A72E3
C126B01D295227F2E2305082FE0B1B43101322D6CE4C59D4B781ADB62601A72F
03263A58F86E367B195713C9511A3AD6CCEF7F060D259548E1964FCCD1A69C81
621E5B74DFEAEE232B1F2D551B141D9CCFC489CCB688054F606B0282DD3780EE
2477B40378154905F20F27EA9F8F5B89C3D39C5ACF3D46952B4A4EF72E8F118E
5F41EE34BC1BC68E436B3B0F94C51AC9E1561406DCD0990EDDEE2C8FEB4C788E
49DD9A0BEAF48043D99F573E7EE66D4AD99F8622FA9AEB505F4184C56318C377
5290D80D2408A15404DB2ED6D9C27BAC92012B7BAA8AE54B1AE1AE6FB899DF42
F4087D9BC61F477D5AE897000C8044CEA285BB97A7F157393CE5B70893CC4EF4
61739567058F386437E530D51E684B9F7850DF1FC021452229867856820A5313
4D0420A61F6AA0C1F7D36D1F00F67457488E52F2FF97AE49DC99A22855EF77F7
2F739CE20F5B13E453DB5FDC3B1859B9B5C19E1C257C677B490F837A80639B07
6F9520CFAFD929ACF46425303E0DC5AE76E35329382BC62D9A06C34EE200F969
7731BDEBFFA59B2A7CDADB80CC0D5BA5C1AA9B63C354E8017EB5EA81CE67BFFA
2F19E41E22C2614EFC317E473648AA466084A4D4E04614C40EDAC04F01683C0C
EC3147ACCB854A74DEB5C64631867140D5134AB6B5C1F425772184557DFC573A
202F6FEDCE377C2C5263F85D216DF3697FF03B5037BBB99513FFC2C1A9AE4309
B34137B90D930FBE87F41AC9F82F704ED0114183DA45B49FBBD7A24A6E3CBC40
A3DCC1D1195D91EE42DE2EBC51858415436086D0FFCF9ABC2827A2E83FD0C157
43C99BFDEE1C06C98575E4DD40F805118FFF45142C28553F31DEA0E7B467FEF7
97D08B942CAC8AE28CA1969114E73DDD3B45579BC85479FC17CF4C543A2EDDEA
27A99976D20EAA3BD8E5624366E6540FE896E01C6B400FEDCCB35F92C8E0EE17
2A83360F2D36241B4171EB71F671BFEB73A7B6A8CA4E6635A3866ED673263D25
AF07E4C4C2316AEDA07CC233639B282521184959AD0C62899B0F39A7F7BB702E
BE9E7D8B7DB8AC8F315F3441B03AC3295131B6B1A41E8730A84DD6524A30DB69
7A483E3BA4362C8E0C3A310D141AA7D2DDD0EF942F94047AE6358215D000893D
9E8BCF2B5D881A346256259A858F706B6AA311D5E9443EFCE4C4A0C4CD88B67A
A4F2BA785515A78B79A67A415C45C1B7B09F5CD3D03431FA13B3304402C41AC6
298A742CB9F041E04E084BBAC89EE56D50E9F9F061715BCE5B7E76F039C4E936
E521A90B2F7F063ACDC7D2C157796BFA550019F4E3C13CA51FB2FDA2B2E47EAF
9B93FAE9794BE25E75EFF87ABF77C67AEDF0067B553B73798DCA60ADFA539202
BDDD3CA40653D35AA88FECB81B6E104147985CC6614DA60CB616352147E88BD4
C45996AC2938222B75ACB0672A3EC2D41AB7F3FAFBC3E31FCC9E7E83A1329B4E
95B70E697A071595CB6D6852481694A0B5F6D163C22DF911FF42DF8F2251827A
40DFD8ED26AE2DC397F2C0F3E7B5C209964A2B27A656F04A371B8BE52C137A8A
F44E2EE4DC9C97C4757AF70EAEE6BB49E9294875DD4507DC4168093D2D96932A
798FF49D4FA6EAAF63F10D34280455D7CCC87ECAADE11CA795321CF426D1DAD9
120C7224C2C6ECED524A95C0CA613F134C3B60F10CAB2FD93AF01DE2034217FF
A45F63AEE91D1DB83CDEBC0D0847C53F2F88503B5963489C3175DB5CA612B4D6
7F849A60F6A5AF6993B5FE1422AA7045E7A9BB9C96AF2B620C6FF35E4E2852C5
8FBFBE458C94707DB28593886985C53B44391B05EC32268B1348906DE538DD8D
6D2A03EAB951FFD58E4936349A3F3B148DBBBE4D1D60A3CA285454D782F19C94
790C21B4B7EBD226881E67FAEC8A131D954D85A2973CEC695FDD214A81042FCD
F3AEC70BDD9C6A35A9B482D9192A65C0756F838624E488C82C6BAAE2FA86B3B7
D3A09203AE221CEBFC1C97DFF618F44ABA5E3BE04542893268208468AAEF393E
9F2A3B7A3E42525D29093AA0277DE63AC5BACF55AB37EC2FAABD18BF16A83D02
69FE3B9085CC680B1C5F19476095F4C3BBCB47FFFC4D81334D762B22C960240E
F745866165E2FDF8E5BCBD0AF297CDEE3DA8F1C751E0C08FA189A4BAACB0B978
A58ED8D62712AB5DB2BE8EA62E5B91104C7E5AC0546FA96E747EB3DB62E30C84
2589D89A115F3B7DFD3CC972B139DB241C1CFB2FEAA5C87086C0066F7DD341A4
30A8FB4A61DCD480594D14428BE9408C1F2374FEDCA87687CC113B930AC1AE89
7B110CC04BB65B787F0CDF6B37AE40CC30C260B1E0CBECC7898D6AC135BFA75A
9C1417263D38526BD44F98FE4268D84C4B1052DE36EF8ABC62C64CDC2D54EC61
4AEAA2AEC4A7853F57FC81B2084563AABA0045D4229078228DC0FA3131E113A8
8E59A4E9F1B5E29E5FE86010C1E336BD6FC65597DB9B12C6005B9B5E7544EB93
9EE4A36676CC7F3DC004D6F4C75B13F2088E986C6C5EC1AFC398052AFA608423
8E9D5B595C359AA32CE755D9DF7B56F50810CE4C8FD286E3584BB89F9F25253F
EEE5F30D3CD887DA50246B87E224B3E8A9F7205582DB32E69AFE628E02FD3DBB
76EF007043D73E3291A7642DC81E608DF2FF576BE5C494D3BA114306C11C46EB
5B300E5010C87F94ABAD0B8DA13B2C930B87451DA8A1DF363920AE7C7EBC5832
5FA7AF78EA136D831D1F89F26B2359629552CC36FD8148AA473B91FD2E68B4EC
B2759DD2629F3F5D3BAF96B67863C9619F0CED19541D050F8B3753478873D8DB
835C0C0894D505B54F4D8E05807ACB6D112338E603449AA564EF2F0095466099
079E88A67715A2F46651E30CB1576E945833ACFA38B4710841BE3879C041BFEE
7CB17B98B3BD659797B79D0F01DFD7AC4C07BB48E90517990FCEE3EA3747D8FE
5D78B14CB024B187376798B31B6BA9BC65D7050D44AF0221BEA2C252AF6CD028
9B9392834BFDFD42D27A4F1B6F97A4A77AA4D8A5A7A106F984B4C3E87F3C7520
03B7C7EBBE81AEDF83A3EAD596449833A2820076F92FC745D8F08ED56490BFC4
D239728A7A2985594927A3BE6CEC2C58E959CF33FB73729C82627CFEED7DF68A
89181E1D004400D81B3BDA157D238FE16EE55979F045637B5DC0788A88849272
0B808DCC5C70B1292F8CA7A8811C00095C673809DEE095DA17723527D35DC130
D56B8D6FD40EAB5619746BB0AABBBF8794F474F37399F7A8C8CFDA9A56CED23B
5C32D968B6BAD74ED287E65B2DDEFF1FF46EB736EFDD72D348A0A6BC46812F5D
4467131D1A1D20E03893DC5B02715525146D4A1ACE95E079B00188CADA78E3A2
D1144C37A9A3CC475177E26CAD6C61CC6DFC6144D250E3525C7A9C0E93C53845
2B7FC223E49FFE1C82724D4DC140C53DD78203989A53DA42B2B4D167DAB0E91E
3CAA971F17185E95A7C251806FD1BA01DA5D815A8CB37BC0678CFCC03D5FC1E4
258785830EFFC52A2BCDA0DC6B0969D391FA8209DCFFB5AAFD1DCA3EAB3B7F5B
837859558C7985A98F2B09AF634CF62570E26FFC865E74410F55B5FAB0B027DB
E706CCE464ECC69088FFE5AEFB5A8E2A6C31619F14354D70BACE74C20675A5D2
F37663C65374F787EAF3CFA44B7F53B0BC4223EAE2BCB0323E0BFD41266BBFC3
A0DCD98BD64BDEAB943353E49FD4E764B326742E867F3AF79CDA32AB64548B39
5913C4322D172B2AEA243109A9D2DD41ACF6D9407B4952C96AA58A130CC0964A
D14295C3C1786622618A4CF4FB382683675C1A41F20AE37AE6B1BD89792141DB
A9F7BAF26E212487DB9B912FECC33A4F5601286712B4D3E7201D5FE90A001E6B
4EEBF513AE93EDBF5C1D21A728BDD2FB653D62AF01310C1AB2F5D83ED0596695
2482A131198525E1B3E3B7F87EAE551F4AAEB20AC69CAFD2C842D64D3D94B1CA
46CEADF497A2FC7EE2D151198E8259A2925D4AF6B87A2BE3E5A4AFE36C9EB7F9
DEC5AE5B6FD125F6E863833E9B4BFFCE395092244EBBBC8CDAEBF402F22142B1
2E31DDD5697C67C54DC08F2C1E1504149D409D5DA78AAC9657D92CA23749F631
8FF7783B8155B5FBE03938BA0FB84ACEDDF666C5DCAA856BEE12408E113D17A1
DAB5D03E4C5E5AEF178D63F9C597C77EC50B3460FFA96EA9EDCC4A5898426C4A
12334B474435356F31EA99D5FCF5B20A372BCCAF55DFAF03832031DBF01899DA
9A610A82EC8BD567C9B3BBBC41E9208B623F875B673A2018D8C97D0911B561E6
071F434E2CDAB989262ABB4F5CFB334EC65C9735A59F4F7C5F1FCA44C2B59DD5
EC7A5523E5C1B18CE8F52C706718A546F1665A58F5D2BAC3C2AA5FF8BA709DA3
F7CC17F2721BDEC3C0C58F5BE12AA7694AF2C2AD438719EA0D0D7FEF1D18891B
8259B89B0760B03E89738B00A359499AE2BC4D3C1FFF29841EFEE8400384EA53
907E4E78C817D93C33588D59D27E5C73F5AF9DD6A3E286696940BAC9FA2FC58E
80FE2BB557CFB9A5D81CC56A2EADC9D8FAEBA1B8F7AB42B296967640E1381E82
F0FDD8C6728AAD41B3C56B15B1383A8D9CB6071CC6FDFE8978B7FEAD3C1DB8C7
481989E6363ECEBD9ADC66F09348E593E59DD97CDEA3625D920DE41654943491
1C61B13CAFEC3E3A9DEE5BE78EA88E41D7F3D952E25E0D16A1B7C8C389CE50D8
CE6FB3EE1CB970389F9ED67A027D1877D812E546C07FC8A8A8BCCA75B287589A
71465E79199B5A1760DEFA102F9C2A02115D3AFA5BE680B833BD5DA3BABA2D6A
314959F5A68D7985981BF6D0C3478A8664DDCD0A7373B216E6BE2FF35BF17A48
DF6071B65833B0DD777601272EC3611E785F470ED8FD29A4D83198327BA7858F
AF455444947E25674446A11D7BB53AB929B4FEA8F8A880B527052E0EB3A70E8F
C385D3538A06308666056E8C70FC4FA67A58F19AF7AB215D41DE35DF156DC607
7301D4073A499EE3F4E3C349D1B8A169B3D392DAB3B80915B1E09B4D1FB4B1CB
67CFFB053683695D14797AB970109C3A8CDB13A5A204174C0D4F1568A69261D7
4F8ED48D73C4D7D7939035BBC58F7968E7253F5FD60EEFA3C51E1AF686C282F2
153F73A2837933A5AE8920DC49A2386F243ABDDCBA9A5A546CC40852FBA3BBD0
C4EADDE57EB8FD25C4816DDDAE48AB140E93393F1B49104F881D88C890CB0860
0DE87F70059421CEC31755C053553FBD97F771D58FD18AE90CFFA68CF355E957
A6DC2873314C0996789EDD4ABBC6DCE1D7E77795BA3A38FB0D326A723648E4B4
3AF1E5FFFAA6645AB3FD2A66DC49B586B26091AE27A76ED574555C9FC58D480E
96E736A2B61329C102B38DC540BADC0713B828B4C2912F7E60FBD5E72BED7A80
1537F064E47C51FC5FB26BE50851FA07FEF6B190785C995717D643ADACA97D7E
5FE1E4E7843AF70E274FDA030E571EFC7D6815363CB8F58B9F131A4567FD8569
79CAB0AA958459982F83554DFBF87DD64719FC1272061FCD2C4B2C1BB4F9E6BA
AEED2005E1332CA84FDAAF5EFA7BF3C165F34FCEB90EF5207FC6FD26EFD93E03
2A923F9AEBF9226BC2160FEBF43638074E162FDE556B22012C4816B5933DB6F8
0218B23AC9B6A2A65DD3AEA87B9CFA4033CA05286D7915639F4D87D14E6B2233
E1A41B6688ED23E26F3E3AF99F344965F4D180405AB4721372E62ECC0DB4A1B1
5D3F8B8837ED28D348918928E0210E4884404A257C5E7DD62AC6057F6D1D4152
C8649C80A764B507BC795E3E29964B35DE3A21636288E251BABF29FD2C1BE9F7
B37A837B87A68C59FE6C880E53B952C24990450377E3BAE74BDFE3E0D3BCA21E
AEF9E6EA5762D187B90F733666545217317C9058DD598758EEE979697142547D
F3C71FD1B32EB4893E897C8E5206D074482BA6BEC9CCF74F04D5F5B8ACA42AA8
99CFEE8F4E559FB2653FECD1CBA4A89C7C71494A30C6297457990FBDAE2FF4D0
FD76C79219038CB789C1AC5EAEA8BC71A6A3F65ECD919C34C9AA613DD08630B9
DB022FCBCB9DC3080A3AC583AEA14C80FD036B686C805017D45A1926ED6907F3
C9374969B5A32B850FBAEF3A9286ED3EF20A3D4575CC4D9945A889E7DB0F325B
EB9A14FC15C047DA9E4BF2C556B3A64F2E0C4956BF15DCEB3EF0CF826CFA1772
D8AD2EF132D00D69402ACE1DDB091195D735AA3E039A6E636A808A66FAE63900
64D00A68EDCD52425719AB5174087A017E64500595FC5BB484E63F000E12F1C4
F12B17DE37999B101DEF628479116B00955B6F67BD11E8E442BF71FFCCBD411F
E369CD9651FD483253C7ABFAA0624438BC6A67AFF4CA6720B08EA2C9BBE62FA2
6569D1BFEFA72B605EB319B3AE43C1B1AD4454E0C30F774B0C2139DA2639707F
5BEAAE16A65B5D637FF3CD672632748627314FC882E76A95699A0735E2FB8D8F
E1C583D1912F0C26E879BA9665545722390A80589EFFABF901790740A8C63990
ED4528859BD07629B926674779094643CF10A456F65F84363908EA7BE8F459EC
13F83EFFB0DD8B944593FBA01A9CAD7B4FCEBB93689B8552B8D89A54B7D18845
A56D90216038D126C80D8A1D013E09EBE9007DCDB16AE9E3D435DB14E70388EB
5A5F6EEA710E3F543A6859A9D8B109AF1C55D11FCEA67765FE56F6D207386928
5E2B13A9C7623D5DB21FB2DB5148AF0C2A8326B0FB407FA4C77D30E94EBBC7AA
6ECB2B9A8CB314865FD16AB337E92EC190C9A9A3503A5A2358C6B7D5DA6A873B
7D4DCBB400DDEDEF033DCBBE209BB7F97C8E1642DE37659BFE652A10FBD21B0E
5B2D3E2B263B919D88A3504CD4A825FB022A7B8D9399A7BA629B74404D9978BD
CF01BBC22DE47A8C7B71DB938D7B71FA82D0BDBABD091D45EE7776741C53F4E9
CDAA012FDA6FE077D46FB7B0B0176AFAA2AD2B0483359A38CA87186A4D4CAA72
4DBE242358ABC29B045B81D5054EAB9325E2F60E6E0430DEA8DA1ED0C30A8E18
1A718C97A6535638C6C709C680779E8A3EEAE6097AF9188C97E2A9E0D5926A5D
49B1C3BA01FE47D3DAAA3ADEB1BF47F1505DB0FA7A87CCB1B72592CD1486ED93
B5DE2D4D6C3C9330A99AF8A6193EDA4A6B9042E2E3A285207978A036CD6F35DF
4DD7E662A839E5DC7FBF75C786ADA2EA3F501962D31DBC1C3EC7B056E33A0D3C
B0BE4CCB90A6000CDB10A393636B1A94532506EC56D49ED08F629867EE714466
1C16CF422AEF327B2EF3B9DCE1A67180A16D21EF4422039DFC863F1219393891
DFF67B6057E791683CCAB224DDA15BE78C6D338629F53844F44E934030995022
D61FA029A99FBB26B9471F52A3A46ECE4FE2FEB8443BA47E877D4E761CBBD6CB
95CE6747D194FDA5379AAA48144B536DEC6CB7F47232F8D69EA7D5705B488B6D
900FC7E0A47AB608502E30E30B157AE1AE65F8167F737ADDFEBFF82E89A36FDD
D8E69725BE5E723DA626EE28D761D6ED8DA3D4D9A71890B8A302C5F461BCCC36
C54298F25CEF502BD90B261A25BDE6516377EEE7B61E0D787790F5C4902F42C2
CBC3F344E15F35CA0C216F3F1A8688ED76EE529E9F3D2A382A57380AA7EDA92E
35D3405FCB417D1A2FDB7019BF7F8969C267AE8035EF484F86546CD98192DDB0
6E8267E309031AF6A7B908149E3749F1283489BE8A4098A1B037D962D272BCFD
F7ED093C112B99F37F96C31DB14A705AEB267F48AEB63CFFC2265ACA4ABFF87C
F61E58FFD3E225E27FB2D5AF9FA707B3090CEF5F011F962EC1D16145C291C1BC
553B0F3337E758102D0B2DAC16F73F973FD2AC0E7527D4E1B969AD23B9782F58
36E2C670DD5201093B96DC5604FB61A002FCEA7FC973DD702758FDEB548F2AB2
4750146AC3AE8F9BDCE652040653A6DE8B89600158DA9FCB89EA39C80D7B1A94
1154330792007B62536076F23BC4347E07AC31FA9DD72D27140E1EEB69F12726
4E59C7FD3CBC250022A6C03912895C197343EC1CD500BCB4F997AAF78EC00A03
694D6170707F8CCD599E37414ACB30A4130F95C91EC492BC9C026B4924EFAA43
4232CDBB7F3FBE06B11063A0BC5745C39792A1B63744DFBB31CD9F66A9A83859
88BE1C77AB0EF9585D8E31423D6E89D88264255DDEE6535C8BEB77A221D2EA2C
C681D4DF2C6D894E8F9842C0D4B9B300795D3423630777C42E6875149A3A1E09
C7D6EF17E0185DC82DFE9F8A98EE6EBAE8FE28B98E5B7C94A18D80C185F47BB4
75940DE0A852CF5099E5A803B9F476F51C934F42F935D93DF4EE61C2B8A5D777
05EECF5CE458E9F64142A3A4E0DB086EEFB8BED0A0D596EEE2F919432DC99F3A
05F0D43C71BA7B2789843451E28EAF64C523E229836A9CB5D273F06FFF6714DE
673E3A2CFB67C3F7F9920C45427516C56D873751319C9B1C8832F77F88C83248
10CBB1D501AEBC26E589F457498E5D9D47EB4B01D91260E1C0182B206AF1B375
EAB2BE91648E87632A03D2EA54BA9AA83CB38C57F04E3C10455156E1B78F9D13
B1EA927B7F7573728BBBFFE7DAAF3E3C98595033CB4F187D9EC650910CFA338D
738E61D6D257FC54D380F19CF116BEEE6686336982A3DD0298F7E6BBF9081952
7298AB90A46B710199F430870C63D5D0803F50986BEC0E5E1E0C866BA7CCC091
3A1025024468E7B4D6402DCACC443CC57B57DF775F4F15BA7838B80C20F718DD
93BE0BB52FBD7DEB86C8CD7A769FD6BD1623B51913FAFE08E0F42FC046B20E08
921B0ACC21BC249CEF2A2E174D0029ADE211882B0ABCF53071861BD7BCBEBEEC
36266208E0E5213F985AE4AFF5124AB99585EE4D4DE5E8B4B955BA7A37B18130
1AD963C219366FA489A6315C7E939F885031E66EFFDFBC3965E45B765B8C2430
028034FF73695EDFCC92350DDA8A5ECE684D1DCAFDC925C7B12FDF7B345A0CC9
622AD20E600A500DBC11D43C307CBF40A777EA38DCF2D4A2F31D38D27C15C9CD
58F31BC029174654A9374748875D16265407D6DA9883B88CDE2F518D6138F2C6
14A2B98B4ADF58E5269F0060D51B7FCC66539992D0B1E84B53E4BABCFF9560CD
48954EEA88E0C636C00C637E3963A3084091D2E63340ED0E457B27A25CACDA3F
564B168D9674EC4383BECFF1AA9A9E334D8810569EEF2F508F7C38AB21A5EB87
499B6732B78A9B772DED5CC7801B93BC9BB7E3B73506A9630E0C2D5D547EA0B1
8425E84831115AB99F7F86CE23BE92DD43FDD208DF3A63C5E64CA77EAC1A9E99
10D999347EF2CA5468B1564079BBAD1B6CFD6CC27C9E87C6409126716E936546
E2E9B8ED6D46B6279E3B00FC607B9607100BC73273D3068D2220E0209653FBB1
D7DD3CBBA98BC31E372966F15ADBA26AC9DA228E9CC0CECB96642ADC241DC16D
2A151139F0EEBFEC020BEB773F86218603150B57D0C12F958F65D7A8556BEC7C
C9F439D3E162832680ABEF806263FAA7401031B3C8F877F999171C9E752767C0
4E4893E50E6E5C7556D259F910ED11F9D8B3A5825B038C3A830157AA73C78C7A
0A0B277D90C981AA94EF2AD98354BFECE0A93DB5E6AB8540E05C73D9A1ABEF7C
C1CA507E0E3AEF10A8E30945C5A8B697C6B330F48C2DCAE65B982D544EB3AECD
0B3AE96832AD1F5E3B2866638BEB4CA88168BF2740460C557C81ABAA8856230A
36AF524BCFF01EFB7099DA2D4F2C1371D5B199A9B6CF06EA022B91660FEEDC93
63A5EC43A160484E843C6D1C7E312C4AFA405B866C282B6DC7D0FC4828756FD8
50BA006F059209C1DE655530AE7A11B8186820143A93574525F6139B25AF8BBD
11A691912143AA345C915A20C74B092AC79B6FD501F79BE75D747EBE6877C611
40A3738EA7EE3980CCD62A0A9BC608B3E6CF75A93CD6ECA9DD2E45760052372B
C227EC69E23391726A2F14E1E9A48FB47F9FD273B9EDF2CF08F1246FFDE9E9B1
05369D3545BF260417463869A9F41D5F3BB2FE504C80AC6B168C82204D73D4AA
E7791521830E4FAEF5B90A9DC98B92C124DD2A1C52D61550EE7C0FA6ED811A26
537C33228B42D8E96A0BA30D7D639024E6F007AA4A107CF865FA5539F6157904
7D172C30D728C4914A0B3C9772E22D030FC47B137796F0A075669B46E0AD2FF2
6936FE103FF9174ED4022D3ECD68A63C40B8145449E3044F52F86A6F476D9CF5
3B30680BA62E170EC46069271328A3F5DAB8F9F3D89C829AA6903C1D5DF257C3
2EF6190FD8C0ADFA3457D13D7048F10E8B014E9AC7FD6F4B115FE8756BF03AD3
824A275DDBA2D3203E5A28DB36515AE8377CBD7230DE1FC2F3442D9FB64A6AFC
B6A6911B2E1B909A766C611BB8D85116217C5E34D8BB7045A39D0548B2A8C65B
FA45122E28CA1B9BFE2F4799AF00DFBDF9389AFB6514522D2C1D78169E05DFB2
9745BF2F5BB8EFEE2191337B0E64F52B551B411D0983661CE1F8F9EB64659592
4EFDD38373B4778195EE3FC3D0F5F94F4AF33E7A2ED0FA880DC70FBDB11B130B
70A42CCA5B8AA09B4048130C645234663AD12BE59EB6175FE3D41CF3044B7CB3
145C5C8A24C1FF6E0B980D5D050C082EC28A5CBDE05BECCD951A02DB20D8C837
9425A2A40A7566E151300D63FB8F34B11CAD691B3E5C9A4018431C50E45C0216
A494CA97F9AECFEBB5F85EF19713FB8CC07C4ED4E57837ED474B4F762E34B7A4
AE6B35A95112F0D64581109FF73FB516A12201BD6388FC17555F5F309F9DF1F3
F4CAB98774E2E9996DC1F27B6F193EC7965B110546DACB64FA6D157CE37B4C7F
8337E4BFA4076085ADDA49E219C1D9E158027E7E24275160D7B94E541689F6EB
4D25242562D52C34D464D993A4F32C5011D0CD68328740645482ACB04536951E
090FDFEB5E764679B19A2A7B68E5B29591A84729FA06096D5A92E284B5E09B4F
D0F24FB87C29CB2267358F83F50C95A83400C0F6F2E3F8EE03A3BAEEF38B7309
2EE2BD6F3F06B5CEBBCEF3B8A189A0E2F2552E939EC2AC0917109FB98118FE0A
94CA23AFD5CC75768200176A73BB1295DB47A5741CA767E287659CD0D2657A53
DFBC92BC853245281E4B54EB445638BA065D7E35DFD25876AD28C0658989BD5D
EF5388047A174885EFE803DC20DE1EE52B682119A81940C5CECA5E15F17A57AE
2AD601154CAB8C89DBBB9AC02DE83C09901483178E5FAEA14FAF1155E72079A3
2322E4F38AD061CDE36FE5879C20C56C86AAE626DE0F6964DA144FC7FCF19D5E
5F88B8B56BCDCDEA464C0A85D6285AE831A642F159C3ADA46D85C2D2A0B41670
5A82440A7C67CDE174A8237A42089F7A1618DBE036F1650160B507B967BC4A23
2E513BDF2F94CBBC240FB32523D225C0851BD6F0BCEE270ED290A4691EED2A71
1498DD993FF03C385E872EBC8F5F9304961F8EDF17AD1A7D2466BED3D46C026C
01EB3B704021BF0953F888B7EA55C75064F61D79C65326DE1E48A0E11E86DEB3
A1E7F2BD4882DCFDEA8C41C10B75E4F9E740327DE4CADFACC964172331233F1D
C1EE20B1C69A3731B6A1FB82DF8FF1A3DE8C2483D9B8098B313470BAE0106F15
258A8066862B59CAEE92C18864708937B6766E80C3EECFCB4E33EF56291D746F
E44D3A9FA2C2771EE9E2CF458559E6309F191386FF58DDDE06DCD366A7B0B335
76C946B53FBF28D62D5E820A744ACA1CA757173FDBC0A494E62219029E32DD1C
17432EFF99A883D9DB1664A04ABF26F081287AE288FEB46B5FBF3520508BFA74
8E474AFB9E42A0650920842AB722759621D017625A9258339DC5E879190896A5
9244A569320CDA8242F0891E3E78D8DFCF7A0EB35A24C8DBCB6DBDC936487B7E
C909A779348F275739E17D67EFB61E56775DBBAA84A8FFECC53659E2C5982F41
2D1D1F9CA91F87DDF9C4052661A3A50CCC4D2D53618598F0006474C32338D9E8
7BA5D4AF043C004D259AEF316E0CB383C2138532B6836AE906EDE0C36771BC3D
AAF0E444524388C03B48C6A3362E473B567DAA57EAC818C485ADE9C2B28FD906
F5FBEEB937CA29EE1C2C6899A1BFE726FF9ECDB00072FD41840BB64FE800852E
45B157430D12A0EB25098568DCF25BD8629FA8841AB08E694C041EDE2077568F
C644CB2237EFA425300DCFAC656D4B12A25280EE156F403458D58887531059EE
D27F751AD281D9149A7F9F526439D55BCE45C9C5ECDD5C1B76577C224017A4C1
51A2F5B6A0EE27F26D55C027857E009105B0D036F01167580E1B1D4A813D43EC
F72F14D62AD81E87A7FD35E9A84F3F36D34F58EB575DDE95E69391213B73468E
EC4C13A5E3AC47C6874D22F93E0AA9121BAAF71041C3586BE732B6CDC18FB058
900061844B9AD1703EA8A589B70E16215F7ED9E52A596BA41A1BDD97FA67C0A2
6395F30ACE8D236EB19C8B95F0B3338169838A2F12F30D5E321D58BA0827F1CD
B98017BEF970583F7674689606B0BE24B88927A2B6EE68A373E7E9B06B3B78C1
E927E36A959BB342259AEB354B8E7B4FA950CF7516727A8B6AC7F4B33C99FF9B
12BAADE1BCEFBE9769862F955AE0274D557DE4573459B2FA9CACE98C0143296D
C5A7717A5D7F2788EF8DF63961A19D8C158DA2B92026F114A673FF1B827ED5C8
0112BB76958C802027CAEAE8EFDC3F79C99D728FF44AEF24B7900E8797AE5582
118239A72CA766371F90BF39BCD40527AEFFE74D7C936F33C09E12EEB39126C7
6A8A8F667B990405E45FE22E210363F91BABD744C8D2AD4ADCCD9151E1475803
1B4C57F04570ABAB9F3A99E3D00FF4022826372D66A4591685813CCD37E1B379
BCBE8538242D1E4B559B5CFC630B48001C9A16A739EA3C00AB4ED06EB48195EF
61E8AA136927B760E3D55A06C2C2E9FAD45C050E7B4A2E7794FE6E87C69D26F8
7D018B3A8E684095D87E415F638E9122B8994E8ECA4404BC43DE2B48DE324F7E
4B2F83584CD8B947BCDEE40D4AF2761891B5809D81B7D6963C5BC0C21A59A9A7
D8809C3E8A7C8BD2880A52EC1D30EF018F85E2AF4496C3B84356E0295D44A4A8
D7EFB105CDE1576C5EB41ED965E33A0C7CADAAAEFD9D2151C71541D65403773A
E6E06C7B56C5CE6135B84A3EC5553D78E0B0BAE02AB75699BA4213313EE9C07F
684A08E039588433D6EB4F13CDF337D9F0145CE908ABE37520ED4436B9674065
5D9637A61043D7A3CF3B780A169AF3907328E07EF180D5B11384C9350F5CC8D3
5E19083D28ED7265891C1457DA46CDED518BFAC8D9AE295A0770FAEF84D6D754
EFAA8A2A928FCD3CE0F35D2FA1892F5E43841219C2A32299B1B76F177D7A68CE
3ABA14F3E75FE22420532D0D3F139CBA0FFD967D0069016CBD89F71A9C523D7D
6D2CEFA3AF605CD80D5D710A22F8515F6EF5AF4B8CCECBC105CE739D5F49DCB4
6BE188BDFC88188BE668153AEE477F1FFB91A7424D2CC4670B6C507BA02C1B40
16FA49042567C21DB7D15841B561E7E42655DFAA2BD2DCFBC4A2F5B06A764F3D
1D7081F904CD8B1AE0060531F0B78178316C23A8A3085FC1DA91048CC633F622
95A1921F3678157D6508620B5A7EC7EF0C3CF9F3BA74D0D4972922D19E671207
B192608078AA8BE53817762FD1221794E6547754442ADB268FF29639A10A339E
2A05DE5B3179BBA41A9A380A6AF5DFCA708BCBD51EF173B9A3E8947C8F73A88F
D907D80BE3FFF469FD7876A40EB7BD6CF1D7DD0C2AFDDD5CAE1E4A243AEC779D
87A837BFE296DF92BB0336A5F7411DAB8BEEBD616CF8CDE8B571040DC1F1D579
7839B8D5CC873BDF1FE0687A58FDB1B15C5E134F053B50D4C26D2D866911B522
99F8D7CF6DEDB2C07C89C5BE6725E96F5ADA1AB6226E0CC1C882E660EF970DAE
E75A1A27F7FA356738D511C01937096E438A973318B93FA4CD0CCED4E84BAB5A
B401ABC9CD02545BFACDB0CA0867725A4BB52EFBBE240436E2C505A15A59027E
1163CE9B1CDBF3E7F12E885AC541B26ECE152F025CAAAA65199B85C9D061AEA9
843A2C51FABE46C5A7CBECD415F50522FBD8EF1A1405C341707F07E0955CF987
2BC9FBB0DFF9789DFD4F68A0636CF318851D00C1BB90A40BFD3AA31BD704838C
110D68EF3261480445BAE07D51B0FC4C56BBDAA49BA950E9B030CBD3BDEED6DF
4626829CE2717060454DB16D8B56B5533DE9A438D6C9A8D2045A7A34294FB043
A901FD56166FB80579A1CA20A3603D42065FF85466754D429F58BC40640B3980
34B6D7DC8EC7E3DDE1CEBAEC5CE21A01CB74CCAC77D3F80ACEE17FBB83446C63
77CAA987A912BE812555FA496C46E1C040E80E269D5466346BF4EC0088F1DE9E
F60BE090BC32809409A68CEFC08EA4D4A87E0BC836A8C2DF40CB70239D69FE53
4E0289F07A31B651E68169EB14EFD995E228BC7B7418048855999686D6ACAB63
B7B438EE3A9AF422491196AF2C7CDE246DBDAB7236FDEDAAD4A91C71A39E7B23
5805ADFB06184A7CA1925F4950F0EAE0517D538F730A59034093C68928E33AC5
7F8991A69F6A51B30A405C90CAFBB46459A4ABA0289CDD67B9EFF97741C0379E
F0887785617CAB295C9A36C870FED9DEBC2A657B12F72090A24CD6E098B0EA3B
C3F874E04DBE5B2683F7ADE888066F8BA5976C0435168F02154B29650365B39F
F1D61D1B7A7E5BA8A8FF0C31C4AF21FFA7648DA19BFCA28A59FD8298A25C1922
89B360C73AA9A46BB0B821F01D80CAD1A0D26E2956288696FA7F85D9E59A18F2
21816D46801632FE7B4A02C5C53ED892AB35235085DA4143288E61FE97554D7D
56310351B0CC2B490C023EE7328672798549E4173928CDD085CB3976EB2A1489
C8ED69F9CF0EA496934F39ECFF9556100E987587F82B4BBF3FE0537EF4CAB08F
CE55BB7BC45C4A7AD53C4B44D725C63E534E33BF234454217CDE8F0525B31260
916CA289BFAD9910AEF8612AF232B034E8EDA6EDD30D619E99AA166D925442BD
E79385525BC0B0CDCE45C2519C0B42AAFCBF454FFD9BBEDCCF11800408044C73
B10300FA0888C52A795B63C16F2BE04B64CCB9DA236079EB73AA5BE29A35E35C
B1EDD643CEE3BEB98D7150825630DD8A7287E4736780F56D21C1D02D39B3B7D8
24EFC6D927B449BEA8349E974AC03D244BF21C6B5586A58901BEA242700993C6
1CE3B16880EFE7587B669B687F2A4585C8AD1B171DE7FD299EF365F3CEF623C5
7A5D61480861A8713F621FD9C9C950E9E69E387E52D1B6969E400A27DED23BEA
4EA2D4E815FB89BA9401E9EC543F635A71738FBF4ED2A9463305275CFD2D1008
3DB09EE88D6926BB568B2834CA216A611D417EEA8173221F19386FDC62E4D7D6
03B52F05D0F5E469E9B72CB1296F04DDE13E9758B500313A7588DC9F28DDD0E9
6BF971C4FD5A375884DBF35BDD53B352B5E61584075E8223441E089C8861D867
A83A026BB2BAAFA9D89F6CBE072723406A327B3FF838EBF93D95C0D27A5DBDE6
B82148BF4CD4FC362C6F5B00457A4B4C9A8D1AB892D741916A3E9B117CE41F3A
1EC15A490678F40847E753977EBD6AA3C55B54C1D137CCD7D9EC163C686A1E71
19D6A0ABCCB59210CC734D98C0B4FBDCB652DC6BEF9208BC2690F4892A0C7B13
D07B16BE7C76D3F53E85E85A828C82E9125F364F793052627EFD213E0BCE647E
750A3F8414A7B81E032F2B747874A5AB75FA91ACD8658F981EDEA5E9DBE53499
637E6D957330437F9D4BD5CB51092646396C72A7B8731D2CDF31634045635F5F
F7DB0686407A0CBAA4036A7DA76B2AF6A63C0E84E910CD77DBEB948B37138495
436C148F55329F99CAFED496326E582BD8AB483711D6BD4935348A7F7B8B91DE
EC28D9113051EB7F6EFC75E624961D583054B59AE14B42EAEBF005FAFCC9B6B4
76DB87ED54E26EB5545383B9735339D900E512C135419B1D3412C097E67CD72C
92452EE8C35EB0C8AC2761A49A1B30EDD9CED1D58F3E8A4B854AEF66BBAF3ABD
3686387894FF416F792A9B62EA045D0D19864DF01DF4AE98053F992A94E0747E
C82573CE7230D8B0C95D4A8EF17DA6AFDDD8B35870FF08DC5088328FCBD6F83C
FFAB75CC79540D5D6854531D03F284B98B4C0D0D74FACA5BE829C0D4C3A00960
0C3A7FE8778B171ECF9A78F767D9B2D70DE1704E8512C9B25EEEC827A0A56BD9
A72C2299E8488E75E41C2CCDBB5F35D7377BBF5CECD604F62BAED191FFB71437
14A9F682C7BC6905D9269F48ECA20A366A7279FE762E39730324581735E707D8
F30611181507695938636284AF3D44297A09AA860B826D67E582576A3EA6E516
7A1F00B57697BEA75310A6D38C7FBBA5EDB346B2BBED7E35CCA312A8FD5C03D6
25F5083AFE07A1F23AB806BEF1F9166786408D3A3AB8A593B2AD049C3358E9D9
408FB89A1E46E39C3E0D8767983311A6633535EA15EF4F762E70B8D1F4C548B7
0043C2A3B5603F38DBB6838B0BC522DDDF530AF75F2870EC2B67D2F11F74E8DC
C1E64719B4EF0C99BF70C865CA90201078144649216B9311FE9B2BDB0ECF9D43
B9D98D07B4682209F849666E7E07C8A884AF79F47385637FFD00EB5D50812189
04956AB85CCD344CD0A1F3DEB9AB3C32235C53F5BD7AD346943223B3D77FBDB3
A10118E7CC1DCE826F0644CED0E6131E487F53A1A715E74EC66217C3D106566B
756257A07E6734119552C2AA663979CA776EA58FA66EA87FFF6B9170E9C3B153
97CA3F782FE9E9A1F0B0099A7157F8EEAA71F8A0D169E273445614D0C9786062
409D8601616F808BC4BFEFE7BA795CB6095BD3352EBFC796F583E4F67C0BD929
186BA3961EA8D859FE7027F268A9602E2A97551F6C6F0BF9F8CA8010FA4306EF
59FCEE4C53D733563D1A65E74D927424D4F94A9F5D7E0C7DA83E85024D5E7033
69A60A397B67BECE4356735A81C3FE0BA3F04652906893BE916F7A36D13B2F85
BF4B5D03D76F2020E2449057F41CC2635B46DAB8F8D2672FBFC53F19D6BDEF45
88739D395ADD6EEF19EBB0C34A0F981A6ABBD3DF6CEFFB7EE5621D6D6953F215
98D4626754795F37B3F46C6ADD9E2E46B6B1D9B209A8230019FCA4026F7C7CFE
7044851986225E85B61B6A3DCD9E0CF616F5836EAD51553724056FAE750F0758
12D242FD1ECECC6582EE08D824AB3F928396ADD6BDDAC07D3EEAFE1B3ED09B09
A92FB1E57E1AE63E2135041B612DEA8384F246BD7EE895088B08CBA4ADE9F329
BEB789FC9DA7A285B740E5ECE29E479EEDE226B96DA3D8CF7EE0FFBEC4B587F6
6F2E1D4A790139C6DE7A1BFF11A0C4D43A5C4883F93BAF0F9354A55BB60D204C
5EC6A739352762EE9B88291A29C900F003835300D956A6C281F93203A9214B50
A7E79B43E7486AF7112FF3B7D35D1EF821A09803BC1475F60D726FE9936ECCA3
8056092C56F1766F614BD515A0773BE561C0BCEA1A0CAF8FA19BBC28B44833CD
1F4987FAEA9F0EEC4A82AA130D1953083175238F4B5A701B6823E62A1EF2FCB2
9720C09598C61292922C33C30B3F750FD2FCAFC8A41ABE10B7BE15854D9CB034
AAC8E8960A109DF6DE7D9B43392DE29C4895EC0012F61CD332D0EB9A775F306B
D114694D49016AD310E0051BE0A22F972FF3129ED0E561494B22DFACC6DFC02B
E68D452ABF624D63272D59C7BE0252AE8A7F7042C7F5062C9EE2A3A4800C6320
75FD240946C0F0A501F57896DE5B537CA1882843B8A4E3EA71E3612C95909A76
EE8E0F863793B4D32FE86A66357BE7D12D17967C8E959570D1FE6BA36461AE65
08F898E50751C6E01BCDF837007FDD1F85A28CE786804C0481CAA05025CDCB53
3804BE26CF23504780B1C5E6DDE9FD247D22DF2248248470B52257D164C31FD3
186F20114AD3BA12284DAAEE8DBAB6728150DE0108EFECDBCB54C32A72902B9A
5515D0956D0B073160458881CE25A83BCFAF75C07C86D3D6F9561D399F876023
E0657506EF8873C157DC9E0BB76B7C6468A90F3EDC589BECDEB303A37D461F1C
84FE4F1B02C63D3F9B8C0DC4BA8266492033C7E73BD4F8FBB0782AF4BA3CE457
DF6F304349D7468A91DA5A32233847F8E5D95B5FCEEEEBD1EA01E7971D7EB07A
E711C6D4BB07C6AA5146065AB2D95693C82499C4B7B5EF22368E0A10F53C69F4
419B399412A626BE84C28E7F102B09C8969E8C2E58511647A24995E2F18D58ED
182F06BE402E24C0A94D562E67B0A884C98477FF4E5D01449277FC728C586440
E7ACA35586857237C222AB256EBDAB99E8AF6DD7CBE2AA54101DD016E1958ACA
162A1CC6473EED62F88B484C5D793DD6B08F12BDD32AD2BDC8B6C9E9AB865BDE
F424521647729AAE01367F091970788041C6957BEAC7E8A6E490952A26312024
9DB89427A463F35D9D87A7CDD8AEDE54DF33B5A093E66A5E84E99B3A5748D0F1
4F3DB6826923997FE212BA45B8847331F99A282790F147A4409E3D1D2359BA0E
FA3A8AFECF8C3427231D03F73E91E05868122F175D895CDC7D7BF709D6F92B96
ACEF29709FC04173274C621E9591F94D6BE1C24204ED2128D1BC8545F43AD731
0F51FA759DAE955069FFC751AFDE03CB012A4A134490B990C8C3978EF2C32CDC
9E4816F87F795412C862A3F5271F2C5F74CFF3DD19B4445F67E3078F40402FAE
B1BCF0C637A77E0FA44C66F99520EFDFEA42243136B202981C825A88D6638123
1CA29EAE7A1D93FA31BB78B7D1EA425CE382A5599F58E0AB8C6D975B0E153255
36FA3302151BE6649328DC3FF45D24E4D50937038AC859EBADD87E00F85E0E4F
D56F0C8C1761AB5D85995F12355BB3913430C802C4B1FEC723FC05F6158DBF9B
F46B6ACC8634C95B95D8D789F709EB480A8708BB5887A37FE396C12ACF68C6AD
FA568C5CF1E71977AEB806A650449E53E74656584913A4C6EB4037135C0BE06E
0270690BBD665D572E1B251DF4C57A23B460D968AB03B589EB2CA02C0D46A512
87374320F26492163EDC769E508D1C2F90127E758501BA4E04F472389A2339F8
A7AAFEF2568D7EE07002E03421B53AF108DF760CF3BDB32CE3C8F8D8E3EC49B1
DEF078588CB0BC88F57DEC7740780B17F6C3D86B52E6B5ED18FCAA96F43AA92C
BA6A932D9E04C9751A6F87A7F9BC14F153F8767CD6F4569B5E472FA8864CBE41
9A281E84367929FD5CEF2A6C19DE6DFA06C4DFF803DECB0EC85B18CCBE4099CA
945B2CD806976F7567291A083DB4579735BA5D25E19E9B7A987EBA917103B923
26715EFD066DA52F52642D7E678AACAF2B1858EB1DA1E0A0206070B794BAEDCD
4DDF75FBA22E41C8A313D73EBF8C5AA97C68B9C840B8956534364C58C55228A5
D2CBB3A77BF3624A234B525733BB7CD25AEB85381DBB3D75AF8D2B78F6FC4FC2
79C26F351B3D1AE394CD3AD2D2E4DAF7DC553FCA17FCD31CE9B6DBA7EB4DE7A0
3112486DE715BA8D9D5F09EFA2F561256E3E38821E992C2590FD3F6FCF371014
9FB6D7AA93E67FED21E0CFC7C678B3ADC0CABB6859724F9D9CF55BB28BCBFA96
A0244E0792611FC1666E32D52EE90F9B3DB37426795EB9271338ABB728212FC9
769FD9CECA6513B3CC8E8F154C5246C3AF38B9F00AD8C04185A3F6CA0B68372A
0BBDAD46DDF443B567CE504440484C5F8FB3C6A7F7C2CC0FD3D1F0EF770FA4E3
0A5E5ED45EF6183132D63D4682E4AD9DD15ED1EDE1CE63E02C1DE930D3FA05E5
416DA77BA167A7B49E20205CED747D69E02D88855082AB94DA84B478BA9BC189
95D2792F1B28FDF015FCCA3F3ABDE57C7B15EF9CA30A122004F6F79E3EE23DDB
AC0E8D1354E24AF29542BD72F9E1CE336063DAE23F00ACA7804B0C463D4C59DD
A455ECB184F7749D083FEE7DD5C95F22BF68DA050306382B4076084152FE4AE1
14B023895D8DC9F9C911D04461CC2FA4BCE869CBC33EE66D4CCE800248F05651
143695B4A8A7545DE8F700A0F4F6DF81FD25DC90A8A8EE988C477D9EF1129B1E
1D77AAAED8D5EFD16FD3621DFAD07FE4FB5C2264499C07CEF9C6BC79DCBCCBA9
CEE82269B4294C3C4A9DDDEE0D7758A5BDCC43A0CAE0F189D780758A8D87443B
93369BB9D4FF5075628642BBDB065F8B6853E457088DFD37CC1CFF3A9501109F
59C272086DB6D3007246790384269A72F9EEA6DEB3157108CAD26FC506E205
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1200
%!FontType1-1.0: SFRM1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94B2175E45529ABB104871618F2058382
30E0347711F4A6885B0EFD3A8103BDFD6D085AB9484989D45C756839F216F3D5
09E0709A2DCB58755BE94CC73853D5B7BE6E1E76FEEF871F3BD4C835314B72E0
DAA0C7304796ABBF09B28298EA664DA8BAC39B2D16573D59053CD1BC4E240D1C
A97C19A0E28BDC25F2B1769D6E773FDE853DC4F08F34E200D9AAFCBD57AFA4C4
C22FAFF18600AE33909142CBD2FAB3FC555F507C6173C0A9F2841E593DF51CF7
E2D279D9963FC18B014181A31928B0BD204833B5B48F8A92F378F926C4E399F7
B9BEB0B0192EA36BECCB4AB20C9FE8EA91D497B2A49D7B91337D170A28D138EB
B55CFEFD3E7308928E76A4DB0CAFCD7C199D2E7DBC7D8A8567D1E7BEA6E5EAB5
D39F87BA1A514F6FD6AAC0274009382A01F835FD4BD711DAC552E1018D7379D4
38A96EAD018CB12244C58D1B9461F55B4A9D3F708B3EE78559783F64ABAEC46C
288FF4E06C8C42D4FEC13B3502C8A45C99D7C9FA49CABF39201ACE06C6DDBEBC
18AB27295641C5D505554C395A7D111093EA3EC2F36B325ABDC391A7B8F1B3C5
4F8B174A9E28B55BC3367C589795CB99776F2B290671E1ED55F8B4DE05B786FA
A8F05680284BD50D9DC887FF5D783A91D930D5576025CCD2128AF690F905E330
D0124D5D1691D8C1ADE532ED8AA881C0D7F84454EE9B9C3C85B1F1706E24C0AF
00B88701B58B320496C2EBA3BA7836495241743313D1B1337F2369F935ED217A
3B6C38DD3E7F2BD3FA0B0E6E66AEE1EB5B155A10640C7DE47E885FAEE7796301
6A1C77555FF8EC6F39C9C7C8FE822A6AADEC5297A293C02937B24C24C75CB605
EB4B1A15DF82CB5F80C0F9D917DEEC7433E52D6DD2B8DC10DBEC0457B1A05586
301AC07E7B68541A0315FCA868A39EA54E631751E2E0C6BB79901D568A32E655
F135A166F5584F6BCC089C4A6A70BF7494F7EA1EE89B9EF4A405DBE5BDE909C6
4012199A331285826BA9E6DF27ABED7158F2F1BDCB9AB9A4078565B4F1871B50
ED6BEA46043DD8A1EFB499969E46B3979D61DD175A54FA8DD24C01A9C24261DA
7A42ECC9337359272C8C9DE795669D6632F498E30A85C938A804FB4A20138D63
3A78A92E5E877362B8257648821E6B9AC3809F953115FE5106981EF8E989EF35
4664E12C842424E029E3CCFBF9A6FF4BAF29CBA1C965364978604DD4B8BFB71D
48A40F623E2050CF509D4AEC5DDE07343CE59A4F344E371AF8C046547AAE0CFD
BFF7523CAF67B7E659ED46A74662CC14D7055754FA57CAB556A21201B5E596FB
6D1DAA80718F97F2805E5A51CFE107F02AEFF2F4F4C41F743CA65C04BF52E36A
A1DFB91FE62A193F3DF2387C6390648FA99C82DC5B3E46AACB526CA50B7F4FEA
B06B7BC8AA3D5831D8B16D2EAF1C9AC5571C98D433DEB0CF20634256E0AF3F99
991447A1E7F7DC36D8B2C41764218F3AA46D4A325F2BD08BE63514AC0771657F
8B47F141E32C494C6AAD1380C87FDB21B10048D8D6AFB7F965EC49B058725E25
52166E388D44150D2490A33F847CC1B654146AFBC5585C31DA3AB8317F8A749A
CFD5D433FCFAD9CBA9F1C77EB89B0D6A68AA0F0890BE5FFA1299B16366C33449
E1F2178BCE3A8297DDDD6244C5958328EB87D5D4AD7A723EC103C4F5163514F4
3D9EF6B8E09A092BB0367F223E8C0E0CD43066F947D41A56658E93EAA9FE65FA
9408ACA26481A48A9E0937D093520A87455633663995CE61372DD818F2A59498
FBDB71B1CB3F6FFF8EB7554F287AF8CE26F100D059D1F7378FB557F6234C9EFE
1B8E42A7261FABD320AB86521CC8A0156D87ED472286FC17724259E9F298136B
48E871F304B4DFCBAA0834E270D51977C31A5F9BB7A43566311B3A8603BDC149
7FA815CF4FE4FAB54449EF116BE6596675E558F1E4CA70E9A403097C212A3515
F304AF551E7660FEB5DFDD8DE8E6B6EDCA297EE6D1ADFEE6997E57945130FEF5
39D23D8D3415FF25D971B104762BD9688F697D963F35EFB019F412683CB0C7BB
B6DA94FF5C951A90ED60140029E624F2ABF054B8C35BB87DA2B8E910A2AA528D
7F527B7F0ED94405E88B663401C62AFDB7DA93149DA75BB9DEA5D92F0F8146B8
F0E983F629AA7C0FE586111503F37269C656CB98E1B528A19A26C10A677CE4C1
39C3529B6A2C1D28C57695C58776D48FE16596E1C0D87C54CE19E72B492AE0E9
6A02AC11F49CC6DCBFAF00934B6DF326025C0746CE52747B94279A47D5686856
89FE4C174CD738FF725F7F071E0D593AA643DBB780EC168C4CC88FF651AE208A
96477E0B285AC71E6FFF8B5A1ED99E4D0F88651114E8AE68BB3DA8E55145305E
CFB83AE2AF66CA4C91F64B5312831BB480D0AB2D7BF06B93BEEA0F175D2CE857
942ABB2470BC1B9F41B0CAE75E44A41A25535F0867405783A94A385F77DFCD02
B9E0D20479E04DC0D62D2E0E8CB4E904FE48D9F3EF243AB2A1A92E649E554512
8BE3879BF4EDA2E7250CAD26BDE8FFFC510D81E771F52946522A5801B23DF993
2325DFDDA18D698FDC2932E9D0E38F376E754A1332D46D158BCC380735F029CD
5BF4BD0572A003EB3EC31F3ACA5708D12DF729A47CAE3EA4DE3699BC04DF4D12
A81F63BD938C78E01F43677D7EC9B53D7DB5B09BA34A6EE9E6DA9BC74BEDA6AF
0524C93074270993CF9706F7674FC839A896ACFBC431C73FF8FDB977A6A9BB2D
9C19FB99AA0B5C35957CF25029AD8F7D4F2DBED85F14FFA5A6F526685D98ABC0
466F8151BFB2829148CBC51C56EF4C90517EF8AF6C244137E8B1D2CD42817660
C7B26D6ACFD62C7DD118C160B3D708E5211033D3425821DAAAB8FD80AAB4330B
2460BE3B28414B71D626BC86497B53F2787DF1D113F94B000D430636A9B06D67
30594F037D53AFFC4360E8E49BBAE66107003EF443EE72EE7DCEDFE05F0D05D0
0DAA7F20723F5FDA9C6CCE02A627B76E2D175BD1D8D3A0BB0490761DA38EB781
9331ED521717902CA5C9EF1202F0E15DFECF3AA49D0A0C82AA88CC9139B4943E
3FD64FB5BC1FF75FC1C671FA1CF98C60E797C1BB70A3FCE0CFF6DDC0422483DD
B019073774C4EB7404E629DD665E9D57390C4220A12DCF925F3D2F28DD67BAED
71F2AFA8DF7BB61DFC403C5338670011232DB3D648918F1CE87A2294A9A7F1A4
96099F1F58E44F4754A19003725640696B370DBD9B7FA5373D168118B170C632
A5CB74684948671E5A5F3E4B9C39D6702529FE220684293040E40D34A4881969
15AE90F7B49BE82175AE419A2BFFEBAC606FFD42B435D380A8F5B79B9C0736A9
02794254617C282208468AFB3B28FDF13E60B9A769DEF6CA9FDA0B21620DB180
17BA750BD72D25045DC76E9A9B8068D5D3E10D4ABBB398FF3B91A2AF7515618A
EC56D711B0187287779143A2580CB20B7C7E7B77781EA5E60B4764519DED9839
55D033876B74F7A70C34F6B63A85294E3324F8A44CC62DDD9ED26FD0F1E4E4E3
1CA5239A449B6DE4414CE5008F36EC17D6ECFFBFCCF21DFD50FA7D6FC3EB33C3
702DA3BACF1E5FFBE9930F4614E64BCC96B578FEC20E7518C87A3E9167F975C4
2E572C3DC31C24AD166CB3962838B2322113622880DF4A64763FDFBC3383CB32
01338E2B67F13C1C7D563C43EC5C923C40A115F6828631D639413858E8AAD6E6
480AF9D2EBAA660AA76761B22CE4DF87FD59A6323AAD6C18BA46F7CC9768F722
0258E5824383F2375ADDD0971663197B371F6583CAC14385B5AD126D344CCA69
ACBD3E99F6EB0F09A6758A8D18AAF603EA3ECA3944DA2D3CB1E792810FC48DFF
74875D87B3CCE2A890495D4FB51D52B8DAF0F445E28FCB3B2F29742B7A5F78CF
F022EAAB02B6FEF95A32846334F0D295E6949E690DC708FE3197A0FAF3A9A8AF
AB2DE0E7CEE1D3F4647DE627EC67CD39364B2C1303C0A8AC110B47301DDA2FB9
3B10EDC7B2ECF6C2B3F8DDA4A87B48989FA2065D15F88E87D45549D8C3184128
294EA95A5A5380E645F7AEA19D55F109D2C51959DC95E7B0AB202B0C6C2CB0D6
8894FBA3D0F5A47CCD4017C1543687049603D8548D437216C95C66E4B7C85F0A
1B008837891D349519C7DE2778858495A5E61B6B52206DF89B127FABEF6FD03D
EDB545B08DF2E44B0F8C22559B2B17B64D32704C43DCAB22E27BDC90B832C1F9
5814226A1BD3994362D449596263FC5B5B822742996D1EE3A9FC0025145E5494
1AFD0B102C6CE3307CD212DC5D24899DAADE9680499B22475838C68FF0151A67
428A2B7DFBC64B942364752BD89C6FE4B519B9FE8F76F505038322EDE8FD1601
F4346D8C9109DED708E1865DC6532A7814458240B678AE18A2C28C10F334BDA1
F8BA092672F7F771B6DC28E6F65FEA189BF65CD68CCB0D68714FFD89156C46E6
07822CA2F168E0E8D95B6A538A594D1951C648D1F75FA0C7E46A46B2BF94586D
07E524360C66F568313DD986B213BB2A7257BADB6D8034A78055B6746E856EDF
01B243AD5C0ADB302000BDDDC2F18D67BFE15D2E79991D7AEF5934AB115D6082
DECEFB8248B083205E35272F2DCB56E4A8051BF677EBDF33DB3ADB3EF462CA63
67220E04114E69DADE7C6681AC7D7A3A56648C90B4FFCFA5466367A223B751CB
40832014D11C367F7E919A234DEC4A98BD0D0FFFD6FB63B365C2CF1E731A2F7C
BA7119D244B8B40C489E0E9B78FF583B35C8F097D8DCDA6E12BC83D95A868F63
39E16DB34296940872FE4BA37E8BAA1C0EF51801ADA133E6B4D9F907F2EE8B28
304D089766888A5254BD7D6C135E026B4AB8E36CE86BE1A5D26523B84CE4C443
F6751A4D10AD415B341BF5205533EBEFC799981A2EAED47071F0DE22F7D2CF7C
7A57B9D7F9B92860C21F0C4FEA515F629F2478912B980D6229014CB7BEABB6B6
F08EABF0EFCFFEAF39F9C9EC92F1DDB6F6D1BA1A812107431FAB9189862A57A4
B3B956A32F93EC5E3A2EAB2BD07F3F3D64DEFAD6BE008B5D69BCDD7F9A183F82
EB2FA5E5B0525FB788B00807F602A7C917267E421D37E8043A2A3A48C18B5AC2
DA8172A2FA4CEC542B90ED215B73B7E30A79BD56905DEEB993626AC309C04587
B5DC6C6BA31CC103BC3689B017C09872153D7F76235EAFD1ECFDFC51DFA9CD1E
B7D96DC444D4237442FE1B54F699693567B7222CCFE9F227B5BB965583F43763
677F45E7C188DAC79275EFE82653823183DC23E00484C793159A4BD8DB748C0E
82E9BC228429BDFB78D96CD87A596157D78D1DF98ED24161F82CEC0550084F40
A2CDA77F04A4EC5576DE55EA27CDA4EE243E8ED92CBB70AEA3C567AACB6CD5BB
DF84C0BC2ECCC74DE4830ED08047B935BF6B04487CE1710A321725AE126E530C
C560BDD8E8FD576FCA0FD0716EFB3DD4C3E93796EC4E7B0293A29C29B8677563
08626093D94D5A7CB82E90175D2DDD3B76B516BE7B6C3D9B3218286DAA531468
932E60C19CA8BAEA8E3EAB553BB62BE540B93BF851F4C6221FBA9A125586D80E
38BE4AD2A892E8AC1E9B54D45BE2E361B4419996E7B389612CFB0BBA61B12FA3
DBBFD9D3BA53873F7E4A94CEF19CD252A1F6EBF7F6DD9AC390BE93C0CFC1F3BC
34B0108680FF0E1B6D925BA8242B9951B9C55684E5F81CFA25492A4509171FA5
1F4C8BC7D8579814488593AAF66B734A3426C8E5694CFA9D42CE9ED2AE839915
410C96D32E0376E9E62A0C8768358E1CD449CFE5278D6CD43B35EBE1B1354266
A57D39A69D33BDB34915CAD4568A1C29C1229C4F9C86ECB6231BE3FBBF0F6B07
11B42AFEBF8F48A4E9C47727CFE77B452D11BCF43C8BE62D25AFAF2F3FE79DB1
4DAE5A39C14B151F900A735F7E0BCDD098906620917821E5B2E9EB154634263A
C88A5391E866841764AF5DF5627AB9042269F6109E69D1B3A6E7253ECB48C7A4
5DF52775CFF1CBBEB778EA651C90D7C2521A321D3A72025A19848C2EE0668D9B
5F0E2186E272DB781E5E437C26A178562D652082AA55647E9B8EA55A038BB54A
DEE8ADA552EAD4E0D3887330D1BBD45920C8B3A280F0C09DB9D4880C15E753D6
8BA4D7008CF5893C2CD7C3BA90B74ABAC8C86463762F823B69309D48EECF0C69
036DE3F20E851943C1783046BBCA2774F27737D5928EEBEB5C31BA48D37651D3
C1504EA11C2F5EB496665AEB27D6DD3839DCF6BD5676761FD5C135C45E7FBCE8
C34AB7880B12DF606A93C6FCDDECD49EA04D85A2B9A83AA56BF10C0DEC146055
FE4C5815E0FFF7BEC42D9834B7611B3E225FDA60794518DA4302A988BC621561
E6A33B1C2FB8B5DCFC2ED31AB2168B3D1B42607647F6EFF89C97B4F78A0A781E
5A356E1A6EE68AA6C934ED4B7B73C650BF1B027D8DB5E98EE43F280DFA2A6006
8CB300F1C6D8E8F0C0C30E2F36255F94A3F489AA0F486AAF9D39658063559FCD
C92516049E8D3451507635B73D239ED7D6C47BBB65E3445A13D50A273A674063
ED52CCD8D9B89E41B02136BC97E2B4D1B82FD0AA18B48BF9E6D0A06A3589E03C
B1A0FF6AC6CEE53F36AE4857093BEED8C005289F6CAEF31915ABFBD6FB37895B
44E7F9AC0D226D7795B6745304CCCC0D26B724B75A212B0C993EFD75D6CE49A0
F38044BD4866F3D7D93D078DC46317E5A5E680269D19302A9052A7AF946D3B1C
A8E2A8BC13AD0FAD9BFD35391A4E564E7FE1F9020A2EA8744C5E50BB3C9470E1
751382871876B0716DE6BC5E10374CF52D90520A343E2E8B10751759BA48EE5F
F547F7A7C29EF7484128BE86B52C362440D67A42531D96010EEB9E7B32CFC272
BE2C0A2AFCF312E015B264090783923C878801F3251B3742FA390353C15FAA6F
7B4267F6536E38A3B38CDA5F14B7F2355EF3F5984F0A6D0F2F2EE0599DE87000
5977FC252F5D6E0891DA51C599E10ACACD6F9A07B3684455F879D8AE5E6207B2
B71655E83CAD37A78321F5101B837609BCB1D3BFC7614952FE4B01793262E820
E813949115DB90A7C40D9D8341AAE6DE18E3262F9391A0ED0E7F2D13BA604600
D5F023CA0C3F42125A26565982B4EEDE885827CA26DEFD56279C687C755EAEE7
2CBFE212137A07EEA25168B07A94906FA355324AAB6D450BF0B3F3342C6C897D
172636D743A4D33F0BD5B5C693F73780AE7CD20E45EED728A8A435E130519E91
2B2918120E0EE9275500B1BB08CE4B28C4373B71A68E03B5E5CC81309BD22D73
7951BD925090B391755F8F6DCCF1D50321133F9DE22E271495E2B761B89E682D
F63665420AF736A396DBAFEDE0943D7088FE3ADCC2931058DE3A29F152078346
A0DAFE9BBDB7BB16431A28B681D114062F458FF43F071B02963883D71B3C1649
74DDAED8D00A3AE571FD69839BA984A38BAEF6126D47E4E00C5CC9992853912F
5FB63901369DE7A3DF57034BF7D530874FC3A9ADAA2069A157A03086B89368C6
47D2D0C66972629414ECB8A5CADF831BD5061B48A05336B06CD0E30161673A6F
51D03964DBDFE38C6ACC76A99D5E8EECAB65672ED471DFA741DAC94750B60551
0C8B5DB66390BD981E4801D8B181EE28542CEFA87A839D70015EFA7FFAA12B25
69F950BA6EF00D5CCA7C13187CA8EDC2BDF64987A92834594DBE1286FD7FC66E
06ACCC9BCB09D831EF664B5F92586FEAFF2AF043B7262FDEDCE72EE0C81515D2
FB653AA5BC47440F392091AB78FEB3A5B2E992A8BC3CDE7C27075C258B458675
A908882A7F1ACED79BF850D5C61AB2FFA42FCA7109148367DD88969FBA58F8B0
7823FE0926718FD377D118D4521266339AE1FC4FF99C29C798D3082A16DC573B
59817831914090843BCAF94E0C4868EDFCE51CA1B3B88A408FAA0CB73C7E63D6
C13840CB92BBA1F67D1D889702BDB306E1699CEA86AC2CA7624AD50EF959B520
F36B815D1055A171630EA0D1DA71F7A677F5C0D54167E37CA1A49A7A8B565A46
7989444477851F68D3900AFD7B9F79EC93E520F089F0B98EA502E0B4D61A3611
651A846D4AA99CB59E42BEA3B7CA2508355C576E1041C312E08C2C8205C135AF
45D1636C8D6C9378E4CF39F4CF139859A5F8DCEC4978DCA24D276B5A3B363C8B
B499753DEAE0DD43F98ECF31D6B1FE240AB64322774340B005271AB557F58438
80349CC74C4398395D60A743289B5086F392CDE3A0E93D890DD7F948BFAF8AA1
79E6D77DA6D918EA507178D7D4994219F7E089DB937DDD11D6091005AFA40DB7
74F03B570D176879F7154DA77DDC0FB1A8FDF06652F9E094A61B295662ACDCB5
A8B55C9C2B22E948FA322B5648FE298BF634726A3CC6C0AE3A13454F0BDB12B7
4D5E6B7BE01EAA8B086D34D2D1F0EEC74DAE372DF999B512A804B72F06CA9935
DD142665BFC8F5B7691CD2A4EDDE99E19E3AFE99FE42A5F6A79C01F4795F2F24
0EEAE5FDC59B99FFC4C87D5449BD4EF1C25CC7131F5E3D67F1E40330D66241EB
FC1AA09EA7D3C5E553AB897E1D4B39909C260FD436684182C9B8FD83A99CED30
F98CF88C98A2F240B3FB7F200A68082FF38F04E4BA3241A8D08B2FB504EAB292
E67B0F12C334D8357276A039A6A0FF1D6E807F71F5BED93B71B5681CDB392882
90A3E7C5B1BB5C93F6244BA2DC47D37F90DADAAEE20CE65F7FEF9FC014BCAFC2
EFD881FE5400E1B16BEFB9883CC9B137D6546F30DB438A9981B1148530F233D6
EE10BE2833B6AC99645B05468A28C650E3F6C38E072A65413582E5DBCC686AD4
66BEBF2DFEB8494E1F95520B005EB3C043C02FADB55E3CDF7C2AE7A3A37E8B46
703833FEA5650A390DDC6170F0361D60BBB3C101F4B464464202A72C182DEC18
D943FEA0F7E7607B46F7D84BC7EBAAB72AD7DFE63F002E5CEDD40DC8860F2F35
6DCA3E1A1D88D99EA8B47F06E321A37DD09153D5C0A73B92182167184725B3C4
A74192D3F0FC9BEEB6844308370B9DDC1F2F9DA4C2E8D072E8F70CFFD833BECA
E49BDBDDC4F3D03DD5529D615F9CC456CF731D6C07A83A5EF321A8281A2A331F
D74B13BB8CDC97B40D88B407AB60CF9BDCFFA280CAA9B56AA7065F69514B8B6A
A528E5D13CA5102ECCDB8736CDCEC853DD25DE13611E35DC55BFC76826BE1AC3
AAE071B00C9F68A2DB1E2B045F0F5011D46D01E050A57ED2A7C4BB81B4F11094
E1C649D036DA3A6DCE16D798DFF53D9EA9740DB0311AF7E973ACFEC6B5950F58
13E3717C31EE4C4D0241446B45F007493B930E8999EF056F9649C316DDC420CD
71666C82B6CF3459860D54CD85616A15C1B84F411D2BB7F9B03FA9EF435A7474
132B4D5657E790A7B4AB6B64C494328B049AD934295DDA32D43C1B5B739B9B68
614C423B41FB96920B02EA988D10DF34E611AE1447F800B841BA87AB6270FFC4
19FE1B820E7D29CD649F2F2E0A441C1BFB73C784A53FB40DA5E8E33C00326BF9
6D4E6D3FD56A5142B2E7573A03320E41A64F88208FB77A6480E97745438992F6
5179EB9DAEA267D2D0BCEBFBF0D9771393F5DFDF1ED421993F727ACDCEF6DF57
26A3656FEC57456870BD7E64EC788BF3DEAD892B3A84A34682F5523DCB49AFF0
BF5DD9786D5D9B4BFF36301C9D89D9E505B30E75216AD5F879BF4942757D6D41
75930D417D1A94B7EE7297D3DF65E84A15081450517FED084B76C9BB8BEF6EFE
726C526388F0D7B8D0DAB12F8782BDE021B4AC26CA6AA9947794ADFA50EFD7E8
02FE062AD8CC1ED675D4E7D946EA7530CC446F6FD2D3927F1E16C68A2F08EFF7
231805F36844D9D3DAD30A7D0644DA444266426ED9FA291402CDB558223BD6C2
D96A0C5214005D2346EB8924226C42E9F15385AEE03F083CF711C982403CB950
6A9A208A83DB3E2C7FAB218E9D5B595C359AA32CE755D9DF7B56F50A8718D3CB
0A2EDF34E1700C0DC10ED188D42E4C93AFE8384FDF9CEE30FA83953E0F942424
FE40329FF3103C0EAF878CE9C3969F826A4AA520DE5F09E5445375D36F7194C4
1DA353D98B8FB3E0B4A356D8FB61E2F17EDC06794254617C282208468AFB3B28
FDF448037ABC5A6BDF5E42A06F81801BC733DD3F447DDA770F069CFA8AF73087
8A978AB3D326C7887803799512DD91FBF55788BCF141BCC92B1DD1C96A089DA2
75941C1189A388CE77B069B1D220E16524FC2F4C014C10DDD53EF3911D24CCB0
08CA1FD50BB9E674A329B079FEAD18ACE918BCCF09972B8FEF35FD8598EB4C22
5CA2A12E50D312DBDF866BD9F8FF5B36958EEF8C6777057D96CFB5B11F423A33
8284B93D12ECB884FF5107FC3B518362B74F7483FACFAD90281BA5F0AE1EE50F
49A5C29E05CD66BC2BF46D68C5D691A7089ED60D619956AA93D0E98DF9D030B4
96A776AE9E4A776570EF74C087435E517C34AE54BBA0A2C5621D6315BF0747C6
5C79A68605066B1F8B78EB25A9F515EF8EBA133EE260F953266090733BA17E43
419AD280AC966A55EE4C859CBF3D382D4C0982FD05B4267E01CA2E6562FF3F2F
1B1AEA0E0A5E5462CA5AB28EF440B1BFDD84BDEDB7D68ACB9C59A1768988AB4B
B2CEC3DDCCB5FC8B92B37E736BBFA3E8112B67C5D78E535773B6C146E4222BEB
3C08E4E7A40999529372E8D31F8730E9B00B70AB8758CBA3A9E486E41AC29119
EF8E7C6FBF4238921677770579FA266813934A141AED382E530B3D68865CAF90
F74C18BA404D1429DADB394BB07F9E39A3B21354871276C33FBD8E3A99A56BC1
D59C82FD020879779C83CF9529AE0F0EC680C178D66F24690263BCE010820874
46F62A90114E68ACC86F56DE0C04E64FF3BBDB734DF2A84CEC9D581AC2E477F3
C98DB49D68B214CD9E3FC7B84C0B4A8233C0ABEA084876A7D9D90B0C39E4F076
F03E74667FB2ECE8E2245CA61DF53C74332E50B28F26151437BA16E930067E70
751E1315ADCA80F36D1870EA4A086B80EA65DC8401FD3A0912CAF0BE9CD4B8F0
593D21B3E6AD802A6A2041ED54BBA43B136A4BB9ADF4A0CDD8747C234E801BED
EB1BA91F2294C919A663307CB98E3F9AE062ED5CCFEFBE73DA265DDA4EF453F7
2DC5293A1573DFAAC2342258F7A50E7FA9B2D2762E135DB9A299B86F6E948310
A945A761892E49D838DB56C999937CEC419D331D717C5419480E3EE933B30F50
8A95F2CFCE2FFF482A2C0774DA8A1592EB66C3B7E95C4C141809D4E9E0662B62
9AB09E72508F7E7F720725E540F26EFC7F16D94F29668DD97D27867EBF9AD7EA
43723641BCEE7E6ED9264D4F53CE28FA346BDAFFE0FFB7EA5BCA52B690F14908
7F807A9AC2FA24EE9944678A9B4639E90BF5750A877001864742058D3F5B09EC
8E0EC17C8149B003E7467138D03FAB36FF0369E3FE0D67E1D56A2F7DB7961793
9102B2C9EC82EEA0E4DACA3ECB3BC62D55749E7442F915EFF45E34E8298F5B49
5CC766E30A4EC37024FD6363FE2914AB97BDAE5715CCAA282FB9933F5D1CB67E
22C70C5A3443D252E839CD09CEE6F1BDF8962E9ECF98B3B891F9D3B8B2678810
D32BB634583E45929610FCD8F7C6C65725AE6BEE6054250130662DB8583C99E1
54C5237762853927848908AE9654E28DF2B6F4CDA183A29060DC66B1225CE244
614623AF5BAB27BFFE62DF149352D3675ECF8FB13AB42B4A789BB01D673486F9
2898AAF23916EE89D24E00C2B730BAAC22F4E317C7A37966F241701DC2730ED5
242D87297414E1A4C7BB3F5E5734A22DCBC5F664CC0FE577EC1636747D180ADF
B747FF39606584C1EA94BAD6729B37A86EE1F6030D24A1867E5BDDAC92179469
494776C1815BDB47AE9F3B4D6F816F18FA7859CBC87F97074EE8721FA196B340
290802013F2595368B42E168B25A3EDA509AA5B12964C166B98E5B6CC39B6C86
FC89A8967092599A2455264EB851F5C5ABB2E0BF420F1B67D8AC0CE42BC50F38
A27CB22DDCE01794A0DFD11FFE0568CD5F6F4D81C7A606E460D3C322825A6826
4F582AF3E92233D4278F733FCC87D22E01F2C8C2A3D53472C27E4CED2A7C44CC
9D414909400828DDD9D4DAB1EA7666B26DBF40E599251B2E5E71B65D2CB934AD
114670DA98EAD4B7B355277AAC5B3ACE157CD185212C8AAF24C994207550EEA3
B5F4A1F172D5DEF581B4C4311804420A417549076D9CBD1D989696F7838779F6
4E330BE6645090BE5F616F7A85D913353EB3EE57CFE86AB4B7849578280DE6D4
9363AEAC84942FC4DA5CCFAABA7ABCC70994C8FE2CDE3DA6FA91EE67A20FB86D
CF3C8BBD0ADA6CFD7830F9790E46F6222D349AA2BD3FBDD5C3DA66E16F60E863
E117372AB5A7AE3DEC62945F17639594978F9D190259D4D4D55D608B40DC5A2B
158E6ABD33F87123DFC09083E5F3F09F0CE84EF90FC7EAC8D4FF0BC490E79544
5548E7C05309A3593068B9A3B70C7882DC99445FC4AC68610333333F49566CCC
68F0B12C09AF0DBA36392210DF210469BDCA4F81B44BB6966FA80D452FA3BB94
4C59D9C358B4AD946991E71ACEB4050288E7D93DE95F0F1B0E60EAA1DBF776B4
9B763F3E5A40D3FC0E44705C68A9770A57DC3790E41B82574FF241C87DC8C47E
C5F1D0039A1FD2F9AD3AE6BCDE97F529AED2D01E4A0C3C7FDC7F11251F22827C
31329B86FFAE76528315BF2EFAF21866BB555F2A7005DDC3D8609A93EBE59FF7
977EFB7CCAA7012F7B597F4B74F73A18482888DED3FB9CB0BB813812C7F733E2
5BDD1BFC9A7A8CCBD6BE7F43012D8909FDAECE4B4031BBB9FAEC244372D3E06C
43571A2A20A847E0731148DA2CE14DB7794EAB813CF87B02428B0AC5D6C2283B
76F48CB001E3E523DF212ECE459E78D7092967ECF7E12FF5BCD21780C3DF92F6
366D1F6E6D064E2801D3A80D7312F7752EE61E38C2607AF1299D8AA24F2B06C7
AEF5773EF6129299D9B989F6C29B9B89D603835B029B8555539C14ACE140C9B6
FE57D3EA70948891138B96990861957AF37271A0AC54839C47AC00764271EB40
B8E31BFDD60B8D9864081F529E461897A604CA655575ABB44180AD2C66F1618F
66A01A165C5F08AAF9E5E08AB993ED5602BFF70718040EF769D47B9EC8C931F0
7EAC115FDC3163068D2E31BA746CF32A0D33D2A9FB5562332A37EFEDD6D8F9E6
F2B9F4B96B92D79876C2F49F4D3347BDDEA6443F4DF6472F4CA1F8D554948928
13F3EC84099F22F4BF8D81D77AD107CCD207D2F803E55536ABB56446FF742665
943252F7210D6E5C67338F0CA6BB6FBBA8FB36AE8D6A397B946CF273DF5B554D
D423A018692ACA34DC813ABECB5A90A316502D79E4CE381AA6BF2C04B25014FD
D434BFC0993BC126338968552E63618606CF60C15032820882B1CEF62D9B8018
F09CB41D29540F7BA6458D44F45573BCE95567337E154B783ED844031515FEC3
503C693AFA514F53F530D5702706E45DE839FCFEFE7F12EABB51B0414293A6F7
AB548B4531E687A03348C45C8FF2C0B50090B6ACF75B798D015D15D3C2315B23
955D275C71640B1E9502FCBF4B0B1B898D5C7689C31F39071C405614D35BC526
2BB3D89B1BD9DA4455ADECAE6B7318D09F327DA54ACB85C4DA7FC3477DEB0D47
1A0D4E28862203F21E2466E81B5B3F6E47A7F2E82201502FF8F45AFEA80AD5D6
AA74CCBABA2870269043B0D260F8765616C75C98EA783BB2A5AA9439FE409681
2B2E96B41F31DE25837204790507E5C1BE4685C7A3385783D6B276934989B29A
6E1AFC1A90611176F62DF19D6830C1D477E3DF869C473D18A7D02A21EEFEE24A
F9058B9A81BDAF9CC6847FFDA2AF5645A7F8652034006239704F21CAB86F1C15
A7855181A56150CAD3F3EE9AEE01B918928EB9B340D50AC50061DD44DE4333BD
AD697AA6713D63357750A904542FAF9A5984DFD7D53CEE6A96D307A3B167BAC6
012F278614E387F11EE3AFF266AAE1C5CB639948BAF1522605AE240E424D6367
F886D447547A99AD5E3B624F62C0CC316F5CCFE5981D82CE572F9771627AE671
4618F00973FAB6FFFA89EAE82310393035BCAB21E50472ACC0733F543EC2A9B2
8320C0443921FED194994631D9F59B84FADDE0A0CB09BE929C0D7628883E9D2D
ACC736E6EF9172EC9146B0A5F778A9104D8462389308E4234C257530F9A46C60
7DF2B1BA7DBCED56EDBDD5D8942C4A0F76C9065189E6C1CB6FB851F6F70C3716
E236AC001F0BD863102BD21EB55E2C0C67D6B246E9DEDFD919C3288FA0BB49F0
E17F6427788A414ED28B975F466382620542722D93CCC0673033BF70A617E8FA
2C2B9174B2A52BD5C06122456A305A917A17ED000AFD2AC03C4BD5DE0B5D6639
1ED9FF102B3D45BA3AD19E2E70549B6ACCCAA458A14A80D152898990E40A8544
F6B0A43361414768E60B98EF0292A860B9A01892A39FB0D03A8AAF0D02795FC0
8782793FFC28AE035AF268862EF7427636E7CC82099F8E1D9610044D9F6A34B5
E44F2A17C8B12647558B689176EAE83F1F2660D8600BB95715E0CB1B673F56A0
9B87FA97B20054F41E68A04B042F51E83E4853686195A09CA2E46A637AD3E4F8
FD5E9DBF1819B32876C2EFC5C9BB80B769A23E8381EB9DDC4BC92403822FF522
A67E2182A215F73C43CA15FE3917B0E9224E222B50422154E84ED1210A6C8946
B280BC271E611AA1FD588810DD8D23B27F83AA665E7F9D07B3D50F58D6D0EBCC
16AA40EBB0F96C3AC184C4B4D683F8EA33263A04394CB362E2EF6C1E7A6C6AB9
49B3F590727CDA0FF28135847209A28FC587F23D6191634960262C0C4A9D3FC9
A0BA2EFCB747DEA59CE4B999B106C6D5AA375968A6A072C1BC2944F7CFDE1227
AC9387B53BEF4D1225089F1D0B4A2809618CF8A62DAE70C832EC783648E0827D
AE3A1CA68886844992EF1F6F5512558A28C86805C20BE7D53AAD83392C97E88D
78A464DB44722DF4C88FFA1B270E32CEDB92515EE7237F039E6815BA922BED59
FDA69A0E587C4070AC9CB6809B9F0736CEAE4DD95CD6A0F9A25F8720747AE346
484F9FA987E6616FDD48715C63B7840838D843A4021FC40BD4011A2DCE8D4028
5F2636B9BF3CA0FFD310C00927F2BD6A773F715838A55BF126183C81DD0D740F
D0B6013455F660202CDACE009710D93530D7869541D650B634D9973D0FC69600
EF0F6704CA27D7F6F804EB8CF48FF6CC880876C81911E6A53936696B87887786
97E236DEA85387B189DF8E0D0D305AC317F5C4C90B8C715BC2EAB75DD204B153
0A27EB1759CE8CD40B9B257513008E40D0687C9C8EE8F44F236321CF5C28E81E
94F9F8278D8A4947326C2AC55132FE5C9FD47785A89F28EF310C59ECCCB994FF
9AF7398771282DD44C18B1E07F46961DE91112A3EB5C7FFD41DC76594224433F
556A785882A729783BE2A6AFD0D57853E6E3BD5286EA36F3F24CF1FABCBBE61B
2F47EEB704D2120D3E44FB456179C4BD4CA8233AE6E66C078E7EE362241A58A6
C9C7D0C3CF699DDF33A214042D8AADEA61D3D936A139CC6AD857F6FA43C84B2B
407FA34F8C8F73EF54B5F059D1E0A150F28043C41AAC0AD2036D0643905B9376
9E0962BFF1768FA29659BC001E759A39A6943257DFA4F19CF06A6A68A0B741B1
92372A0E843F09F277D99AE976ADAE4F7516E7B1DED8404392B696EB3B3642A9
6E974ED9F9FD1B01C357AF0738665296D6375D415530309C3D28824CF16F8238
318E1CD9F65D61E72C0FDAA25A7A0BC6E5AB12F871BFCAF0ACF2DC8F7C32AE58
814B0FA756543CB64E13B9BB182715A06569BAE1E1F84766FD5C5DF5C702E817
2FB57B7E2B117577F9734C5946B8B133779B264AC96ADF5F3E0D5A633C01701B
92B7CC1706DDE90FADE0C1C2A136E09143542ACD85D10E910E90508490581D21
ADD7281F075ECA1E9C7794ADFAC680BD9E488C50910A1D86998EED9AA712AD86
E43B15A3010C6EEC606D311675E61238C5EFCA6D255BBC93847D41D97E9BF00F
9EC472DA91B48637F610028167D7AB4C678BBC0627667A86E8E3BE376C79EA93
B031D652B132D3F46BE52E03C5C4340000CB873B8E962BDC7EA58F1ECD1B33C5
575121D4FBFE7ACF8DC8292D089133DD64D0BC011C8FDBD4BE2E35F7F8AC5DCA
3312132D0874201D5C9F795FA4DCFBB2DC726804DB77FA82B746D14C024B508A
3BF9D8A777CE2B30BA367FD9D4545405DC055D611963D13396CF1CDA39168C60
1B01D3A483F24B981DED45B7E9FC22588BD7C30E2057EFA8AA3F0F6054861DFE
29784C79EB943790B781F766EC5C41E270C7296A8E29B0252E2C205F0C577660
CABD5AFF32C4855035CCF7398AE9616056DF4F6F19C7FDE98AB44C940B655A8B
B165FE7DCC9E7C6B1CDE79404929EAAD856731161BA89851A1F0A09530E9B65B
0D595825330613F7B849E0337AAFE709FD485EEF9735F7EB9E14CD46A30AFDD6
145835A0677CAC570A4814A4856AFA0CDCF5BE54520AF0C48473A7728F11D846
F1FE35BF889894394CC2E66908CCCCF6C3E7EB82DC274DD8BEC865B8DCC80A72
D36E54EE27E0C975DED286BACA4CD0A7851FD2EF66D5F4BD2CFEA702D8D78805
0BFD32E15E4AF82BB7D65ACCB7B1174786A64076198F2E7CA3BF87569F4BF7CE
5A528687F7B360C9751C02DF5E68CE6CE47985EFAC6648E08D0B8533A4A30838
4E8B5524827CC3688538E604D766DFCD84042C5CF0A6D86F29FF239C561954A0
691B4F9D44268BE0D570A1CD1029DA95E15403D02ED0CCC58122F4C45335CCC0
DAEAD1D2100B4C8691575BDFBFE1332729DC078BF64B7B641171AF04401044C6
31ABC3DF285DFF7F6729D682021FAF9C4A2B88C2D5B6C4B503929D2E87714763
5DF54D4BCD6F3921F9E8D8289B51A9EE315802F5B583B02125844342B508ACA7
3091CC7B7436FE7B2B95D2138D638BBC87D1204D674CFCE8B93682C0B5C9F69F
198FFEB9E0753EA612B3149588CDB39C5F33BB44099014E40E506BB41BECB02A
37763F71F0953DACEA69B6B12C073E5028217055A7CD3238F28E9E28460B8030
A14BB70E07FBC828F7A07CEE011C22E564157032BBCA954A0C1CF78260043BA1
03CCDA4DD93DFD010AC9B19C6011A14C334D22788ECE49EC2A2353B92D478D2D
3570A5E9696AEEBCE4F831261ABBBB62886EF7F7F205
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (stage_10_avril.dvi)
@start /Fa 206[100 48[77{}2 99.6264 /CMSY10 rf /Fb 204[35
35 50[{}2 66.4176 /CMR8 rf /Fc 135[55 17[48 3[41 51 97[{}4
99.6264 /CMMI12 rf /Fd 194[76 8[49 49 49 49 49 4[76 1[38
38 40[{}9 99.6264 /CMR12 rf /Fe 22[51 114[59 62 44 44
46 2[56 62 1[31 2[31 1[56 1[51 62 50 62 54 12[78 14[74
69[{ T1Encoding ReEncodeFont }18 99.6264 /SFBX1200 rf
/Ff 22[51 107[51 1[51 51 51 51 51 51 51 51 51 51 51 51
51 51 51 51 51 1[51 51 51 51 51 51 51 51 51 2[51 51 51
51 51 3[51 1[51 51 51 5[51 51 1[51 4[51 6[51 1[51 51
1[51 51 1[51 51 51 51 51 51 51 51 51 51 51 51 51 51 1[51
51 51 36[{ T1Encoding ReEncodeFont }63 99.6264 /SFTT1200
rf /Fg 137[51 54 38 38 38 1[54 49 54 81 27 2[27 1[49
1[43 54 43 54 49 10[73 2[54 6[61 17[27 6[49 49 49 49[{
 T1Encoding ReEncodeFont }24 99.6264 /SFRM1200 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -679
a
SDict begin H.S end
 -372 -679 a -372 -679 a
SDict begin H.R end
 -372 -679 a -372 -679 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-679 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -364
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -364 a -364 -364 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -364 a -364 -364 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-364 a -364 -364 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -364 a -364 -364 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -364
a -364 -364 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -364 a -364 -364 a
SDict begin H.S end
 -364 -364 a -364
-364 a
SDict begin 14.5 H.A end
 -364 -364 a -364 -364 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -364 a -217 -264
a Fg(Lien)33 b(utile)g(:)f(p)s(our)h(tableau)f(v)-5 b(ariation)32
b(a)m(v)m(ec)i(co)s(de)f(simple)h(:)-217 -122 y
SDict begin H.S end
 -217
-122 a 0 TeXcolorgray -22 x Ff(http://www.altermundus.fr/pa)q(ges/)q
(down)q(load)q(s/TK)q(Zdoc)q(-)t(ta)q(b.pd)q(f)p 0 TeXcolorgray
2657 -213 a
SDict begin H.R end
 2657 -213 a 2657 -144 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://www.altermundus.fr/pages/downloads/TKZdoc-tab.pdf)>>/Subtype
/Link H.B /ANN pdfmark end
 2657 -144 a -217
213 a Fe(Ecrire)i(des)i(\351galit\351s)-186 461 y Fd(\()p
Fc(a)22 b Fd(+)g Fc(b)p Fd(\))102 419 y Fb(3)170 461
y Fd(=)27 b(\()p Fc(a)c Fd(+)f Fc(b)p Fd(\)\()p Fc(a)g
Fd(+)g Fc(b)p Fd(\))850 419 y Fb(2)170 606 y Fd(=)27
b(\()p Fc(a)c Fd(+)f Fc(b)p Fd(\)\()p Fc(a)g Fd(+)g Fc(b)p
Fd(\)\()p Fc(a)h Fd(+)f Fc(b)p Fd(\))p 0 TeXcolorgray
0 TeXcolorgray 1950 466 a Ff(\\begin{align*})55 b(\045$)d(inutile)1950
586 y(\(a+b\)^3&=\(a+b\)\(a+b\)^2\\\\)1950 707 y
(&=\(a+b\)\(a+b\)\(a+b\))1950 827 y(\\end{align*})71
1078 y Fd(\()p Fc(a)23 b Fd(+)f Fc(b)p Fd(\))360 1037
y Fb(3)482 1078 y Fd(=)83 b(\()p Fc(a)23 b Fd(+)f Fc(b)p
Fd(\)\()p Fc(a)g Fd(+)g Fc(b)p Fd(\))1218 1037 y Fb(2)482
1223 y Fd(=)83 b(\()p Fc(a)23 b Fd(+)f Fc(b)p Fd(\)\()p
Fc(a)g Fd(+)g Fc(b)p Fd(\)\()p Fc(a)h Fd(+)f Fc(b)p Fd(\))-217
1368 y(\()p Fc(a)g Fd(+)g Fc(b)p Fd(\)\()p Fc(a)h Fd(+)f
Fc(b)p Fd(\))360 1327 y Fb(2)482 1368 y Fd(=)p 0 TeXcolorgray
0 TeXcolorgray 1950 1150 a Ff(\\begin{eqnarray*})1950
1271 y(\045$)52 b(inutile)h(3)e(colonnes)j(alignement)f(autour)g
(\351gal)1950 1391 y(\(a+b\)^3&=&\(a+b\)\(a+b\)^2\\\\)1950
1511 y(&=&\(a+b\)\(a+b\)\(a+b\)\\\\)1950 1632 y(\(a+b\)\(a+b\)^2)h(&=&)
1950 1752 y(\\end{eqnarray*})p 0 TeXcolorgray 1926 6013
a Fg(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-679 a
SDict begin H.S end
 -372 -679 a -372 -679 a
SDict begin H.R end
 -372 -679 a -372 -679
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -372 -679 a 0 TeXcolorgray 0 TeXcolorgray -217 -264
a Fe(T)-9 b(ableau)38 b(de)g(v)-6 b(ariations)-216 -18
y

 -216 -18 a -216 -18 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -13.20375 ] concat

 pgfs



 0 setgray
 -55 -18 a Fc(x)-216 -18 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -37.91972 ] concat

 pgfs



 0 setgray
 -198
-18 a Fg(signe)34 b(de)-122 102 y Fc(f)11 b Fd(\()p Fc(x)p
Fd(\))-216 -18 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -76.76027 ] concat

 pgfs



 0 setgray
 -216 -18 a Fg(V)-8 b(ariations)-76 102
y(de)-122 223 y Fc(f)11 b Fd(\()p Fc(x)p Fd(\))-216 -18
y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -113.38724 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -21.2601 moveto

 255.12128 -21.2601 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -63.7803 moveto

 255.12128 -63.7803 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 63.2912 -13.98416 ] concat

 pgfs



 0 setgray
 -216 -18 a Fa(\000)p Fd(3)-216 -18 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 119.98485 -13.98416 ] concat

 pgfs



 0 setgray
 -216 -18 a Fa(\000)p
Fd(1)-216 -18 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 181.32777 -14.4823 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(1)-216 -18 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.02142 -14.4823 ] concat

 pgfs



 0 setgray
 -216 -18 a
Fd(4)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 67.94048 -46.37245 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(2)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.66144 -45.50903 ] concat

 pgfs



 0 setgray
 -216 -18 a
Fd(+)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 127.56062 -21.2601 moveto

 127.56062 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 124.6341 -46.37245 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(0)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.25815 -45.50903 ] concat

 pgfs



 0 setgray
 -216 -18 a
Fa(\000)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 184.25424 -21.2601 moveto

 184.25424 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 181.32771 -46.37245 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(0)-216 -18 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 208.04868 -45.50903 ] concat

 pgfs



 0 setgray
 -216 -18
a Fd(+)-216 -18 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 65.94792 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 67.94048 -107.40958 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(2)-216 -18 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 65.94792 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 67.94048 -107.40958 ] concat

 pgfs



 0 setgray
 -216 -18
a Fd(2)-216 -18 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 122.64154 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.6341 -77.46248 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(4)-216 -18 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 122.64154 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.6341 -77.46248 ] concat

 pgfs



 0 setgray
 -216 -18
a Fd(4)-216 -18 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 79.5465 -98.97365 moveto

 116.7598 -79.31372 lineto

 pgfstr

 save

 [0.88722 0.46875 -0.46875 0.88722 116.7598 -79.31372 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.6859 19.13676 174.68587 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 176.67842 -106.4133 ] concat

 pgfs



 0 setgray
 -216
-18 a Fa(\000)p Fd(3)-216 -18 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.6859 19.13676 174.68587 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 176.67842 -106.4133 ] concat

 pgfs



 0 setgray
 -216 -18 a Fa(\000)p
Fd(3)-216 -18 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 136.24731 -78.12149 moveto

 168.78825 -95.02858 lineto

 pgfstr

 save

 [0.89084 -0.46284 0.46284 0.89084 168.78825 -95.02858 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 233.10225 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 235.0948 -77.46248 ] concat

 pgfs



 0 setgray
 -216 -18
a Fd(10)-216 -18 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 233.10225 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 235.0948 -77.46248 ] concat

 pgfs



 0 setgray
 -216 -18 a Fd(10)-216 -18 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 197.59023 -96.13307 moveto

 227.20464 -80.7466 lineto

 pgfstr

 save

 [0.89084 0.46288 -0.46288 0.89084 227.20464 -80.7466 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore

0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 2118 117
a Ff(\\begin{tikzpicture})2118 237 y(\\tkzTabInit[nocadre,espcl=)q(2])
2118 358 y({$x$/0.75,signe)55 b(de)d(\\\\)g($f\(x\)$/1.5,variation)k
(de)c(\\\\)2118 478 y($f\(x\)$/1.5}{$-3$,$-1$,$1$,)q($4$})2118
598 y(\\tkzTabLine{2,+,z,-,z,+})2118 719 y(\\tkzTabVar{-/$2$,+/$4$,-/$)
q(-3$,)q(+/$1)q(0$})2118 839 y(\\end{tikzpicture})-216
1339 y

 -216 1339 a -216 1339 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -11.0782 ] concat

 pgfs



 0 setgray
 -55 1339 a Fc(x)-216 1339
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -29.41757 ] concat

 pgfs



 0 setgray
 -198 1339 a Fg(signe)34 b(de)-122 1459 y Fc(f)11 b
Fd(\()p Fc(x)p Fd(\))-216 1339 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -56.21266 ] concat

 pgfs



 0 setgray
 -216 1339 a Fg(V)-8
b(ariations)-76 1459 y(de)-122 1579 y Fc(f)11 b Fd(\()p
Fc(x)p Fd(\))-216 1339 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -85.0452 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -17.00902 moveto

 204.10854 -17.00902 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -51.0271 moveto

 204.10854 -51.0271 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 49.11919 -11.85861 ] concat

 pgfs



 0 setgray
 -216 1339 a Fa(\000)p Fd(3)-216
1339 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.47427 -11.85861 ] concat

 pgfs



 0 setgray
 -216 1339 a Fa(\000)p Fd(1)-216 1339 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 144.47865 -12.35675 ] concat

 pgfs



 0 setgray
 -216 1339
a Fd(1)-216 1339 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 189.83374 -12.35675 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(4)-216 1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 53.77324 -37.87209 ] concat

 pgfs



 0 setgray
 -216
1339 a Fd(2)-216 1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 74.83145 -37.01044 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(+)-216 1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 102.05423 -17.00902 moveto

 102.05423 -51.0271 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 99.13306 -37.87209 ] concat

 pgfs



 0 setgray

-216 1339 a Fd(0)-216 1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 120.09676 -37.01044 ] concat

 pgfs



 0 setgray
 -216 1339 a Fa(\000)-216
1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 147.4117 -17.00902 moveto

 147.4117 -51.0271 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 144.49289 -37.87209 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(0)-216 1339 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 165.55592 -37.01044 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(+)-216
1339 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 51.77771 -81.06009 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 53.77026 -79.06754 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(2)-216 1339 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 51.77771 -81.06009 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 53.77026 -79.06754 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(2)-216
1339 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 97.13515 -66.70183 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 99.1277 -64.70927 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(4)-216 1339 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 97.13515 -66.70183 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 99.1277 -64.70927 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(4)-216
1339 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 65.51495 -72.42958 moveto

 90.96059 -64.37364 lineto

 pgfstr

 save

 [0.95515 0.3024 -0.3024 0.95515 90.96059 -64.37364 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 184.92355 -81.06009 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 186.9161 -79.06754 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(10)-216
1339 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 184.92355 -81.06009 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 186.9161 -79.06754 ] concat

 pgfs



 0 setgray
 -216 1339 a Fd(10)-216 1339 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 110.94211 -62.26614 moveto

 178.60553 -72.97786 lineto

 pgfstr

 save

 [0.98894 -0.15654 0.15654 0.98894 178.60553 -72.97786 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0
TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 1655 1006
a Ff(\\begin{tikzpicture}[scale)q(=0.8)q(])1655 1126
y(\\tkzTabInit[nocadre,espcl)q(=2])1655 1247 y(\(espcl)53
b(largeur)g(des)f(colonnes)h(entre)g(les)f(valeurs)h(de)f(x\))1655
1367 y({$x$/0.75,\\footnotesize)57 b(signe)c(de)f(\\\\)1655
1488 y(\(0.75)h(hauteur)g(ligne\))1655 1608 y
($f\(x\)$/1.75,\\footnotesize)58 b(Variation)156 b(de)52
b(\\\\)1655 1728 y($f\(x\)$/1.75}{$-3$,$-1$,$1)q($,$4)q($})1655
1849 y(\\tkzTabLine{2,+,z,-,z,+})1655 1969 y(\(z)g(pour)g(z\351ro)h
(avec)f(pointill\351s\))1655 2089 y(\\tkzTabVar{-/$2$,+/$4$,R,)q(-/$1)q
(0$})1655 2210 y(\(-)g(pour)g(\351crire)h(en)f(bas)g(;)f(+)h(pour)g
(\351crire)h(en)f(ht)f(;)1655 2330 y(R)h(comme)g(rien\))1655
2451 y(\\end{tikzpicture})-216 2483 y

 -216 2483 a -216
2483 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -13.20375 ] concat

 pgfs



 0 setgray
 -55 2483 a Fc(x)-216 2483 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -37.91972 ] concat

 pgfs



 0 setgray
 -198 2483 a Fg(signe)34
b(de)-122 2603 y Fc(f)11 b Fd(\()p Fc(x)p Fd(\))-216
2483 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -73.21693 ] concat

 pgfs



 0 setgray
 -216 2483 a Fg(V)-8 b(ariations)-76 2603 y(de)-122
2723 y Fc(f)11 b Fd(\()p Fc(x)p Fd(\))-216 2483 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -106.30052 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -21.2601 moveto

 255.12128 -21.2601 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -63.7803 moveto

 255.12128 -63.7803 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 63.2912 -13.98416 ] concat

 pgfs



 0 setgray
 -216
2483 a Fa(\000)p Fd(3)-216 2483 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 119.98485 -13.98416 ] concat

 pgfs



 0 setgray
 -216 2483 a Fa(\000)p
Fd(1)-216 2483 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 181.32777 -14.4823 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(1)-216 2483 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.02142 -14.4823 ] concat

 pgfs



 0 setgray
 -216 2483
a Fd(4)-216 2483 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 70.867 -21.2601 moveto

 70.867 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.66144 -45.50903 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(+)-216 2483 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 127.56062 -21.2601 moveto

 127.56062 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 124.6341 -46.37245 ] concat

 pgfs



 0 setgray
 -216
2483 a Fd(0)-216 2483 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.25815 -45.50903 ] concat

 pgfs



 0 setgray
 -216 2483 a Fa(\000)-216 2483
y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 /pgfsc{0 setgray}def

 save

 1.39478 pgfw

 184.25424 -21.45935 moveto

 184.25424 -63.58105 lineto

 gsave pgfsc pgfstr grestore newpath

 save

 0.59776 pgfw

 /pgfsc{1 setgray}def

 184.25424 -21.45935 moveto

 184.25424 -63.58105 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 208.04868 -45.50903 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(+)-216 2483 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 65.94792 -102.31541 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 67.94048 -100.32286 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(2)-216
2483 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 65.94792 -102.31541 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 67.94048 -100.32286 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(2)-216 2483 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 122.64154 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.6341 -77.46248 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(4)-216
2483 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 122.64154 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.6341 -77.46248 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(4)-216 2483 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 79.6287 -92.93858 moveto

 116.57892 -78.03693 lineto

 pgfstr

 save

 [0.92848 0.37445 -0.37445 0.92848 116.57892 -78.03693 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0
TeXcolorgray
 restore

 save

 /pgfsc{0 setgray}def

 save

 1.39478 pgfw

 184.25424 -63.97955 moveto

 184.25424 -106.10127 lineto

 gsave pgfsc pgfstr grestore newpath

 save

 0.59776 pgfw

 /pgfsc{1 setgray}def

 184.25424 -63.97955 moveto

 184.25424 -106.10127 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 171.01457 -102.89902 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 173.00713 -100.90646 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(1)-216 2483 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 9.83817 187.65575 -102.89902 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 189.6483 -100.90646 ] concat

 pgfs



 0 setgray
 -216 2483 a
Fd(3)-216 2483 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 136.2686 -77.82933 moveto

 165.07014 -91.79073 lineto

 pgfstr

 save

 [0.90152 -0.43701 0.43701 0.90152 165.07014 -91.79073 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 233.10225 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 235.0948 -77.46248 ] concat

 pgfs



 0 setgray
 -216 2483
a Fd(10)-216 2483 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.68962 15.69124 233.10225 -79.45503 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 235.0948 -77.46248 ] concat

 pgfs



 0 setgray
 -216 2483 a Fd(10)-216 2483 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 201.2828 -92.83397 moveto

 227.15782 -80.29138 lineto

 pgfstr

 save

 [0.90152 0.43704 -0.43704 0.90152 227.15782 -80.29138 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto pgffill restore

 restore

0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 2118 2710
a Ff(\\begin{tikzpicture})2118 2830 y(\\tkzTabInit[nocadre,espcl=)q
(2]{$)q(x$/0)q(.75,)q(sign)q(e)57 b(de)52 b(\\\\)g
($f\(x\)$/1.5,Variations)k(de)c(\\\\)g($f\(x\)$/1.5}{$-3$,$-1$,$1$,$)q
(4$})2118 2950 y(\\tkzTabLine{t,+,z,-,d,+})2118 3071
y(\\tkzTabVar{-/$2$,+/$4$,-D-)q(/$1$)q(/$3$)q(,+/$)q(10$})2118
3191 y(\\end{tikzpicture})p 0 TeXcolorgray 1926 6013
a Fg(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-679 a
SDict begin H.S end
 -372 -679 a -372 -679 a
SDict begin H.R end
 -372 -679 a -372 -679
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -372 -679 a 0 TeXcolorgray 0 TeXcolorgray -217 -264
a Fe(T)-9 b(ableau)38 b(de)g(signes)-216 1 y

 -216 1 a
-216 1 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -13.20375 ] concat

 pgfs



 0 setgray
 -55 1 a Fc(x)-216 1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -38.95752 ] concat

 pgfs



 0 setgray
 -206 1 a Fg(Signe)33 b(de)-143
122 y Fc(x)27 b Fd(+)f(2)-216 1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -81.43622 ] concat

 pgfs



 0 setgray
 -206 1 a Fg(Signe)33
b(de)-163 122 y Fc(x)-108 86 y Fb(2)-43 122 y Fa(\000)26
b Fd(1)-216 1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -123.29253 ] concat

 pgfs



 0 setgray
 -203 1 a Fg(signe)33 b(du)-185 122 y(pro)s(duit)-216
1 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -148.82074 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -21.2601 moveto

 311.8149 -21.2601 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -63.7803 moveto

 311.8149 -63.7803 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -106.30052 moveto

 311.8149 -106.30052 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 60.24005 -13.61887 ] concat

 pgfs



 0 setgray
 -216 1 a Fa(\0001)-216 1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 119.98485 -13.98416 ] concat

 pgfs



 0 setgray
 -216 1 a Fa(\000)p Fd(2)-216
1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 176.67848 -13.98416 ] concat

 pgfs



 0 setgray
 -216 1 a Fa(\000)p Fd(1)-216 1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.02142 -14.4823 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(1)-216
1 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 287.11154 -13.61887 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)p Fa(1)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.56453 -45.50903 ] concat

 pgfs



 0 setgray
 -216 1 a Fa(\000)-216
1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 127.56062 -21.2601 moveto

 127.56062 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 124.6341 -46.37245 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.35506 -45.50903 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 184.25424 -21.2601 moveto

 184.25424 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 208.04868 -45.50903 ] concat

 pgfs



 0 setgray
 -216
1 a Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 240.94788 -21.2601 moveto

 240.94788 -63.7803 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 264.7423 -45.50903 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.66144 -88.02924 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)-216
1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 127.56062 -63.7803 moveto

 127.56062 -106.30052 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.35506 -88.02924 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 184.25424 -63.7803 moveto

 184.25424 -106.30052 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 181.32771 -88.89267 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 207.95177 -88.02924 ] concat

 pgfs



 0 setgray
 -216
1 a Fa(\000)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 240.94788 -63.7803 moveto

 240.94788 -106.30052 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.02133 -88.89267 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 264.7423 -88.02924 ] concat

 pgfs



 0 setgray
 -216 1 a
Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 94.56453 -130.54945 ] concat

 pgfs



 0 setgray
 -216 1 a Fa(\000)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 127.56062 -106.30052 moveto

 127.56062 -148.82074 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 124.6341 -131.41289 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216
1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.35506 -130.54945 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(+)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 184.25424 -106.30052 moveto

 184.25424 -148.82074 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 181.32771 -131.41289 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 207.95177 -130.54945 ] concat

 pgfs



 0 setgray
 -216
1 a Fa(\000)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 240.94788 -106.30052 moveto

 240.94788 -148.82074 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.02133 -131.41289 ] concat

 pgfs



 0 setgray
 -216 1 a Fd(0)-216 1 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 264.7423 -130.54945 ] concat

 pgfs



 0 setgray
 -216 1 a
Fd(+)-216 1 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray -364 1404
a Ff(\\begin{tikzpicture})-364 1524 y(\\tkzTabInit[nocadre,espcl)q
(=2]{)q($x$/)q(0.75)q(,Sig)q(ne)57 b(de)52 b(\\\\)g($x+2$/1.5,Signes)j
(de)d(\\\\)g($x^2-1$/1.5,signe)j(du)d(\\\\)g
(produit/1.5}{$-\\infty$,$-2$)q(,$-1)q($,$1)q($,$+)q(\\inf)q(ty$})-364
1644 y(\\tkzTabLine{,-,z,+,t,+,t,)q(+})-364 1765 y
(\\tkzTabLine{,+,t,+,z,-,z,)q(+})-364 1885 y
(\\tkzTabLine{,-,z,+,z,-,z,)q(+})-364 2006 y(\045\\tkzTabline)-364
2126 y(\\end{tikzpicture})p 0 TeXcolorgray 1926 6013
a Fg(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
