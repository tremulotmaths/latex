%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: exemple_mes_environnements.dvi
%%CreationDate: Fri Aug 16 14:41:12 2019
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold Utopia-Regular Utopia-BoldItalic
%%+ Utopia-Italic URWPalladioL-Bold NimbusMonL-Regu
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o exemple_mes_environnements.ps
%+ exemple_mes_environnements.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.08.16:1641
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B38A74E29B9E7D4BEF828A51B13E71DF2C
C78DC0518AD29137C8DC053AD6D86747DC82DFD3366CBFCD581044AE5B23B88A
25842ED0050BE19E7F538EDAF1128614873F52B8FE20E16DEF21E3D2FB51713F
DB39D6C3E8B60AC7B4A83F38D6C3283AA890E5C5D4462D0CDA1D49DEB5221D7D
759291FD43C594074033868359A9CB523210CF1A2479FCCC7401AC1BBBA29A0C
F8449C165FECC03856CB08DA710B6DE98A17CA615483CEDBDBD9C2F47D84B562
1745DBAEB9560610DAA89F9D6EE68F8DFD8D0E136CF2B9B44D86E9064DDBA73D
4AD2AECB1F576EE1254970C70643BAACDEE7682FACB396AF64E102AD05E9141A
2A2B04760E9C6C61639B9E43B6D719F2431580556CCDFEF253C0B613B9BCFAD5
ACE01883440C3C61D2BF098A3823E734AAC86926CEEBD235D1F3E05CA0A67A4F
22C2D72A793CE08FC5937B4D7FC5E77105598B3AB259EEE0DA4D7517CF10172A
9CF549FC86FE3C79A1FE96E5ECBD1897E78765DAB8AF93587203554CB8008AB9
1561F7B489D2FA6D444F54CAFFB3F32607B0397165B14A96E463419831E50ED8
52C7FD7AD1C180A15DF66BCBEFF9437D80C0D133CBD3D25CCDEB37EDC5EB7AE3
056796B5DCFA1D8E053EBD8F16D47D7DB5B76D891228F344E7BD6EED033C8096
25340DEA0324A9ACA7AC7A3F8A6AB960365CAA37BAACE5B78B259A06BD7EB2FE
CD07DFD572394B49D184DD233FCDEBB2918B95470DB2B2105085D1A8E08B4917
D4DC3E7ED37B25286FCBB1F8B2FD6A4B950D485F880314EC964BFCE136797BF6
A2592730C9AA45A68D436C41CFAB8C3F360BC188F311A107CC4B9D012D9FB773
CAD49843D26127C572FA90C64CB932323C4D302D38619D46DD42291FE4C18F63
35C9AA3D95BB4CA5D12440DA36BF7F264F9CD0A984184AF757886F3AEA4D5440
B88F8027C7FCD0FFAB183250BA953457E019E1F784C772FC0E92F4903CCF3745
C585115062B065C19B8D8F6C4E8DF0CE9E2D4D10F4DF40E6E7A6C024EA7BFACB
9700745AF3B8FDB294536FD027A1EC162CB45AF8954BCC9519DA3F3907F526A5
FD94C653A8B020A85B7209F2B1DD4F8F7243E2639526CBAA42B7D688E3A2DA62
797474023613535B7BAD9B7D603F14F884E46A9FBE724F18869698207C358C9A
77369E5A7AF7CB0ABE2E10D764440E4EAF0ABE5EBD545CCECC92327FE0080C2F
6E3F39704FD9828C28CEAD9F7D32759409068CE066973DBC2A54AAE89F2AA39E
48F3B09002EDC17DE7F6E2B26AC994783DEC7C9029469ABA16E5E09932ED878C
6ED51132D6BD87E9BD0F7EA14ADAC93671972B4ED1993DBF217EFCCD59E2F40D
F39D0144B18CB1196A546CD9C09ED409A37537ECF2F0DA63D0C9F66EE8050BCE
EE70A9FF467394B83CA932CF055B38014BC35053A71C5D4237AA13773B2EAEB8
3C10111CB99C17B06FE4E385E858EF5E53A7069222755EDBBFAC7A615C5D7E2F
E528C867E6501F47A6655530E4D7C0544A95E1027273D3B6295E5E09A7116AA1
19ABE7A95D11A05CE124A4DA134FDE8B541498841D40C0005D42964B815C450E
ADB73EB0A3ADD0117B57CA6C1B8CAE93785364A5FAC3238391122AE40EF53D21
EA94D8B6C386D3A49B2DF1EA184A04054B776605E330BB86B00CEF62AE32E563
4273F0F52762C3D147F3351F5A2A231850268DFB766415BF7DACC125867ADCC5
43733D0EFAD93F82C524B6F6DD58771160CF7D5B7E947CAF49A78C129AD2F44F
BFE7BC03A0FAFA64951B61206C2FAE0C70EBFC01D84D117BE1577B3523C4D956
A9545E3F5BBEC5725EFB6BE037AA2EB13907B12ECDD92C2F1BF48B7BE02FFA86
DEB7C59B0F8E39BFBEE7CB822884231EBFD5F9BF33ED66930B9C47A3FF9A8585
CA20AA9492D521B151F3F4F7DA25492231CFAA92A96B0B6B7F5E2C5430386D5D
58C56AD796234EB7AD2BFC5619FD5FE2CEB4ED36340CD545E3561B0964857663
3F16FA099A45612CC46E07875CD21D0963121449C6B55ECDFCAB195E947D18B6
676ADB1D105F639F448D97CC65690DCA27F08735A9C3C3CAE2EF33D2A8E3C645
B837F695DF8AA168A3C9493AEE7EFAE6733AD78A2C5D4D5F594631736D21387B
8787B90A35310522F69126F62704F47A923E80C0DF7C64516109DC66060359B4
DD2840803097E8DA5A6315D0576024A49017213D3B1DDE9373DE12EC2B970A7F
413BD52D2C1A58E70BD0E66027673F40E028C5EA512EF5A3B4EC915096904393
F25E4B8815E354577E4004800F6556BEEEBEBE8742A1EC084B83E3B9EE0B0A88
1DCE4A66F3EC2108D6AA5760000FA3A3EB3B1952E9DA468B5307F1A90AD27344
BF556C16A49C4B4EBA58C53EFDA87A0DF448EA03C2BDE6379573D3583E91B48E
614DA744B95D803BE001CD299EEB9429510C6CB801465E2C57FA9762ABEAF97D
187D7F785947AAD58B4CB3E2FD375295CBE770CAFF6125778A3CFC8BB32850C9
E6D598461C11C5E7C0AE5E20688116A5076149AE1B082E3F5B12AF72E4A32099
E93609B13413BFF0F845A2D449658457EB73E111523233AAD1B7184BFE6641C0
D37FECFCF0A21A75413EA18E505C7CAB18344C739074B3DE9E17E222F095AEE3
A0C9ECCA581B102A8C1A2FBC02F1967958B696967DFD9167FE6FAC2870C32F29
7A56F42A7285B63DFBD3F96AFA6691D4E584A86BF1BD10DB3E7A1F362B6829BD
FBD93B732C06B8B2769C12E98465DAF14217ED3BCD185C36E85AF9FFF7307314
1122CBB1E19DEDD5599AF900CFC3797D7A3BA9953EBC380F4F74FEC0D18EFC77
89DD9C6A2086F3BAF055FC7C7F48E7FB7E59A086282594A500C7581DB8AAF9FB
4F45E1AE922425B7B79D8915451C826D036E4AA1220BE47E4285C8AD1BBB6FD4
919B97CF1442656FB3AF6DEF379066827B3230CDEFCDDDAB5CF271DCC76A904C
7B6EB69CAD543DA050006601C3848EDC716F181D575B22B279CB8791DCCB1697
E332C0C336622663B36FB9A042F159C3ADF255A32193D0F57B192D8F9E7D6005
D9FA435C6FDA84A644EC4212DAC8BED42052116FC615FCF137A48FA7B1C62B81
7A9023B62FEF962A78B1046A2255F85A9F7BA8A528EDB37C286943C53DF6E815
01AF57C7DB9B750FC591744B995E60CDDC3DC7FDCE220C6B19690D18B8024342
8F175DF29B4BB834C4CA78765D1F69A9FA48670A2D553D7CB13EEEB34C7E99C4
7D16FF244FC13EA58142A856E417C7D7977A76DE9A1C4D7638F4CE6A8EC279E6
FF8B6B4E331C4B7D15FFF793138F51F9BFCC64D3ACBE7BC41973BDA00E1A4F64
AFEE5FF928B8435080811EABE5E2D2A2EC04FB02D2C012B1975FA139BB666C1B
FBE7BC41EFF80FD505A13435B8317B50076FE765AC6CB4C0522B68A0635F431D
315BECD012DE95F8A9643BF3C93D30AF46D4C19275C02FE985EE91C1F29AFD52
CB2A7BB63A96771712E5744D52E9325C01FE0E5F3EC7DCB0AF2F35E7B4FF6188
E67E054821FB71628931D9042B1240D3E4670C848F3448B1CF36C95B9F8AAEF8
E01CBC690B43DE3F1392454C09344DCB60A818EE4D010BF1B02876E5266E58CA
21073B064F1C78C7A6DE03B350D208B44458CA7987BDE852A5C67CDE427A1F2C
BD2F0A59D3C45813D67F4ED87CB1B8FFDE2A09CF51C7AF1347F5A2F8A9DC809B
19310C11E7FB967904E508540C9F6C3935424541BD75C013CB9DB27CB44A96EA
EC410E2B3091AF4A67661AF43EFE9914296F95F7928141D3E5403BC0499F6E0E
3049C0A77BEDA560DEBECE388E846023D235B4442B568AB516C9FD3846D7CC20
2CC80469D45A3954C8B1F7FE8DCD943DAF3F8691AF23663CDC41918FC032A578
2CE2D267B6F66DA6B33E24E8134477670D2D8A6607A8506F268809EDCF7FD67F
41027DFFC22105E70064237A38CAAC9A1926DAD7EDDAD3FCF89E28F67F1B6D1B
07AAD8C85C61A4DCF08F2838AC015BA38A1EDC25BAA1D9E95DDA3540E1232B74
5020D3715ED0C0D681347E2251CAF08F6FE0A34913ED4CAF8223CD1B22AA22F3
B7FE28FA14238FB896D51538496519C8309FEDD4F1987678DA413EC544BD31F8
A37A6FABEF71AA518F6B41DC1BD6F0BDC8849017E6E096F23DA7BE06D84D5E3E
9E29E2C680AAA607148A5255DF796C8B0DC75E7239FF724E93C0AC6A6CB033D5
4D6A63C1E6795860F37CA8DF33445C591A1A14D969B0D76DF3B22B40FC8E30AB
D6CFBEC40CC7CD343C7CAF6A40AD69DFC15CCCE957E1D6A29BB12BB1011EEA4D
8748E116A95F7DC5FB7D45B0327D6C6D3DD8874B0793C00B27F494FA4530B025
B525CC9E12C44829227ABDBD5027105BAAEF5CA4DA0F89B4D819588655BC0047
B9781F6E6075EC3D858E3BBC798BC87422F3248DA19CDFA3CB5E424FADB66F46
692BF4B95CA0B01F96B28E1154AEE505ADA032418DF7FAE3068468A096D26D3D
168FE3AD12DA5AE02BAD64CC4490D44F9C126161BC0D3EF78B72B91DD57238C1
CC275051E800D7520989D156634ABD8D065D836983148024212A317173D81792
AEB9FBBA0147BAA494801D1C783A8F2BE80B0A422CCA947F55F97A776B61B7B7
13F41E57913257099B9EB3449E70091B9CF82B630CA0AF8AAEC5155D6566A36A
224EC77E36C7228C2B28FAF168AC45A4FB4118AEBC7E01D9BD57A4D67E0963AB
F65D4971C8A280394E4B4AC7C6C93AF8FE338E425B8FF5A073519417CE15B896
083E87203FCEB23CD2D0DD4DCF5CEA0E729F40B1FAD6078C9CD251103E6D384C
155A789DC682D86565E2FDF8EE61FF07245DD31D2ABB1E3896259FAC3B0B55FE
5E463AC3961D2D2B856EB27BBC2E547CF2795EBBCC34B3FE40446A321B6A4646
6B1F02CA7CDD694E873AC972987AB282A33FDA191945D400FDAA2E2F1D141E85
699153EBDA20566A9B9D406D3BD0A976E2D25DC0B45A0AE15BE706668B008272
4961FFD032A234F388CA5D88EDF2ACFA05A0A26BCB8C09B8B8C5CE3985B42EE4
F8F1B30EC9DC1CB0740B3FA180C4F8B1F8FB7CD131D21335173D22A21F77C58E
9080EA874898A180F72E58A479CB0E9C237DD28FC4BE1AC3AAE071B00E70943D
E46051A994796533D397F80A037542D6C800EC83221CC01DA3BDED664D6B5FC5
AEC00C89EBF94C4754ECF67CD368F4F05C5E92A9B2106C8ABD576B6E330297C4
2A71C6B0CEC9B037F6E883A41677E8ED3B3DC028E21C4959D1F669E28CEF5792
5D0514687BCFD5F1920CA1CAD5C77726A6161CE4DC1FF41F56AB44A01ECFC98B
472D3A98B1B429212C584FB974689851A9537EA1C557F0CF351DAF847626399C
AA10C3AE38C42A940610B764CF6251D015E9FB976564B759DDC5540CAFC2893E
CA601DA73C202C277B9CEFCF2CE05493847B17C25A23E9876B16FFF4261FB4AB
033777E1EEFEC6A301600AD6B2979C4ED4EB6497E5CD48C3C8CBC4658A9C8985
C01703563E22C21E877B6DAB8CD211371E9A14B485F6F7F3B46E284416D53C38
7D55650E78400B033FC6ED9C116ABC2B3A537DBC36DA6EF5A42E2685DBB8CA97
F2E345CA7603221DFCA0F5E5FAB46937E759AD8846D728B53A271F23B62915CE
BFDD92309A280267AE64E645D2F7D6535FD7B4200DFDD1374478CB09A9DB9B6D
3DDED8EE779C6561578938211016384C40AC7BBA284E1BDD8D791CF23DD69A68
FFF20ABB527F1A8F30B9D0ED86030B6F0F0468CB1395A056C4B90EE561EBB1AF
794144F03433689BF74B98D73883C09C469401835F9FADF3E2C1081119EA64AA
88C3C43A1A0B1AEBC4B0A7FBE9450BDC435732124A22AFDA508051204330D831
4883988B3A4A19945E722502311B3BF0988F8CBA41C0A3D1002523D2D84C85AB
C9D3DD4C79EE9F8F5B89C844A4C3429F906D7D43475625F6C79BDB5E5F9384E5
83B94A24E10810995360EA267172EDFD43280E5321CE68091E63B4BE7418101E
B0788353D90DD7342AC7BDEF8FB9D4656A6FA42F3010AB178AC2BAA2F5DCBAF9
05C19B77E034C891A8CB597F83AC5E33326831347151BAD3266A845117CFFF27
EC78B67C66111F5A21A0FD2FED9DA16E6EC6D1476CB120263EFA249B63D804FA
A420139D2C803BB279C687779DAFD27BC16F88A7E9660AA81729AD861D4246E4
38211CC8F005173D78CA380FA816B0DA46893208E4D1702FB541D6861F86F703
8D624C782AFAC56389C604E873FFB0D7A5A1E4FA13FB422745FDCB6775CEBE0B
E35937F73473C9ECAFD532178F768590168A53A2622238CEE78AFB0997E30E10
B12E08719DA8BBC2854B7D72FD3574AAEB97FCA86D77D127E0BADD73C87E5C52
5D76CF0513AE5C18DAD1EB47232F3CE2B322F7F33E6816759781B45F690AFD82
B42FC8A95F78988C62AC7CB9176B9813DF686F54831203194E76D371BECAA9E1
CB954A9AE218F44B4D9BFEE22C49F950AB9B1BD2EB4A4135835EFECA02E3023E
68DD7980ED81BF71949F47905B9113DA11A98FB93146EC76A522D1DBCB5CAD22
05BE8151FE610227A6A082DAA0AE14C8EEB1F313315205336C8523AACC88B016
54F4C983FE3491C199ABDD8DFC96493932998247CCA21889F032036BB458A405
E5DFB684C57458BD17277C289C86490491FA028D8FB2842F52A16C35498B8D32
64DF633A179145BDF7F229D8F0B67EB861F1868E8A1B13FE08596ACC6FC33B8E
8B11C0E04C822DFB19848F1FB5D12D6770774B8513F427398B9E645173ED3AD9
7222765ED9D8500D5EDA2C90AA37B1DA678EB667B9A1A64DDDF552EEE7987A85
0A881648CFF28F5667DC620507D788797F62E03769CB94D169B85A004883D212
135A0199276D46F6EC1B2EBE007B95C190C5CE732427D04E1EC2AF85B42B34F2
F843EB703B32352962F28E11EBCE60B459AD39932FF6D3254526EB8CAE97BD82
3AA9792E765F285733A24555973303EA294F2D411978D6A607A17C1B1D67BEA4
6F08D78E22993FCF12ACC6AB4E89AA8EF68B719D7280A90EA731FB6604687AE4
EE51E31ADA9FFAA4F27AA9924D6624FC9AAF420CC84F8E576319D178A8D61FAF
CCB13A05F905F7F25D087448E00C70F0EBF5A645508714576B2DA46570BECA9D
32928D2553E19EDC1FAB7088A9D3C8E11C3503F3265504A4B45065C70938056E
27E0242A3329AABBC0B6B265186DCD3B7A259AF32F4C81EB6C5D597CF8B61EA6
0B7AD6D7F4422043B8EA8F0B341160906A798B72ADB2C66935AA8F1470EA7024
23D1BC30EAF5F569627E0C6400E6FA1F110ECD864BED3A9218D70EF87CB2DC88
3944C93CDD19B0399457D27F5563A201590319C4A41D20E591E5A408B4AB4AC9
13AFE5F08FE79C3178DCD9F5F61ED04650D2D217FBC774BBBCDC222D71439388
9FD417180A98D10F5C3F2E420F26D74B2E587AA5F16681ED5D98D1D92381D214
23943787C54A613BA334BB36A5B45629F76ABD783187EBBB6B627CD2AD3CA15F
684A10A04427BFD6C7F880A1DC0616A22F70EDCB2F0ACFB6B78AA667B1B4B6BD
5DA05EE95B9C5BC2EA699AE8B260A180B328385021B83D27A89A52989632835A
4A41DCB7D00078B6B104F3FAB2991D4882A3EE219132EFA0D3C9EB120AF48450
80B005246E549D741320B965E8BA6DFDA1C9D608373AFA0CFBCCA08DEBF434EB
DC4C4A05A7A0027CB712C10498733A7D2D3EDE24E64464339319998DE91AF16E
E501B075E3B4B54FA3CECB4954D78C3DEF120CC272C3F425C1A324E5602F56FB
1C8E667106AFD527CD51A750FBCA3209CBD9A5805CEF0BDE357F15418E06A966
15064E951456FF9EADEDFA199129845C3FB17B34E1FDBC5A90D503E2F3C20963
BBCF260A4A8C312CBD99F9CEBC34D15E5DF1E1F6243A032D8D18D1BE399DB38F
FCB3827028E3102596B02A73D2BCA16FEB36E9661B2A8F0E7273AB7AFF5F1062
398BB6CC8ED3E84671881D2287AAC281C8948DA60E69547B9EF835D92752EEB8
3718948E036A870F31BE360566AB603FD46909A3EA4C38EC16B2D647A359B224
7C6A85D2565D7434FF0E0752D104FA14E8E09343FAD0BE18B951A0AB3F3F881E
5790DA228A332F3DC16D9D65D2D209C00E041935330DF279B3E88A2F0617BE8F
D563B467EA8D156AE4C1E67E7A457B95C7BC52285BFA294491AA54D357EF3DB1
E6B6C45EE9B765875262DECF7B924FEC8452A532CB143C82969D21794824732C
9460B22D8B5D69F6D6279E2442CCEB8402DDFA91EE839B1E74B09EDEBC2352A0
D993E65573161F886DFA6EF00BB3F49C00493D1F7A1D9EB1B4871A83DD306A30
0D60747718F47716645F82B9824A4B9912865C5D725C1EC2AAB13A852120B83D
71AE753E34A7C120FCC4165279A8F056388B39186990D862E3C170F419F42150
8DD8F095A79A72ACD966FF497E2D3F97DDC9A3BC65E5D64D9DAF5242DAB99C52
E1D6C62A3318553CDC0733507455FB6ECAE33B2182BD75D1324A73649E99CAA8
6A4E8A7A3BB803FE2FEC4435D9422CCB1547C5451229A20E9E12B41703B8309D
4B8E600EFCA65353F5A39E44400BB879D45CE67DF8CE6E41991520814AD6BBE3
C404C06EF16DAA37DB0A7C202CD2DB8B26B827F6E45D14DD80F3D20225C477A1
B204F0ECD4C6DA43B75D80A04EC8A2394DD8F461922FD97A6EEFEE66B53586B5
7F11CCB68BB8AE101E98719296945EFF4ADCB54B776899BC4353DB4029EA9D47
483B31E2D275576A4D69CC9E07E4E2731EBC673032393ED7472336B325E754AD
FA532319DBF588DEC8EDFCE9D32BB131AC3AC22DDFA6836ABDC9CD37EBBE81D2
75CEEA15F021FF43F5E75453B6CB8472119052879388763002685E6ED4607F19
4FDB44E67CA33DDF083B579B43CCFE740CC72340F02646EE820900455E09A8AE
D8C2B17FECE4D2A4AAF8BC303072BE614392C13A06918A556039AA38CE8157F4
192BFDFB5939740B1C1D88FF1554097B9E9E52F3D4885EB275CD0FE332CD5093
21DABE9E341891F6403D4339C350C932BEE3AE93E88EC1F64E68DF8DBEE53DC3
79C122F7069CAE453A88534BEEDE3D575DB8C760FF4276E9732764212393E442
8547D6A3C3F8820908B4FE9579E63AC5BAC428DDBE93CE408C335B8BBA0DE33F
695AD1A13655159270B4794FAED722934E2A19F0EE78002E7D0A8CA1FAE1832D
CD9181F7A856B328E05CA4D6A78103BB463D704C82BF592D0E51D69C73877097
CCCFF7EB05ADD3F849D4A8556C09CB74B3ECFD49DD8BBD09258A14A05A7CBCF9
D74B72CB30302F25EE043AFA2AA91933A8A08D0B94E931CF4859A76CBB6C820B
BA8779FDEA6DC98038A7435FC2D898DF5C11DE7322B6A76E3CE02E9DC08B590D
D9B1E85677D2CAAFB5C3E32DB1DA806335BBD9CFF0F4F94BF545126C09400517
3E93A05461DA40B675C2B3C51C3B43EC812BDCE9B23CA26542B4291DEFBD9A53
62AD2B23E70CC0B83E7A546FFD477BA50486F6B4394EE2DB30D98976A111C83C
CB78111A961F08C2470D9B5B2A5D6D235E704BA2287242AE65F6A59FDB207457
D0D13E1A6E5F9CB95F108339CC05CA82642CD85ABFD89CAF9F057E1EC08AAC52
FEF24EF4464744CCFB14D9E3564A44AE56F46394BE694E34DCFA044CC2401ED3
31A26ABC15C0F4E4602095409B796DB96707BCDA2AAF17A8E150D08069F492B0
F4105049428E09885E2F60267C29AF15CBEB1BA971C6D76EE27489E98CBEF55B
BAD50B92A05D483CA5DA6E873B1BD311E27552BBEFA7F3AC52BD2CD6DBAD6B19
5ECDDAAC003FF35033C205390622627FCD20B18A5D35754A69C1904CB0CD0152
F3EAC944D97489560E72F42493707E4209755704F8E540513F2481CC416FBD28
A19C88A98B5833278D4D3415222AEA86602A796DBA6272A81FE490C7E1642273
B18D7DF172C09BF2FEEBDEAC7D6D13F2E7AF696EF5B96751AA5A7DC1B579B52B
6C9A96C19601957FEE79704433662B11EB6520D906FC7C9E26AF23496D888259
223171DF952FD54E09E32A482026E198C82E2A9F4F9AB1D7E0CA624C3D00BE2F
719D840CC67E07A91DA285F7A25943001D59881B989CCD2622D527F491C82BC7
B78F91227D09123F6A3333DDAA06F9591520249698A92CC011E458D64A6D09AB
AE092A004A159ACAF89678837179D221F7D56211E29014C5114C0252D155F319
6ADB005EAF9EE83D9A4213C45AF095B01EDFDEC7F3A52EFB805150E75F1D0F3D
E0F7DFCCD00FFD8667F353997AFB9689FA2DC55D099725DA73782CED6271CCFE
028C274120BE64E5760DEE50348523A292E11367F4C734DE39AD3C3F351294BD
1E7785963C6DED262AFFCC1339DB88985F0A3C2E9D37A3569C59D057CD550612
D9465B77F03B5B8C695E2D73465F56B4D923371E422C11B47BA61C9B809A5D18
9D87550C6DC5F79EFCDAA2863931E2702C42BAB37C4D6C68E8DAE7294CC29F9A
E52668166D582C494BEEAED43C5ED8DAE80DEAE0F2558047255634A0019717A3
AE14F384803FCF34FB7780C2183D202BA9C765938E15D24269939CEB098440EF
A5552ED28D5C9AAE4290A005F853D737840C0C1CF3AF64A6F0A9CE4849FE094A
5F972E851475877D8B7DB812CFF3CA20EE5D711176E25A5242E608FBE634F1F7
70E2089CC0A5A232F434A68ACD6D71F59CD9D8565E9C7AC8140E4360980E857C
5A0099EA06E67AF88021700C552780CA97D6FBEDA9F08A979A57E42C8648A547
0915C41B84627EAF6380AD5C9099EE94F30BCE8C4CBE811E99CCF6D4D3A38DC3
B3792413CF27C933797102EED17F9C23C68936E47D69041F25266655E2FF6B26
4846E4FE0C6A3AEC0A07F8BF2E612492534DA66FFD5284EFB59598C19F64B84B
7C008105CD432197FCCE609BC047036203DBF6324B321F048079115C58DE4234
D321F2A14675C2143E985CCA87548BF00226EE19366C61ED89E644D780C9FBF7
7533B9929DB4DD68A45B882D88FD55012DD01A91B7102DE149887657C709D2D2
B3F591AB4C9D9BDD58FA4663DE565844A11FC04A4D5DA2AEB3DD186F8C3F866A
1701589D901AB4968AFE02397FA5BA1984F3DB45C6FAAA134EE8EABBA2CD3952
433E8B0C14658CE20A68755B7C9425CA325D205C55AB576C85001844096D4D33
EA5CCA6994B4F8567040A3E619766768E8D74359B2334B6D01167688DEC06D7B
866A3AFABF52ED9C4D4816349F0000FF664659630741BC6EB8CB6FD2A8638275
F65FD37B110A736936BFA1677F9DB8DE2BFA3DC0A791FB0604DD8A677496191B
E975E44D20D6DC846FB51EA4EF600EFB2D0DD5E5211A7A58A53CFF3997D3DE5D
710772DA9B71D1575BD11BAE3147D1DAC77D33CA6043E7D20B0812655C602599
BDE0BCB10ECD5BAC3541FBAC57CF22775FF86E6D086A78DE6D3818C8450856D3
9D2CC6AE3D1C67C423A48B299B5E9EF5044524A9F43608B1323B21AA640AAC0D
6FD8486C313F168D1CD68194881A087735DE07E59DFB05283B8D24192DA8DE0A
97136081848B4FF92F4273B185CDAF1444164DD2639A1B3839CCB53D76E7F539
7B7DA777C22B5726551C09150CEC9F5ACA065AADD1A707F8711614B2927FAFC2
CFEF8E8005DC077C8B03811E179E939A7E1A9BD4C123611A9FFCDB8834D1579A
F9FD156F238154406BC72C10F5997AEF72372CC051A9D451E42CD43BEE393D78
E9DB5A2446CD15EBFF2995FCC78CA89D648CA2985932B22E7BE53DE9D4814B59
976B89522B68A0635F431703FD6FCD73E936146B6AAA318E166E5DF4AD5D5047
11DE8196AF940C9B6CC8D1FBCC7681C015FA51B91A3EE0B1619369ADF14CCB91
A7A24189A3FD01EB2A2601FF387CDC67D241EA1C305F82B82B52E5C2F8836599
F6B92ECA120724D0776567E48DD8EBD6094DD7117FF45373D0C9EE573B1C67FE
633C1A0434AC8E1A89113B2E88E432766C422B5470F5E3548F6751688C194E2B
ADCAC102BDCFD756CE7E176C0933B362354AE8D5D20A7256E51ECF84514A1624
09F535D9970778CE128BC6D21C9C260D7C2EF998D1C6974BC4EC4635EFBED225
0FC166EF726FF42C0BFCEE123BA9B4196BD517F6735475FF6F23246459E7AFCA
A162C9C81CECA3A1B6716ACFC562C7908D29FB5C111C7B84346F5489643986E0
DB76B4D66481718FE0C9DB9304C8F9D0739A736F4F0680BF3035B4ABAA446EC0
89F59FB04D0F98595E225407058E6419E69BE2380291D65BEF57A731F040B9F3
4A31386F359736A68FB4791BD4D0D866BFF7B3EC726E0BEC0FCB3B11C8D90F79
987DE464ECC69088FFE70BBE4124E037FB50F9773E9EED1FF8897A2610171662
BCDED757461D7624B3EE5A864F5CB871A6339B8B2660329E95AC735295FED3EA
F74774DF9044ED7EF9D93178AFE976D0F2B5AE8557E83B04EB6D595ABE556DB0
56FA536EF1A17F21518A0BE6923287C63DEE94D79A8FE2A29332C5A5D8B2426A
09D38C004D2DA38C110B0D8E1F6F525527034534F8EF19B7B55153451C02C6F3
392597AD9F1539B92C516F671CBDAA32D63BC149DC15D5567E9EDC3D07EB92FC
C6E982147539A7D6D494B37CB25CDF32DB3E0D131D027EC6001DF1A4DB450E1A
D2E1C89EBB3A53516FFDEC2E3384E90A25AC21AA1C6778B2B70C3E42DECB4246
D8192B796382901573ACAF302B6188EC0E309C9049F0ED777AE5677D20E81E8D
0216288B5E05D04F71D3C29B29FDB8A490C950FF79076E03BE3F1D8C36ED37BB
C077BA85A91DD6902315A3E7E24D6B24C3F784C4FCFF3AE39E88F3B4EB5FCAF0
E59B478F51398DB1EF607D12F488C9D8476DE8E2156016190CCC67A0F00AA551
3CE858ECDC9B007562CCA35491B9231F2836CF3B2F71731C6853E805C12D9042
B1E203BE9948529F02E90B6808E2431EA620A6CB87B03A0EBCFE0EC76C12659D
43EA9AD75946DBFA6CE5EB423FB0C02BF87ABB73E40D6EF6CC8A6BFFD275BA8D
58798BB17BD59DF45918D8A69B407DE09DD4E822C15806F28D0EC160D5D548B1
66C26BFFD4D9B82BFFC4B30F578BE0671221071122721977EA5A7D0E8A58C118
71AF6FA03E74FACB16FE7267CC10F26742049856C7F00B3216EC0AFB926C5691
0EB3D953FEF3F84D74E1B3AE1ACB017C72469BC8466630F233D6EE10BE2833B0
9679E5D1471A4F11954E669DD3DB2155DAE8F3673F532671B9B73BA9BC94F131
ED3398F26014A44856742C559F544FF253375343E5CC920ACE6D50AFE89C2454
1BA0060A4C99B4B131A2A0A83DFA305E5850E691A71563B913DB7FF1F809CA65
BA66B08AAD67A30C032C9C172FC9246991EAF5374E115B46EDC48DFB24634F67
E7C90388BDF034270754BBF2E199A6677A365245D03635C65644862CE925C280
154E1C8B49D23F004681D3289FBD930ECF96FB59CC9B84BC8EA1D33684270B97
76474A41F3EB9BD6EE6987F1A21CF25BFA8CF101BBDB41951732D7E50AA2009A
12246E163758667E52447DCF605D7442974AEC0842E51F2C74290208B649C08A
D8091FD60A972EAA62DA70FACFFD600EBD009E08CBA6633FAB33593249A8F1B3
A5DC572CF39EDF67B9558D1E8454C53A2D0F2D1F4337AD44A7C2F603197DD0FE
F34FBEC4E3C3B7F46F5F587534B7B603B8D789A3BDDCBFE7005558B787E0AAB6
530F68466BD98DC009411219F22CCA37B5F673432FDA8A33660F5CBB06B2E983
8738A20FA510991EA28948C712D096F1B05965ADB7AB3DE2EE28A2AA03BEDFE2
3B68B12E34B2CB657BFFC49DAEF8AEAB24B8EE52F48AEB5378B4AF4A900BE80F
88CF4E3076B8B1CB130536CF33E06189DD8D0B28525210B9F41D997446893F3F
E95CB18A4C106B25EA69CDDEAB5E67A6384B3FC2938BE2A61D719F35FCFB63F2
A0A29A6327C049934CCE76C2EC3DB4842A551BC0884F2833F7CF7CD551330336
7A6D80E1305684F36903E793E7106C7FE4AE7C499E941735FF24AC9F4294A874
94CD681F648A876F1CB11D3CDF3991CEE417E79EABF2C2ACFC7F74F564A35C12
C02D2119EC3ED3696DF7F323B23ADF08ACCCE5FA5BF3D5C6614922C578521636
AADB5D3D70FD64B9F7BF7B8B5B76FA4DBABC4F831F90E2331D52D19D012BB9D6
3628A11397D8E497D35CD46BC946E62E29CB835229964D59A5D3F20DDA6C1B41
CB6B4C4E22F12D6819EBD4DE4F89FF1599608A43C341156F60756CA5FDDE8C50
680683E0C17F2B1EDFAEAE09344DACD351EFAF1F71E8F2B71DCA8227B7CAB578
9574BF00ECFC3D55E5088FDE120B64B4D948BC5FED3E895FC63A7FC8BAB6E501
087B5800909A9F2F1C6C3496D9BDAC9A0CBA0131065CB513C0422456856B40D5
46AA7BD881C5C652D25C4CEFDE1E92AA663D5EF8ACF0EA9E95199888FAEA84D2
D9231BAE2515D3859B52DD9D4DEB336ED583E2F59344E352BB21FA4F33A838BB
8BE54C844B05545EF9A15019ACBD8D3AC48C2C8F083967C651EFFC258D9E219C
F18F3155DE732470D183F459A5AA779DA064FE5F4BA2195DEE1B6AF519C9F3BF
AB0115982CEFEB29C34DB660E2935D5B2D77D650041FBAECD60A89F9AECC6BA7
6519F455E590CC3FB27BB3937445B5B17985A9841C43C7B4D7D8E2BB14713B60
F0BE68BD3E6D01B910F2825F939580ED540994C1D6E5024AB3D72BC7358D5F81
842E8606A65552C9AD6E31E6A4F9D2B629BACFD9D2611D7A3D84C0264722CBE6
54622ACB760044DFC1CE1823698375F63B7CE1983A50C27FF8AA6D0CB76D08EA
E75FC2D01863E318979C80C3133ECBD11F557C4752FD25B9EA92676C0D779AC1
45FA04A0363420CEE9948C18B2A00CF18EE38B2C7B4ED2067E5B86EE6D21B2EB
47B91A997105097FB3071083A42677F80B83872FDA67F8D7772E6F9627E4E7D9
6BA831B19C8A0AC9DCF52196D42E9E0F6A2D9350EC2B8B7BE76BC4DEFD9049F8
5C08D93B675E8C75C6B686F35CAF3DF93421396DF242C60FB38ED5C47B2232B0
6E174B66D9ECF0D3B536051FE6FAD758466966B7346AE65A4362675A57EF1724
D44F9D46C889FDB868D1092B5BFAB397021BC392B427270B72FCD06D0FED87A1
D6DDAC5ECE5A70D3ABE7FB63DBA788DEC92590B677CEED278832E30492254EFE
B34F9E20A9AF1FB0D14C7BB246B4D5F19E209D0B033FEFA8A8DD66A8C15796C0
E9B3E3426E4B04DE4DCC7A7154D4A7C0FC2E36484CD6A19526CC8D3C2712D01B
ED256B9B12395EFC09B1ABFCC128E0B26938F557D103BB5E34D6A2A6A1C17FB8
290CC2D853933D5E45DC6FEA25293FAA831D1BE57506E99DBA162436D27A9E94
6D96DC8AD7323908C8388A0555844EC2CEC531996397A026A1C1F2A2E79E6909
79666F96C1152C9A88828DC77CDF494E4BC04096CB5D22E20F94CBD45E68712B
DBE828B1CE13A7DA46E9FA924F0B75FC3A20737B2E7DA20536E9C4C99DA7A3F7
8093AFA9B36B2F9416EBAF88DE0A2A90BDA9394FB5DCC4B75BE7D4B807B20D35
CA6FF54D2BAB51C4D7BEE8689FDB68A397860CE6BADDFC9588AE06BE43186426
1B2B9FC470034408B64B2522F1A5D369EB97B99804DF25D3BFC6DCB2FCE53FB6
C602363F440C681CA4E7BE468EC6828DD271D5FA32749B87D046BC1BCF6BAA6F
38E74C86A5B71D671CB08EA44B5D54F6D3F6C66906C0848BB1FA15490C0480E5
B1A1594ADD40A41F91E07F65DADC846C63B62D25CA4E266BCE5B20C7A15240D4
EB0076BD2AD7D4990038355A8E891E9F7CC55A70DEFA8385F912C3CF0DC094E4
627E2B382B91EF82039ED9B1566CC51EF66780D6A4641D661237FEC604F4C9FA
7CAFCDB493C981C05632BE75C2AA883282C532F00414D3BA01D0A6FD796B523B
90EFFF3986B71A192FF6A647C5F23E1726B069BAF53F5C5FD6A37CF2EEFB5883
798CE0E270211861A38C8C3695F2AF3A1DE3BE5EA744418C47C707942D53912F
5FA5CE6C44E7567DA0EEC576B9598B07503BFF0990A4EBD3FBF4896C26C04C21
7A7EEE151FF6D6B89A5FF266EF489368128FD0EA920C4711647FA504FCEC45AC
A2FFA76D1344852E20A2836608E378677800FD2F353C86994E3C2A88EC995DBD
AF1E1EB0F2F43E4EC3D983AE84FA3828DC6AA709CF29AC7B252FF4F62E87D79C
052E351C0D1813323E31BAB5C68A64379702A53104E02CA614A94FED9BA5ED17
917B265EDADE1875E76B839DA948315248726FF6768872AA78696F6E618F507D
FD9151B1A17D2A52FD496A6BA4F8D104A08102C14DEC78F60024E9D625E16C7C
A423BA7458F6A45899885CB093FD9369812DDBDD7CCA539DC9D8B415E9C09027
9DF65466BCA5A6523805C37924E2DA8ECF9BA8A84C6178E4C4995532BA7F1CAA
2BD605E0732BD5EC75F26962AA867CCF710FAB92BDA5765C6B3BB29A9B1EA95B
414140ADAC98991D7A96DE1B2F7902D267CFB4ED1171779DC1F0BC3577C60093
6722D37F15FF4059C14C4FA855278A03D985C75DEB0ECD464BF1B477D9E547DB
75E071DD104F4BD12638006D39E1D22228D70FEE519CEBDFEBF95143A9010532
98107851029CE6DAFDD26F10219CD73F603FE0912B72A9F5D33CFEA9A542F881
E2A3CD16178B5652AD93E6834DB7DC88928C293AE04A90F492463F2CA8046C2A
A64411EDA0789357C3AABDD1E83A1A782A33ECAC9EBB2C9CDC9847725F745634
7338F101B1C6F39D7D4A0B079E49A193E2B7F5468A7C56369BA8888006D0563E
FAE1EE80756DAC17F361D2A1264A15225421CD70E5E0E6F094A1CE250D8E42FA
FB567D99FCE51C597EA59748059D5B2F61F8EC5D353D0740768EA95C62B56E78
B9B56D7D8A4C42FAAEB1B57AFE08ED6FF49462939A86E9FB4A7380962EF3AF38
FC049D0A03D0AC5ED99197A6C424E3A40FFC69B5D882BBBDE0FB16647887428D
AAE891036943470F2091CD0001B548AD9AF7C64A9E421A13881F2408F61E17AC
F851208651CFF749DB917315E29A8B37729213EF81B256F8F5A3A4125229EE93
E2E4E7876A3F6D7B0CCC7055DD490D4965581864EACC613695D61F826E0AAFB5
A5A482B03E285D5C4FF3D160A7322B5C3B046C331977507CDC1462E07BA5BC9B
65889D2888E3BAD6CC43D7861378C934606149341A6C991727D7271FC72C78A9
840762A86EF8ADD950B6BA77C517A5DE33C0B9BB22D206F3DA5099077CEDD246
696645E27D5C7405271A3ECF3D047F779D0BD2AFE20E81AE4CAF8617933C03F2
112D3219B986FB9A5A8EFEAF21C4E1F06AF9A885F4077902904240E10A8EA5C2
52679EA6AA4025808CEE9E922DFFC356B5B183ABE4C7E91785BBC3B9D417C18A
7A0EB1E54290D4D0287A4F683A4B76DBB3F43951373A0ECBFE8DE97D31B61490
2AC903778DA5C43BE051519CD439EF7F3FBFD7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAC472615E0E7FC7EFF06419D43D12C80
AB86A8ADE9327E54958AD7E77BD6A58A19A8E843B400B0EF658DD1A4D8A46970
B4C3191D8A4E8390FEDE7D4DBE7D4DCC8E5F7C56F7122FA54E3897703115EC63
8AE7573072B94BA1AD3A99908BF3B1FA3743AB177448F013E82CFB4AAC767928
A57CB378F900F83D458624EBE6A7D0067E3605B993F5CFDB502635117336387D
170AB42F95FD62934E4EA330B8A48154D410482DA1202736A20966EB10A2A8A5
7A14B7F2D4815E0733979B9FE7F888ABC36137C2137DE0D7EBBF2323C750C674
1543654A34C1C67C390186CE712378CC6217567E4237E92A3EF7E4B3FFC5A421
EEFE780A9E6A964221586204FBB205E243C953608656A6EA9191FB546BB34338
E9CF17EF1AF57B30934D33BCB97230F1F85044E95361E31324B0F048C2F099F9
085FC2395C8F5A89348C414095D3732590B5E767CC184E9759AEBEA33FBFED92
3ADF87B75E8CDE74E37C9AB7F35D50296B0B4189328CF15E5DC2EE5CD4FC85CE
C5A85A6059067CD3DE740A28533FE2F14590626BBB11347F5815E0FFF7BD1B15
072D732D073F4FCF983F6E922F751B981FCBA82AD0C8D6B4811AF48F65A36B03
99A326E0A57B695C70C33A4D4F1488C39AAE61A41BAC6A15727CE914A23413C0
CA57A43E7425065D6CBBC712B23944236E528DD56974529CD78CADC41D9815A3
64DD46D9E3EFF7643DF718FCF9190B3B86C38960B5D418A3D4AE53CD4447780E
D76337619F86AF1FB6373D0CEE6B46717AC744B7FCDD625749018A1EC11CA079
F2DC48BC8E614CB8AFFF61C8E8755EED55CDFC39A6F7A16BE10E7805DCF438CC
D7FC19537C777FE5B14C7533FC83F1131E1180CC44960AA1600E43462194A5F8
89B5AA6014C09E0B928D19651D8A66179ECDB576A5BA94F0A803B5F64E306D9A
113AB21634589FCBDB9EB2F5568AF65E9C0794413E4C85F16026E3DD8C5A10EB
48C9DFA4F51793CD45B0EF668E0DF2A560DB14FF55C12F62AE0CF769BF44DE26
E77B0725725E745EEC6CB8D87394CC617C2EBECA7E694ED336AA3C9E7AABE7B2
F41AF989CF572E8765D19720998AFD5A64D6903C9520CE60D218A8996ECDDC61
38478B29F1588ECD60FFCFFF704353DBD5BFB6B54E649CA733E6C393F4819324
6D471693F2DF2608C28329316045535EB92032EEEC09E50151C166892AA24153
03D2ABD61EAD6A44058A655C5D91AC7F8E69FFE57EC149A6A210BFDE7976F5DA
72A975945FBB6481FBC4F25889CCCD84E33196CAB854010A9DF87C786FAB2366
A812B1724431E965AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB08D07C3D7
0161F0724055E78899DDF3BCC34D14196A6FE920F82C8D6C46CA36C01CECA219
E2EF410CF4A042BBB7D252F2854291E6187C1796B0B28917D4D32D3112ED78B7
415374AD07575B2A05E4D3E10656D67E638423FE23278F98D87173A9E686234B
6E8B6A41A1576C0086C730D91093F42EB0554BE826A2F95A9869D7F0929D5D05
E540124D1983CF4E2EC062206BD453B0ABB870F0D7557BD333B9642BF675C978
FCA80A7BF2567CAFD946F2F4E01311B8C2BCE3F1063E50BE9ABC9D6201C7DA9C
846205E522DDC3FC90FCCF6D6AD0B2BD861801D55698E3D6ECE62CE5CC9FE34A
8AAB8E3E08EE8FE60D5C71D367B7D2A6BD0C527C07577F3DDEDC2832BF258013
E878EE3C5CC43D6AB4C81C1933B0A5C97B6B8F4763D21E005D89FAEBBD7D8B06
F3FCA195BB4C89ECDA3A07157E9BEA93937C58C1343F95B6829531FB2A32A4C0
367F3CDAADB9A370228BDD761641C0DC2BD6D790B59A00348EA1FA8F9014EA33
04ACF2259E1A12F791CF64CF7BD79623962FB0309E6FB7F313312DE7DEF9F458
994898AAFD267FC4B53A97F7E2BCE859A035DF08003075C5109F898D7ECDC466
0B1697E7A5AB01D4273EFFA969966A789FA2F37D71EEED9C96AD4984EAAB559F
0DFC79032569A42DF98102105656270A536E5DC0236DA24612993121152E7902
8CB130D5640E351CBD65394E3E0D962690F98D5F804CA55DC54B2B25B0996C2C
590BBDDE3789C01ABAEBE9D850E8A6A969DE6310CE224B6C00F8F4F6193B542C
21579BA36AC6ECDC5F4BF936EC6E3053A312FF5DC8CC20403BCD3BC892094A51
28E251260C8CEE4C5C15AF4C6B62C52FE635D7DBE1DEBA4603B10AF174ED9344
CA2E9C00B041913AFEB4E45707032333B2192C54E2B76A28306EB1C4001F386E
EF84DAA4E5997104B5418FC765D3EA63E5EEB2380E4AB9E6E655AFE1F78232AA
A9795360C83D537D6FC32389A0081A6841F40D761567EED3DD7565C4419B7D05
BCBA0D2CDC7DB0BEE36F7EA884C1A171A7288E62762BB9CE6655483CA7FE2617
318489BC2C3CD7CDEF8DF7B401C707A7EE18656AAC3D7338BE98FC557B30B2F3
BDF593E7EAD6835EF99C59A633B5520AD358A2E2F7CA8E1D5988003939B4FC7B
AF3BFEC5B2641FD9D91FF93DA9079A234E09E8B5575F5FB13461FB89535F990E
950EDE6B10DD3C458AE359F86E2DF7096A608E680F6B74546FCB5442A2067414
6871C1D0C084ABCB33E4A2E7D67B6DA042DF0799FD145FBCC8A289062B2115DE
2E132962476617C2F49D199054E5F0E9EE69FA5F8614B44D095BBB0B33E61662
18E593877C0E4428181A78B5B1720FDCB1A22E6098A016C162FB7C3A75ABF638
A49592F083233B3503B980D1C9913D27FA1EADAF5CBAAE66C87383DA14049C84
56CF4B7A4333C663C65F5A9DD27CB4B23D2BC73B6CF5E6C128A31DBF93F0566A
59DF25AD24664C9841BE1139A5F3332699713A1D0E26C392220832FB05CC9474
F3E847DF66512D014D5C7ED296C3441C951FD740FE6D22505EC7C1DEB88CA5BE
13F85373A87339E994EA5B249B7A07735A36737C99E1B7D6043FEC3188E1F4E0
00B8C4D09F4E9942A07BB377305B3AAA5E741FA0C386F50D2C9FC7F252AD669B
B39A1949292A5CA05E483993169243AC5901013CC106B56125EDEBF81F5F5E1C
E7CDCEE753A4F34FEA0B2C6B2E0B3D11F7C4370E3FCE02D064A643D3F64AEE67
9B05EBAB718E18359CE4B4648049569D425DB71358AE548F8B9443D02ACCBFEA
0148283EAD2E621FD650A01D43380FA0F0EA14F929D5598F4437AB944A06B5EE
C3343EBDB0328951941B644D69538C3D023168CD87F7D769761E958A21EC955C
2532B1A884523A0634F67D86303D31E11D8F99B54AD573C0386EF93C796E4644
E6666AA8C4917ACC013ED5E37335535F422A1718D9001FA1D6C87592DFD93374
E15A1242DD6949500FF5BF055A524058940B3C3A1CFCF428A7FF30A81406850E
2199B8D101C532C208FD559CD5EC1517FAEA5DB178FD40C64A56F4CC632FE369
A3CBF7FA3D76E327E2340C5BE6AB5810C54ED453B2D91B7EB008C8CFFA23AA87
E058A67FC115CA7A2C5A4CA3FA398618CE2E21AC72841F4009D7F31CB7E27738
68B09E23B5B94235E78793F1074B8D35840BD27D684BDBFCD1260A3BE4D2BA08
E8929D7014098E34E802732D4B23AD08E64CD0EA508DB893617833C7E9B1C02D
E323917F5A206046CDABD9D54EA413DE440DBC05D3F178B531BA4517B1830025
44530CED9C7E9AE60B4DA8A338C4F7B3F6AF7D208B09850FFC70DA6959DD3925
CD02D3D4276215EC675BF3F31F866685467455BE9A926C7A8F741AC4F25DF855
917C7FABEEB80C7C7A71455ADAFA8F7470F639F9707F00498C2F98347991A8B2
820D5B929CC239E4D9ED8E6364511E5A3A2882BF41514C61396AA4F6116F0349
3D3AC7E24AEBBFAF2FB54CA11397D8A976701F59AE33B4F51FBF490CC44569D9
C8113DE5C217E4514A2E521FC84040370293A77E63F30567B451D76FC20348CE
6EB0CCE67ACBC9F71D32CA24AE6DCDEB292CF3830F4791EE53CAB9FE964FA7BA
3349FCAE0416165D434AA5E9FF73F7FDE4B88E04AEAD277B83332AC40E910390
F7BE32515432EC52E9FB5DED6386B687B7E0C89BD90577CA294FF977FCDB5928
21C7797B6676C6552C3719CB2FB7C4B1311ADB97C07BA247725294649528D757
CE24139474F15CA1082CF6930F992BFE670100F4853BE2ECC574316F84C6DC02
8711D81E63B3B124574ECB349E8F594AB5EE632A0CAEBE8A1587A7BC96C843C0
FACB55CB823913904255CAE84EC64CC77056BCA42587ACF8A02B3B02066AC098
0605BBA0C489C4D26F958869589C725FF3D244638B3F3FEA78E0DE7A3ED4294F
3E07E3B5AF092E75B130F38D1835227FA2702D5777EE72D3AF28B2988B108419
10B4843922D37EE126411CDB1304C27BBBCB1DC80EE2D09164F479E4356EB19A
9D7CD19D1E0D135A85BE84A167B98E6323F36019D0C5E565600C98E518680AAD
2CD483C62A4038ED369ADFD996CB57449074C9ED226397F98EE3379D07919DD4
CBBDF2276A4F742D17B2672C5763CFC22D7DC9ADF7D0CD1FFBB4132DEFF2D2CB
FFA77D8882818D316709FE645442A83AEB4164DB120EA1B9CEB6B1BD7C890909
7119232BA6116C43397B718DB12DC4ACEE1D53E37CCB1B2D86051FE65A9D9356
95E0CBAD108C6E39ACA1AD0A50EF62CA412F6CFF892231A4CA839D583DA9082A
45B67D71590CA159850004D998AD661208C9B150DA681F860446B2CB97CC0345
CD67360B1409548879AA92DBA59FBE9749195FE17A05EF741F373467494D2ABC
2A21A8E1BD399CDAA811899B6D9024B16C04A9767D4A7762A889432615500899
37663D22173CDD1FC25370ACBC3DEE47791EC9FDF6C99FFC1E971B8F1EA1564F
1EC6F3C3661413A13E707E88CBC5B2CBBB2642E6E29259311ECCA99D85192393
C682B739EB43CAD8C3FD4053B2D53CFBFBC5F887EE337093F5C8B64FCCA59682
987B9B84ED82F8020511E82EB031F9CA902E86E8AEFAD95E18348CBAE0CF2793
35C7F70C49151F9A6DEC4494C416D9570C099718DEF439C802A282B6B6754584
8120B94B6FC9AC3E7E0C7C0F205D9D2BF87142F762E1046BF3284DE8183A1B00
377476E629469162B172D4A7441692D8C8C5F39807B5A0141F00596F1DEBE79B
3715AD94901D2CED0FDAE6F25E585B8FD022CC2DDA28D631C559BF07691A58E5
0611539EE7C418A95A9D499B0ED344E59122A4FB4C3CA49B042362B27ECF0385
2E3A55AF93E60295D3DFDD7D8CE708B4EAFE9402FE79DBD95553AFE83D1D6839
6087A7B0CEBC56A4BFB5D767B629CAE421AED77C75B62C90E3730D672D35BB4B
D7F99D5D94E7E7B211AAEF0D33B96EEDD58357BDD8484856B0A779B08DC6789B
4DE1276A2A7BAB4C05B2EA3C40B2ADDC2B79D0F31338C07ED850100CC3FD14E3
8419D1B23194EA2DBEE924918277E03A974E2B00FD3CB1817FB2730EE0E2E1AE
370CF6947E0DD7E52273545FBFF6797DB909DA0EC23EC80B5684DDC99B45F4E1
B3FEE159A7BD1D4C6FDEFF14C720B6329B63394A8D461632C1BFC4A2365613E1
103313A74CCB40138AD0C48A37953FA3D3241D90E8850AB5E4EC4AE982E7A8C2
65E426F4A4B17E3F15BBDE7E3C7BF466FE5EA63CB81D0E0AA967BCD8C25F12D0
0976242C522B45E2BDC8F2611D60993BBBCBF095024A6526FD0229D451A1EF41
60C90D2A1B932C5284AFF7058A0797D829A8B801321969CD85C15517B81B1C5A
256A5FDE9A2B1CB25103C640F238EFC148116B2C354852A9E3CE4976472B4EE6
F24601341A77F5F142B39F0988F70E37F7E8F77C2A44865D67F18F6564228D73
A40A65685B3BCD206A84C06EB88EBB093410B1FABBFD15B7D2104D446D5DCF04
8F7D212B43733B5C933A3CB111127895BBA8D402BA3825CE9DF1E900A25BFF1A
D33E56218251202DB199C001350FC1D75225990C2392C2407DC3C04303F50229
E06D584281252C72C2E592DA2E798C02F2AC9181A6C434512F1A512FBC3E5F33
BFE586535ED3533CEA8C15960B4579F104CC67D1EBF897DF81CCB6AE7B626D62
14A064E92CC15ECA8821065F2E1AC7E7711B19399E7664369511CC1700DA3482
83D2EEF918648C5D2A54563F2FD19BA0526D38D1F39973CDBC2401C79FF0F48D
18420CCEEDB9D3DD0116AF230CF1B110B19CB5D3F27D47EF2C4E945903C79D28
60EE1031DF608061225FD380BBFE831A02D7AC53BACE39AC902E2002A2608144
2514E905203DB858BC04026ABE81135E97A5DAE975B02F3E02EAAFB0BBB70518
1C488C59DF2DD5881BE5AF04217C0E37B0A842FF6AAF733484067049FF3048BA
315C1A2711589EA8B8EA3B3D439D97107D20D9690549FE394A94A39E22A77903
4EA5AE79B7550724EE655DA0D9C5910F20FAC75E10E7447821359AA3EE99C2F7
551526C5708CDA103FA5859279BC13F82174C0ABD8D893A5F7ECFCDA58AAF867
D05F52F019C13F09E4681E9601EC67B1EF5555D1194E12807CC188BAD7026F2C
6CF57140909570D40C2037DC03DF4FA2398B5682F77D5FBAEC255AB7D54CF636
D1AB69B16C040D99095E2F4D4E15E5BB9ADC965C561AC5582BE89A84FD2C0019
156FF9B33C8FDC27D67EFC22C9DDBF4996EB005700BFEBFF84387DC0AE4826D8
490C69375D5A05FE369D5BD278291F5811A89F3F1855D60C0BD72862FBB60373
8B278ABE56573B3F221FB7D1D6FD1FE0AB37AB6FF20FBA7C8635967C073110F8
23263BD25C5A105162D671BE5190085F2DA3329F0F729743CD876702D411D67C
E3797902B9B0F9BA5D54C5B7F62D5A1C5E4CD8533AEF78FC681880B3CE799AEF
D6E10E8D8704F8ED72CF2BFCD63FBFB7E57EBAD2F07938C785661767B7CFAA9F
92D3DB8CF30D6EFB6EB11CFEA1E36F9D2391FE3ED3911DE9D68B07A5EE38CA5A
266E761DC0F261B51DE94B79142482B2FE782341C78C9B11F967CF6C906A3DEA
6DA85CAB5CBB66B462DAD17D867CEA807C8DB15485BED25FE421FE29841D8C2E
56EC2B520F0EE20E0C962D64B492483C51D410761DCE6EA3A8A4C7C3D49F7CFF
C328B7606181315DFF9B0F17EE2B142CD0E148EE40447F27983DBCE32C1D2C36
685BC9AC2CB25D18B94F91BACFACEFB61DA39A74E8C1BF79D0ACA4BD4A98898A
CE4D252B1A885655FD44E2FF3ECD4D036A9B74DDE799826D85FC020156B39C17
EC4FF27307585A45D6E5152FAF7E1DB701F8E345E74FFEE4F2237D5BDD93FBFA
330AC3426AD987867C257217C859D48C1603730AF9F34B4B689DCAAC17040818
5E91647F364BDDD7DC5355E62E2C52010B061C7F0254FD0B85AAD7CEC50BB442
04F588655D2AD8A06DCF95A040605BC8FCD3E696539C43B13EDB80685331C5C5
999B5AEC80E5C6524D9749810FC271083A4988777B0BA569D036482645367F7E
7A1BE9C389FFC702276681AF7D03B31878FBB1F73E41AE2BFCCB5A21641634CA
6C9B6C1CEFBE4CE4B59F9895ECDDE905EA49C7DA55875A3CCD94F522EDFCAE0C
BDD9C92E420B3BB2B2CB9369704CE85F5ED2FA84096D5D15D9956378F4B743CF
C5807C551651FF922639E5077C139E3FF63B18F2990562BC3635993600869798
5AC6C0E4C53ADF7A753B4CE703F00747B6689D8E51A39E859BE6FB98EC670BA3
B1DE132F1BF1D98869BFDBC9E1DDE716C4A15A3338E6FCD31391045048E73075
78E0CF768A37F8703525787A7711638D5760569422E603172B7CC7BC55ED73AD
32F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA1A227BCC7B2AD411091E49BEE1
6A177AFE57D15B1C247A268A2B8B665673C1CE114FD0C713FDFCF50B512508C2
C5AE3917128DE2205D27D2ED7271F16CE48266186158BC94A7BC784E9865B00E
E8B49B918E886049F1F4939D53FB32116712218F9741A9D0BC2BBB60C369C418
3F654F6AD9C242AE6B9BBD92FA207757BD5012E76973C9A21738AC1895E95D0E
66F18703E0498EEE088787862508B6220BE392053C4E1985A7557735458BDF07
7449CCC50A9361E023AD60CF2CDAEEEFEBD12888FF26D3263B0E4AFC2203B280
3D2029D2403889525888EA18CE93A465AE88AF3C087A889420CA64CC1B060E26
0782BEF6721A9AF2EA7FB80F5EE165832AB3CC3B53EB605F73E7FFF7396B22A3
13FE9211657D49D2FDA834B02401C79FF0F48D18B27B15C7C4B39D6955E663FB
D627B6907A18F84F0812ABD706BCD88DD228EEDF4A530FDE758534BE09D2E522
BF59B268F4C3A1FF1DA06BD970F17FDA1517E5C0A79444E197C344AC6970A0E8
B800BE9FCEC2BA705D0B028E639231F93CFF3D70D84139F2BD6839E53B59DF68
9B917BE993B936D09CFC6643365DBC3BAA1EE086CAB137912FB38808FCEFE371
EB8F9D37D1EB182F077201C8A540508BB48AF1FA8D805A142530BA1D959BF559
D2BDEA085DF08600B9BB455AA872818C0B5B89687E260838270BC859E0C55445
D0F569CA2F96D6275FC9852959FF0302B3225CC8053C26F9562971E4A16406BB
B59EE0981B0F68374DF87E5FF943AFB3C5EE9263EB901D412EE727174416A7EE
9650552271020B06F08F9EB0D4D644BF03C6D46DD52E9E36C2880FA1797C856D
A3ADB5CEC1630DF5E33107545E86D68DECEA340EF8B0157396CF63CB6C40469A
3F4D5B8AC0F880B9A6731611F9348B873DC47E51E1E4CD774A7797CD5FBA4E4E
99A8810360F8E9D987C3F7B5782067526084160AF1B0DA4687FB083ED00B07F9
A2FB798237FC332258F6A334E6E2E8CC48EE14B51B2D985DCBAA5A92BFC8FD80
314C4793501D38A92AC9E8176DBCF87B73F9426F2FA2C3B1EECD4C531201A575
1BA153B513A289FBBED7AE0EA41BDADF94CC9005A0997F043F97DE8DA9B21113
6FC31A73BFBCDDFA626047166107D6C1A4FA0A63B3F805E35D589E9200A98425
202493FED90E9AEFEA7CC3067556D6E9C3326F850CDCC4742ECF013730FE6FB1
3EE3CAFA25EF53EF60773CBE3D31E19E1A4C55958ACE5DFBAC1A485EE9DE969D
A0B606108F458404EB142ABCE8ACE79E29B0F23851D7D7D27326EC057B188361
2614F0088974BBA62B31768D2F7D3B723D0E1D25C5277B67AB620E707E2DB2DF
6912B0860345853D870760C882ADA03515864E15A7691ABEBDB530467C1B779C
A7C017BE68DB552AB55CB47E11A31A1712A07BC881DC1AD3FD04FFB1043D57F9
A649D7102F1116E7CD38FB2D909F458DF431FDFAE9654BD1059F6B4E580DC7D3
CAB3A3EC0AF1B63AD424B519A0E4F304303FC1F7F0EC7DAEEA4EC81E85BA0161
9D6EEA04338D02A0C580917D2376B4E7EE3A8A30DB99A8993445B69803D81908
41AE7B8E7771D7A6EFE7F3FE4C18CA96E889C36D058D5FF045F4D551546672E8
DC09FA22E0C24CD6BC2EEB802ED91201618BC3655D582B75A4061C090AE7229F
6789CDB36A4D442147CBF2E75B4EC5DA57D57C069B7E143DB582EEB6BD3448EB
46D988239C26F97F00C8815F8E8667AEB01F784CF4FD19129958257E39E420EA
BAB58595A63FE108FFD2ACB66F6F2D07D8A4A61CD7CD35597FD05D2C227BFC02
B0959E87139ED2FC78BAF57BB34217F9C06AEC1518BB52D2F6115DD1D88682CC
9ED169B358F8B2F4421238F01D60667816F5A42F7AA5BDB8604DA462C6AF4BF5
E2E6B73BC33AC3C6AC970504A35FE7C56866FA8A5A7F5D5BC7CC6436E5713A61
AD7B48E815C35E946FDF2BE7F69E35B794DBD463BADDF2500071536523BE6C22
3415CE9C5467CA0FEB2FCE6151CBB8377E054F175EF581CD7EF4387121F7C257
E4223137295517C01F949514927CED346F36F88AD81D1B91FC0DF9817B2C5FB9
B35BECDD505B2A9316B80AD93942FC58555DB0135E453E3827658ED621B3E652
634C34A568D3F49FB7FCC72A90A3F52E49D0B5F59C3C9A69F63F105F95353C28
957D8DC78D676727C1AEB51932A9DC42291B578844400A79915CB032EAEEB560
5C717968F1CEFC13E42F1CA276D23F62CEE070BBF2381E855E2B4FD03651828C
07A73702FD68362F75C7436E3A040EEC08281F8E8F7F3A883318B4E038DE4B85
8D412378C1D0D1DE569F50920463E1A1D38ED9143A625D9E64F0CA60393E47B6
E9D27DEE23C72639D3EFA5C572B8C7AFCA934EBE4F1BAC70316463FA0F67DF5D
A1F087B6A43364B6F584056C92330FD6FD166BE9A3707459C3A421FE3A969AB5
0B5A53F0BBB6600C77DA7E8F9961861E7716563E220B11DE52B24BF9342DDDB4
B2D0C7E0F133632EB0FEAD12C90AACDA291FC89CBC4F6DA585AB0FC5077F844E
973A275571270AAAEDA4FB9ABE537DEC971321B255D978C6282FA84143EACDD5
98B54BF11E157492C74562C086A1904884F3236EF7E194AD43A1386641A9388D
5707F95831BF9C8B2091843E474D28FAD04FF3A7CD5B930B2B3335BCE85963A0
E5588CFE3287EC4C751CEC245EE57122BE25DB50188771CA46618414E23C034E
A1B6790F64165A854734C1091858CF9E32D31507E588951893689597D8D0B2A7
EE930B9CE65A22C574206047A904D7D2DF328E55C879B2E3C16B9691ECB12808
BBDAEAC6204A5266F14C6AA052CE5C684D00968763D902D4C023C8AF410A002E
A5B9FABD32E84038CFC10C4AD542644144201541010498781B58EB8FE60D5C71
D367B7061706AD3439F5A186F99F54D35EC3FAC59B6E2679F145BD21326C61BF
37D232FABF84427CFB23EC670E1C35852D1C53C75E3036E223A0C255DDF36379
673B7F31062C8D8C758952D5AD29ED366F4177E2E0B3B5BE9C96A78A730C0E99
E1D5E7D3D4CDF1732B6ECC0B7E2B2AE766660A42B875847577AA6DB7433B1B87
1A62E6B6D6808FB229502C5EFC18FA4AA651C8D7CB25B343E7B5F0E85DF9711D
B0C2D0FF205DCC9CD4FE8122F4D44CF0EFBAA2AF2055D02F99A81F727CE274E8
1F0CF2062D9BFF5F0286CE700A0923DB1D133FF18AA75010F842DF772BC49DBC
EB48580E084ACF8AAC31CDF460C68F2C17F30D5365E1C9FC73211E2FFD915616
24DE6F46DB66B4302005863D0AA1E7BD12B45836FDE4D38AEA140F1869E4F6E4
72F11ADF29A911BEAE79AE60ABA3E8097ED8F1FBDF3B2BE1E54BB8EF4B2298AC
E062DA121ECD81E124D3596B5D3759CA73100824B7985D44834976553F4EF867
C2DB5EA00EA6073F72A6918F5594363F9F9F8CAEA2692B1BBACE32B0B7C2F3CA
3ADDB4C2F5196C5CBA1CE980AE5BA58FE15D61A84A48CC5DAA985618E62A92DC
385D500C0806D9E06316B47CA38A4E7EFDA5FA9EA1754175CA5A03F1EA20B9A3
2C49DBDA4E288229A31A90391B09D0BD0D0B20C176D17B0A6092C9D21FEBBC01
CF65EE3827A5D3EA84849033D79AB274EDFAB2B21006057BE231032D35EE0DEC
031233D6450769D349DD7DC6DDB53515F98484C0C56BC9B7259086F49132B028
627243FBE816EECA78B39B4C0BCF2F4515444009470B82072299D5ABA5F85802
83617CAD88664130C477686FD84BE5910D9279524E17DB7F755124FC9BBA7B62
4A332537A7943C05C912B7B603BF0C8C285C8BBFB442A2F4CDD2F7065CD0E152
FD041E3953FAD7DE7EF6AD9F165F0091D0A1BBA1BD097571B5ABC5E3E6B69FD9
A452321201C3D125562CA911827930A74276956954EF977F6219FB3257EF9FF9
91D66C214B28B6F6ED1E8708BAA5AB80EC3DA693D59FC719E07DA8EDA49CB967
09CB19E6322A5EA09B47D28192B65AE745EA637137884E2D4ED1C39B8D4957FD
070371E1EE0A2222A201AD9F57D2DE1F48F41E26C9691236D5D54B607637D355
174A0E781F2D1B675EBDBADFE3B9EC715AC390CA7293000E726DCC056E46E71D
D12F5C1D499A9EB93CA7E30A018EE97AB0F3E3E49D91A5BE7B4756C4C23FF6A1
B3716660B39A5F54F8B9DD0E0DAA567EF0EF6A1C7E0AF18C7E4B9F14EB4B95D5
F85D1C6C3B3F999F8026F06971FE6D56219095421B5D50845E98972F3CBA9437
42F91434E2F1B9E2D81E02E0AA524AA029615E10090FFA967A4316B9A4259E01
BF078BE9FFD9388676A2102905B8CCB2F6FB2BB9ECB05FDCE4B555C4AD5D8D8C
753BE2BB67EDCE49F0CD164D037D8EB01053CC4EBD97996D00C0A41468AD5874
F5D42D0919F0C5928E797583BDC994E9C4C4A21839E5B6908CDB05C84C35F1D4
7D7CD6DD3C79920C28D6330593EB18C0C3F51FB19997889BFE3DB76B766500ED
A3C2BAE54DC67B7D14DBFE60E64AA900737426B3467172FB878B0AF18CE66D88
D05DC7574D2338A3C10D4191D8C1E6949DBB618C105C1AE360A7A3FB09D5DDA1
B672C4E8A52B25634CAB14C5CA60A73D64D06AD8BA139880229DFEA4CF5511FF
3A9CB4870102C2BDC737643581698A68410CAC27EF677F49FAB495FA436AAECC
59D188345DAD88CEA64E0961586B85339FB5894C8F68EBF19E445A9F445C34AF
831689B4B342B148AA93A8378024D2BE5EFF4C7DA7B3803EE3BE56E72A322CEF
3A86D516BACB5A9388B8A7D9346FDBBBF1EAE3A1DB4491C8A2663FA2C08D249E
C44B43F993F4706645BBB6229B0242A378214E8D5F206090FEACF9FD1AF3DA36
4AF7A4405D1A384F4458DB12932C89E15296AC7AEFF6B4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB5ABAB6CF43BAE
77DFA89F9D6EE6871A0B7208C46AEE9AE963710ED3E2C54FE6DF4B1C54AAA52B
15B471F275FF8406FDEA209F39609EBA8B9443CAA0E6222B1E11492D2ED6D2E5
DE21E630125AE0BA6F110470303F30BA776B0D690C6BB9167136A1638B15D4D2
C1658D75329247D05B9050D2E505AA097F2FF446589143D43EE238A122D6BC79
EA3A1963B94B9903CD874CF32924094BCD2B7969B6F1BDBB70EFF0F6E4AF1A43
7A205A1DF41714551C2356DB2D6D0EEEF7C4406550C1EC60FB40476AD6E7850D
0E405AE6523DC0CBB3604DB806D9C695EDEC4479DD86672800ABC7ED728A70DD
84C33F8591A02C59FC1D561F2AF5D110E04F7F23711FD053FF0F727EE7A62C4A
4C0C8D10A93430C7FAD5B92D0AEEAE20A7C7C277BBF9E386D35F95636EC296E3
D9D52215AA05E690FAA73EC216783CC4F106FE6A77AABA48CD601358BFC654F3
C7516FBE690A6787F08AB0B03187728AF15BEF6EBCEDDC19B9F7DB2510D10482
76AA8C7A1EB9D7D6B7236413BAAFD8EB6632A16386324F98654398F592EC7FB2
3A37DFAB7F41DBB16D67AE9DB3C7A1C3BDDF94CC4DB60700C22ECDF227008EF5
3B1D72088642CDFBF5CACC3AD41CD762C0204DFA1F35FC4E652068FD1DB8B111
1DE5EDEAF226F0BAB4CD7848CB68A5110310C59E864A74877AB523818DF9894A
ACCF6FCC5C78714AE6F776AD12743DCEA0B0F5106ADF3EEBE554A6C69F8DCB88
685B9321167777ADBCF0EEE058EC5BEC0EEC08C56D322EE68809F194B78DE928
155B9D611E085902458C96E9107070F05B58E93F2E2D3DDB352228EAE762E2E5
F3F0D68FEC6329DC8FDEAF158B62BB107A8AFA280C8538B731E33D79B7E604C9
12EA7DAC8E354F1CEA9C76D10F54F8F3D42FC229CE2A91FF4FE435C3E56A8EB5
794981122BBB107A3EB31B9A6ED3200298887990213258C4165D20E161F93055
C3432CB412BA299FB6769E965A664133801105A77651F118824F6CD00209EFB6
0C1FAD773D1394A7DD5C38E6CB8CAD300797CB90DF6EC37260EEC9FEFF583E0A
BA9B10636710D9ED94A70C8F62E5594718944D1FC6AB6F39837359BA3562E228
DE25679820A4CC22072E17F172DE4F5041684F4CE115EBFF2995FCC036C71161
523AE5AF8DDD8B994F52D9495940901361BC4FFF499F27B35E645F1A20FC3A54
B30B976EA249D212FEB1A0FD87F1F6DCC575ED942B90C55F0EBFB00FEF532EAC
B157DAAC6422F3ED006B7F07F20BA2DDAA8464E138A9B8F012D50FB0B00570C5
6987A2581B8399783DB2AEDE94A0E33BB044EBEF77891050B2F98D2A270C8FAD
FD5BFFDA10667DABD530D337DE4B86A6840710368813B132072E26EDF6200630
67FC4367AAEE31DE919BCFBFA048BCDDFDA00D3B052FC327F987A9EC8F00C54C
1999A16191454D78530658FD613338577B53A6F58BA3780E1B67F83D17593A54
E79EEF1678D9B988653015F18535DE0810622F5370090B5BF7D18B249F631696
2E66AF7F418811708A9094112306861D191573E16B07960B1A21AEA6533D82A1
3C2CE3D31DE21FBC178E8147C5843519ECD47F4F435F098D346360D280B813A8
BEA26BEBEA07453F5F150324F5348BEEBAF5BE5B3848DC05D38BBA3539E8B0B2
053E697EC96B4976567F1CD02EB366E929DBB55842D44C4D6C7FC55BD529D9E7
C7EBD59DA8AF646140AFB2AAF466E041274DBD62E359A545DC5938C0C2899042
585D01A59AAA201B4F06C7E88321778E5CB12B8789A8A267C1EEA6D458112EF1
FA850A4A126674010EE3696D11291F2E3F06359FB2DF0ADF67A50BB4E5B18753
CB1E6E18FD08BF00E01DB6497330342C005EB85B3EF2E1DDAA2510837ABA7A29
AB1F4AF533AFE274AA38DDC172B36CF25F8468B7C214756597BBF4E22AAF594F
AFA480EFFAECF4E753A713F08859C8F4CD598690F1B34708AC8A56474AD40E2C
9EEFCCD3F6A21C5A0CF5CEC676E2C3DEA02E1A24EB1391BB3DC478ED1658008C
DAE661378C0DA09059F0C79B34A18B54084276B67AF48F7750E79A089720FD79
9215197B074FF57B3EF441FAE9D72405C9D4D81150A2003860B4817BBE4381F2
7DD267A62D8774BC572DFBFD7B74D09B544503660A4890A8E7FDDDBC0C0F2CB6
634A3AF246BCE237A8486A3AA0C9A76C320DDC35333365B9BA55EA06912BD6A4
4BE069F990585122CE0B7B911EB8AD8A29161B82F04EC77F5542BCCC7D361098
55DA91D630F30DF34012DE1F4C98E20602B3688720CDAACDA7BF1E9DD09B987D
DE9A64E9BBAB13EA9594F984129C446DD56ECEEA07228F0B0DD14607156F9E56
8CBA2EA4399DABA9599D2FF00CFEB5310A2A93A95806960DF734AFFD732DD289
A3DBD48DAA0E8A75F10698EFCDEEEDA99C75ACDF7262119E30EB552EA395B893
F42B5C037A98F21B48AB50B63BC616BA3858E8339ECECFBD03C4D31652F4BD75
8B0748B26C912BCA8F6908BFBCD4CB3919066DCED0266395746893FBEDC861C8
B6559F06F3AFBDD9A0F6C3E33B3F38C6DF64D4FAF490734DC0750B3E204D6FF3
8C1F6ECCDB74FEE4C6B0BF4F58336B495790F2A96F1D10C8EE6A8AD288A6743B
653E336231A46C9B5B2153B097CC1B7C792926E857CED60024172E360E4B169D
A93627B069223B86632842682BCD4EED2766A69EF6B97655AD0CF2C5920C97B1
584B7E0051107EE778B10EC2C52756D5AF919E01757021B319D0FE32E4E03247
DA0241295102B01F5FB9CA6867E652C67ECEFA041D118A85F4EE5E5EC8E91FA2
E4FB940228C74017D2A82AB727AA123D18993CC91FE947C21072039C8206693E
CCC8A6454935E38C1FAA3A2254B70BAA79EA27CDA4EE219284E8BCED896D7FC8
3CD20EE8C4D5A59E02997BE85E1E18BF26D15411CD48CC6C3D7E0E41EAF61191
F63AC5EC9FF6942CF30A0EDC4F9DF60B75AFE80A3F99D8C3AB802093C5668BE1
D52278AD0ACFFF1A6C37FD78F0231FD18090D6EE761B5AD3510CB3E47EEF53A9
804A3EDA1EC5F9776FF9ABCE0B95CBD3195CDDE849CF54E4389A1FDB3F30FFDF
2121376CD97019E10B77B8DA109DD7181880277CB69B8FC62FB350D208B44D9E
FE9772B67F797F9EB5B41391DA87E6AD902DC4084C1D582F4723F2143CD07E0E
6958254B6D96C9E544069F2EB3B549BB128053BC57B5D0FCFEA11174008CB530
BD40ABD4B9459C4AAD0A5CD393B69534D6E2F7A06C70DE2A317DF81F62E96255
82A50F194BF23310C2D765B3FA6EFFF40361ECC45C4D38BE8911C50F487EDE47
9B9877082D321C9FCC928638FCC2FD5B04ED48FD40B5C0041310556883CEC750
C615EDCBCCDF34879B01D3016CB710B5E3B6C185648120398E67E38F520AE0DA
6C021B36D7AFDF3E2E23107132137A31416EB9A1F80A7662D4F231FD969C7AD4
DAACB1EC98E0CB8559415D8B6C4206652AE8F04723A732022D38A38FC6EFE444
7480B542B229FECFCD917788FCB6F16041FAE296405CA92AB1E898987F8990C6
858F1F681FBF99DFA54C7F37D97D22AFA04E1FB8508297F5603CE7AAAD7EEB1D
3A3164888AFBB114923D8E28FC591A6F102E1A32153D5C6216D9C9385A18202E
78D9E7ABA94149D10C411FF88FEDAD541EB1711A5F0493F2B71BCF30C440F3BE
68537E823DA67C5F9FDB1FB810916A7AE475BF608179C8BF28994732BCC57D92
8BC883B8E7606E994AC861A044502AD9A7D8C6D9C5C1BE025E51E444230D523C
81D37E3D54588330C297834EE3AF5505DB8C330686A0E356F6F36D757708B42A
5E259053C58C8DE2A28C368F2C21B7CBDECEDA8B484FD4DA121C010A40A2D67F
ACBE1CE72DCE5CDDEEC7E3113C9510F18204616B93A89518626BEF4DD08E57DD
9280429B46221987A70CB799A6F62A119754DAEB4C88C6F6D2CA046B557000AE
E5E50C0A5B9B4BEE1ACDB86500AE72576A26FACE3A2E744DAB92DCF193A0DC0E
0A7B0B3A647E93E5B3AFBDD4AC4A6627D7F75790571F65D0A1684C94BC96A0F3
9C2978B9D12D634ACA4FE2E0A3A7504E4A466962C44C451D3386EF9261524389
E71CF05793397E53B02B22244FD5071070C98873FB9DBC1ECE9471E0462F1ABF
B99493DBECF6620D1D6B9122DF681DBB192993B553CCD506E8CB4FBEC511CDBF
B8E3BB1F1C63D7778B7E33C1B22D8A2148EBD0A007DBB44F3C4C41FBD71B5776
61ABB023DEDBF9A5C8D1DE9085E8F49B12624894896CAB73A2F2ACED52AF9D06
6794BEAF0EB7F55209E236D848BF0FCAB713EDBFE54E4BA5BA08543D82141BED
8A2A563F68C1C2F0196F30AFA55779A6802E2F6C3967DF287C8B2340D731E449
5446B5AADC2BF18D391A6C24D80DABC4D736411942BBA8CF08157F21D63C100C
BBAD178EE10572D29BF719BC6C31CA404A9C2F39851C95C3076661D0BF5541EE
BEF456FF9B867B6994E2BA200015BEE977FEA781C3B8034170F9FCF6324AECC2
57276A065C9DF33A73898D0891D1AB821CD8636B2F07B289D656CF1B5C445288
723EED15A44F4804329268F442AF37B948754D013C105E7BAD6D744227137D55
E6CBCC00C5D249B9AEAA95107DE25BC5A014E43E107F0611B869DA864E1C505E
451409F058BBFC0301087271EE7DCF85F3B347CCE0D73E5DEF603D68C3984D89
641875C8189563C1063341E30B49E0AF725F33C1522522D8B549791F979636BA
68231730C7F28137AC3A0D90E781E785AA1CD03811F133C7B0F74F32D282ABC9
0B92FF832A80CBB0E8775B76CC3B6C8C1FBB8AF3E45977B41B9BD11B59CFEB87
6BEDF372796DBF2A570E488636BF6983880565218FE15C91AD9BBAA15415E993
8CD935C01AA86B81F88FF924EAEBAC20AE71164F8295FA225C4A321A620A584F
F0F24C6C1D3E98AB1570383ACB5009CF562FEFE2EC2AC479672A418EA9491209
1AB5F683572CFFACAAD1BDF1129E77258FB72CF9C1B8426419E65E0508A25F0F
5B37D2BA594A04C8A90B658A61B785B8AEFE9DBA015D717F24BAF474A9CFA2EC
28FEC13422167D2F49D7601A570E09BE8B1B05BCD9E873051C730ECB6E0F0108
5AA2E37CEFD22751783B75A1DB76E63876B6FB9A2B8BC293A7C4AFCDF45E0D73
2902199C52E26368C631242A501B1BBDC357A68791DA15FF5999A8A0A26A1C46
9440C75A4BAE19A4D4D432625A2D058F575C72F4A10CAD629B8CDB3D982AEF7F
9C9D4E4602EDEF6492A8AB391237137B5A5F890658A83970B2B20819C87E0607
5DC32A70F10CBCAC8D7FEBC71B33F0B065EBCC731CB2F06F856541DAF4971CE2
95929653513BC23A2AEBEAE056BB36132D39A445BA0B9B6F31BF936527C3F625
1D9071DEDF5D83BEE9D32AAAEB777F921741047CFF67570EBC29A214C6CBCA23
9D767C961776570FA4812507843D7D0DD6A94F6BB7B172899DE527DE95BD079F
4A919F885A1716F67837778D4A70F76914F18E31CA03E0231A1B6A81BAA37DAF
4805A33A5A69B150420866B70A7972443FCA85551CF6773CAF1BAC5D18016A6A
274164B52D57F0D75563291DC1541FEA71E4E811982D859B0F26C738D1E8782D
670AFDCFCBEF6BD68AA64D6F0B1DAFB12AC6686B4CD6EC151959BFE46E90DE9E
D306DBC67653783A51198028FF2C46980F42821A0BC9D23CFEE01B6950D5D43C
08932DAF40BC1620DFF03D5CF3813CEBE1465EA9D63C064A8F5957283CD9698B
571A023B1DFFE20277695CCC2E54A25041A959AC738AB6CDEA60427F8DC92C16
20641CC75AF1F20897BD0FAB1B2FD02442B452E56D3F05CA0DFF5AB1BA1C0D64
44AFF9AA7F713DDB309E79BF38C72A3F14BDF4E46B0E95C35B6057FA5F84077D
DB844137AB35E862CECB9761D4FD3514C700670AEF650F0038275688B9FA5A89
4C303738994C150B7C5F7D0A1B2D23878E807AE0D5A0EACAC1B002B5D0BA1E5B
918B293FE9A250E723A092289550B92AA1DB6AAB259CACE3381D1D4DAADD3886
574B51448D85C255A2E1DAE2DC15C80263BD076682DDBC81185A29E47A791321
559863FA74C5986B9D22177956A06F2F0A15BCB0FA021CB3108C53E594D9336A
68725E284431BC305BD145849727006876DC67F7E6D68E753EE8C12FFB854219
4324494F6A4287F7D60A903C1406D54E2DD9935AB711DE647B73A6ACE139B886
FF1FD4C383E278ADB93B56832F59BB54A84263AA774DE5D0D0980DA8C01AEFD9
E2D31CE51402C9EE862FB166CD62B193099610CB0112393D099E21D307ED52FA
BFF1BA20B62055F6F5D575988630F2A3958B22CA3FABBFAA56FF5D0326DD35D0
7DEE81DFD9F2F5E3AD0CA30F944079D60068823259D9742C513D715AA7CA31EC
359B324370983E18A1081382505AE79B652AB6F903489BFCA6B4D9F87C647CF1
2FF8D716A5028BE28E91E3C9A49E7C8F8F411AC30ADEC5F63915864593CF0D06
AF54F5188C2AAFF53E0791A8195D36B0B3632CDB680412B8EDDE58669C28B477
CE8019F61763D13B4D72FAF2D79EC8F4A54AA37F842A9B32F2FE9988C6BD2888
C29E3E9D166FE9AF620904169EBB60E48CCFD9E1AC3B2D3BE519BB3AE4E30C43
B74316C21EABEC7B7732DB269628022CE3B590C4DFF2BD85D2B949042E01A4D5
9C00823F588D2A6666CC48BBF1E3870BEABA5D487A531503E47663DEA9750F5D
6B84A0C17F76A9F49D5697EE87FF5D51FEB20379720A63410EB5647B86F5F63E
CE5EA6C01A16843108143C5F6FAD3E4A3F0359419766F6BEB6940A32A867ED8D
BDD16F8122A624D8D0BE2869F8E6582AA955CFF7718F67D96F823021FBDFE1EA
A294E409E73E461F74AD64FF7BB42DB57C978E635083531862FDE30417D140F1
BE5948C874902F050A1CF63313646A7667FC7D4DA42F0D66DABB88D7EA839B03
5663F5428FCE17F481DFE874DF1A96EDE8F70DEFEB1009FCD81B657CA3D6578E
8613B88538FFB12B6163DB5315ED2C0087DA937D897D86440AC7000CAA6CC64D
DF14CC848FCC88A78EB53A3D6F726B4CB11404144767FEC20D2DBA71B9CBE5A0
DAAEEF2AFD869EAA7853F121512E8B41609794078221BB9E6FC0B85996903297
0306F48D4C097EB2CA8AA05A1753BF384492A47170540F99232A4470C530C88E
5FDFBCE79B2DB58FEFE84FD0B16E02766ABDBF4025D18B60C4924FA613272A2D
9F2935B89DA402DA7EB0CB2A0FB00B1172078AA02C7D29B0B6037633F8A5CC0B
1398E5E9558451CD842C8F86DB2D05311D3D76F41FEC04B5C12B40DD1B386D89
AD8616B4153C00EAEDCAC491A369F897DD1CFD0B7214C807CBA81FFD16DD4BFD
C262ACAA1FD127B4567FFD39CA40BE4E3654ED3BF302E942F7448DAD42F73252
478782CAE44E941DFCD5AE97FFF37551EBC34698DAC39E53F58B992D9A745067
72F465E202A884165205F31608A20BF248CBE43CDB32C0C77A6DA995291B6094
E098E40FF4068BE9AE99D17B0FD43EF4D36C3C6BFCB27E7A60E5AA930AE77380
27CC95D698C749DF868EE78E48B1139100E539C23829946B8B8A1EA3F0909AA1
7BBD580B39011DB94742CFA8FBDAAECD4322929D8632C4BD13EF0508D92B3004
F9C662D61148B7516FD08C71BFE3541E2ACF42998197206D2DE0397D996F421C
900BEB42891EC6299F83EF2EB33710450FAF625D557EA3951AEF5A91CE7EB134
0A53D11D7605BB379BDFD1FDC40EEA5D363195B5AD9D7CB9870E81BDE37A29EE
8A4FE669071CDA4350D4FAC47669D25FAAFA3D3EFF383FE2AF033DEFF1B6D288
B3E4416A130626D5AFDFE2E93F07BA915C1AE63E1A8CA2C8839A350CD303A4DE
E876B91A33A69A4B2E200CC5A22F3754A232CB8F1DAE07F7B017624AF02CD950
DCF35D9D25508790B37E46A3CF5857A51149A175E5420FE7BDBD96B4370D047E
98A5CC92A44EB4C25C7286C82186EB73EEDFD49DE426BAE93C7065B09977A242
A630EBFAC30CD882C2D90B88390AB7712AC342ED568841BE8FD31F641CA1C99E
A71DD72AE6D189C534D9D555460EA68BBC9E92F80B744761290E8ED0E49466DE
E887E36019D39D700E23CD325C78530B4647F4462F88BEE4891CCE5632565093
46128EBAAF7D11ABA3DC2932E9D0E386FF06D282428650B6B92749BCCD23DAC5
5E103B45534751BCD775A3293189784AC8218ED43C956761169D95A3092281CB
50410BDBEDF24EAC2B1E0F17A856F22CFD6A5BF1A2BA3EAB6FB86ACAD4DBE2B7
0E8198A1BC0A9296ACFD1990B6E8CF001E06ACD96AACC54D1CE78A7041FA80B6
5331B9E7EC901725E190598A31E0BA4C800DC6929BE91BFC10A5D5010758C6BE
B975610A063D6DEE014475EE7766DCCD9B30F171DDE639B45488B890196ACE96
8D56DC42009DF9CD5B6E99AB623487EF308B4437FCFB9C198A053D9F362D8D25
1390471FBD381152783F034B649844BAE8B3FD4009BAC6562AB8309895AA3F6C
1EB58D2EF579A535CE2816498D130303EAC1F4215147057F9E59D600AC85DA22
DE061E1197C67D23C5407509742DB4E494B2014160CF85023E0F171856279D43
F1DCCFC8B534760DEF15804BADB8D4AE414A1410886EFF8D578A5CA935A36C5D
25FE6FACB898D648EF8D2D4339EF9F6571DBE0C7AEF33086981E774B082BE739
B428F46FBE2E8106E962523A5788C3B5485151F4DEAB7461609D1E612AADC1FE
E939D24196218B6CABD4E85705EA9242C0F7699FFE9D9192B03A578FBC2A0C99
03B5E8B293C2B3B72DA8F8E14A7959731A74DC4B215D7EC095EBE86A3CBF5B51
7BB3A5A5FD566B6AA2DCF897875CD3C254FB1F12E4965163A200CDAB98D323C1
0918F931D3C555B5F8060BEBA676168ED633145AE0E97EAABB279579DF674536
990521A0F85893CCA9C6D128B2FCE38477DD9E6268842E6C5E86F0126AB25A5C
A2875B48C61CB8112A4CFF5120D0CF463BCA4DE70B280622D99C8FD8E295AEC1
5BB467F3F5BA9D1007C869E8594D4138161162682A719C6F3FCEFD39D11A9D53
C18C3435ED03A52149BC1B5BC950C64DF2E82AF19552D766E652B80E10105FEC
8DBF27297D27D33F2EA3132EB8461984D3224DBEB1ECAEE51D244CBF0EF18784
5C9D8FA07562B02347CA3DE34E6210C26984F7E0035E5BF66BDB22301ADAFB26
0DCDF734723ED1C5E6EC8DC24FDEB0B8D539D079FCDC56E9BC4B1F97798069B0
E1781EDC78E93F64C1B30E31886B7B339D8FF70E8120F8B239874FFE2072A731
070FFB5095F909BA32986C3C0AD8EA8B2A01CF36DAC1A90F491152FEFC3E5E98
FE2FD44122E511E5FB2FDC8CBDF6A69012CF984CE12B4CF803672EF0AC1A4F76
C8B2A035BFA776036191C6F9A0E4FF565671CFAEACC4173E0163A0B6D795D776
875A9F89E29A8E86BADF6F6924B140920B73E76CA06B7D08706A1A9F91288416
98D39D7A6620558C0F4ACE6E6C2EDBB23894BC719D68C21A6625E48518D2E33F
849AF61C296EF2D2D1E090052B8F9E29B4FCE68B369DDF59D6AF5BADE8DEFA9B
A347858D3BB8EB28A7C6F669AAB46FFC62F8CED7E75E4A4C72088A7A79FF6DBF
CC7CDA10F1E84254187F5974B1DF0E0975D5431D458B546304FEE8E695E526BF
8394BE7D685F4AE35AA17151913D7AD7ED7EE1AAB9583F2C7BBC396BBE656E4B
2DB8C99A2430056778E69BB90B0D130A32445972FA44213D14B42EFFCCE99461
753A09617854264999009C8D902ACD8AEA2C2564C0646D8CE2956C78B865AD83
4911C1A179E2C3335A18DF7FC981026EA47CEE8FFB0EFA469E23050DFCE16085
05738399691E13A39724DB49888E5D912DC57EEB4FC17C7EF14F4E2BCE892FF1
9D3019629F5FFDF25B1DB0BFDDD97C3713D2D2751EBCDB6B4D935084759ED8BB
FFD869729A22714A5F0E7DB43CE31215A0DEACBB96873AF69500C16AEFE3A6FB
08B00FEAF1D31D9470ACE3649C5513CE80A9CA483589174BB8A0D4BE97BFC28D
2B06E30AAAA7D87D8EAC69E3C8B77D780EF389B8367EC023C64D233E20BBCD42
F78C46D62EC4BE01C5454E03202D9098BDBD3164E8FDF9AE09FACAE17EFC8C1E
9BC73476E5A883D850F4F7E5F3A3B3D2F64D8C9A780CE75C1813E06A492EF063
3D73C071CEA58830A18AE1C56554E896E5B34A0BA7578B14A1DDD2B86E4865F1
E32B00231FB2DA74B4F1A23EF485F0DDC387E4EDA0C0E69FAC766C495F24AEF9
3D86C1A0DA6BA58119FCA2570964C90541A2104C89C522B27B9A66BDA5717AEF
7388F7F8E97845546A29FD01407126D3973FE22CD3AC4F6FBB0AD7B96CD1A203
BC18A2DD5FD92C7422C4911428468FF6A49FC7F3B15E63C8A2951F771CC65632
7D1134617F6B1B60CD5603BA7BD6A9F971DFCC0433D3116D7E782BDE113598D3
6BEBCE127F142339F566E12D07B1944DBCAAE4DAE0854C35819F4758E242256C
054626F4D4D0C37879D13D123845EA61D3AD18872BA5D5D441EA5EB5A1FB8677
C74969F073BEE1699F55E90CB69B74A7E9FD538C49D403D45DA5C4BCA6B90B4A
5C5EC7A038AAA4DDC2C4F0F1F2552056365ED1C343B1EB202AF53BAC1B43C536
C8ED328F3925D37219154A0E4E99E0E9E5C12FCA7A5AB0A843C37266B67851DD
D3608FC28723C74F4DCFA46DD8D89C6948DF0BDA3D988D72E65FCBC59DC949EC
45400A172C60310C10FDD889F47DD90C8DEE0F0311BDB0A6520E02FB18C0C617
CACAF7F930DA6133ABF4710CA42F96220CBCE87E16555FEB4BE079BFF6442EF0
F944516AFB299520B40422EA6E9625BE12BCC890687069F1F4944128CBE498A4
419A69F3E7EF4200EC7D8C87689D4EC7306093D4BCDFF2FD8E28CFF4AFADF09D
8FCC043E62EF6FFEDFCD9C2CEA3A186DFAC1138901391308AEED3A5324ED3BE8
E62A7510075ABECBA8375A5B8302EC7DFC9D2A29FD3E48D7EC7516615FB48FEB
721D19EDED52455E178DA0C5E93D898F57080A341C8773D51EF24DCBE949D46B
A2187F6EF16F458083B608401CF88A4E2C16484E8EFCA0743434AB6473D105A5
E46744F1184302B7B5D50E7B7F017186C5D9BFDF8F98CE05A7ACDF73616078D4
5B3BBD8DD4C3D1FF4C0AD8A985E03B45448F55B50B9B092BA18D2F12E2383328
7AB7C72FA3BFBCFC3EE3AFF3103B034B1543C641A991223F69B09071321C91DA
2EF7558D9E3DB9E1324E267E5BBE4029B7A84555759D89EF17A343F782C9C7F3
EAABD101D2E2343E0C2D5367ED63A1607BC11DC59C4654B1E0B767D2CD53DEE5
FCC576EF7678A37C708A1146316E591880970579BCF60F78DD09BAE895703094
4E56C12670242F82D664B28683C524F16CC93C22560F7401A858ED232D3F24C4
833C0DDCC11B30EA14A273368F4379C5273CE650334CA0482B00082A1430E352
31A3BACDE6D35E8327E3A718388A1B10A65513A3AE377A99C19512E192C3DA68
D49F693237D4CB989D1C9502A162C1CD881070E537D301A78EB9CFA5FFEB0E53
1D51EE86D09FB26022850BAE5156617C53145A4432308D881EA47593DA45793D
78DB1C767A34A4359C6A80E06DE729B2C9F9C65F94E887C1E84181B994B753CE
A3BCAFB0C76EF8EE9A5E0740FAFFD05392F5D31C37EE24A4CEF2F1CE32D571A6
FEA2673D47B97BBF3AE5DEB1114688F37BFB2E848BAA190B8C38081D51C44FEE
58DCCF5F5C82BA658F89C6F7CD9C49FC4F53E63E887A374E85CB7C118C667AAE
AA95EFCF76636C853E2FFF2FD69D42033C6114DA47203BCD1D3032E29944C86A
22C43D57D6C163DB54DECAC5105E80F73C4756A2B579D4F9751A587DC6F5F00F
05D3604499FD4BBE3CD703D0419B66FD5F62FFC87816D0DC75FC44464EFB7902
616EB6A3051961F5CD006A3C5FD6E8B3AD08EA5B540F9D4DBBAFF5F9340CFF2A
0DC32AC64A0E1BF2B85979EAF5FAB14E3243732F6F051600E1BB4108088A3492
CA92002819F5BD4215A715C5DF95B90D45EA2262A4B77BB9D95689E74630EB55
B113FA5756FDD15C04B0E47B87024BB6B520B34711CEB73E7CCCF6566A763329
8E23525985099F3EA4162A0CA3130E229B74A36DAB71AC4788EA3CCB0688148E
D66E7E371B247F39517BF4E9B1553BC5666664D665578259AB5890526FBA4771
F78E4AA320C7F7331990BFB60737C546E9A01AF310C27F0543B84C8E73459789
F74F00EEF12D52AB2B21836FE52E18111F2DA84CECC960B91D745187A0F9CE80
CAD75733A6FDD1D224AAE83466DDB87EEE628BC780F85D255D4AF4D4C8879982
E3F5F8A7EB43458990E8047B6407D23B3C25921767E182AE352FCC1C750D2B82
552CEDDBF767A92BFE9CFA1947ED21F86900C08A2822C28EFE7342B9BCBE2345
C893D840C7ACA149430C557F56342E2D972A7904FEE0C165701CA3C001503605
67C877098505CECC1F98433DC63F7C0AE63EC34171422704C13397277ACD2040
B51660DD1FD262490FA982E2F8FD7983924D27689AF57EA283EE09BB2A382FF5
41C1E3C9B1EBA1558FAC28007F98BE5EF74C0870DA416BEB33716A76421AED2B
65D3AB3686E2949989491D9C92229FF12CA3F49D9784D9943D2D62D96E87FA81
F3352D0F9FE097F5E731B759629A8F81A02063BDF9FDEBD5E03C690C5298D988
9C4100D11FF82E43
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5296FB33A7C728385CE3A6CF8AE664B90042462B94A015D5E8704070AA59636F
6DC7EF0DA3F7829296DCB0F695A236FDFDF7F6259B93A89085A7E9C818578EB4
A5B62CE7194D5AD4ED8D7C0A1593641F0609FBBBE7EEBD2D0C6FCB75E7A5907A
D7EDDB8B14D3295A425583E66138AE558807F859688E51C1788E04F8FF6AF035
3ED1B6827637A8043A451DED8B6A6F25C04968AAB2910DF1314D1B4A010CD4ED
2FD8455FE6FB032968765E65BE3556338A12454E8BCF6DC82DF9529B9BA37245
C3A13FA42B9C8A9C98B34D79C82F9E61598ECE57E551BF193BF37ACA22B901DE
D22B528806F4D4A0BFA0253A5BF89BA1451F39C395A8026A725FA8746E36EA41
C57E7E0A23C7592786987A899E28EFCEF81C18AC249388867DA67DA44DF3E926
AE8AEBFDFDD85BFFA477D990FECD8CFAA40F133E5B492B50B5B0A56669AE03A0
F69BA3A59693416B6758A4EE5CA1F3AC445031ED0B3FF53DD57E53AB4918EDBF
1B76FFC1DC977E95A4B4BF0AB273EAE0E4C1613540117E10965F800C4D68FC6C
6E6B1D1D19023A9F88A39807511D45410BFB50959821E14F973B43BE23DD4755
8EA0E536FA063D6DBE5E0587A1CCE422CB13471E3FABC48437040563AEC3FF18
E73E781CA45857DDE560013B3B394283B77D62FAEB6119E0E45D3C997CF952A4
EF7713EFF5620309096E21A686825B3FF021709810ED004976DC33831D413CD1
10DE5D757A13E41BC82D0980459AEA993B1A885E53B69F001742690F9808BF40
F20BC69852916113CBB5158E5DFC873FA6B0C2D93D9F77230D85A609807A5168
4145A8BE6A43975C6889379218C0E12D931BF34FB85047FB40947EC4EF31C974
2197948EFB982E4BB6CD532F97CED47EE0E668886402A70535A31944C0AD9331
242663F9133829CF75DF14BF50A20BD3A373198CB56F38BAFD1D89F33FF7E0AB
552FDBEEF31D677979EF1B4EA43D258292F85DA230D1B573A0F747AA922692D4
53BE4BA1FFB2758F28291F1F6FE28DD3226C5DC353ACEED85F6555D22E45FF2D
FB499D69F12F4CCE2832BD989259DC4A49D4AD1B581C9DC97722C444E1BD70C1
E35DA642EA0224A7A3F86028FA508EA0B7C8E8021AB9C36F7E78A1FCB3F11769
DABF2A0A2EEE072875ADAEC3D3A43334316C38964A7E9AA45ABDCF527CAD4930
59BB6DEAC694D5242B0ED68AB29844AB1ED55F31D7D723D6E9657CF914424E42
EF74D317123123018D1A97238AA98A42C53058A33A87D040A9A43DFF3C144D3B
70F916FA4A5032D284011B7B4DE933EAF370C2B8A5CFB7C0C43C6C5837DE85B0
1546EBEB064374451C96626F328476187101E35067CB41F763FC0F6950B2772F
4BCE6AF00228DD0F4151A3CF5FD03710257E69F6A4973D52B28D6CA91F4E34AF
897017BAF00719BB3BD4D84D1B7B4499D78177DF56958B251816487C4B96934E
724F616B55F212F19C2A516FAD51C00E0300CED68405A82F27DC0F0D90E7502C
3D8DF47D448DB15485BE5285DA16AE15C8F2FE27E99F5194F7B6155DF7C08072
FDBA5D33B1FDBAA976C475B734BA463409FA7694087A0AF3051EED31D9B6B40D
CD96BDC1BC902B99CA436114846D140FE6880478B42E7C08210E5CA3B7CA2508
355C51B30D1976F394D0A1E13562CCFE1A789453679BC3B5A10A2B5ABCBEDD71
655E482B2E90A5082DB21C405D5A620D1F3A73B34645F2DE0C21334AE0D9FB43
7AC5746734A20789FEA9497615FA099820501F4BB41694B31014CFCA5DCFD255
D088858F5CE1CA3ED5FE39062545FF6D1E8F8F57DCD581C46EC3461DE2884E34
EFEE4350F24A38BEB5BC4CE60E29C3A3C7227D66D7AC1970B318ECDE8AF4FDE2
02C27BE9895EAC7615927CA941BF5AC923D14D780D3386702C1B405B496D0BB9
1A19DAEB50A58FA0454A9CE27ACA8F6372DB49799F5CA131FFDAD747649DAB31
CBD759C2F9F6D1271BB50CC86A2FAE209B1A7E9BFDFA902BC1F61B40C27EA9CE
3442F5D91A97186391F3632043A295E20B36020F0BA12912B17D53D40A2B52E5
C2F883659C1AD20A68A98EE42D2A815A57C88BD747BA890548D058CF57D7EF9E
DAF5CD7F0C4D808F55588168B56500F104458EE3ABBB8B960E376B35B9D8D184
E6BFF3F392F2B1FCB716933FF6962B8CEB6CA0D55AD7C590C73BB5F44FF91AA4
3A6A17337FAA363C8C06EC3D3E9D9180496B83388A03C605C1599A2B89F3F54E
23FAC9AD3120EBC9D73F53D813C2311B9B8266E6D879752198F6CCF0816FAC6B
80301509DCABC4F8B83133C7570409C68495EACBB5C8C949F05AEC43218F410B
5D21CAF17361F2A7B9E1D1EEF0A922F368A99F81AE188A6685F511C5BE007E67
9958908702F5CF7E32C12738F73F24DD678C1605F3C320876230FEAABD359AF1
9B0F94AA52CC54AE390F2BA10757FA1AD809E6444EEFE8D3AB2CFA64468EBC66
654D1A46FCB5A8CD32157C5EE9DE91636C5D64C166797ABD0CB23472C6A1228E
90CC055291391D9222A7E0676A1A8828E531D41C51837B2EC63A2CBF78CF4001
D09BA28DDCC18A61ABCA5AA2D18DA69F91C196F62E601AA5B36E8402A2BBB1BD
D51BABB1A1DE4BE0DC4D782A37A121FD34D43BF5320516B77EB8B0D0CD8A7120
A136D9B4705B9C8ABD0E1D2475D4F83C486ABB298061FA6196FCC45ACBEC24E0
8B40C5E867BF245701C03C39C0A1E29AF3B66CBA539F7DAFF7649DCC530C7965
559944B7031CE539CF773C57BBC03F703E6C1C913772E150BD2F4A0AF4CB954B
8D0C0173618978B07BE7B675265622BDDA9C417661A555FA1FF06AF7DAD5861A
F47BF8B90DE7DCF2F1DF8FE0A77A3DCFE978637C9C42B7842876C034290DF999
84F2B01C5049C75686AC428D191FF2FE5FA20895919269E025ABE40056EEE0E6
46700C5238029F3B43AA1DEBF2C25B6C437052B90528D7B539C5461FEC830E70
7F9AE6082734EB6FD4AC89B40BADC9DD2863B0395B35E55442970A9D56E5EDB4
0DADCD7786DF4C8AB46C8593C264226D8E0E13ACF275B1AECB0851A8F28334CF
BD0585E7A0D264E5A199EC2EFFC0D1DB8D8AAB6BA351A1F764CFCEE8A7AE31D2
1683396A250BAA31D6D1ADCA7CC86A1FE55F536983682A41B11612B380599141
CDEE718D4A499D90DF442EE12E1993A36D35E7367D3312073C7EA122C7CDDF16
10B2D1DB0CE9D1747C93C5B714D11C02FEB0A27A20D808E48DE52A732B76C52A
DCEB4B87A51BCE072BC40B49CD4CF273EBDBFB6E2C4742B66BD7D4D67C24115A
8149F16DE4CC07407A115D6D7732DB025CC66EDCAE65552C4AF43B9E2A0B9DEF
CF792513C2AECB3EDF1353370C671A4E268BBADA772F7C16F53928A692C220C0
77D748C8FC4FA189D89BE20D38903767338E72DF46767C44F14C80FCC7FA6501
6797FB13FBB1A115C8321B34591F66241ECA825BA3AB32CE9C7B46B504723EAF
2A8164F916E3BF46FCE745EE5D955CF1E8733F52DA492B8A590ECC217E590223
115919D85C00890038C4EA453D65A8C955255DF4ABCAD445E61884F494CDCD58
E55A38A3438240E0E10D39633C0DF6940B6935D7F1E5782C12D2FBEE0AA452F4
17D276CAEC68706DC5A4413A36E810F50B0547375222A66936678C0CD721147A
8E07AE34ED2310FF111F801E3358E0B89311B79D64240DBB494670CE3ADE6D0B
9200734B43DAF66B69FE61DE94D66C33FD48F1442F1386DDB6A579947B7ECCF7
05322EFC4830D830D0DABE025F919024A85D1FA942CA3BD03B58AC590D680C5E
99D98D7FBF7F5538BDE9F57448C205E4EF82134EC41DD739487D47B6127BA66F
A0E5B4D0C766579DAD52D5C1E4AE9D5DC082F340B62D5AC2E973A03F642F5DE5
4BA19CAC1BB3AAA4E70219B65693723D66AE1107044B81C6EFE43B92437BAD03
6E19316AE6537F776BC41AB14C189236D556819D5A7AF7CB0ABE2E10D76446E5
314010FD9CB4A0CF190BB8B893F3E804795EBB863B8FA25FC864CE15A459776D
E5C1587D1F82D049A44DA7D4EB492E6C301BF2589783EA9AB08355F6EA75A1F4
E9D49053A4B270E509091C9F2C9AFC7B0177C9F4A8B41DBCFA296AB3BE6175D6
DD2E8897CFE1D4D0B9C92AF57B51A0FC3ED021147E2BD169C75FBA4A2258F2C2
491E1490B397F9B11FE454A9B3CF6D6F613355FDFF41E89E89494A567EB5016E
91B3D04DB26F791741200C2A56AC2340A40AB1CBBCFF47D5FF7EA0CB9CA0C495
5C098DBE8C22431014B577586E2C8AB300B8723FDA3EED3C9B17736CD9E28D95
EB967AC2EA94F0560AE491A1A172FFBC57BBBB490D205F80DE02455E979C7719
896A4C729305DA2D0F0A14D38DF7EF2B068A2CB98B02EBBCB378440790521473
0B3AB6349F3FB43DED6D37762DAC452199C535387137F29D0457FD9AC85000FB
D2505DDC0A5842CD9438A16A02EDE84F519A65F7FF37D8919AE84F3141B35EDB
458654159053A7FB5A2D1B27FEA224A856E0850489ADD0914A53D670F12C1A64
42A2AF30EEA757E86E94C594D4966EAA31CB440253519FB73BA2A718F3B3269E
9FE9746BDD89F8574D666AF67C7B558F9081F1AC50E6BA5D0FEF9E0DF323457D
3CAF4B756A92460F8268D4AAEB2CFAE48987A810EDCD86876B9AD3192ED99299
F90994401FC067CDE5B7DABB4F13C0235CEE364ED35373ACF78F9EC9FCE32806
235D9D92030F4C925E7F593291227C6905631340E28DCDBF18E719C9ED3F75A1
58C399EAC16DFE390B28D99C6AB4E66BE4E541A01B9AB5227B7431157184EAAB
559F0DFC4B36F4A79DAAC256276BCB0211D3D97F40F1B3C7C7B0831A0871A8F9
F505FF0B7549D2D4897E07633CD822A654C068E4B566FD9BBF3F247F1E1EBF90
B7BA18FB7FFAF275CFB40691797440BCD7078BB7598FEAC0277C0888F4FEDE0C
50921CF2BADBAE8475A72A85EB7C2523BC02292E1B92E5465B85B62BDB2362EC
179C20B20084673727A1355C73358E62902B304B5D06FE662EC1F5C5C777FAEE
CCB799C0C74E63D756C79DABF5F5DF57D97EF7EFF713ED77E47261B893616AD0
E8E6FDB57DC0C4C7F02164C064121BE1EA738390CEFBFA90823BB00182E3BEA8
DED2305A984F6951B5AA2E8EBA60639A27F751A7AD4B9086F239D69ECB4D0391
8C0CCB026E694B27039910BF54017FDE0B8736AC99F15017B2ABA6EFE04DEC29
A2F1A776BC4D143A27F5ADEAAAEB4173E16A5D95137A1EE57E7BA91C0533879E
B77540A176CEB091999190222DE1E0A224FADE626404329268F442ABE164BCCE
DEB5274DD8EEED230B15269A9DBE9A10F96C056586B15C32FB649DB9DF110FFA
2FFF9F86484B6E41313B555B67E04C3CBB340088115BE17055DD2FED17A9C1D3
05CD6D4F240700979F8B209A4660C170EF20685F2141874EDFFD6835997B7BD8
E0D6A709EF073FC721AD65C4D6AD94ADF1B819BBF8799A87D44A3A5FA1F1D19A
EAA4A823554E471B2FEEA0BE4053B578201D3D4ED68C130A72A06E8D6EDA2FF2
4F228228D37998A3558B1056F217B2BB9C5DEE369B64E669880C9AD968635FBC
387D06AE5D07915EA0190CB414110FE32874BEF8686E3F73337E2872A401DB45
4BCF258F8C9E187596A57B785862408C23BAB6C9EF7D7AB3BDE3D0DC33423D7D
91ECD8217372CDE5A52A19CB716563A3B92E136836AC76C0ABA45C03D7D0BD14
60A363E0B500F04410A20D83A8223A85DA277A0ABCDA26DB9DF97106F10453F0
42B71ABE8E3840473DFBA1FAE38DB7DF62F406DBE98FE9E52BEDBCFE82D329D3
A450A68155F992890A8B6CB720A8CDD9EB50FAA299A0DAFF4C554918A7DEA7A9
85D1C37ABD56EDF5FA021362A4146870701B78B1DAFE794114DB4FE4ADDC41C6
B4E0D32458282DC5C3C2C8FD7D6172EC63B0420C59628EF494AE79594669827B
BA82FEEADCBE041FC4B95EA05A90620EAC5FEC2823BCD4B50D7DB2172E7B06F8
638AA4C31879C24C649478840A418074615F737BAD7C006E85CACE430F725009
111AF68AEFEF88D9818BDABCF41018024CB98169C9FAC00011B6E29D347F78D7
2FF37B7A1400B49D57E5AEBDAEDB312FAD20A33AF2A7A6E8A48D6F0483F604EE
06FDAB64AAA3BA9CFB42DFE133B2ED5BEFAE55C2ECCCDF64F4D76A580EBC8D50
3585D7115AB6116957DAA5DD05BC0945446FDC31F62CA8F00F1E1B7F5A048826
96273B951CE3B3495A0C14407B8692C501C75C628889F9BD1A4073B549415DDB
F4F5351D3EA13DB52AF4B4550D5216AA5A06717E4174B073BF5EB3A43922A58E
5CBDE7B1BA3BCBEF0315A6133C72DB239FD7070E228B1095657C3938498DCCE3
3C38842223DE23A6509EC4EFA5119E6BBA8740A86907AD07643CB2C30CDB0792
CF315BAAA7D583189F4780E5F686536D2C58562D7DBF6792235B4C37D3E80233
9417A1DB1BC9CFE54AC457D222E62F0802CD1FE6403FE35D5AEDA6D674DF1268
561146A70564C84EF2FAB761F94727DF474FCF52FFE8D10E0235E038A149724E
295352F5E0E2304C204721E87EEAB8944146CC60C6EC0922F248B977089E4881
67D0DC20075C9CAB5314D1BC62CA552479586AD4366A75DE83C6BE214C104623
F4FEB36379EFBCFDA9A5BD482E6723B0736AC1D336F25E5799BB063ED3771923
0066E65E294C728B08DE4B15BA978CE82EAB07B0F607E19452EDE51E1B36D2D8
CEE36C9A1F5F3E4553178483BBBFAFCE631E4C6A7AF6071B2BA8C45C94919231
A453D6326F9CEE7DB005D835B04DF19A62E23446FDCD99FF89402542E543BF8C
6CD4A24AA61A47B1A58991D5A131F1E5C5F1BF03737057D21EF2E6897F39ADA9
4AD358D5BBA0C3FED62118BDA074AD2500BD03750C90CDE9161F1ADBCBAA1D87
26FA89C76833DEC9FC8620931E765933F0D521932F48134C1D4308FB33E7A474
75F5536A0FDA0C3F11E3B29A35B34248238B435C9423DBC6C57A94FD51797307
8F15095E006F462E8BB406F880A98E0A467F7DDBBC495E3070FEDE72BD07873F
2BA07B3CCCB2CB624861707D2B98701285BFCF4AFD40B5BF0DFB54EE41B2A2CD
B8FEAA8215C8A850E1A7AD8D3FE1D0C0217C057987B5FAA6F2C9712DF529F33D
E7E4A5E56FAF0E6E738B4DA11DBBF343AF54B81895626923C0364A289222E6E6
F224558BD0C63A26BB87284256E76E1878171F4B498DA00E281EE10BE30A7961
4E6C13B1CB62F544C34B3D0140393D2B80061A3A1147BB504664F9F6AD7827FA
91ED654B759739350147BDA603E117A0410EDDEF9A663A888F8B3785F6E298BB
127E46709074225CE86AE6B807FEA194AC92AD30BFE08ECE219BA650EEC81643
0F8B4403D693FF2773E1A6C05FD9870C55B7ABAF82D8258EF1D056E4DF10B61D
47B3B8A76671E6A86931370FF1C3839EC88042BCD5D03D137866473DEF4DA314
F6A3F41220C9AA3B7599F4A19CDC6E8C6A25054F39D525173C41E196EB48DB5E
1A0E9807D360EE99780DBAA19E106208974CCA3615F3A79225FB98D7D341AD62
18459F7C3BD1D3A67F359558542A92D1A7A4312F687015450465239AA4BCAC07
63BDA3A81371FF60479439B8AB4971500D0DEC14605B80C950D458E33ECFCFA3
0B2E49EDC9FC62C5D7B7B1F2C546B0D22A05DA6DD7BB3B42F34064C785F06E2E
591CFA2715FE1CCC6EF9C0CAF12BEA5A299ABC971AFDB87660A21451D12B5620
73E762A4F1897D71B04C8FCE4CF9A0B0F6B52C9A2B6836B241E0E173AB63C4A2
345A764FB8833BF7B2126D6285F7C0FC4387DDEFA19E96AB7BB8643ACC8F59EC
71F6DEB62F8261BD425A1E0B388B81847EE1CA8B7A61DCCAB0BCD5E1C17CE2DD
7AAA550E93CCF57EB1F6AE19458CCDE332FFF055EC439336429286D30A1134F6
2FE8D619C24A0D53A28973D80C89E31ADDF4FF0B74776C789F9743DAC7A57F6C
63E84658AB36724915E33B4017AE2B293114B048DB7890533FD8CB7A8DCFDB21
1A68D7F0CDA4C12195AD5994E179D48021CA8FA54192D3F0F29F3E0548EDBE61
878B9A15D0639EC9981079534FBB96B0AC654B2C203042300FDCA187CB0676A7
749A2399A7A86D70CF9AF7CBA1E7C8657BFFC485152D775C77C55ED01005A99F
D8245D5C133BC73F0ADE1EB4DE93FB95D880A41CF7E26E1FA91CE8B76D7B56FC
3FCC0A34A058999554FE7430773EDB5E2E70336CC06B042F9BF639BFB8C01A12
8E164EF60CB8B6687F806DF3A1B132A68C61A975CE0FBFBCD5A1005F6C0D10D7
85B77F6CFD3DBEF3BFFC666A3EA61974BDE3AB3916E379EFD0EDD9F850A5B0CF
52783BBC3DE594341CAF73A80011B57394CEA2BDB4D98973EB6ADCA1FA187F89
8929E057650C001FB8EBC5102DDD64C0F764C00746A4B11B0DE54F7E782548CD
D5E26C9EF9FAE03E5B241CE2C2481C8BAE27665147172AD55F57D780BC5806F1
899AFA130B69C698E145797ECFDBEEB8A4EA40C1A9D1BE8F5906993BCB49D97F
40029E9E4354F80F2C66174EAFA95E34E6136DF335331CA086A18E97991B3613
B485BA19A5203A13070141B5FC5054DDE7574028247317FB109AFAF835F639F5
63F5C9BCA7AD921170145972EFF3323083288FF849E48110DFB40454501FDCF1
FC507D4B01CB6CA16BC937CF93C690BCDC1C21BF7834B346C089077724560AA6
AFE98231807317CD37AB03B5F53F9BD6EBFA49C464FDD13A2A04DA79F7054CCD
4293C02F42657115A28497E3A791C743C9A6EC3FDE5F6C07D4432B775825CCCF
992115F2D5639CB50F1620EA6044677AE3BF40764518C30C5F3737BB8EA24AC2
F9EABDBA30AE39017444579516BE2D5AB36E2941F9B475FDBF8782037B070E0F
0FF81AC0968E752B284A8B6E1F5151D71E0308B9910F92E0A3F0C050249A0112
C84419356A61004920959F61D0BA242F5FE84E969A1CD9797E04B0847D935471
DE4D40555EC96E763E29D0720F3474F01987646A8841A895A905D0DCE8960904
B7CBB3F60774DC7604078742EA170FF2EA987A5CAEA48390EA22B35E601A0D48
B5A45EBFC49061E7020E9EDED26C153FCBD474D9C27D9C1B1A2B15F78127C23B
C0AA678DF8F8CFD3678640EEF550FA6DE75AB40F6A52CD891EFB3044B0D90C20
D921CFB6E62431C96F8D4FFAE416ADEFCF3DE605BCDD842C5D5B1403E30D2052
054D416231833359B4088DDE28173F4C28AE2E09541FBB7A00A7CBDC61EB37DE
F48DC2FA9A0D6AB57E7DAE800602409F0048B1100AD22717395D23096DEAEFE9
A5599F9A04F72A3DCEB6B4F98BA80877BAD9D6D54932D54966A06C3F9047F813
FE63F7BE11A407BEDA6A2349280D020404FA6D362FA317072BC4458A11C02F59
283A312FE70F509167A160A5D9A78C1F6DB0E088F48DBD76EE2C4A30C930B159
B11DBE71788C672D83520DBE31F1F410B1B4BCB3CD0B5A1928BE1AF6D7D534C8
9BD780CE9FFD454DB3755B7B65FF6A3CB03E56B150131CA90D4F3EA399FE8A9C
2DD8753416B13ACB369F48B5815DAB464990E9EBAC4EBB090D6077F03105EB0C
CE04D51C2292E837E37D3D50CD92D3093283DE3EC907FB67D323344819B36155
89E4226FBADD57DA5902EC382BB4B5ECEAB97D743DB2DFD4042C7CDB363F7411
00C93D3E24E44F8BBF317A12567DA35A9DE395BEB0D4E85054BFB321A0FFEC68
4BD8F4BA2DE05BA2B74640D984B80D3270F5BFD5D36AC129644E8EF21596FD9E
9ECD102881B49DC2FFAD10314FE61D8C067D4ECC45F7763C6DBD32C2800D15C1
F76F58CEDBC916D7911D4F0DDAA9E228528723192B136410EAFD222E5BEE9FD5
D7C0C51CCF831938A07FBCD227E444C718B101A8C0E6A0D8E88B132199159947
650A41BB38D7CFE9F333D63889EC77443C3D99DBDB416F62F742698DEE8F542A
42078E4A43CBC6717F22417815CBF0CC562646C1D3470F561C0BD24576D4356D
1650E889285442986F45611BB4F96B0540D4C0664770CC4ACE14D54BE1B85804
A5EF035EE887E8B94127DC5BDC0C10D4CD1850748CB9D0D6DF542D010D70F333
CC3A99106479B041216444D3607905165E64C08215013ED75BFA313F26801FD8
2D914E35831C7F47BCAE3BFFA83B7DDF753FDD58F2F70D4299A4F753F1BC6121
E347DCD2EC0A737B7F39731F7A97F4BC56EF4B9844801FED3B5AA3E93C7EB07E
A8902F5815ADD8088D5951C3F9DDA2E46239765957DD1A9F802932F48796E371
DA7052DBC8144577D08D224A0A54D32B095322C82296608B28E0F2EEBD3857D3
716ACF5A2EE7EA03B6ABC3E50BD2E74F1A2CD0C8F876DF5D08A3A1C539AF6174
13E348FAADE68D81D6EBFECA39F51924C76A2D42C74E08BFB7697284F9D6B626
02A3C3FE5B9AF351AD71750A4B58083F708A7003B6476C75470603DEFA2D979A
C4A3466D34DF751C44753BA414CFB869168B633C8C7DE74F4DA0DCC64F288ACE
92CA630B16B8109C5A4CE5403D5597F79F56DB26D00FC4E46CD30C2768667D44
A0E3BC518F56C1F89D6C500BBB7AFDC6D2333854DB363103A1FE2107B371CE5F
60375E4EABBE38838E6E37D565F95DE040BF06E521456DBCD13910FD8580DA92
1CC84DF8E9792F2984F79806CFA272AB1CD3A52987FE8BE43AE197A253559351
30BAD9B241D1A6DB793C1B1F3BBDD14A68CE87B7DA5AA02C42EF73E59FF3A700
8AB6B54AE1A539A8366E910CD5578D06CAE267EAB6A3E58D0B625D7418A892FD
D95412A61EC99689AAD463E6462EF94BEC9B9AC2265000F53914FBA829A8127B
FFB29E306F2F65D97822FA0CDAFD008FBB2EE8E02238248E5B44D5A4E5B09F1C
BFF378F54C83554453DFF21B670A6EE75D274D46D3959416599AD6CD239CAA9B
2826B5EC44C53F585ED1161E86A4BF6A31E7D6F109A50012F1271DAEB2341FFD
5AB20F18DE152D2F89E9C060E23599E89B062ABE2B9533CBDBA90EF59319F4E4
516169FB0C68E3AB22C14ABD38800C59B7DE3E8BD033512CABD1C04CBE42B458
A0FD79E302012F22F597CB7BFACB9700745AF3B8E94325766839F216AC11ADB5
3BF16A10B16299548AE6A0052683E559F4F40B00A68E220D41EC88E14C076E80
F8A0C1ACF2BF1872831DF2BB87EED0C73F2F2EB2B020F9347103FE85C10FD0CA
F0A2437F56F50086782E33972AAE679097BD2DB616557B6FE260D456A5C021E7
15628B95089930BB412398C6351B147AF3D9F6B71A5AE5E78E7B383A7B3FFE20
16F935C742ECC98E953BFCC90729190831A5C4DCAD041120AAC0B4986A784384
6CD1E395C1D533EC87340D1EA9E65ABBC15FF191604ACA46E1648427294F85BE
63F569FDB7626D36E970D437513CF2AFB4CCB99FBD65561E1B6F1491DCA17310
688992D5446E8A87C0FDBFAE15DCE2969AF1049EC956BB5B407A4ECE534CD5EC
3AE7ED8375CBFB3052D3FC0EC77F4A3242E03AF4C4F633F763994D195D9758ED
C8246EFDA4BFB00807370BCAEF73890A65E3154A97C0CC3858629155B11C1578
B6C41760E7CDC379555D037D5AA21FE903863C24A6CFE9D7AF904EA0F4A6F7EC
12B8B4C9700C1367B3D9CEB74154B6DD3B86CE7AD0ADF38362A743BDA2432588
5DD337DE2F7E9E3B6A422FCFBD1D9BADF061BF5F70D6AAC9543651AB357F0F91
FDF57A2CB32B2039907FBE6AF19C0DF700A23135048CD572B72CF7964F550E38
EAEBB1CBE20321748CC5AE43CFACDF4850957F79B3A9913AC427CDBE6B564180
12E289CF2D97CDB93551047002AA99777A3B3CB8AE7A28ADE58AD58910CD27FA
C8782521314697AC952E28777188974BF5E2E6B7FA20C31AE31F8C52A8B12B98
343446F1B1CFBE3C57C6A63083C1D5DA810B4DB9D32B3574A1C4D9D8A396D2B9
49E206E79B93EFBC4FC9D93FEFC39637ECE6791BF199433E0512006421D98863
36B100F5610D5D907AEC244189F32C7D3BA4D9D5CBC391AC7A292D5E0E0DE1A8
9830C9698D22D84CE0DC46D9094AF2E5A86ECF2693940BE443CC57607F420B99
120BB47C8A65F002E1148BFFB3D4B6FCF5EBDAA4F63F6E6631DEE0C2DBDEAF1B
34653DF3CEFFA857CC8764025ABD322DB5BFDE965C7398A47064A68B18D259C0
095BA4D59255DE020C1F91ADE9155E70C32A4FAD88841498F58914F54313F10A
3EE812220D71FBFB8B507F85E911152226C2D9AF9DAD6FCD464B060CCD95553D
053299E75531FDD90971C093AF5A9BCD2F35B402F0DBABBB85D49BF0818A069A
9EB514E0D3DCA77FE028FBD9E4182ACCCC95EBD96FD007773CA1FCEA3C4A91EB
8EB6C6D4637CC4681FD2C7D002838220051CD6D7823C452EFC0E4D06900CB2C8
1A3D1583DFFB1CBBF3906AE5EB2146BC5D1425950BFD6448D2C7150DDB649355
E38B515D76E5A139B120BA823016791EDAB7A210A8538F7BD909FF39B66B32AF
11BE7B3BC62F7F3EDB1C6D604D2F01541CCF5EE2434F76265BC88753A025F760
169CBBCAF5B71F347F797AA215D517A9C240CC06218953B139F81477A8BCF7C8
32890778B55A6BDF5E9DBDD4F5829859078E45A484B0129EE906904C2976D274
C172BE5D65B6C6D9F7389E48968EC723C6ECED524A95C0C8869A7F1CEB6051A9
9418ADDF253158CF4A2BB166D9893A2027D960C49B442972C592C2458C2DAA5D
9E3288446ED6CA9DD00348905482FE174288DE8F2335EF15691257127FFE1F8C
0DBAE7620F27C3920FAB1B2FD0262116BC150A9AC30E49469F3D224A7400D7CB
020339B56A479248D9FC0255E8581ADDA03F59440B4FAD19E288E4B65BA99C7F
E8251B828BDBA63A77A753EF0DD007738FB65C3298DBA52EDFD3A21625BCB886
B6CE9D3FAE74890901C0F1BD3BD8F42BB2CE44978CB3DDB79B67368D05EC1185
2913C5BF793AF9336173B743350EC81B54BDD3275B8F3636CCE0A2A1F9E59107
C895D6B9E130E321E5B70A60F7C3579A72FA856323DB582DE95515BE5DB70D52
F21E78CF757F43AEE7725CB956B0B18FD09BDB2CB0617EC2D89EC932CC5F9899
398FDF6AB226A038A2419CB0567EF7EE0190047B569F57D2AB2A4FB1904B02A7
AE17C56E070C6432AA9CB375BE393F09FD664A7710428A1AF42A65466A5A83D3
F0160FEF70EE4F26ACD2A212BE477697ECA5D504107F8D5377E8BCA79685FBD3
616DF6FA7B0DC668CAAAD0DDCC978474338662820BEA695AAB99C9B522B5E8B1
FB899C2021FE3DC26E1B6F13797F2FF3DC202DC4E80B7EACF373A5466FE07EB4
ABDC6955212A4FACB5CF6C4A78775233DC978CF8778177A4260F9FE67A52734C
0E5E104F863BFF49B5917A6105E21CC3257654C82F72405338EE0E74E0FA7B63
8A65B629178E2E13BF2D66D627632340BF3947D823331572C5C7499D17327334
45412553515E541564ABDFC596E92924A72977E41804FEEA809D54EFAEC773B8
1D0064F8434A824531732B5BECBBC2C1510A347D145494AC823CBCA8479E4705
7DFA2B0A381AC67BB2E30097DC6318FB39E9B5843F6ABF614D5306AE496375F1
A369ADE595EF0ACD40028AFDD88100A48E03D8FBDBFD8C4F4223CF7B0FBE1869
E4B38BB63BB9AC51C37B1A9C0857E527A5C68748541E50DE50DA3B008E9C984E
C1488C5A8CA4D9E31626D05806CE5BBFA9AAA23551DBFFD2F499C78FF892A863
6120AA645700A793313B475A6AAF6C6BDA07C8C2E36BCA75055CDDFF4D00843E
50E65D202D30FB951D8AA018F073A2E639F0FF126C77A54DCFF710B03B603993
9FB0393C5F29EA124C7646E1840332EE3C44A7C20A99ABF172A41E76AD431351
B33BA828A92E6E4D0AE83AAC750290D76EDDCE7DBE31E57BFBB71947CEA2BCBB
ABD8DC3BFE1AFF1ED9ADE36C6EEC9D8774DE081CF0AD8C790FD6BDF2D9B8FE42
0775ADDD07AAD1ABDB773ED83DB263636940D34C8C209255FC05398CE3828816
57CA842BC40C9C10F7A87005460FAA2E6EC298BB4EE9E5362A5474CB062A53A7
20868B64E2B4927980ED3ECBE760ADA48D8FF3771A6331B02A330E1B39C8EFF7
FB6F3AB5F8365AC9EB2207B808963688BBE11FDF93E2BDFC361EF7F9C89CF985
0D85AD4B23A8FBA32925A3A11CCCF5EEA110720FE5809FCEADF498134775337C
D5B0070944A835029A1E948189FE1FF6DE6BE523D523D5A58210A95BB7D559AD
E77FAC3FA0CBC4B68F9714DF11D4507796F8B7EB12568174767F7F18C5528C8E
4EAEAD8AB1D388BF6794F49AAAFDF0CA82ACA4BBDCD158F0FB97CF221ABC58E4
5C5BF0AEFC1D2CB480DFA8656E94BF744B0B13EA351AA057DAC95D035D353224
FBD70BE640B6D6B57BBAE25023316D3688D0B6820EBC8DCC5DC00D47255540C4
37C406BF47124714D77714F5B70D72B70375247E295F64309F748742656E0C2C
B519D314025977D428230EADD4CBD8C304C62B7E0409628A3EA4169232F53C48
18BF410B443BA80DA4613437A0221DF0838214FC07244BD513499901A2807E75
DD42D70F1F28DF1E22F682EA8BB281CB4BF3A774D4553ECC818075BE08205A4A
9DFAE4874A60B45AFB414943AF188891EA3DBB873F6918CC004B778228FEA0AB
F341DB64B7C209563BE9291AA39A2E9BA6F61B1A4D20C03A9CA87E140F9FB5B2
8E9696E8790D93077A81E84720687BC97618753311DB45E1C7B1B7DFF70ED6A7
7755D768DC68DEC4698F84C9432E5561B5D4784BA3BF71353529BED0140EB393
5852240D85495FF3F3CD65955A54A3C178A2C7C770333546D966007FDC04D415
14C26D03D57FC0C5481B0382F10897CE248A2A5C3DB30F8183918422E405CD67
ADB2886240506D71D7C1136E4918EC127B2A58B99588BFD4E4DDEC9C08A340BB
29A03C225107FB3B427B47DCB3C0ECB6391732EF8F9E644D778C67DCE0082E9D
C337BDF9945C51BE6705B3CDAAEF405E82BA9383E4755E53D2D4261B1062C0A1
D38FCEF4EF0A583A00B56AEE434C4E78CE0D1F151023085EC105B378947398D8
86B4DF9565F037D7470430FD820A8140A92B5094A314D651A7E9AB7E6A918943
EC45A06B39034A15B34B537C6911D0AE0EFCFC174AB8ABAA51D42B571F52A487
7E50BD2204246CE79BFBA626EEE5A3F6E9BF63470494C96AD14897239C15F1E2
CE14E1E901138091367009B17AB99669013810DD8B0F009217616CF6F5FCD65E
3FF56DBC73E349B835A188CE73244FA54DAB465B4C8C321B15B88878438DAF53
E3B57E3CF09BEDC93274CAE80AE1F0DFA340C93208F8878EA1B4C880F04B9EB4
90718DE02B559C2D26D41C89EA7C2481552E9B7EB0B26758A52BB7872FE2DCAA
2F47D2E6E9E97DC5695B31699E74B1FA26E7896042DBA6CB866EF9EAA8B69D56
B1A9FE50B69E14A6FE97846C14CB38F7BE2DDD9527F0B77E2AEE2A617226650E
665810CD3B420BDC2E6E4E2512D93A6F9ABD0B8E596226478B0AC5D65B70E9C9
27CE49076715222C1EA9D410FD6D3E1B58A64C3EEFD9FFCBE5DADAC7564F1C82
EC7D7D2C78B23D1B615A6B9CF3B7FA239B8772DD305A87A8E52A9F7537D5731B
4F3AE36F8ACDE6617E545A5F6939735536F5BA178CC4DCF2FCF5EC7BE25E5DE9
C498A2CCA72ABB70D12FBDC15E2CC8E92771CC5378057E369439E3DDEE215469
BEEC76585744F7A33C50F487B31632434D6597FD50C3521CA85193BDA61D60A3
236DE5BC7C102A506FCD3CCC868D1B41214C98DF584B01C8C8626584378259CF
20BFCB1D4A8AF3EBC0F08145D5521DC1782F10AE239A549D327E4FA23EC58F9C
6A093A5C6A7C496CF29EE56AA9421A89664EA1EF4502AF0C7BAE6F68F3D92320
05F8D9A97EF47094A4475B0CD36D674A345AF8BDA226E51845AC3F2B7FFF9CAD
8A5856BB578B776BB1BD6B8178EDCF58396A09FDDFB92BFA0BD09B8A7150574E
9C1276694FDB03945AD80513FB5311F3B40C9F13A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-BoldItalic
%!PS-AdobeFont-1.0: Utopia-BoldItalic 001.001
%%CreationDate: Wed Oct 2 18:45:57 1991
%%VMusage: 34429 41321
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-BoldItalic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-141 -250 1297 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD789529E8D36EE1DABC3C45BB4DE1816585C9F4BF9766A850624E44B20AC
93A406081B22A04FB097043EBB899A74B5A127E0B5394795BE1C0DF2C222E4B6
61D28575358E2FB0371E15F1D5970456DC9B2690759CB47E3257D43022F4B295
8AE5E37D2A4F77490B9E7C35BD97BF3E3B7ECF265A8B8CC108876E0EF68EF8E2
FE3A385E38F3EE6C8813402B75D8335D623CCE26E988491CFA2A265A48EAAAD2
1E9CA92A56AD1A9D343FE26BD76C4F5A0F089119316904DCD00A36AE42C948BC
DDE4B9425F5640EC3E17AD414EEE968C004253DDA0E6AB96DE7A4F847A49D30F
1B21FFED38C127EB3DB4A09185F0A282F7DD376A3ED073D068E84D306CF21315
52DAC1DAC1BA37D3F60185263651860ED7735D90ABC4C62D425CB7C2EDFEEBFA
B7504D43B2ED9CC62355C8ADD1CE8F6BD5A6C5C459DD1C3EBA2A0B793A94273A
4728C918643011866806088BB3ECA299D6B9B5CDB32246F16C1443F6918EE375
BA98380F3B1B80278922665CDD0F7D057ECA67F2ABA4C7CE35797BC72AC5174A
39765D626DF71D81AB8A824501892F055A4BA315EDBE7B2E41A6C1DD9F17C3B9
1C9B0EDB9D006C8A472EAB87E14F6C82A5E0F16D24256E5AD35ADE7CFCF34F80
16F6BCFFB7016166D5B517DA0B751DEE50EF6071CAA02AE69908332E2082592B
08236DD63616FE70654784CDC350CDF8194A7D6A15125FCBBC546680BC861C3D
652194D525299B49B5A65638BC2EC5D5E65FE5EE654F9E520043738330C5E6A0
EECBC130AB5143CEDE6182E4E4C763091382C11DED737B6553A15DEEC2211D5D
408D943CB02B843A3FA0C03A32357878632AA97204B95C8A5E4E705D1B8DA8FF
072A4DC5A26F2DD383E6D2112B66F6B9C7A662359DBFE40ADB929E03FBB2059D
18BE08EE3F855A5949EE39E783623EDCB1F8D06F945A929B28A9AA1E2D42C893
A301960055D7CCC875173CC3CDE4F6D347B2636645F7018B97323DD8E93C9C27
90B20B6B832255832D22CB297873C16A4CA2BE0C848DCF1A994E99B596FFF5D9
E7DE1904C92A4FCD68CA744721243ED15DAC65E4BD3016A0C7C6B4E3C8FDEADC
6DB9D491ADF2241D628A921DDF3451A86AD987B141E6D624128FF806CA537661
6532B79C92A5B77292DB05270B35760D5D8D960A2E3E913CC7DDDCE3D915F0FF
2D008B72C6F78648D24473A7B68D6253F41785BBB8CC5E1698FA15420F75A9D0
89F50E2145BC702158FBDCA19DAB8D6FB79EAFC00CD4BFA6BF246BF1B4056BCA
0FD0716526220CE62977C4215406A87191218CBAF92FA8CC0B23758DE3A74432
266F9167D5CAC9CE8B9D46277EE062BAAF85685B28165871574C6F2DAD71625A
FA29921D8C5CE9994FC1DB41360FBB27DA972558EF18E94315AD665AA42838FD
B1F0ED2F294327D321F6F925E2F8F66EF32D905A8F164CC6FEAFCECEDDA1F3DD
8A9FA8146DC646EC6260A0B840A2505E9E31AC0C267C55A73024B3462FCE34CE
DBB49314E1619227108D72849AAAAC7EAA9DF793A61D05BDFCCA4B134AAEB3B0
3808FFEDCECDFA28A9631BA11FC742A221F03045D4E0ECC2D0DB427E8EAFB902
0CC042D143362ABFE75215CDE8D5992255FAC20C095B5A168A6BEBFFE0A19F44
05E08A4737DDE264F81770C30C1148A5B393252E4B92D1F5C46736B3D0F2C4A5
F65D930B77B8E297E7AEA353F5730DE62C03875F015878A9643D7EE59E3D2F37
2BB51A570359B46CB05857E4C7AA6F436C0800A832800835AD03EEC7E587BB2F
3AAFA3CE8303F1B4B7CF6D6AD94AB078C0AC119F9117C49DBF4B870C28F17A11
9778233CF9FFF2640088583EF1AD0174551318D8048B24FEF884D7958F07DE96
14BDB2EDFD2A1E172B686E972EE2C93723D8483A873071529406E5DA8177D46F
EF542E5BCB5B34C0ECC06DAEAC3B9FA6618A09DCCFCD674B2E733A18E675655F
4C981B3109A19FC2645C882CA4A8D57736A4454923E662106CAECCB452CC3DEF
6C650AAB28D29BA62C192778D3D361122517681FB3FB670308AD326BD0582A2C
89212834A6101270AE9916CF31B971CAF5E9FA644F2EE53D802092EE2FCCC39D
BEC8BEEDA85DDFA8CEDBE3DCE696F5C3C575B4B9B2E9C804FE151FFF4DCA857B
05425322481A2BBB01ECAD3E011D365BE2C51E7112AC0CAFCECA8B82F4C2D73E
41FE7FC58AB9CC1D20E8A44E3D84289B8FA24D22A81E7C7EDB6CF1E58F56A9BC
7E4CED7DD95F14008BCC2AA857C6FF5C670F7AD45885D6269FCB4EECF3259F78
035093ECC871BF23CA066C9DA14348B7A45F57557C23BD60D315F761F09277C3
E1CD4050AFD25F16DBAF19B7E6E37B79E5F122D9D499FFC8F3236815481B648F
8A36B337B9277F090DE03CB62E3DE4F2FDF367560AF8030FBA1A3A6ED2EAE153
4A2104A47D261D8C30FE263FA2D119AF44BC79A3AABDADBD1EFF55582B417D99
1D7AEF52D058ECBC2D059CD0A4EBDAB66E362104E6FF7F6CED9F0A836A2AE8C6
9D2C5A0061DCA8D0AE095B4AFC92C6FCFDD109C0DA1E332BE7D47ECEA8FB1F10
2A7E3D6BBCDA6525C35B175562329A2CF2C6CDD52612B587E92C703FF6CDA827
AD2C8ACD573F96BA80CF8CF0F6197AEC7BEA6B3B14E56EF9A852BC23C6A08050
3F9515F45D92D7A6CF299AAC56823CD48C7BD62F4D3D8D3F888CF7DDC0350D1C
EFAC53A22347282D973F4DA0F4AC639C9456EE02E71CB861CB3372B61E4C13CA
95C99A1E758C644ED6BD661F2A8E7789333EB118CA57AE07B610F51F646E6A28
17F68EEA18E6E61FE4E9F3B69219CECE749A9FF2794BEFDC96EA8349B0820474
6D826396F4104A4992227C15BF212E571BEBA488D1643545D179D97E43F85EB8
60756614CBE5E5A85824211AB36761C73C2A2ABC505969F380E30CF9A8E0BB4C
929F57B7A967327FCE6E1955897DF344E0B886441B1B129C22FA905AD6481FEF
68761C6E1799F4E8A352091036455AF29279CDA1EAA8FF4C151A624F58B382C2
CC267C2BD4636A00A2D72024E56898F67884BD71D8D8ADAB1CCF6F6FA11ED9B4
16342B4285581F900009F02939A2D710FD86D300511B0E9C8A3CBC66F0C8B58F
6404F3CDC5EFE51C4C3829C9B1BE651CC43802D4CCD9226544904A8393400829
E6F649EA885CD9DF121108A4D268F5D5E7048FAC43FC281AEC552DF07AE8DC39
4A4AE8739770D7420924EE41EBA68AA72F30EC64D8D75B0AD499431D5C184CBB
436ADA07160EB6B8C92DD21F809908E7115E5ED3B3DEF8060D7DAE475009257B
B6643B53372E4F87AB0AC5F00FCEAC421592B0E62D77E599E5C7CBD0C8DB2686
E90AD83C0428E4ACA0AB125CA202B0A0C444C6C3EAF7D23FF67ACC7639971763
61561FB4C8B7385B70845B43A0DEFAF2F95F1BCCA823DDB7AE1F8D3ACFF61AB2
616DD75067E9AE5B795DCE254307308AE2F583C4AEA4881748C0901480D494B8
C60466B455E983ABA742ECE84EC3F57E504A97373D9AD62843E68C2EC01BA2C8
189D67801270FD3F836BA119ABE7A95D11A05CE124A4DA134FDE8B54199F6D3C
9D53FE0C1F7D1E448C74744C42B434EAE1E2BF5450A99CF23F9497EDE5275F3E
90EF3EE62E8798BB4A7A14527988DEDEDC5282A308782851C23C4E639FCAC002
63E8D2340E009270B941530493AE7732B523A200D3701A213ABF73C2701BDD30
5F557ABDDE1CF889490EC42B22AC76ECE75AFE94913335C358150D8D0F5DDEE6
9EDB17BC08CA29A9F8DAB06352789B0E92C1841BB04EE90FCB448499E6428AD0
36B16E493ABD2CE50B3BE5D63D0929900D9903AAB916E92C7DA447B027FAD949
F1CF7C81D9CC3C107CCD13EB927B2ABD44989A42B2514C24CD74E04A36147CB9
4FA5604D034163570D77282F434BAA4B7FB2E15F1D650199EE32CBE5BD34EE24
A738DA3C36FDD9F34D5E0B8097E15353FED57B624CD4E5EB651DA99F9DA11F56
3636C4593B653FC3D09FFCAD95A1F43D482CDF7EF32CEE705E77D1C09FFC8F33
7C8CD063E88655F94A96E6D3D00F4712B3BF1283D4DE3FB0FE8DE9517C0A6C2A
03C80F4D1F0FCF42F98ECC4877194F0EA9B44087B10E3B0D6539ECDA319B068F
FB6052BA17FEA216B4AD06E263246C5BA74E16ECA20547F8EDBDA26B381F1DC8
6D4AE241C2E3E467BEA9BBE6179AFBDC82C3C8F832033648B65C3316CB420AF3
DB1B5C5DA4CF8BC37D571687C95269BDF71BAD45A7795F4D2D090457DD2500E8
A34E201DC4F1739B462F19AA6FA197A055EBF2EFB4733D4A8E0522C8AEFA5451
CB40832014D11C3DC021B5ADEBF0BBCCB2D9FC04EAC2ED2E000BF86190197920
2D45A0A39BE62AF7CFBA80DC9EAE70FDCCE4599E8E46D1648564FC9A915C8584
E61BCC2DA3555CCFAE6C99A7BB062809E10D36AF6885FB8223624B510FB76F3F
87A0CE167FB5D289C5D91556C3BFE5E2EE00E231AA673AE15428867CA41EFECA
43728C2380D5AA69C38C3707578A0B968130EA80ED61872E8BE1E068B8F9BDE0
0DB892A1F69C8C1AB3FA15066BD90F7A04B43E7DE1FAAB2D124146E08D97121D
3B83F8F834BA5DD2456C367C7BDB432343F0EF3AD29C43D030AA3ABDBF3A1C88
559D3E5887B7EAAE5A65B22E68289B559B599856C0C7E481B772A9E79FD6E156
6AE80E84CEF9A7A1C0D2E744D803921A77096CE1DC9AA6B6A96EBBFE29BE1009
75DE77370B3A7E76590ABC46672B462CF579689B20A942EDBB45A0487CDEF44E
CA5D309C3161C337471F26859BC5615812AD051FE81BDD9B3C426F316D7A0A71
1AA2C73CA4E1672E3FE980F3E547B05D2D03912318EF052D0394F324C9D1D083
F26765F57F983EBBDAF19CCF8863480158E357E9AA1F9D99DD48E3A592FF3893
46BEC4AD2053E5711C82A8CEE6512EEA58EAC9D54B1BCD10DD4BFBCFA2CC9AF6
2C8871E5C4819E4DACD5FD072694F568B0C259DFEBA686602FCD742C9E124C56
4C5251C4F8D647A01DD21EF8BDF96D42E896B734CE3721C343705FC9CC20664C
94E7C2728499C99EA71DD72AE6E3573DB6FB5CFDE56C9E55D62AA041CAA6444E
7445FCE467A9832EFE3C70E8ABC6FE5A71FD736442AF38973E50A70B6A38B2D5
DF59F415E182E7CAA79328DE36FB60F72DE3E36B14EA4507F3903E1FDAFA7FF1
88C5C455A6398D7BF862D97F3F624369204CF6A65762DD40B934EB585AFBF3BB
DFA06AAC624512485C1D5632B9F43E42D721DE4923B9DECD039476BD22EA0588
728150E0A2C217C1F4A25D91421BF330E87EE1DF053CD6CEC48A28BB851C01B6
D9710BBAA6827DA4F97AB164EE9A217E609CB8754CD031D55565F2096BC24D4D
FA8430E43AA1489FE07F40A6AD5AA10F59FA148967753AA96964C584FD088BDF
216A1C20F6B6AF7E152D7E11E78CF5E48E85E096ECACF64E729459C43A6F3BD3
62C41DD7FCF12B02772B69E3A5161B6520ECC07125C06408446BE3F5EE8EE192
5C5A69B98423DDA07855A0628C7EE8C8DE9A13292A4947522078C91D8C7282AA
5C04912B48FA10D3A236EBB19BBC746DE440573010CCC1170927FC92CE0A9B9D
DE47786C898D37FBB5FED0B59CC9D062A4E587BCBA9948C67FB784379BE72400
BE1E7C33CC263054529445513B2A9911B3A497E39819D72CAAC2765378458815
0F2F0E35F4D032D7148B9DBEAF8B14D2BFFF2AAE2CF1C22D83316A63AE800311
2771A5698CBA1EBF80FBD9B94C2C008FC5C3F780001320110051BAA00CAB5838
E474E21B308402826EAF267A394178202EA9C3C7B5A887C3478E9C3EEDBD2E68
FA60D2DC1454AB696B4205E2419B5E911DDF0C56D2BC9EAA642FCA94CA69B9FD
DD26CFF7B660B41F65798D257B9DAFD27BC16F88A7E9660AA81729AD861D4246
EB93BBD6F49FAF912DAC612FCE2279591314013EA993A14B5801C0F785FFA8B3
E42F7C8C4871200746A3FB097F55A5B4DD2DFCF82F1ADDA999EFD5190040C04C
529FEDFB4F0DEA29E0AAB6D51FA6569FB8D2AA1981D2796F4478FEE968DAAAB2
896FFDF569070C62EF542786EB7391E1599669F4EACA96F9123D2C60F9DB391C
3D55399E75F2F0E9273EC494D1AAC8CD8150895857D024D4255E38CDEDE12D75
CB2D07E5999E8DB93DF467B5881F9EB098DCC8D215134626FACE3A2E74446316
69E0AD23BCF4ED4F5D497636BE516106FEA516210D6BB8040D9EA8CA18AD26F3
E53024F925D8D1321BDC0DAEE533B53D87CEF1C564DB1F3159B5B1DA5E50C26D
9250AD3E18E8C8355D66812654A976F06C9F56FBA691FC9CC8D3CFF130F7D99C
466C507369F0623CC5E3B52C46EE251F5A950D0F5014FA64B96653F1AAB654E3
FD123CA0D004E35A76916CD402A087A00B88512036D677040EA59ABBA7AAC39F
5FB6A40CE7D23DA60EE973E12807BA24F16DC12C4F3B4CB98AB32DACEDD98189
9A75FE5987D365078EB2F12BBDECD295379DB787EA6EAAB796E5C554F4D8FD54
6F0A68E30C1D0BB582DF4E0F8A25C60981E6052711021126151D795AECD176F9
85514EE6896702657904F8FA7219CE15C08D38EDEE4C9CD389C036BE9B7EC211
3DCBD522A1A0B54777FD7D5611ADE4241486F95DC58EE4FB8DB26361D32493F4
00254311AF587EABE8B76CFCDA799190276188EC0EB344E5D2C11E6053A3C983
853C32B8697C0F8916E0CC7F10BB2127C535AA652C0B7301A6E3A70ACB1C4325
6D84E29949549EC66ACE7819BD0594CA511D90C5DE3657D1A80362DDAF6793DA
DA318F801F5FD0E33CD1453C092943C844C0BD672101F12AF973198CE6652572
DEE1FAD25A5CE49F5B66B725419D7E0EAB85BEEC2355065FAFCC6C257CDE0DBE
5914097EDD26AE2A4DA72A6BCFEC7C244F76C0158633081031770776485912FF
17454074FBFC45E14F1E0AF6D6E606CE9AE22CEEF3B0647E142AD6E6993375D0
AF0839F43B350C407318D16C378C2C244650686C11EC6C9BB1CF4AEF4477EEB0
5A4AD30157B38044B4CDA621699200BD151F0383F5188E3B400D051B27DE56BD
D299B86DF10F1D36E21D52A222389786A0EFB31DF185CEEC6EE3A5432CFA5205
0EC25ED54D611FE6BF6894892BE758E48D868A79A9033F3E188E8D361E48FE49
10A3E3EB638018102CCFCB3BF92CE2FD49C6499D7BFB23E8725773B149A31525
442930369B15E4EB930960AF700C3BAC5A4F73CFBD2E51B3CA0A2C54E5EA4DC6
2287822D793607E911991E30E538EA282B96260B1D2D676BEF8A56CBFBCC00A7
46EEA01A84F39DD2F632BE0B4D206A41DA9B361971017FCE902F9623BF0721A7
2C745BF078D5000BB798A2DA585C83533B931A7DB45E8903653E336231A46CA9
5FB3D8891C1888FBBF623C74CC798C3EF4A56D7998B28F24BC26C15E8D3825FA
2B2AE666C27F082A471246E8884A7835EF52FC3043937DFF1535224D5F63C430
DCF00ED45F804C05A42540991BA605553F13506EDF0B3F4EE0AF1E90FB7573D4
5F6D3F539A798117D46EA86FA3C764D3932B91893D3FB23B0C1334232E750F77
EE8B0EF8F0ED9545DA312994228257BE38ED0B2ED615924B23FC28D54CF2EC6E
BD3D93212B5C3DAB3719DC3B9AD63E44DEE054EF38DFD4739142E953894B4827
04ABF8E708181D514047E4BAEE5FD6875C1CB5E3B033E16BE48F637CD4F1D95F
162F5DFE017051C477EAF32644E60FA65CEBB7CE443F5D1C0F8993DF8C4C18FD
4527CE6B6C9B44BE733E86AFDA70A1D16E5072DDD14E42DB55FB79FB8D4266BE
C218AB584853B973887AA5FE81D90D9FC382081C4C2E462E0BAA4C7B21AD6BD2
1C024FC80466EBC9330062A9E9DCC51432A8DA52139EA92EAEE2AE99A5601E45
AA1ADDA2DE98C4091664403EF93DB577D2D0F8635703C7E82C0973B62954300D
0D13DF2D681EED73B68826B15F4A36459302EA4001CC5CD18FC784C16CFB322F
ABEBF91166ED9033081FE5A2F54624316B5F26BF0BBCAF414493ABAECA836020
F93BFDE57FD71D34B257F661EB4246D12CC34586822376F40EE3CFC2AD47AACC
B10332D13934E72035EA607E168019CDB48619F12AA7F4FCB923A80AB9C87EE5
AF33A827CD7F41282807B53A2A59AC570DD9224BD242100D79477E62DBE6AD84
B025F003E29BCDBA61A12F608779AABF46B569A8B73EEA6C16CBE541F5766312
4AAFE9BC2DAF642EC2E938F27FDC2E8462EBB63D043CEDD7015FFF7240CE0811
225A2C34A0A8E6F3B5DC07E52E850772D9E7B0FCCD2CBB537D81FD22ABE4275C
95EE5FAF3A5F87999BECED091A31580D97B3CEDA9923AB74192AC653C1373763
D9B25D0F9FB1C805C515471D4FB80DC25FA98B2F04D69C432A0F02D44EB04105
10BF6C09B4F0347B27755E95AF4E8EBEA374243ADAB55F1BD0907321DEC56AF4
571AF3810E7F4D6DBDA2FF252CE2F91E5101A12961413EAD4DC4F9531D4B234E
FBAAF7E6E6565B7E6C88AD2B2C7BF0E66DA9ED5FC979D11C11BDF90931BD3291
98F99927AEFDB5E30B6110BCA39FC726EE84DC54EBFF8F2E907B832201C66881
52F658530972848FC0B41EA37041D7DCB8DA7778FFDC310042B56E8C09E1C8AB
9BFA435FE5606023E82B5C3D0E0A00380BFB75C875C312E6A454DCCDCA52EF74
3F21C1F4BA30B2141BCC85B3CAE0E01B324C6B1AB98B58BCF9C13756016C9C47
DA4C99661BC80990BD7BAD0514C1F13767A1AC0DA12862F0FD4DA2C2C79BE670
E36D877EF0F3496ABB9CBA65F0FEE40BFABA8C25ECCF87806027D68303614729
81C137D7CA6C0DE548B6276DFAD7441DABE19A98E24A387E512ECA045018B639
B73467562E5983E44B7C64E3174050854DFD65EB4753D62169F9F5E95DB26A95
C303711971AEEFBE63D60F7E3FFD9E69D3EBAB886A9197C007AC86AA520C0AEE
CEB4681EA8076785620061EB2DF475827A252CB81819F1FB8C146B4618CB6EF3
9717F422F2E07B6974D15242F28563254465046CFDE4172E63EDDD970231A461
912CE31C51BFC20857B661E352A99528E84D39862CF99B539AAE918D8DCB5BC3
FBD0032AF1647958F52B9D39EF7CA8323EF5A60792AAC6F3982585D83828FEEE
D4658426429BDC8A0FB439E97BB1FD175755ED672FE690CB6FB73D2011241801
69F3AC4CD3CB62D4FB61BE79455420CEFD10DBBD02FF4F97B94503B719B66233
C11FFEC48299B8A026B3CA477D7EEDD79A71710B3594C7DE43979B5A18C332D3
9E16CB874B1A3E92E2ADC47D41591A0CC053DEB3C7A2FD47B61D55E254E13C59
E64439E16CAEEC0DE8C53BE75EDA8BCB8368B329ED72DFFF14210A12F526494F
DE9DE0CCBCE9CC075A15327318F697768310F537D0BA553A4A20C57333BC6A9A
12C9620431903D209795E57199B48405E1677A4F8D852477BB1D6DF5A50A620F
904FB3F93AB953E7DC46AC75E4316A7ED11DBA8E7AA48AF1A0CC5FEE3C32114D
A6F3C3F6063FD1B74A13318CF15E228F3988E6499808D0E9FDB17142AF078220
3A830B98547EFDC805B266B4A6D996C6E882C89C53A2C796078D0845EC54EAF0
88CADCF4CAE5740DFAF5CDCED356241DE6737B34D08ECB7AA3C10A40EE8E7B18
8818DC361915C994D6FC04A672E02132283C34D34DA9D4AA971E6C4B2AD2BC46
6809B28FD8CF4AF90417B0EE66181551EC45A068F428C0D8253B244EE77E63CA
0862E5C33E80131DDDD9538D405DB75690B0981B42B13894ADDB7EF4176171F0
E9E7BF3C026FCE20A1104844BCBDB28A7FC4BC3B410989C97FAA5B5918D80816
F6A93953F0A5AEC7C824F94C64F5B3A383FE182EE8A8696C5AC192C394EB6F35
E62D02BDA7E803F7745E7E978D66697170FD9C28F7C14F12BD4C90337D6809B7
47A84017FBA58A416F05FD22182FA5224BA74AB53260CCC50CDD5BB3949FA454
297D2A7FE5A527D3A9EF1F982FD30A722ED3DDDCC9A1E0DF47C67E367D23449C
2C03F196A982346862866783419FDFECC803FBB73C1846FF96CA81F0F9E193EC
8C4123F0FAC85927D16C209D48E871639E9F7696CD19EBE79A621FF370014323
A5ED11DFDFF733A69E32E05F6909DEF8C45197A377177966FD7F0E305B94938B
6CA6CB9A4F91140370CC7E73AF103E6BC57EB2F0C9B4F33641BF53F81E345880
8BAD0C294CF4D7344BBA84813E5602114704E4C7DB807BBCFF9C8266F1F013C2
16AAEDA4CD5AAD673C77357196A305E8C629DA64D5C108010499451138F8908C
BB95209F975B85D93739B4272EF2481F949DB4AB7D3888AF14C45FEE2AA3319C
5FE61A64BF5FB84D70721268FFAA3445D0F86AF74192AB98F3476BDCA373C3E4
E1EB317FFEBA6C3799CA472286BB8E50DEB49D8141816C34807840BE0B7ECFDD
39F210719B4DE92A76B51D730CDD9634CDB59A512E9CF8CA1ED2323525054A38
40BEF57B85B4B8F0CD6B21B1EFDAA5BD7D32779187E428882F4564FE005D8F0C
D842A0503FBCB76A05860EF14044EDEC963CED456DD52043ADC0BBE0D475F3E0
D76612EEEB97F1962F2D3AACC0EF283E511286D8C3D37FDE4577565EBCA278C9
D194AA32D1184E97804AF5D7BE104F63D7E34B0AC6A2D311571B8AD6C04DB0CF
ECA83CF31592E02E48819606E978D88BEE8E5AA5EBB1DEE7F51DAAA8D78E299D
DD66A973E58B2DB22519F97D6070BF513AF123A58715D6014D2CC8FB2AEED8B4
06A8E282982FF1CD89DDDB2D5C9AAE4290A005F90B4F1D2BA500D13871F4D377
63E3F22BE45C2D6F1BA7F9BF31F6B24968A6C9C736386CD461E0FFDD17081A92
DC5D79FF5F535910579408CDE10CB3A00107F151CABAE0EC0364CF0B32619EB6
6F071FFCE373A473D20350A23ED9F48665109ECEA55846C3FD405ED0E55C2C13
8BBF9A6277E1B9EA80D4CEBA3BEE943BF3F246E509498D9FC24795FA21FBFBA4
2B3D2BA6034AFE08768C4669D10B225FDCB92E7E515F4867B062AE81E70AE160
80CEE4FE4CBAA94D4F014978CD1BB0449E201F2913315153E339CDFAB645CD0F
B20763AE76BACEC7094E9C459C0185574DBA5DC715D0339BF15211ACD684E833
CFE119D85046D8CA44A544BEE222E635F580687FFDC3C6A285B6A0B33CA161CE
90FA06AB61A3C1D0E82B712AEC532F42364F45DD9E54B283718E0CF6AC6A2C34
00576F0873F01A7ACD72330A8EBCD96FC01F50CE97B04C8D766749AFB2D3E936
B57AE4428BA4CA637F4DB4114D05EC73E34EF116BDA1585EE041F16B1312BAA4
EF16AD8C6D2A88074EB1D5A75D33D8906BF752BD943BDBF66C0B8A8F3F2C5F8E
915D471EAE9D83E656372AF4CE5A6460D0B6FD767FE93964007E1320966D1E6D
F77D4A4DD50182EC824B80E77B8D164B2F151B1EA9E7010EDFA8988102819099
D4B662BC21C5C6CE1EFC903C873410F8CF4D72E2A2F99DEB62F1FB385AB1D9BC
9C5444A984CB367BCA41D310C2E50AD55530763213CD78183F900ADA379CFAA4
3FAAC36B2BE3316B521F456E9B40D5D30DC1F0B714B0E819D643B66B21F1AE91
968CAA2E32D92BAD04D64DB373B72BDE80A30A31E9D23918726A7C0EA5C25BD0
EFFDCD8FC053A354718283E4725E65E0208194E6E7972CDD93189099BA03C2C9
4C0B0041ABE8384FDF9779C16B2A622F5F9A3E8F2D6D05B27092B6267D98BCDE
50B80BD2B03E19E8142BC97D01562731BDA1F8BA50236E897B5C95ADE5A4D744
F444324623304875F761B23B1A0B8613685EDEEBEFE0BF3747A0C2F82C48AD00
86B5FF673D3C987AC6C34813AECFDCA862BF521F6817F4C8657BFFC462C33060
133A310C90F53DBC1B9290B0F6E8F2493B67471B7C4CB12F95E9090F77A71B25
93CE34BC21CF9D27C4D2745524F94EE27FF18A9F16011ABA1C7300D75556C18A
9CF2577F06FEA9DC4288B0845B7AB2A408F1A79A3A606DDA7207D98CE2C205E8
701D874D75B4F92CCEB6399A971AF2B5B98D81F88AA82BF4B3AC06A6D30DDADD
0D6038E7A9E2E1F2E61967EFB097A30B4703E8AD9F337C459F52C9813862A42F
A4ECF4417C030F2FCB4DFF8BEF7D99EC39B95D7F8AE20E0495A5D269A385F554
E16EEA31F69DA5D36FAD4DB5248717FF6233D1FE7C72BC6EF80758CD38E5B0BB
6F93E436E593EFD4C5933F256D5DFC47B614CE93D9C95BD7D358251628CE59FA
A74E10A86C02161672AB0A84685913A26ED90FDC19E3BC6BEF6B7DBC53761BAE
A23BC3FEFB68F15E333A470C1AE3BAADAF2C9BD11110F67110437152B86F65F1
EDDF82AC8F660BCB5B75AC92181A8D4582331D03BC71443BB76CD847D3A2634E
51031A5ADB19F741F47CB5C31FFB2B83F66BC7470DF2045EE9A2C3DA915C4E0C
75F0EA170A81E41B709C22D8E934B272D9C389C5AF5907BB4849F7D1996A254C
28CC7C7EAA33A23224A46F4E8E8893A8A704FFB9C1BC9475BE22E3504EBEC2F8
3EF9132DE202CEDCEEC1B380EFD3BFA7E24E3805BC1E42A9BF9C3DA4E9B85DB6
0788D2F121FAC31A1CA84536E3EF90614266A3DC5F923C9BDAFDEC57F0AC04E2
CC9AAEEA9A3639A788C1A64AE322CFC872A1D8CA0E42EC4EE63E529916BAD3E4
425936200C2E98B03A2818D6F8FDC9CA26C4D3C21E0782DA3A7C23E6084A402D
CFFCF517D6AAD04DDA1B18327596F005FE0B6C8F347F166C916E6F5A7B992B3C
8A7FE1F7C8626E322660725D34BB45FB3FE13C65C064C86E0A0DCA128947859C
CF81CA902B1C3EA1720218BE639E5816DE063F29BFB87E928783872072CC29B2
3E796D9E1E8852D37E87F2491F4423C6F7E33789619584292CD4F3A9F75E2840
B457306A94D8A78EE6651FE27DC24FF60AFAAD51C8EF0E6897140E3CEE0FD28B
8E32E6E0F4841B696BF9264278A501AB7DFAA71A92A67D1BF1AFFB273DA66A8E
CF05D7984D3ABC141DBFD0A0ADAD96AA18B229803AE1CD96B4A0713801DB4B86
D77B34F06AA2D42F1EF3FA64AFF663FF1DCDFDBD611CB244BEE52D6E5DC47087
E7C148A531EAF519CD2C7070D3E90A30954189597A0102830349C0AEF9991608
9265AF27304545DB58AECEFCF9BC621098DF1B02BBF70C5ABBAF25A1E99E92E3
3C87A8CEF5BD8D3AC48C4BC0000AEBCBD60E60BC1868485013EBDA11E38E8E7F
6B3E55863C68CA56FCF485E0C5FB6F17C008F358F6D5FF1072CA82056B03C62D
B5CFBAD969BEB1ECAEEA71B910F0333D0C92ED068E7812E2E6A306345D037B74
7EFEDF08F784AA824397B4CFA2A31DDEB5F337B78CC674618BE25AAFF2F90258
D65862CCED42
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F6000BF098AE401F14F4BB6F5D1DAF0A3F095107D502476C
356175D567B8BE8693B835B72F954CD3441DABE19A98E24A387E512ECA045018
B639B7303812DA28297D223CC2C4B14CBC8C49FC0FCBC63957299DF52CB8DDE8
0D46AEB4C348603F4053F4F57A3AC797C2AC09ACDBCF4AACC746314C6D526359
165382C75D64B1710A88AEF979E5268D7DC5054261F00FE1085817109C44A9F7
AEF02EB8C8BF99E560FAFF09B9F02FBF83D191769EFCB5C9D08C65D2ECD98292
157E49D0438F8BAF92878B4223DD8BF6A3D467F9A6AD2AB3BF6C3781E3FDE594
8A46842851BBFA7C6F2939A0396D0582FF538CBBBA762B19EFA5B6483F26C231
610AB978946E45FF7BF4D17303FA824381BC7BE23AAAF086448C37F4A4453F76
4249060653EEC61D70051378260F6E92A4B6C90EF0E08EDEB4A61B3F5F7C5A8F
7FC3C81CD9E76B3D7404154AAB1580CC554C0312517013C45DB845F44AA383A1
69C387D7D92F6F04C3DBD06FA116E32123AE4910377237F2AC508CE9F336B0A2
01D033D1D02321F95BD32356DB80F206EF6A6160B8D895F54E3EA1363B24D9F8
E406925AD428839A820CE512E69CCC6FCA5B217E92F21E559AAD0158589C0051
138043054B714A3AF816C5E0DF808A0758DC91EDC4010ACBCB6F9C5C70D7B1F7
3E41AE2915A0CA8E6604C8B68DD5F343C17EB7A3AE81F79C0825C2E04D4F370B
A3C979D11C4097C3459D8EC684DB96F65179EB96569E0644A8D7706D26251A2D
65EAB4DE19C416DB41855733B0FC084C7744344FB8E19B2C039170D57AEE7F99
B29B1DDBB40357D918D061FF6A3CB0EA04ED10F3D470148CA55C7A1B9FFE94B9
82B1C6F61D91A79C2D53036BD60D4E321BB906D96A8748FD69D228F722DEF36E
E30695E17B464934B8A71C35F212F6315CF48DEDAE45EBD1F278ED2A2601FFBB
E3AA65E5141B1F8D4BEDDE0ECD33910461448F365B489C54B44A0CAF50371D69
856FAC4D8F1D35BAF0751997AA6655AB970C2E6054ACC7EEE0ACE99EDE98DEF3
9C1E3252722787532E80AD95A46D936EF155DC90A0125E8E61DB1890643A1690
1AD838A491C9139A2E3170FCC21D866127958661AFC19123DB82304BC6500E45
D0EBB8D0AEA8C346949CB33A26CA98303D3CEB0DD59EB53FE89BAD9D9EEB5387
DBE2CA7CDD6AEA8EEC99E20EB07F4F750D38076D10EBBB44DF71EF0634548E87
223FBA9A99A124D8F14C06021B72B463666E080616D20EC5BA7C0014F30DA7BC
EA598397C311E01AC2D24D7067F457E6FAB11F92DCDA983DF6D128238130AF99
DBADB63056A0ED3DDEE316ABB0B90E985FEB919C6E38FB2099A0299A8F465F92
A1A03820DC2E2B527D6BE25D96514DE0886FE5FB6F899C3EB8FF33E7E7EE384B
821717860B89E81B78C1DD1C0CF33BB3A768C01E31D915C6625DB0C0E0EEB028
EA6B71A09610ADAC6C38292458A49C41181A1A47EB65600F0402BF4B29FBBCD4
D560A608036954EC7776AE6A0108C822464D4B690DC8AFCF5D4BAB101398D925
A35B71370CE302DE3AABCA0511AFC8B60B15E74900F53BA3C975F7030D2A06C4
4FD6B461E2E280AC09E966FD2B5697F159B68DE95758A3DB700587FE2D25B999
DDCCC18A122CB8657EB8407987FB83C5EAFB66B492B438533F7B53D0ABF033F3
40D482FB3C1E73622BAC8FC27E21449F8870312D2043FDA8939AA82604C14A6C
0F3441CF780D5915667D04AF1C8BD7F076C2B2E1C9A5B9891F3D55399E75F2F0
E9273EC494D1AAC8CD81508F0536840D10A67EC7C5C5CEBAABAFF5B0E3183923
8B61EADFEC7B4BFBEF1E1A860AF00072C4655388CCBDD5F0D5E2710885C3BEE0
FC96053B0C71F73D6858C85D48EDFD6E41AC5825C8BA76E4E99291D13CA608FB
18FE3338837ABF0EFB6552C9CF58B49AA827670693083C4F4992D05A21C42DF8
F2762BBF399ED8E442BCA4FD63188C4075F2A969386F22C5A7249960475F75BB
68C69704D088B666C54EDCAB5E645F5AF24D4D95E2567CB1C2DD2C1375B510D0
CDCBF8C25AAAF3FC362C6D402A2950D061EDBC6AF103DD3DDBD95A8C89B16403
6E9097BBF99589554570A916E86C7426FB8DCA85CEEA1EBBCD7164D39F06B5D2
62A1C4190B4297DFC986D188D821D2C8E2AB612DF8E03817806E2DF65EA6C04F
961E031CB67D733034EA574388D48F17FD8D89FA44CFEE33032E03D09FA6F8D1
2FFF1130B60F1A0B0AACA77E6841600971F5CDC742A20A39AEE0F77226C214A1
0B988D94FA22D6460F73243DB7510097FA31399625ACE8B3063A2AC985067A06
09E49C0F79AAA61533E2718B3B9AF23BD06ECB8B05244A51EDF2A7BD6B84F070
4C489F07541F69F3F99181551CF0D1DFF67D876D98A0BA98AFAEC95169325812
8CEB7E50FA62630BBFDE5A8ED13E0A65E4D49C7720B5870B2690EBDFEFBC6A61
C260DEBECC2CFBD73BC06D8FD0A791800CF2B46E5B0A7193902EB3B7A728948D
BA3835993BECD9A88D0F77A22A9F4299F3DABA41D984AD9329C7E56A86A59FFC
C9386DEBD198727C6DAE159D28EE9038DF0A05417C573A2B023352069DD26A5C
8EDB7F5E1166F3898963471E7EB4BC88FA8188CC9EDB5D2409708AF0D8068239
11110EB25E120C609413E47E5A83E254290945C744E0913D4554731489D61F41
CBBB4C183F41E46F2C568EC48B856C1CEE0C0963B9974F77633E3161FA6E6460
0D48329329AD38C948A89EE1D540BF80AA2D323D8DFA178282D919041B3118AC
C8B58B8EC081349683CEFDE9D7A8A0DC73655EC44CD039FB3F677DC4F398DA22
D5A2C8DEC5A6D7FF1D47C8187FD68296B4ABB07B07032333B21E13608069B09E
4A9D821A95E11382BDBAC2556AE999829A8D2B233445290292DA35B18087D6EA
C332B9BD59E41C4352EBF9539A5DAA9AD34E434723BB02264F53B46A86E0D8BB
D4FE7CC6AC4B334622545962DDAB14E0DDEB36C3E406C89A7EF1AB04FA0B90AD
71DB8AD9F09A41352EE410C55C02FB026608A930E6B542DD3DA8B8A330CC24F6
75F16D72C3C6CE6B31363BDD694E9079DA091121DB3E99A2E08D677BF9804BD0
F1969974335DC587627E516998AC134D160A44AC9125D002E009D03CF1751567
A7E457CB9C058B1149ED20917B138431A55E1566500DD9691644FB8306BB0A10
2F26EBBE70E4C8F4771106BCEDED570796220FC2B93B66C23F1D01AEAF71C91D
C4D21798DCA2BB9F3FD727EF38BF8AD7B92B3792FA609E86209486B3CFFA9399
9B01C631D1908659E8C4EA4B47A3AF5B7879610B18F685C77C2D07D9AAC9DFC7
9FD1C7BE3EB502A3663EFA524B686DDCC9CC0D4E406E63EC5D3588BB8FC5EBB9
7A5F846A3BB878C9EFE517926FF9F0571E739289F93F48ADD63EFE7E71D8BE2B
10FCA5D8EE7AE42C1765651C796E9F30CBF589AB941348EF181479A7C6A39712
8FFA8B60436A893A3EF3E520BBABAB38C14A3AF20D731B90BB0F303CF8BA999F
F35DE48432BBAB96BED22A8C670EE246546996D58107F7698ACCACD7A88D2AE0
FD997B82D0E20B2DC4557630CF5A74F5D7E4428197F341FD30D0AC4BFA35BD39
D1CA58BBB7775EB4C041D7B8D257373161076941FBD0E2CF0251EE1C694F2B31
8460EC995A622BAFFEE40A45367F7E7A1BEFFEFB8CC7DB98B78610D2D795E0A7
5ACA00EA4C08615866A6EDA3667D38EA83166314F30272752554A4EDAC4EF4DA
1F8A8C0A8D519A948A6C447CB399037C78EAAE9629CF1ECBFEA960FF97CF2959
5BD5A8A00B56B9CDEDCE248E21900858C79AF2283BD6D5775CC4086B0401E342
BD8036376C4F59AE9AF74B4F0070ACDB27B6B9105A913C9AD337F4726934D916
A30EC7084F096B831CED84D386D19E8EEB427FB83813C9BC6969F785C8B0A256
5DD599F32E60A1E7F25B59CB436D3A7A2ABD44989A42B2514C24CD74E04A3614
7CB94FA128FCACD1C34E110F2C8DA0F6D9A3AE135D4262F5DDC1F3954FA556A2
289639219FD1A3A02E734151BF0FAA7B5C5DAD3EA6ED10305E09ADEEA3FAE09F
250FC078C29469B2CDFD245FEBFEDC9B8326856BDD3C2C65C9384FCD5173B32C
4D962E6BD66B44A281723CD3C0E6E2D79A54FFB9BA998A3AF7788E1C2B4D9FC0
9664799E3331E55AD3E6D262F980CD00B594A3D6D3FE7B306018BE26D3BA650C
441DC3956BE883F119FA4AF1149525995C8F1AE71A47B9E18E7AFD37163201BA
02A1CC2DD0D7A5F748C1248AD032376C465AC9FCF64A0D204AD9738039838BB8
7C04842E0406D0770CA934660ED524EB7A918B32AE929B96EB7B59540B407E0A
6B4C2A35A181B576F4A07C53B4F9695B8E2F53E9BC5C3280E5E12A27F13F8133
ADCE4E3B9815B8D3B4D5CD263187C01C312CA55295BF0D1285707759EA2EF6B3
F0E1268DC2F1BCA49C711F6B3C4B9FB34197C144954A6AF35FCF2103F1A7415F
5258F2A2086B78614AB87B583330A098569E109DAB608A0360F9E92CE703A31D
1009D054E558BCEAB22536403D067D95F379CDEFA160FF6A8FF7BD8C20562D79
2DD0F08DA33F13C2E9EC086477B07284B2FFF95A8A625407A01A2ABC53F26FC0
8241295CAFA68D28538C7FC1931C7FC6AFE1122FC24DEA28F304E91752899FA8
BCDCC3D498B69CD8BC5FCF8807DC5EBCB8388014A6BA9FE7F42F5A86BFD57ECD
44D8FB43E820AACF404FC089CE1074CC67EC8AEF279A84666584D25A85994312
95C15C74DE51DA4AFF5A2F90A57A14B7F2D4816CAB8DB67D03309DA0445514FF
0C0CA51DBFEADFF2E415E36687F76C62FC4A21C9C3F89C2F4991EDD9FDCFDABE
9FEF9D9FA27DDCDA971BA80F658E65A28FCA5706D64F37B54E54962CE55BE1F7
CF1D70B9CA4381E8CC5ECD0413F0669823C4630A952CFB938B0ADC4304FB73B1
C2DF511F1378CC5EFD2E4FAF03ACCD9DA7B188ABE3C8FF2BA81276F29E0358AE
AD5106824D74BF14E532D888A79DC778DF35504389846E968528784B6F8C9E0B
72B12219002C5F8E915D471EAE9D83E656372AF4CE5A66C8C7A9B3C0FAC38C4B
D04036C06A96D1BAAB063D48CF31B8806D4BF92327592F8B086AFF3330B151C5
BEBBF832E2568EF17045B57B306D5645248EC598904BDA3A19D1D84F0B692D4A
13E2D79511F04F81A4AB368396A287932001FF4DBC037FDEEC2B29DA7693BF3F
86050E1F21A18EF7BEF0C52DB946AE3A1595A412F972AB18A88C8822C67791D0
E68426A174ECB3172F574E30020ED790D52417593C5106133BD9A43FB5693421
7A49E5CD12D859247E276E206C824E4B23467EA7E07BC2661E0E8CF17FF2B810
BDF2E189BDCD75208FECEAE782C3A45F7976316C9ED2CB523210CF1A247D2F21
9E705A01FFA2BDD006686575AA14BE7415679DAEA078F29CDA7D7FB4CAE16197
3444FAEA7A34B37B2A115C994CBEF1D420911373602D43D7706D4D916BD5DC56
C9DFEAFB8A072C6AC3B3D15931842B95B7A4AB69DA529142C9E7130339F473EA
3D89D7BACF8C6A57ABCC5DA0422AB6E7A84CC797801CF1F85044E950D67B063A
F9B31BC4CDFDCD5ACED410939938B4FE98E75157A6FEB46984B78E26180BA3E9
20C592414DE04D294D4E1030E92B1A8AB091BB5447B9E0D14D16675D13F693BF
B209A0090A7C0FD608F12C7A5ACB4116568768A5E9F9CE271676A553A12CCB20
32EAF44C1D92240C71E990354A2BCC3285BCA243523BE782F9D7C84DC6586BE5
98A4435E3E86473A88159F644CC8DB2088055A1DEC0A71A5B75ECE9721D6809C
F94AFA29A1F1674BB51253EC42602316F201B7954327317EC7C0678209424BF3
38BA40FA80982D4F0F8F1D9563FB70948290054AE31906123D949ECFDA3F825A
8C956EC1CFC84E7AD558EECEEB2B7B9B391980EB2CA082880D978B0D59990DB0
1B991AE910B7EE5C291BF7DC9E7CE16872A5BDA3A7E7041A0DBA005D0FBA343D
16CF87987B11416F2ECCEC0DFAA907B95E417BC586BABDADE8CE8DE123A38FA1
023CCE0631663E230D0A9A6EAEE7B7BC93847B436303E25F013D2D61A5E37FDA
CEEF67071283B55BDDB4ECA19DE774EDDA4065A30828BDB6207147C69F63DAFF
6642ADC19F9CB5EC916B710345EC29A2F1A776BC4D143A27F5ADEAAAEB4173E2
18DB36A9C61B8365B6C8C42EBD188B733883DF2907A2C3CDBE3ACE31C9E84BAA
F6B274A4497D5C5060FDA725B8380C711C2C8E975B6C248EF6C0264468412D1C
736A81D17B02580F9D6B523DA20589AA2C97D975575377523457868F2C889E74
C8E5B7D2906998C1FDF995CBE1253A0860FC992E0367A6004961B9D7723489B1
743F8F37C7668DE35AD8FF4B33596101264D2195669BC3A30ED912DC15385EDA
576DE358244C2C57B66BE3756616AD936BEEFEDF2FD7A686CB2D43CAE157DA84
28BFFBC7C46E6355BC34E443A5BF72AC4D034DB6A7CE17543ED13027D165D13A
30F73DE404AEE2F408B840D4FBA52A544430AC0C6C468A3E8239016F34DF4EAC
705A6D5950A77A52815F13AF86BA1A4D76C459AD75185ADB6C68CD684517F0A9
5353E0F26BA43D37D065046B57A4A7D4ADD37DABAE071B0A9571147C9CF8B826
0EB9D45680119529773676EED78877B18E878C1CF13101A11B703082A6DD1546
DA312994A6FA251F64B70758B295832B4E6EDCAB9BAE0D19B6FC8928B6FE72DD
1A7F9798847CF211C9A3D4E4DB1BB2392B17E914AEACB4B7AE5CED35FDA34220
E4E04D4D579698B946BF4E119E30EB552A6A6C0969363B7FBA2AD619700D1647
F3881045717B3E1C5B75691D476A8C672B9351DAA1159517D1805D2C81016D00
577259134C57CD5CD002FE02904D82B5E0B65D0FBE9B209C395E9C3488D373B5
46D16B296921C06C8D1306AA9B2825E7C7C998770DE01F3B42F08378DBE6036E
6ADC3FFFF419BF249956C2DD51FE2ED7FCCC1D31503EA891187692144C30C5A9
5D86E6614E26E8D5C425BB6FE742785B93335C35899FDB03ED567EF102A31F84
A52FA7643D3FFBE1271B7B786EFE777A607CB0FBA07E54A6CA28AB833C0B7C6A
B7D65DFD1372A3138D4968B83FF13F9B7C8BE8F7D3062E20E83FA6AF45A0C932
B5E2A603661B25D450300231A952157ABEBBA5C42182D220A5A952533BB62BE5
CCDB48B081035E3C66A668EAF295BC05D3B9114B3F340503E023BAF89E6CB34D
200F70D3AE26F2012A6E3DD7AC3D5770F2AAE4749144C54DB9518F932C39D6EA
D9A629F8947CA2518D2D0A2CF83B51496551776163DA3A26F600BB57FC9BEFFC
00E304A7B891BF031A743580231B6C0045A7DEBF8B4BFC0B35962BA74753E5B9
5E8A4D54C27B4907ADADE56F84C54EC2D8A3D0AF4615C602C756B5F8EAC6E10A
C5CFD56E6861C32CE2603B08868F0F26B2DE088289253B7B3315088394FC9326
8658F368B725E63049948FBA78BA3BF074F8209C014B7572311734208342608C
6E01E509490BAF525415629461953F256DB70A2626B6321B4050A72C27B42C91
CFEB9C8083B5DE3D9F71D6F5315D76B55F24ECF0E6D963587F748B69DB6A07B7
9EF3A7FD4F4613B1250167368708711B0FFE01DEDA7ACB7EB397CB23436F70A0
8DA4DD3F4D48D5EE5C13C6CD2E0B42959FE806D1FD8C30368CFD3ADE4797B1E9
4DBFA07DFDECE92D3164A445804A23475AE2BAC5C2E87755984FE263E9D7F431
0A137E4959F504CAA30EAA17F2BAEFC57F42E20CC8B2073F472A7B9878AFFAB9
BAED157D2ED6170CD24E43F58B741F6458E08488C1B87738C554429F72F81944
5C434D4EF1B7D2FD161D0B1F74B14661759C67581655F226FB9111EDC5C75579
F9481B6F80BBCDF2C4151BBA9910455F212C268F6FB7E55C38E6CB8C5F441139
DCE4DE212429E1BA1FA215ABA1463C96AF729C47C71173E3B08D3097CB6CFEF6
743B38558C6287C8288336BD21D97EDD5BC4BBEB772F7E5FFF4A9205E23B5C52
CB34EB733B27202EDF539137A248D6B91A6F82FFCC4145600C70DB71D279552F
40FF66A8A1A91F1A37A212FD782AD596F964C37B504D2B7E965F61D2860261A4
61D851B1FBAE0876EEB94354DAAA29F25E002316940BFA2B8B9999FAC8A36B81
B360926330ED6C59006D0F70271FE7FF15C210BDB044C0D98A8E012EE0F4AF2A
0FD8EB7278EBF5015DA9043C1CAA2169DFC73ABE03C555B0808D7231B386BA7D
522CE2736BDD494498A95D9C33AC9A8A395AF413C985334DFF9D480D537D14F6
E49C4487C7CE5D95BCABD76E20F77ADC1B3352201D6CEA6A91B93623FA702823
551A8D8F8B6D8D714495F49A887AB03D46A852D79AF9198FFCA4A2FFF893C96A
6B7DB7CB2ACD8CFD41AF0840B16BFFBBEB73B7A5724888757AD802BB5D99CB9E
58969B3BA995F1E42AA7776323889B424F13C1F9C89CD43EE8BA1587440AF146
8442F6153FBCFC4670C90D5D5F7ED3F417995E8BE87F46B7E6FD4D24B3B2FB2A
4FF2965A738AC4CBB4B6926EE1E67845D74DFEABA27FB8A1F7E68C35848B6E5E
247DFDAB84DFCD49BD204694C5AF09A87C71981126525DC660682B4DD541393F
EA6A05556323286CEB879B0930E9787D1CB1CF86322A8199A95342A184DA5589
D372DFEE7D9F81D2B302F544598408DD6698AB78D75A0FEA6FEE94FDF276BD90
08254D3E3B373D0E5E28B8A428B207C286D701EC604DAD368A831061225620EA
9EF1F36001C25D89C6CEE447E9C0BA92325205A2912D271684296E6788D4D531
2707D752495F20DFBE6D35FE20C380D27A16305AA88B0B3764D702BE1DD68916
5BA730CEA0DAFC5178F2888EB594692572B00D12A01EBA9E426DD9CF6EF11271
FE913061707FE66EC53952C5CD0A29941C4782FE34C0B5BF84A57FE2A5CB4CC7
1BEBF4990EAA2C91B49859259F19F9A269B379B8F83CFE4FB3FF03CA99C867E0
E86EF8B6EFE713E878D54682C1326C3710CF8A8104A68EFFBD0C1586C0765100
09022399F6CA5070D2D39862E3081AFFA54BA5C6BF44F28E91B3C7599437A5D6
BD59ECA92331E5BAECD4D674F1D522123E627D32A1564F1EC6F0BF7D8099F243
E25F6825733B48FAE9AAC7ED3F10891161BFE85EAF6CD028E4E92FD6008C113B
DAE23543ECA4535DC1CBCF567DE01B30B2F6C53349503204710CCBA0D2F3D084
AE1B3A43D19286B1BF089BD9EF487733FAE13B1ACEE58FAA9FEAF15718A1CE80
6D9816FFA0795B495AA9C0A31BCBD1E4F51F93B56672788DE2F61EC5F49AF205
1EB957949636BA176B4B56E70276BFC3C2E5BE9B976FC93902677C5D51ED13D6
973D7DC46869D7D5CB1E4FF4F1319BCEF7239571201EDC8950A22391F96B3297
79ED002AFDBC52337A550D9FB29DC717B7D8A69032F06D3CF66D93027DB2A309
9427614F56CDE3255CA1287EB9B4E522CA0748D68850162A7AC62A1D89133341
DF0BC1ED2BFB0DB0680F7E2818E5BCC29DE510A6E2761B5B4A3EFDD808329765
AB5BBB896C31F1FCB22979721579FA422968EA82C601010A023CD97CCC0EEDE7
4539D429AE594C498CCCC0E009F886F8013A09DEFAD0698C337BF594E0692DF7
B71EAC1F782AB399C6D5447A4930E6CD9E8036443DC19A5BE30FE71D7EC03B97
E9EE664F5D6AC5A367063E907F90AA0E9442155D2EF1C3AFCB19D092BA631C1B
7856443055ACF31D7164589450CB884C5F5EE0F40D26194B3D4F643893AD7F4A
45241DA5B14AAA8A081DDA931EFA5B88C1699ADDE69F0A85D4FA913898B2DD3F
32E0E98C5353D19FD21D6BFB93F31B37D20A5D93C9C96C42A905DFC3ED33A6A8
80669DFAA3E9AE6CC9E122065BA462A5FBE2E3EEFC8C6179D442F63621D89ECB
766FAB70992DD4C818EB9B7E6CDFD991BF0B7A57A67302CD790F5EFEFC8FE8B7
DDF7AD07EF8E7DC7004C20C9DCF01E499FB05BB371CE1AEF931EC487D624575B
BD8F1B968AB37B5C35DA640F7256FE17FD87D864754B774D8B8F6FF1BF957A51
CD0B416CA4528988C8ABA6EA840BA66B581E6924BFEDE2C0DD526773D8577E6B
11B72C970B54D496EFD60A08BCA180652EECBEE503961E83CB3A428733AC45B5
D1DEA0B8D5808A5509C4953B692B9947EF4A13E41E97C1351432370FA406097A
C8A181CCA5EE02D0663454771BC0CBCED5F16578DF80BDB4FD20E4FE0D10528A
E3A0FD9496C05FE16AD87808E8DE1F40832377757AFE4268D84C4B1050613A19
D7C774DD807F35454EB98FAFB82EC62BBD310F9F8028CD243CF55059FA984E8B
EE6BFBE255AD609173B120026F394019626BE48C404AAFA3D97476FEBB1FB691
42C1E6582FB851B754A8E360A0743D170D91D7872C7B65293B17115B1288C843
252610FF053FB78EE140953D539FEDFB4F0DEA29E0AAB6D51FA6569FB8D2AA1B
60B3CBC35327C17969E59C55E70C3411F60A30925F75032B4EA0DC2D0D1B9375
1F2534B667C7BDAD2B8F54C5E483791E9B987798470064D24DDE0E0552FC8C1E
9BC735229D2B24DC1FD4447BADD5BD58B0613157ADCC999F82F2E8FFBEC75804
36E0BF5E8A00FC8E127CCC379288E3A00AD37FC03ABB57D3A04B16163F583CD4
2D1537250A1D330CC174638B436F30095F1A19934263782429A1499A5C7ED908
25E4E189E8F0C9093A07D46B3130561CE8C4F1CC21B717E27EFB67FF1F406203
EC28C7F6BA84DC5A9506320FC57299E2151795331A7A2B629F639A235077EF74
0D30C29F742CADD8CB00FAA3ABADA58D29E28C7A75E36F2E148E87355C1BA43C
CA948E9F0AADAF52A14DB5E01A8B59BE13E71C7D81A69837ED9436D3D3FB7699
F60596C47EB3D54C79D3849AF18E823911621F53D54EAA33D13CFB964B29A081
E33604607DDFC1952F5193F587CCEC11BC66B370C7BFE81564E39263D6858FDA
E5BFA9EF53E724C54FE79301295478EE74AD7451BCC42ADF231AF5B2B9D27800
1C976AC3962296E006D7687AF90CFC4C286AAC333473EF1807E5C496F930ADDB
3E5AB0DD800B40B4AD5E0E158BC7804F87C37C6124FAA2EB283474D0497793CD
785D06F38F12A66EF8138B00A6C9660709EB1C2CA7241FDA42AEFA3449C15B57
9238391902514F3688D4376DDF5737AACB96DC32FD2367172B87CFEF965A38D1
C6585BA72F11E6CEE22FAAF08C175D1381A8B884780F99AF14F0AE617BD09416
43D27DCB20E5E935C44791A6E61F6D6C89F0A42AD2D8C26B06967B6789788FB4
72046C5ED6741D5D4B999F2FA1F2848C8ABDC1382252A9F2555C50773004C509
ED2ED623941B23FAD6E5204631C87C2A54E69675ECFDB599614EF55B6072B8FC
6C9EC73C26E7F1B88E489484F2BFB37D91E72C5C95E378BA73F19A70EDA7BE7D
7E374E6AC2CD4A28E2EAAB13D0810D38DF99965AEE9154CC96727256E2EF7A2B
4BE1F685D14C5EAF56A37A8A2CF837C97FB3FC1665A7C1338E42628076C2483A
F2565574A1CBF6F8FA46AE1487402879210097B8C3B5D1E5829BC78AB716F91C
36DE7F6AE596E5B02736D6770415A2FD223822BA188116D6D0766082AE491FE1
7C1B0279EECFE866C01F82AD8CF34DCEFA09DC1DF20673E4270580FCD408414A
329B2CF925F1DB3C0291EE1EF1CFB680E12E5D3C07EC4F4F115E40570B9244D2
71C4F7C0702B0AF41EE0F528BB30FF1F00BCFDD1CFA7ACF694F958DC00FB99FD
740D615E55DCDC7AC9DC93A8346F9F4918B407C0382E68A7790EEB061942333F
F341256D07A8FDC1CABCCEE39D3EB82841A26FE66A35241165D7506ADB83B041
50A92FD6560D0A4082687D560D4E1CE83ECE1C7095DA41C5323E241803F34B56
3D4E3739DDBC01A62D8955A581E7499833446CA8D674B12165077BCA575E3A8E
5C6276742B85EF16F6BBE4D0EE81F72BEAE67C507F039A1B7709B98867D504C9
7C068A1C226FD57F7ABC071D936CC408043C37EE25E677144ABB436060D46C3F
311DDC2696E139A157C6A4E7BD6493B45EB0433F20BEADF6748C39770495E076
B9F5B3C0830F602D029AFF708067D72C0800A44BF9A8A51CAB96AC0C0160EB35
CE57038420A0B8D86F8566D9955136272D36EF0C2D8AD9F5E50B95AFCC668C30
5F66733CE8776AB062D7D2C67BEA08AD7B997A9BE348C0EEC3F65FFC5FD03043
FF8E0CA6BA9DDABE40AD50648AFFE4E9665F1AE3A1E94331406D38DC24F6B96C
08DDBD9D09FE52FFF6767BA28EB3B3778AAE0D71DF4BCF5A8FD748F7B1D11A88
53E4AABC8D2BA5284394227E80B30229A32D8D99D8B5CF40DD96EF05F7BEAD47
DBBB41F1DEE207B41923029EC4243BB6A991D1DA90058744CB3193B9A6E41A41
EC7C94B652FD32A74378C47198A0A2D45BCBAD14F692D0D2028E51974A285D84
305229BD82223EE7F937027EB5EEAD81D4CEB4DDB54A7EE23134A9C850748667
5E2DE75A7B5ED3165ABB06172CDD76C87C821F6A7D1CC6FFA6BB81CE73782848
0A688FD07B21D854A2F674293F8ECE7AEDF00674F9603074A11001393AB5D826
82BA15F573F25E73F74C21E135256F5D258C3D99ADE7695A9086B4E5EBD4FF05
DF508C9D7263BAB3BA4E70B1CA7DC7C3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(exemple_mes_environnements.dvi)
@start /Fa 135[57 5[48 8[35 3[57 1[54 29[69 10[31 8[62
49[{ TeXBase1Encoding ReEncodeFont }8 109.987 /Utopia-Bold
rf /Fb 130[60 1[60 2[60 2[60 60 60 60 1[60 60 60 60 60
2[60 1[60 1[60 60 60 60 60 3[60 60 60 21[60 2[60 24[60
60 2[60 37[{ TeXBase1Encoding ReEncodeFont }27 99.6264
/NimbusMonL-Regu rf /Fc 22[60 112[60 2[73 40 53 47 2[66
73 106 3[40 3[60 1[53 25[47 3[73 69[{ TeXBase1Encoding ReEncodeFont }14
119.552 /URWPalladioL-Bold rf /Fd 22[42 42 114[57 31
36 37 51 54 49 57 84 28 2[29 1[46 29 42 54 40 51 51 20[52
29[24 1[24 4[20 39[{ TeXBase1Encoding ReEncodeFont }24
91.6562 /Utopia-Italic rf /Fe 4[58 134[33 4[52 13[55
39[51 2[51 3[51 51 51 48[{ TeXBase1Encoding ReEncodeFont }9
91.6562 /Utopia-BoldItalic rf /Ff 186[83 69[{
 TeXBase1Encoding ReEncodeFont }1 131.985 /Utopia-Bold
rf /Fg 167[67 1[68 83 66 59 72 1[69 81 78 97 62 2[41
3[66 69[{ TeXBase1Encoding ReEncodeFont }13 105.588 /Utopia-Bold
rf /Fh 22[47 121[53 57 1[26 6[47 55 1[55 48 30[59 58
6[24 8[49 1[42 24 46[{ TeXBase1Encoding ReEncodeFont }14
91.6562 /Utopia-Regular rf /Fi 22[48 116[34 41 40 1[56
54 58 87 3[29 24[60 1[68 19[26 6[51 51 51 2[26 1[26 2[33
33 40[{ TeXBase1Encoding ReEncodeFont }19 91.6562 /Utopia-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray -118 -343 a Fi(N)m(om,)18 b(P)o(r\351nom)h(:)42
b Fh(.)15 b(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f
(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)2089
b Fi(.)12 b(.)g(.)p Black 0 TeXcolorgray -118 -189 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

-118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/Count -0/Dest (section.0.1) cvn/Title (I Exercices num\351rot\351s)
/OUT pdfmark end
 -118 -189
a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189 a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118
-189 a
SDict begin H.S end
 -118 -189 a -118 -189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a 1919 46 a

 1919 46 a 1919 46 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.69804 0.69804 0.69804 setrgbcolor}def

 save

 /pgffc{0.69804 0.69804 0.69804 setrgbcolor}def

 239.47311 28.19455 moveto

 -239.47311 28.19455 lineto

 -242.22429 28.19455 -244.4545 25.96436 -244.4545 23.21317 curveto

 -244.4545 -23.21317 lineto

 -244.4545 -25.96436 -242.22429 -28.19455 -239.47311 -28.19455 curveto

 239.47311 -28.19455 lineto

 242.22429 -28.19455 244.4545 -25.96436 244.4545 -23.21317 curveto

 244.4545 23.21317 lineto

 244.4545 25.96436 242.22429 28.19455 239.47311 28.19455 curveto

 closepath

 -244.4545 -28.19455 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -240.94797 -3.0964 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
0 TeXcolorgray 0 0 0 TeXcolorrgb 2754 -19 a Ff(E)c Fg(X)g(E)g(M)g(P)g
(L)g(E)g(S)30 b(P)8 b(O)g(U)g(R)32 b(M)8 b(E)g(S)34 b(E)8
b(N)g(V)g(I)g(R)f(O)h(N)g(N)f(E)h(M)f(E)g(N)h(T)d(S)3635
151 y Fe(16)20 b(ao\373t)e(2019)p 0 TeXcolorgray 1919
46 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1134 461 a Fd(L)-10 b('usage)20 b(de)f(la)j(calculatrice)g(est)e
(autoris\351.)364 582 y(L)q(a)h(qualit\351)g(de)f(la)h(r\351daction,)g
(la)g(clar)q(t\351)g(et)g(la)g(pr\351cision)f(des)g(r)n(aisonnements)f
(ser)o(ont)428 702 y(prises)h(en)g(compte)h(dans)f(l'appr\351ciation)i
(de)e(la)h(copie.)g(Le)f(bar\350me)g(est)g(indicatif)n(.)-118
807 y
SDict begin H.S end
 -118 807 a -118 807 a
SDict begin 17.39995 H.A end
 -118 807 a -118 807 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.1) cvn /DEST pdfmark
end
 -118
807 a 1 0.2 0.3 0.1 TeXcolorcmyk -218 1048 a

 -218 1048
a -218 1048 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -218 1048 a Fc(I)-218 1048 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -3.78604 7.88034 moveto

 10.60582 7.88034 lineto

 11.70628 7.88034 12.47154 6.99686 12.3151 5.90703 curveto

 10.04698 -9.89214 lineto

 9.89053 -10.98196 8.87163 -11.86545 7.77115 -11.86545 curveto

 -6.62071 -11.86545 lineto

 -7.72118 -11.86545 -8.48643 -10.98196 -8.32999 -9.89214 curveto

 -6.06187 5.90703 lineto

 -5.90543 6.99686 -4.88652 7.88034 -3.78604 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -5.7786 9.8729 moveto

 8.61327 9.8729 lineto

 9.71373 9.8729 10.47899 8.98941 10.32254 7.89958 curveto

 8.05443 -7.89958 lineto

 7.89798 -8.98941 6.87907 -9.8729 5.7786 -9.8729 curveto

 -8.61327 -9.8729 lineto

 -9.71373 -9.8729 -10.47899 -8.98941 -10.32254 -7.89958 curveto

 -8.05443 7.89958 lineto

 -7.89798 8.98941 -6.87907 9.8729 -5.7786 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save

1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 setgray
 -218 1048 a Fc(I)-218 1048
y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 -34 1098 a Fc(Exercices)29
b(num\351rot\351s)p 0 TeXcolorgray -118 1253 4016 4 v
0 TeXcolorgray 0 TeXcolorgray -118 1367 a Fb
(\\begin{Exercice}[\(points\)]\045)-118 1511 y(\\begin{enumerate})-118
1656 y(\\item)59 b(Blabla)-118 1800 y(\\item)g(Blabla)-118
1945 y(\\item)g(Blabla)-118 2089 y(\\end{enumerate})-118
2234 y(\\end{Exercice})p -118 2356 V -118 2474 a Fh(donne)20
b(:)-118 2500 y
SDict begin H.S end
 -118 2500 a -118 2500 a
SDict begin 17.39995 H.A end
 -118 2500 a -118
2500 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 -118 2500 a 143 x Fa(Ex)o(er)n(cice)k(1)f(:)3109
b Fi(\(points\))-118 2730 y
SDict begin H.S end
 -118 2730 a -118 2730 a
SDict begin 17.39995 H.A end
 -118
2730 a -118 2730 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -118 2730 a 0 TeXcolorgray 0 2896
a Fi(1.)p 0 TeXcolorgray 49 w Fh(B)o(labla)-118 2938
y
SDict begin H.S end
 -118 2938 a -118 2938 a
SDict begin 17.39995 H.A end
 -118 2938 a -118 2938 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -118
2938 a 0 TeXcolorgray 0 3123 a Fi(2.)p 0 TeXcolorgray
49 w Fh(B)o(labla)-118 3165 y
SDict begin H.S end
 -118 3165 a -118 3165 a
SDict begin 17.39995 H.A end

-118 3165 a -118 3165 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -118 3165 a 0 TeXcolorgray 0
3351 a Fi(3.)p 0 TeXcolorgray 49 w Fh(B)o(labla)p 0 TeXcolorgray
-118 5892 4016 2 v -118 6013 a(.)12 b(.)g(.)1832 b(1/)p
0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fh(1)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.1) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1518 w Fh(Ann\351e)20 b(.)12
b(.)g(.)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
