%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: incompatibilites_LuaLaTeX_LaTeX.dvi
%%CreationDate: Wed Oct 11 20:45:51 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold Fourier-Math-Letters Utopia-Regular newtxtt
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o incompatibilites_LuaLaTeX_LaTeX.ps
%+ incompatibilites_LuaLaTeX_LaTeX.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.11:2245
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: txttDec.enc 0 0
% @@psencodingfile@{
%   date      = "24feb10",
%   filename  = "ec.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the EC (aka Cork aka T1) encoding vector 
%                for 8-bit fonts to be used with TeX."
% @}
% 
% The original paper can be found on
%    https://www.tug.org/TUGboat/Articles/tb11-4/tb30ferguson.pdf
%
% Names of the glyphs try to comply with:
%    Adobe Glyph List For New Fonts, ver. 1.6, 30 Januaury 2006
%    http://partners.adobe.com/public/developer/en/opentype/aglfn13.txt
% but some exceptions are listed below.
%
% The following characters are not present in Unicode:
% - /perthousandzero = used to compose /perthousand, /pertenthousand, ... out of /percent + this character
% -  Germandbls      = now there is a related character in Unicode,
%                      U+1E9E - LATIN CAPITAL LETTER SHARP S
%                      but probably /S_S ligature name should be used instead
%
% The following two characters have different Unicode mappings than on the AGL:
% - /tcedilla     = U+0163 - LATIN SMALL LETTER T WITH CEDILLA
%                   according to AGL it should be /tcommaaccent
% - /Tcedilla     = U+0162 - LATIN CAPITAL LETTER T WITH CEDILLA
%                   according to AGL it should be /Tcommaaccent
% But having /scedilla and /tcommaaccent mixed is even more ugly.
%
% The following characters are not present on the AGL:
% - /dotlessj     = U+0237 - LATIN SMALL LETTER DOTLESS J
% - /cwm          = U+200B - ZERO WIDTH SPACE
% - /visiblespace = U+2423 - OPEN BOX
% and should probably better be labeled with uniXXXX notation
% (though hardly any font has those glyphs anyway).
%
% The following ligatures are deprecated by recent AGL:
% - /ff, /fi, /fl, /ffi, /ffl = /f_i and similar should have been used instead
%
% Hyphen character:
% There are two character named "hyphen". The original article explains
% the background of this decision (if one wanted to use a different
% hyphenation character and still be able to use the dash). So the first
% character should serve as "hyphen char" and the other one as "dash" in
% compound words.  The character 0x2D is supposed to be the hyphen char,
% but since there used to be two characters of the same name in this
% file for some time, the tools like afmtotfm have been confused and
% remapped the hyphen char to 0x7F automatically.  After the second
% character's name was changed, hyphenation characters in existing
% tfm fonts (generated with the old ec.enc) have disappeared, so the
% second character has been renamed back to "hyphen". Anyone generating
% tfm fonts is strongly encouraged to make a copy of this file, rename
% it and change glyph names as required for their font.
%
% Other remarks:
% - /Eth = U+00D0 - LATIN CAPITAL LETTER ETH
%          must also be used as /Dcroat
%          U+0110 - LATIN CAPITAL LETTER D WITH STROKE
%
% Misleading names and shapes of letters (that lead to different names in past)
% - /lcaron = U+013E - LATIN SMALL LETTER L WITH CARON
%             /lquoteright
% - /Lcaron = U+013D - LATIN CAPITAL LETTER L WITH CARON
%             /Lquoteright
% - /dcaron = U+010F - LATIN SMALL LETTER D WITH CARON
%             /dquoteright
% - /tcaron = U+0165 - LATIN SMALL LETTER T WITH CARON
%             /tquoteright
% - /dcroat = U+0111 - LATIN SMALL LETTER D WITH STROKE
%             /dbar, /dmacron
%
% - /cwm        - /bom, /zerowidthnobreakspace
% - /underscore - /underline
% - /hyphen.alt - /sfthyphen, /hyphen, /dash
%
%
% Turkish & Romanian
% --------------------
% EC encoding has been defined to include /tcedilla and /scedilla.
% For Turkish one needs /scedilla, while for Romanian one would need
% "t with comma below" (/tcommaaccent) and "s with comma below" (/scommaaccent).
% "t with cedilla" in not used in any language except in inferior
% Romanian typography that can use cedillas instead of commas below.
% AGL has a strange mapping as well.
%
% Without adding an additional character, it is impossible to support both
% languages at the same time, so EC is not really best choice for Romanians,
% even though it can be "misused" if one replaces both /scedilla and /tcedilla
% with /scommaaccent and /tcommaaccent.
%
% Characters that have been renamed in July 2008:
%    0x18        /zeroinferior -> /perthousandzero
%    0x20 U+2423 /visualspace  -> /visiblespace (if font doesn't have it, use /space)
%    0x8D U+014A /Ng           -> /Eng
%    0x9E U+0111 /dbar         -> /dcroat
%    0xAD U+014B /ng           -> /eng
%    0xB4 U+0165 /tquoteright  -> /tcaron
%
% Although these ligatures and kerns are somewhat questionable to have
% in an encoding file, they've been here forever, and they are
% traditional in the TeX world, so we preserve them.
% 
% LIGKERN space l =: lslash ; space L =: Lslash ;
% LIGKERN question quoteleft =: questiondown ; exclam quoteleft =: exclamdown ;
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
%
%   We blow away kerns to and from spaces (TeX doesn't have a
%   space) and also remove any kerns from the numbers (although
%   the only kern pair that mentions a number in Times-Roman.afm
%   is one one.)
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
%
/txttECEncodingD [    % now 256 chars follow
/grave           % 0x00 U+0060
/acute           % 0x01 U+00B4
/circumflex      % 0x02 U+02C6
/tilde           % 0x03 U+02DC
/dieresis        % 0x04 U+00A8
/hungarumlaut    % 0x05 U+02DD
/ring            % 0x06 U+02DA
/caron           % 0x07 U+02C7
/breve           % 0x08 U+02D8
/macron          % 0x09 U+00AF
/dotaccent       % 0x0A U+02D9
/cedilla         % 0x0B U+00B8
/ogonek          % 0x0C U+02DB
/quotesinglbase  % 0x0D U+201A
/guilsinglleft   % 0x0E U+2039
/guilsinglright  % 0x0F U+203A
/quotedblleft    % 0x10 U+201C
/quotedblright   % 0x11 U+201D
/quotedblbase    % 0x12 U+201E
/guillemotleft   % 0x13 U+00AB
/guillemotright  % 0x14 U+00BB
/endash          % 0x15 U+2013
/emdash          % 0x16 U+2014
/cwm             % 0x17 U+200B
/perthousandzero % 0x18 ______
/dotlessi        % 0x19 U+0131
/dotlessj        % 0x1A U+0237
/ff              % 0x1B U+FB00
/fi              % 0x1C U+FB01
/fl              % 0x1D U+FB02
/ffi             % 0x1E U+FB03
/ffl             % 0x1F U+FB04
/visiblespace    % 0x20 U+2423
/exclam          % 0x21
/quotedbl        % 0x22
/numbersign      % 0x23
/dollar          % 0x24
/percent         % 0x25
/ampersand       % 0x26
/quoteright      % 0x27 U+2019
/parenleft       % 0x28
/parenright      % 0x29
/asterisk        % 0x2A
/plus            % 0x2B
/comma           % 0x2C
/hyphen          % 0x2D
/period          % 0x2E
/slash           % 0x2F
/zero.alt4            % 0x30
/one             % 0x31
/two             % 0x32
/three           % 0x33
/four            % 0x34
/five            % 0x35
/six             % 0x36
/seven           % 0x37
/eight           % 0x38
/nine            % 0x39
/colon           % 0x3A
/semicolon       % 0x3B
/less            % 0x3C
/equal           % 0x3D
/greater         % 0x3E
/question        % 0x3F
/at              % 0x40
/A               % 0x41
/B               % 0x42
/C               % 0x43
/D               % 0x44
/E               % 0x45
/F               % 0x46
/G               % 0x47
/H               % 0x48
/I               % 0x49
/J               % 0x4A
/K               % 0x4B
/L               % 0x4C
/M               % 0x4D
/N               % 0x4E
/O               % 0x4F
/P               % 0x50
/Q               % 0x51
/R               % 0x52
/S               % 0x53
/T               % 0x54
/U               % 0x55
/V               % 0x56
/W               % 0x57
/X               % 0x58
/Y               % 0x59
/Z               % 0x5A
/bracketleft     % 0x5B
/backslash       % 0x5C
/bracketright    % 0x5D
/asciicircum     % 0x5E
/underscore      % 0x5F
/quoteleft       % 0x60 U+2018
/a               % 0x61
/b               % 0x62
/c               % 0x63
/d               % 0x64
/e               % 0x65
/f               % 0x66
/g               % 0x67
/h               % 0x68
/i               % 0x69
/j               % 0x6A
/k               % 0x6B
/l               % 0x6C
/m               % 0x6D
/n               % 0x6E
/o               % 0x6F
/p               % 0x70
/q               % 0x71
/r               % 0x72
/s               % 0x73
/t               % 0x74
/u               % 0x75
/v               % 0x76
/w               % 0x77
/x               % 0x78
/y               % 0x79
/z               % 0x7A
/braceleft       % 0x7B
/bar             % 0x7C
/braceright      % 0x7D
/asciitilde      % 0x7E
/hyphen          % 0x7F U+002D (explicit "hyphen char")
/Abreve          % 0x80 U+0102
/Aogonek         % 0x81 U+0104
/Cacute          % 0x82 U+0106
/Ccaron          % 0x83 U+010C
/Dcaron          % 0x84 U+010E
/Ecaron          % 0x85 U+011A
/Eogonek         % 0x86 U+0118
/Gbreve          % 0x87 U+011E
/Lacute          % 0x88 U+0139
/Lcaron          % 0x89 U+013D
/Lslash          % 0x8A U+0141
/Nacute          % 0x8B U+0143
/Ncaron          % 0x8C U+0147
/Ng             % 0x8D U+014A
/Ohungarumlaut   % 0x8E U+0150
/Racute          % 0x8F U+0154
/Rcaron          % 0x90 U+0158
/Sacute          % 0x91 U+015A
/Scaron          % 0x92 U+0160
/Scedilla        % 0x93 U+015E
/Tcaron          % 0x94 U+0164
/Tcedilla        % 0x95 U+0162
/Uhungarumlaut   % 0x96 U+0170
/Uring           % 0x97 U+016E
/Ydieresis       % 0x98 U+0178
/Zacute          % 0x99 U+0179
/Zcaron          % 0x9A U+017D
/Zdotaccent      % 0x9B U+017B
/IJ              % 0x9C U+0132
/Idotaccent      % 0x9D U+0130
/dbar          % 0x9E U+0111
/section         % 0x9F U+00A7
/abreve          % 0xA0 U+0103
/aogonek         % 0xA1 U+0105
/cacute          % 0xA2 U+0107
/ccaron          % 0xA3 U+010D
/dcaron          % 0xA4 U+010F
/ecaron          % 0xA5 U+011B
/eogonek         % 0xA6 U+0119
/gbreve          % 0xA7 U+011F
/lacute          % 0xA8 U+013A
/lcaron          % 0xA9 U+013E
/lslash          % 0xAA U+0142
/nacute          % 0xAB U+0144
/ncaron          % 0xAC U+0148
/ng             % 0xAD U+014B
/ohungarumlaut   % 0xAE U+0151
/racute          % 0xAF U+0155
/rcaron          % 0xB0 U+0159
/sacute          % 0xB1 U+015B
/scaron          % 0xB2 U+0161
/scedilla        % 0xB3 U+015F
/tcaron          % 0xB4 U+0165
/tcedilla        % 0xB5 U+0163
/uhungarumlaut   % 0xB6 U+0171
/uring           % 0xB7 U+016F
/ydieresis       % 0xB8 U+00FF
/zacute          % 0xB9 U+017A
/zcaron          % 0xBA U+017E
/zdotaccent      % 0xBB U+017C
/ij              % 0xBC U+0133
/exclamdown      % 0xBD U+00A1
/questiondown    % 0xBE U+00BF
/sterling        % 0xBF U+00A3
/Agrave          % 0xC0
/Aacute          % 0xC1
/Acircumflex     % 0xC2
/Atilde          % 0xC3
/Adieresis       % 0xC4
/Aring           % 0xC5
/AE              % 0xC6
/Ccedilla        % 0xC7
/Egrave          % 0xC8
/Eacute          % 0xC9
/Ecircumflex     % 0xCA
/Edieresis       % 0xCB
/Igrave          % 0xCC
/Iacute          % 0xCD
/Icircumflex     % 0xCE
/Idieresis       % 0xCF
/Eth             % 0xD0
/Ntilde          % 0xD1
/Ograve          % 0xD2
/Oacute          % 0xD3
/Ocircumflex     % 0xD4
/Otilde          % 0xD5
/Odieresis       % 0xD6
/OE              % 0xD7 U+0152
/Oslash          % 0xD8
/Ugrave          % 0xD9
/Uacute          % 0xDA
/Ucircumflex     % 0xDB
/Udieresis       % 0xDC
/Yacute          % 0xDD
/Thorn           % 0xDE
/SS      % 0xDF (U+1E9E, /S_S)
/agrave          % 0xE0
/aacute          % 0xE1
/acircumflex     % 0xE2
/atilde          % 0xE3
/adieresis       % 0xE4
/aring           % 0xE5
/ae              % 0xE6
/ccedilla        % 0xE7
/egrave          % 0xE8
/eacute          % 0xE9
/ecircumflex     % 0xEA
/edieresis       % 0xEB
/igrave          % 0xEC
/iacute          % 0xED
/icircumflex     % 0xEE
/idieresis       % 0xEF
/eth             % 0xF0
/ntilde          % 0xF1
/ograve          % 0xF2
/oacute          % 0xF3
/ocircumflex     % 0xF4
/otilde          % 0xF5
/odieresis       % 0xF6
/oe              % 0xF7 U+0153
/oslash          % 0xF8
/ugrave          % 0xF9
/uacute          % 0xFA
/ucircumflex     % 0xFB
/udieresis       % 0xFC
/yacute          % 0xFD
/thorn           % 0xFE
/germandbls      % 0xFF U+00DF
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: newtxtt
%!PS-AdobeFont-1.0: newtxtt 3.0
%%Title: newtxtt
%Version: 3.0
%%CreationDate: Tue Apr 11 16:51:05 2017
%%Creator: Michael Sharpe
%Copyright: Version 3.0, GPL
% Generated by FontForge 20161003 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /newtxtt def
/FontBBox {-5 -183 1501 822 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (3.0) readonly def
/Notice (Version 3.0, GPL) readonly def
/FullName (newtxtt) readonly def
/FamilyName (newtxtt) readonly def
/Weight (Medium) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6FE08177B3ABB32A97CE54E56C185FD0B8E4979CA5A777D
91FD14642932179B0A9E1AE9B4C1901163C5E649D244FF89DC0F7EB997194519
F90289FF256B54DFB01E69B8B937726BA5371B8021BDC7FCB94D82E3476667DA
825C5568D29069FEBB4B265D15D8616DFFBFA67393814A45D533423C8CE12E38
FF78A595191DA881E8BF124EBDCC5243423B31CD6AF92E6E1365B09010B77A67
C0FB59CE2C7008CCC7E040D79FD796B7C39FC72AC27A90EF121E4E524AC2645C
C1E6094EE7ECEE8D04732D125395F93B73E9D98FCBF6064E450AC2D6FEEF3976
6561551DD21416985093C691C132FB53C3EAEA6B7304B3AE084774373A7678C4
AE9E4B99C0B19C937868BD0E2DC992F4CC3A8AC8026EB5A06517E24B53337EE9
AF7EA3FB64EEFFA58915C6E58A779F32260ECCBA7A345704910FC8637F16A634
219446181353A4DF6DB359D7B7F2BAC2CB6C8253A851FEA24A20AA30FA466412
B8B049ADDA18333387F0945CD9A6EE78068329326300EC78BF4E29F219578736
EAB73F6B511BED975701FD44981108C5E85464C91B6D4DAE0C1376E8FC134377
742729D86AF409B76BE0F4855FC0E897ABD12898B614FF3DEA97739BD493DE1F
9FA9961C27FF2C922929A0ED8FDAC6F3372446BE617201FE8FDAF75118739CC1
50289DF23D0E9A1E786BFD52A3AEFBD5C366E176F0334F029DF3AC969371F495
5800D2DBDB3969DD852900FCDAA93B52D9765F66787DCE1345A9DE565CC407DB
5D69D65467BF444668E48BEE5D47F8D5EACC2D70F17540AC44744CAE6893EE7A
0CE390DD9284FC51A57289EB9D9C92764B441262A8CDE7A466C20D27F057A5E5
1FF586E0A6D97BE520C96C0E177A03B33D86F9BFB04E3B945DEA2CCCAFC1C1E4
1F7BB67F3EE4357A421575276F34EB66FB67D7080C0685C1608B68A64B42C137
3ACFF3D04F79047ECE96C95A7600D1B92E3DEEFDE181B90C51D70555C4A588DF
3F3BCE7AC82AA058752B3FE0BF954413C0528917E8327FB8B6B10274907C8E9A
28945C74E7BDD95906C31E33AC2E1F9EA80951E4920AA68A9A200FB051430DD4
8A16B1763750E44E585F4C8F192A26EBA06EF157958C1BC00554409AD56FE718
7238955795B8B5F0761CF5F602D773170B7EF672A97CC8C165D47371FC14E56A
AAB01F70AD75964357C4E828D61D7937837DF89B62C6E21AB81DFA80285A7D09
D9A6DEB8F502FFB286BFA3019BD75E81CCE8B29D9F34F5BF921A7F042B8F51E4
F01551966A7BC17F79FC4721C6799A64BB3F2D290EEED6B668E8516E59B2A739
244F7A69BD5CFB4178614E6B47EE5C6C46E6DF517C21CCBAD3E56801DB21DF90
B45A73F62F584F945C60523BC0392B050B9540BDA7E41941A3FCB029723823EC
950F683A6BFB55D22DFB161E1D6B6DB49DBBD139D828045042809BA99DD7B637
802D663A875C4F2C662A9898569E109DAB60B870AD2E7DAC2D9B656CEFC459AE
E958BF6F00FAAA0421EBA206AF5CA3B9DFCB2AEC3B072A52D0AD3D4BCED50924
B9FD409ACD5E4AF324E6C818F612F8B4655058AF93C2AE5D9C42718DC369D9C0
F1A3DC5248567195DA50C4BDB1AB3E9F80DF0DFDFCD73F99971EE31684D72108
3208D4C52A54ACA688D325B8FB6FD35D8B2A9420802B29FA5EBB1D6AC298E164
F6C182B2FE7F5CB3DC135B4F682108B35157F11930C8756A84FD681880B3CE79
9AEC42937BDE200CD5F3148055B1CA561E2BA388DA3495AB8AF79CA8A0282200
D23FB0EC43EE107184712352C4C9DFB624A248F2B3FB6C70615176F41A8DB91E
63200C71E9EFA7845A3A760A507B3D3ABC525B35930C22F4F33AF3E02DFAAFF1
6DBFCC1F93AFBEA0E6F2501E099FC29029DE39F393E7D50D28C63304BA3758C7
698208C188FD73469C4B2FB410F270E32762530F0D8F2E250E98F4380236E11A
F484E2FD67C1EFF5F8CFC1B222707A748CC97785174C6E81A614B95868CFED61
4D0D2CE6FF056175D0063735367CB9BF382CB9A084AEAB0975329109C6A52C4D
512B80752200BAA2267E02961B19DDD3634F58057E38B21F897429B05E2652CB
DBFEED7D4FA7FBA53D05B1E203A0A2127751EAF55B5A21FB57B445CC3B9E9DB8
993E4F73FF91CFE52226680D97565FE4D1E216A9C768A454647DB379C20B6246
849EDF70EF99B1C95A296106DE15CF1B4D7745CEDFB38717C0D90AB406A2F62C
D9027E5A7B4D1490215C7718C732AFF5B65BDC6D7C3D94FE9A898775C18EAF2B
AA04EFE551A7F62E7BDD672A2A2CCBD964C01A1425D5A6527C330A70EAEDC1EB
3960232472BCEDDB8D81B65C30D1C155923A2908129D592215A5858B74F9FC08
D98CAFC92EA0B6BBE53ADC954B9B3E4DF7B389AE0DC3AC28D2EE5F1F4A8C486D
974A71CD61854AA51DFECA58D6E39A107ECE8A3EBE7E645FC6C10E26C8D4E42B
A553BA06F3DE463AE224B0E460547F0590DD9E18801779FBC3307C0BB8A57845
18676928BB6C0A086CE3AD82C449DCE5528AEC39CEE38C3CAC9B215452B09CDC
23E85453C97F946B65ABE0EB418A3C9F3669E998462D6A4AF1D7EDAE0B9DFEB3
70647C6D6703ACC8D0B864249E923BB555C10DA35E04F2FDFEFB1EA7F4D49886
B86F4413114BB2B7C2160D6C7042DDFF33A954DD01C8E21B21F8F364F7ABBD58
5F3561FC58B2580B83DC0102166269AB6A4DF12ACA152F1EE78072533F8900CC
3A1869BE48305A0AA33474DEAC4ADB7FF6B751D3816531ECDD6CF5B9D2D6B981
6143E0AB78003E0E23FA2C709320CFA25FAB61183B3DAFA5ACC92112914490BA
8975FF42EA4E75D1D280953568701BCA8F0B3ADBDEF0AE80ABA2F199A20475ED
4A41BADF2F9A5110B4D405B111C5B308FF3EF25200C631C9C926F1C1FC322171
DCD4A8B5F9AF29CB4A6B517B9E3957C61A5970EA076115E876426E9A24311B43
7A784C2B9306DA04FEA15D732B12D3AE6FDB396AF2B4924204FE0ABB2DD37E8C
BE810608EF2A2924DAFB8088415B787C25794300F7B0C72DBD87DD64F2F1D5A3
25202493FED90E9D712896B2DCAF6F52D0D6D23C69F523EE643DB598555BF5E0
F93C860336183175F081053377364DEB73A440F3987FBFC0689BE4C0407E9819
FE68FC2C4E13CB4A80E94B9F75FA7DF1AAD0F96B2F1290E8451A624B3723329D
A39C7D667A4C093048E3F1C940CFD1240FD6274540476E3BBBA96B3FF82F13A2
46D7A1731154066661038CF2C93BEF8D83E143656B00CD218972136B67E2F9CB
BF7CBBE4CCACDC779F68F2A2183DFE2A94DF862D912BF141D1563EB2F8B78B7B
0F6AF3521B25377EF53DB11870A62EE19A0DCA46B306C10A12E50F1387DB3780
B6CBA25BCE7E56ECD25834F8097F011F9D9D9ADF381E4052EC4AF2BE3A3AC1AC
EDE588ACB44936D17FF667BD027F97A61B697507FE0753D6B8B354D4FC78F584
8A7CCE6FF45230A8F247DC7BB521B130941F797566A300D89704FE32E4E03247
DA0241295101FB0DC503EBE0E5586282EC816DB33ACC4CAE8D3D5EB8B27A9354
A27CE3CD041E1F16F55F6BB1C2C610F6CCCE5E03FC9E4C4E79830C6B622BAC07
0F4030001CA38B701EF51871B8F06F6C5914E90651FC5D7A19F2D1672FC17787
C4AFD01A0A1F3EFDE5DCCE0F93D8DFB93461A6AB7F4686E10877AC676F890BCF
E6E397D0739B03EE766A8EBDB98526F6CDC82C316DD100347B45770125B5D869
D9021C8B596C2A6347F62349DE945F94BF24596DD3CCD0117D4114EC2E7D3983
69B8077E7992361D4DAB0F4FD5F0906BBD0AB2DB9D25F0BAE3B145321D98CCDF
AD532F3572488EA95C2ADBC0199EA797C7027079ED57BDA44EDCF0743882C63F
F68D295F024FFAC4494600E7A2EA682FD61493FDA2115640271517113F687ADD
5A5D4B063A41117928DB83A61ABB6DEFFD294FCA71AD056EF2A9AC6BEAF5E2E5
B55863CD8CC5FBA6466B43128FA1381DA74B6F485C5A377A5E02EB11B6472DE2
E191C91A1BA0B2515CDC8703FD684A80C7DBF9C0078ACA755F212147B37ED1FC
0D828AE6E95BD3E27409C7029FDD609EAD2728D71DBB120FD45AA814B0811DD9
5D093AC1226EAA9B25026EB53CA4FCAA821BACB4969F6CB7E9CE86C54B3888A8
54249784723B6EE2C7E8F01EF370D2E5AA74C5AA2D717634D38A0BA28D3CE8A7
0FDCBF278ED7E1643208DC876A14F1B8F1585F2DA9A246109AA6D39A2B62BF63
6E581EAA32054D49C68D0D1ADE8485E3E214A8680C5837B5E8D6184BB7B1E203
A0A2127751E6BA5E609F0DDF168A5ECD5E057534CD078E1BAF6CA2B9A441DA12
2921A7899FDD29221C3E654A5147E70E6AD25081BB79F602B2FE729270F2CEB9
6D7E1773DD1AF5F0CB12A885258111779F3C5917E5FDB9A55FF38EE51356B2B3
C5476FB0F676DF1CDD61DFA3C4E6BEA982B8B6A88CFEA2F53F7E340D5910A6FE
DD6E77310203225B0DECA83528529553BA75ACF5B38E0163E9D42737EA6DE4F9
143D081598D22ADCB6C1CEB6E4BB0F2046061B4E09AACBDE18F2D2FFC9C8B86C
803F605E2EC054B670ABAB63A28A36771D30ADDF7389D860A2B68B8FA5D19DB9
5BD60F8EA4F783BAAA075F9835A6C3F19DF09AE576A250E9873C3EBA24D08660
FD7E5C18A933BDF060CCE9B828B56BDFFF311E8FFE3EEAC9F8D195D1C7861992
DC36A30ADCE7B2D82338F2F9435F61BD9E5553ABC72C175D7984ACBDA5D84F7C
72914BBE9E8922B9CF38CE71D9D041DC177DC28D86D17324ECD176D972889009
52B5AC28ED1A66CFBBA74CB095D04D3B9DE75D3F611D602F5B7798230866EAD1
0C6F8D7CE3200EF169617A93290FC28159E27DA56C16E6368EEC009E11AD6713
B1D62B2EB864B6BC3A34F92C36DC5C8BC9AE2150462AB2BC87FE0B4849719D91
A17E2A6930B4C18A9A7997E2E163183FD456F77F987272C6F535ECBFCB60AA56
674A956124F336B3D53EE8B6DF22295D02E88BCA0535E82144E3F726567D6544
8317201B4243A1CA597FC7093177DFC4732D90088A1F22515F2041DF078620CA
5B6171F65829BE409393EBF420976CFC21F02925630ECA5AAA1BBEED50144A0F
D2506945CE162B19BC3A86987F1DE93CE93A112C95EAE940057418C7847A2C95
BFD86B68BAB5C418380265043F2C72A09D7F909F0900B6E4F4DAED11EAF07AAB
49611D76263FBBDC1A156E9D8320EDB607D597E8079A1E1358C0F7BB10CEDC4B
2D9330B88E9BF63BC022FD0E88480EF98E6E36F0EF3F6D2658604E9C494D7EC1
536D6EA2CCEF0DEA0CBFCD0EE7C4569AAC250B0763E9D0EE20738D54BDF426E7
63AE7AA418F512FCBEFDE5706DF64D10AF446C11EACFA78516202698CC449EEB
5383F7FD3FC0B42B80B942D2AF80D54EF48996396C9F3266A1B71F1B86089FB9
262B8D7FCEDA5D375DC2BB9E88D2FA5B509BA494A3DBC96343B669F382C48223
621826AD9FA49705A799BA31602DA28BD717F52681798DE9A146C64A12A6D216
A2BB5BC41372FFCC33DEFCF23AA2A50E9632311BC5BD1019E5ABB5D98886E976
1D8D169901160249DBCDBFDEE9DA409B33771D0C1D874BC1F13BDD0275DD6810
9FA86376D768864C3BD97468613283ABB54468C8BD2DECA9ECDED4D80E3288BE
62993475793D40C3921A6B6F0CF4E6DF0C9E3FF10815F99894F3FA2BE93054F5
4215FCABADF38647D31A2AB87DCCF2FF623F598176A9FF3079CC7722BEC76484
B2100F6B1EBDE12D13970FF38CF126A3A2197F8D641FBE1D0A2A72CEB4BC7962
4B178AA893B3C3CCE4940FD0E19D32E0B11EF3E266B4DF73B104289CB3C5AEA5
8FA4B93E5259852134E904C51324942D2909EE796A1D6D08A795E1E12523757E
5B73CAC0EFCE37D664273FF965598080581C6D027C1C7DA621C9316D1474FD3D
2114CB397075FF5CA9C14A8F4A1768B1168D2B6239362B3C60CA264388D37582
E5CB71F132C23D1FABD963A13E04D6CF18ECD565C4E1A435B390ABC3B6BECE22
5EE4D59F3EAB3278F9CF480ED01E43C1EE6A57C9833EA9C21AA3D763C49670F4
D74E3B6D5C67FF4046C3DB14BDF2D97791F64BC758CE967A26FC6A2BCB54C147
951A822302DF7DDB1B3AB405BCD7E2F9D44D4BD7859FD5841858E2F77CE73CD7
4B604D276027E1E00FBC243962B3910D24667F431C5B9B8CCF543FF384B325D6
01BA14A3FF3224A8D731D45C356D1448682915D8DAE2CE29D1BE62DEB54714E3
E97D6CE7EF69A45B6F76305CF01FDABD924E37A3DFE743561684E8CAC99C6808
5018346BB0BFF50BFCA3114A47855327D6B9AE981C0EADDA80F3EC72A2E4FB76
1641F8A7DE88847482B9C2FB6F0E4B211FDC1510282864B12040ACCE71412EFC
5D536830CECF8D525EEAFE543BE52B4751F2610AA23267EACAFA981842C10932
46476845BE7AAFCFBF072A8A44DD399882197BE6C336C063B225F4C0280A68DF
E1C257B1872A50D5C6CEAB8E8E9430B37E0360681DD5E9867B38C07B85FE0565
27EA1DE7A29B3ED8240C7D5CDE2AAA713D14C414C309DEEB0582ABFEA5BD6355
3D8BD00415EE5A2F41F1AC0C3294D15BB2789AA3F44BC9E165B97D24C564FD9B
A37FA4716A24BCBB15E027C216591AB00D6B84F51DDB3FAC305E7253765CE334
3161A2D0A6305F8D1006672C787C863F500FD430B874026703EBA917DA98E74D
9F2FDCB254877B0C3A074C8DAE6C4BF33E5C2B2C34C0F95D067527DEFE4309E9
31986C8788A7E4790CE314305AAA6D5678FC73B5BE983789ED456808874F8C56
B3AEA695F72CF91D5EA0994B6687D10A3D127861EAC1CF30F2FA170F2E2B84E4
74220121B677B217AB58B263F0500F31C956BD14FE008A641424942821B15AD6
073BA767DE38B2282134C0F58213FAFA422024BC710A278D3010A8424437D022
6E23DABB918F792393D010E95531B2C8FBDB8BC221D03C331681CDFCEE8699B0
5CF82EEE83E258C68B1816B38A3067B8827CE566DE9196DAF844171322ED5FC8
4E45AE05061884E137057358CB3105E7EC46691BFAFBD03047671017C3D46C05
D46CD5B0A3CFC9C868FEAAA3EC6717F9815713CA1F5519E7CFB4C79476B8E604
01FF6C612253D984E64BB4288DE48B8DBEF253DB3E8CABA6F23E392DF0BD1E7E
92E97C252D9C8F2D8EF3BC45A0DA85ADFD68A581D14DA873D15FEBD521680060
3090E84EBF1219FF548E8617B84AC9AA0CE48CAA18B2377AED754A07DCDE05B1
7C77E6E7619BC776F6447D32AA2D2DF7934A46A5B7F7FC82D1B99BD026052BD4
A0A2E3BE0E8CC78838FE980509F23CFF589821386F21EFFC66CDF5EE6382BBB5
0E165D9572679A57955596774623CFED5F1BE4A1A1F0DD16DDC743615DD6F7BC
82194E89D9C9A1F8BF814A596E3C82EA9BF187FD1157178C8B6EE47E7B5604D0
ACCAE69EAC6D50B99E38FACFB8004E6ED6B0CD7A3045E130FC824CEEE47E20F8
D11E3C740962DCD7CF62C53414DD96D2381D9DE0C967D6FAC0FBFA2E473645C8
6A8EA8CC24129183477639E357F6AB2CE8B10A13B91EA3E6A4B1721FF7007FFF
DDFD830A9C1AD2C48554E76C73BFE49A27F027CECE07B13D9ADE53C7644BB131
08C753FC4638D286129A61B65DA052AAAFA327FE6EA792913850828CF44975A8
6EB2A1B27D9E69528FDCF0F29E719FFA3F8E6610C7B6D0F47E12ECFBB0C033C3
9782A831BEF0861EA39209C03947D0E3438A560438418F5BE6BA7E183126516B
1019E9892E0F4025F4A3C622EBA8204CFA5F27D0C77D449DB54EFF44BDB636AD
405D63CA33D5F8D7C820B5D6D911F05A9906D6862FBCF9615D4A6EE3DAE8F7A1
C5D97E6048F0B43CA6688BABBD238B52705139AA2CF787D0C8AF814EB810FAD0
611D6DB62F939F37FC1ABB8B08485EA18ED3773AAA109BD35CDE2E5EC19C44F2
DA7D8B229C0F8537D869817D9F3C9923DA284BE8E87CE0B69D1BDA5C1181E6CB
88E3479075628A6928CFB33A36A8F648E83F9438E1392D07B01E37BC0A336506
86930745CEB33178B2BAFE7C03D75BD6F78DAAC5F92A015EAB89CA2EDEA0A8D1
8906AF216771C0D7DFADF1CA842CBBB69E8FA45319953D38C4CCAF4153879872
9B8A4DE30230B65D53643D9177315E39DF88FB246099
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F6000BF098AE401F14F4BB6F5D1DAF0A3F095107D502476C
356175D567B8BE8693B835B72F954CD3441DABE19A98E24A387E512ECA045018
B639B7303812DA28297D223CC2C4B14CBC8C49FC0FCBC63957299DF52CB8DDE8
0D46AEB4C348603F4053F4F57A3AC797C2AC09ACDBCF4AACC746314C6D526359
165382C75D64B1710A88AEF979E5268D7DC5054261F00FE1085817109C44A9F7
AEF02EB8C8BF99E560FAFF09B9F02FBF83D191769EFCB5C9D08C65D2ECD98292
157E49D0438F8BAF92878B4223DD8BF6A3D467F9A6AD2AB3BF6C3781E3FDE594
8A46842851BF278F3E1B3852B74B0067A13CB1CA23A3361552CA25CB86FC23C7
2C059694C1CB645D75EBE7D1766E11AF1E5A228449402A6D623350BB16808052
FF90B4A5A0A63A8378E87CB54647FCD6200A498D420B0DEC67A8DF3F67A3BD6F
5CF6E1AFC945D2C7C06D949953678EE10A091B29E149DC998B0E424D0A19E8B4
708B1949EE5029CE272A31A235CFC12E9B6376FB11DDD097218C48E4CFCD3ED8
A1A2F037FE2C3210AFC925E515EB39631F22F0B461336E97DF8584AA8E08C178
B9CF687F5ADC394324393A2BD0CB8E61C1D096F0A14DD3A2447AD54A7FA4821C
983A2C7C0BCF12BB0F854CF1833FCC9BA70E3F3D7594E6A2974126501FB9071E
221F583077293621EB0525DA1421EB1D9BA4DD79641D7AF31066A7AF0AA769DB
7A316AED9FB75942FB8020E9575401ECA85111CFBAED8DA83806CBF28A3640E4
5FADCBEFECB89C146F507D4B848AFF200C4A956DF880533D0DCEE43FF956B92B
61104F163E2B5182EA36F01E9A968E3863DE0B39314A8BFE14BB80224CE99BF0
837A84F6FD235BCA70F42C45D26F55C44A5DD53A85DB1633A6EDA118E5516096
E31DD0467AF999FE7E9471210359986F174E411E0C7813C6E8C2E0FF0D00EFAC
34668DCDFD701E3E022AE56DCBDD71490FA8F7B9C778248B27E66F6C580A8112
FF64EE958BB8AC05E8950AE2BB2230E7A4A7569633CE58D9282A597C875D6A18
FFB739BF010C61405D749E55592F38FE955FD7C67F23EC6EFFF366CFE8404586
7F21251B1D3735B67FC61795C412FF9123B18100C171F9FC87745C2CF474677C
BF68EEB54ACAEF54474D1F9A6B4962EC51FB39DA2B40EC310F1E28EBF00F0B5B
C9EA4EA77482F8AA8DAF25D69D9FD61B9A7B9FA7B3877858BB9AA29EBC2AAB1C
8BE902258BF0C54E71E075F1690C53E8DD69A2EBAE8931A2FE79603CE71AD9F2
AC4C818EA103F1710ED78996756DD0EE58EF88C8D07EC62AC3A626A9360BFEAB
8AA3FE737B0E77F4155BD7DAEFFD70630E99E698B4CDC145358BEFA6D590227E
ED0C872F8B83FD2130FF06DE49133415302B84C57203C049100FDD013A42F990
F162701C3558C9BAD55868A34D226322724484E9B41891B30517B787EAB33BEE
2D996109702900D39BEB30751E7372807D1680B0EB278E7DDD6E1729D73B0104
8F55CC3673EC1ECB4D385C8BC4216ABCB0993FA95BF06BEC393689B44F44B32D
B53E4BC3F13213FB0E63790DC922726FD91B9E0DB18E1F769D65AA3D70A97F5E
DEB6AAEB844998A766013CD1D3CB28A1B19B8837E7043E21564D6746B7247FB7
67014B8294CF4DCE2EEA86BAF435D9D4424DE5061977A3B7E1384150DC427622
04CE8122F961E5334E53E134F450B11BECF5B5A988D2F55342603686481DBABF
D83A82BC58A55E03937C74FE8F780FE25B8630A9CCA5EBA20C9DB4A57FAADC93
F0AA8BB7F29E5729CCB74D59E8D91210F088F6B59B969D99B73DB90F46B6B40C
117985D3601FBA1D35EA33765517039417CC8405261AD60D8B3938BE62E79A4A
61DF84FCD8A8ECD16FB379691BD8B13FFA80BF431ACACED6CCF689B0108A9397
80AC7C16ED0902C3A8EEB7FE2BE7DAA2AD4D1BC0418538088080435752CFDE45
01F2D0D26ADD4E8FB04B29FCF7A5E6E97B9F0DA6ADBCF499990FCEE3EA3747DE
9A484971B3678FA8C3E92E09B1966B5763341C6161B4CB2C7B8E2F1A25D3315A
9518A230CDA5EF861D0D3F0CE117D60632C3C258D41CA8EA49D8407CA5EB80F5
8C8FC83CDE752C6162BBDF4785E834353660820FFFC2CC267C2BD4636503CAF3
D69F83CF9E7D982F07A910D60321CACAC28ACA57E35BBC594F2BBB24CD54FA29
C06DE55CD699E6BF5C476743624FAC961886FE69E0AB0DDEAAAD55546EA515A8
933176760032BAAD4DD15515CA78528472B381C54A45DB8112AB51CE334E085F
D0B9BFC86D1E5607970652DE125B05C8B9D7A9C93F0EA2444B1543113E69F474
05B3B927670693083C4F4992D05A21C42DF8F2762BB0DFACFC09A7397F1E0911
D11159E34C6DE75E038FEA8646E468C992B1241525D1261974382D32564B57BB
113B03EBBDAF7171A45B64067BE2050030452721012F7BBF3C3772A3EC51B19A
F6A20E796E7ED071B6777F3BF851BF811AAE84B9FD83FAE697F8A93912F2E773
90D8B8915E83B0274D6C003E4048B47F672F188CD96B9C5CA6F0757573E8DE73
4807627615807C3EB0D647476269A250D52A1FC71F7F2A574F47A1FCAC3511A6
60F4597E6311A88E092A54D213F251A782DA56A8780BCFF20292EAC13AE4F1EF
661692D1ABA356F58CA559C8CC930AC8B18197CFD78A6BB813865BF013559D43
34BE87C9F1EE8F3F3021151BCD27DA3CB901879BD42667139012F5C2D81ABA4B
DA9A0012516B16D6C244ACC5498D473FF16196D904BED3487D1CA08AECE22CBC
99C0EB5396DF8DDEABC961FE2354A7D38B33DD55CED3160ECB4DDAC282F4E7AB
105F0C780D15399D22FD55A01287AC96E605EE8604E044677CCF944BFDD59157
D9F644C0D8C8FBAB045C3BF765EA4A4163C89C9AA3199244E016A89396A13B7E
9A88304F35F73F687ECBB2BAC8FBED7AE098DC953DEFC226624F7E817E5CFC6B
306EEE1DAE742C051A26F3196C47997752F6ED590A086977052B1792124D00B4
AF84E9A84736A4757DEE6695730F7DE2678DD9CE727EB9DF7A21724A11B54FFB
F283C861564A44AE56F46397C5E39D4469A33F6BA2064623902CB8A6654F6003
836701717986B3D925358052E874F9B90F792B245D1968524B55C3EB7E9780CD
CD4B38BFDA2A44FAD2EF1016D21853809EEDD3D5EC77EE31A5CB5F7B296BCFBE
D345EB60D9D1366059F6BE26EBF8FC167C762789DBC1B491424B9AB7EFC29FE8
E07690C46A8D22EA475301CA923CFD870C5BBAD18B95F03104208DE3B01B61F2
BA8C7F7522EC6B6B94412E7CF8804E5575DAE435F3CE22AC766D13233E6CE581
D09261FAEC37FF325BD2B3F6413BDB8F3015E52332A3686757E74C4039647B3B
F9D8EB505AFB3BA362B2AF6C5BEC9A0A2E0ED1F87E2D13EF6B65070AE2A8E0DA
1631D4372EE9DBDB84D5AF29E62B3728418B2C29117FE0E1D2B9CAF7932F77D6
7B96A1F00B42BB37178508D9817386472C85E38107CF0665DD66EFC53A6C0F54
58A0D0A9ADE785558659A5FAF22F14376990C2B3D23DED0A8ACAC6E8E0CB7C61
8EE9C13C68C7B70266ED90CED66A698E659C39647D20056C567266EA2F4411D8
16A851B73B8D65B5F6477787E72E49E5BB06A1F3B8E7EF44C3BB7076E228B022
31CA4A189E57A0B5C14AC5A798A8B862D86BD746AB1F562B2BEFC662C55834EF
B6BF8CB47AA29961E07091E39070AE36FF5BFA45441FE11F56E227BDE7ABB9D2
A1EFCFD079ABA713152DB08FB51495274E8369AD4D58BF6A389251D696A92E5F
33B054526A8F352B01FA507B5B38750616F6E8DEBA45DD56BF0B11DA61AC6784
59EA0DFDAF09E411A8EEC5B53ADE9B3474B9E5448E51C3A7791556B1E861486F
0DC893F79E79DB8A180D49939812A378B708BD9A18C85C1D26E8B3FB05E77FEF
8129335C93408882A28A5F2C6513F750365FB5084992009A28B699A2C564F080
D8F120EEAB860C0DEF6645E292CED6B50A37028A7DB25E7026E107B0B331DBC3
224E615E1A50C0959E57AA80884DDA4F15D889F41C13A2C3F021F5731533BEFE
67703C5A59DE07343CEE434832D2909871863A318D7E3C5B730BA4E58C2F2977
1497E9F59DBE0128C6BD47FA67477D489A67FBDD7E75439D942354AB4521EAB2
7D8D3DA3C76FA67A787A5C6C9C09CBE984EEB17411052FD73CD91FD6BBF10DF5
18D2435BE59C2A1D11BE7AF2D86EE01EC417F76DDDFA3ACC05EA6F8251D45206
A75C10C3256903BF3C2DD396E6B0D92D75C3AA0766340A565A1C6B2BF2252035
54763072FF2D8C381B4426F4F43897B3E9527F70871354BA0B055900D321D8B9
866D6368A11878E11F38FF36E32F2D603D0263C6BC6330C21A1B342D8B23AE08
64EC06E1403DABB1ED5AF8C644AE410062892C27481745CA6A559BEF0AC2FB66
275288DD4BDC64C410EBA4CF51908A322179692CA8E584102F784CAC36FFACA4
631E02E9AC1FF45F6408746F0C6830AB62A6F0FAB8C97D9FA6F817B9BEB73C53
BA2307EC7A79DA577378606A6DEC9D5D66957F08A231D12FCCEB28619A3C67B3
46CA026F44D424D3C3A949BA59594BDFFEBE4B49934EB722FF4A67FFE5B2566A
60609455B7C07547E388A2C04E1AFDFC89BA0DEC078065D834C67160287FEE9D
B3105919AD2CC719EFAACA336C3C0914AB53A3062167ED02D8D7CAAD552FDBEE
F31D677979EF1B4EA43D258292F85F18CB3D35965B8A3654B08776938DCE5C60
D6A1037563EA02E1EDD759BBAE0B6A6CF275DDA9034F403808EF0A1D85407069
C894D53C87D1C2E1D40383668B87AF92C520FFA141A01DEFD54B921A0CF7D2AC
62176A77450862D04AEDFC05D3BD77DA9095D5FE2EC20FF1E3780C6400E6FA1F
110ECD864BED3A9218D70EF87FDCA9B41E729529B3B5ED20AD2FE4650B116317
04A06DE11F2D96E187D1001F890256CED910690C4BBD7DC0B8A4EBCB3A63B410
B3E1317CF275835E8856E8D8D9757F256222F85232D2596FF0A2FE20236CBB0B
F1E02785F06F68F45A87AD77420373BF14AA2F33B09ACF545F3CED2440ADBAC5
A57DE82672F7F771B6DC28E905D9A05AD99C6F5DDF43D3CA43A95501EC63C67F
A2E3BD1D690AEB1C18B1F9E6D15280785B222E5DE4CE7A8D78B79E980C21B654
B16D6EB0A297182A39860A7FDBB1F9352B1B235558B7CEF372E7C1065A913015
49F4D6B2213444585E55AFD968215357E57CD8F73F8B5A9D05350C683679B065
EDD16B94477FDF68D1EA8FFA7599AF4A8C97F121DE22254F5D22642493AAB33D
67DEA78F67F1C1BC9FC17542526F5EE3F77F485B7F1CC46E1334076AE43A1421
C94E3F0F9FA3E20126295E034F94A6A63CCC96F4E35B4FDB78466EFF0BBE9D4A
686E21504A253F442DE07FD007C2E6FB4A949842654A34BE6B0C501595FEE183
41832D4161AF4E5F3A9EDE209B02161EED1F99B84958464120A2090689AEDC80
9B19310C11E7FB967904E508540C9F6C393C2E5E034F94A6A63CCC96F4E35B4F
DB78466EFF0BBF4A370D684A7B8A2E3FE488CEC40171A06BD709136DAD9B1E24
F2CBE996551F69A14094A5AAAEEF34780DE2B01F0394BE026F3BB851D1D7CD58
F2DDB6A8693D5DA9379B61672D070A7FF5391A9BA8034EDF79DB1153D80EB494
4345A72783A186DABBFB489A5D5A12DE6673B3F225C67A74E85A68531FC9BC65
93A5DCF3709474207EB90AD07C0EFBD835CD3E59579515FF6535C21E55EF2E52
61BB73ADE94DFF16774DE18558D2822D22CB297873C16A4CA2BE0C848DCF1A99
4E99B646C6E502759B3EB477D8BAEFB53D6A9DCBDEA1F0AE2736771F45723566
2C968935C1EC833354F24886A1D8A0A59DF01463DCCC9019329D30AD5A2B83CF
7E2FE955DC724CED2A7CD9600E7E910308362888BEE48AC37657EE5790FEC725
17CAE1994A384AB9E02C217D7D18683D623822923B06DEF641888D7F0A43DF8A
49D4F8EE53F0E345D0BF7FF0F73B02B1A5707353F5088B4980240D80B4A32257
5D751038634C54961BA2C04C3DEF76311B35B56F0D9246D16F1BC4DCCB6B3085
5887E82871DE96461EDB7CC7A459653CF62FF7833B543EECA932EA9D788239D1
FD41768B7158110E3D1553F139B2B4FCA78BE834F74A616EB69CAD543DA05A76
479C0408A12B496C41DD9CD11635E8202B76888809DD55D783518AE528F9898D
AF778DA40488A92FD01C53D5AE10FE433FE1143CC1040FA5EF377C7848787708
9B3D2BAB3942D6849BC5B3D076574DE45CCD5745E0DA09F7EA5FE7C08467C617
E32F2774ED6DB52FD78827609532DEDF15400F35F789FFA040283ABD9A5FF625
B2A994E8EFD52011E7FE7D6005D9FA435C65E1713F93B5DC781388F30C16FCCC
DFC67AFF73E6877CCA8685EB1F1CB04A46AA9479A9E5F8ABD39FA8038E7A64EC
80643E170FC069C93D89F3A3AB01D7806B320B9E448AF062DEBC898038EC1807
DC6E7F6C4A7C6E93D293AA29689A5FD178C0BF2B0DBA61AA318E84F8D133E2D6
3DC2883B68C3F80A1B63AA077E58DA1B2312B1C6E171F65CA60EBB246198A57A
C0CEA9F4E295FB31B2EF8EC56DFDE887E01FFD5C24E79ECBF20A551D21A91030
9DF960C42EA2EDB32B88639153CF40226DBC6D7F94725DE14558805DA7395222
C1E9B8E5392CAD0D2332C568976B990D8CD474664E2AA530847A2759381EDED8
08A8C89EE67A7E54E2B1DD43A45B6D08E32F6A4F47484CCFC412E3EBA629AE1C
9B9E5EA05576B0AE69B775F473485E583AEA90E15FD383A1B0C0120AA6A9D71D
8309E6161D4DD32EC802120F56CC6AC77A0ED660C4B52B9760D5909BBFB0A080
E352CD171A3FCE740559EB50F8D785AA51B692CEF676BEF43C01532AD179965F
EF2830F7BA6154FBD8FA7750412A3AFE9C27ADC2929345D788A1C9ECA91DBBBC
6C5B18BF53D3C3C62CA49838376869A676906BA31808C2AD012CC32F38341408
4419670B422DF1DF7D7E79E01708723C0D958D51672608AB12779B7EDBDDAAE8
E190A529BC6C34FAC4077ABC3697B845AD46D596F3F7BD651DA8D443CB98799B
2C5CFED39BBE29C0D7C1A57B747506C61DF1ECDE090999394A2129F9C200483C
0CDAFEB14F5EE6CEF4CDA1241678D3AF4615C685BD316B526EEEE89A87E0A293
AF15EAB5086E047FCB640F5E7CC5034397ED774AC1BC6EB6A75692CF02A11E97
1DE75C53D99A3BB41C3577EC5FB5F2387910CA78FC43A717606496CAF510CFA5
F19748D41F6526EE386FAEB0A8A0DC9C25C17D656AF1E76361AA9A274E9BF1FA
C00CC5B5DACA56859CA3E2DF6C892A3D0EB35B3486AB594C1B7F05AC96A58831
AB0E7409750ABF40CABA7506F733422ECAF3D886DE2EEF76425E6DB70A390A09
F92830D00DEFCB575B2EC8E61A16942B27577D8CFEEC51A39522067EC2A369B7
73A090F636497EBE6BD5E3C4F6E51758A1E996EC92BD9272349E4C0342133E01
2707E4E4AEDF6476DFCEFD105C3D088083A5B2FE2DC704F40ED373A2314574AB
5F54BA9DF6A05D1F7441C65C7B774B38EF21F17F2F5815CDFC8A023EAB257E7F
26A054791F3B82A64FC722F17114885459EB03A043886A4283422C31E4893982
180ECCCC77586E0BFB7367DD9F70A6B14E86F94BAF5C2B18A9B68994C9008158
28860990F6BF1A1052130670A6CE6AF6111FB6F04CFFDC5659ED8D416BDFD91B
0EACD055B1F24D683C217EDAF7414C837A01C6BCF43BA455DEF0BB56B974EC72
666B11E32332F4D2AFC5C6FB8B9C8B56546F10A2A47DFF91A27912F60DD23E1C
4CA1744914795D19AE4745A2F279276A9325C9F29EE4BC9F7528E6E51A8B9336
A59FABA7039A49A5A91795A2DABF400A5FC20CE3323098851DAB7B29AA98A575
BE92CBFDB0E12202F7E8867CDF0B710439174927124CD4623CEABA1FAE669E7C
851A4F4D58D3EC22AC2E59A8A827F3AD72FA86B7C2BFD1AAA7D407940F577A37
C89FCEB57B77B034126485830137499C9C0352F216FCEC8EECFA8DAC56280F6F
3E38046B0562F825EBB802A84AA6AF349782E520354999BE93241E35DCD23222
312EEEF077C86C0FFD4459C787E49C2558A37AD38D19CDB7E2378F46EE4FAE03
298A36BFD848A4DEA28B19C9F3BCA0491185D0B5764CAB17D1955C1144B8DFB4
C6D3E09377D7FF795482F7EF558C8FBD417CE3C2C442571397A62FC4DB96C15B
184D16E7013B7DE7BE5C9C782EB39A10686137AB4F58CB530AF68758EF440946
7EFAF26F37410FF38F25E569C07457B22540896EFE87751022CF5F2124456C89
1F252AF2D83D88A01FD5D4C9A111AA39183EB324BA33B829B2F84D9C360857B6
5F4F547A74FF302C10135B7A4F11DF91B9474A817B63F1FAB7E693390FCB59B8
391907408FB8C0818253E68DF4F637FCC5AD4B2EDB4074EB7179E2F0B5F8E0E2
CDDCEEA1B492D1CA53793861C5ADBDC220A07D2EE79B325CA6932D8D512E7F4F
66BCE0818F6ECFC706144530C3B2E11A6248C44854286E3B16C00DF9E2E43264
A361D73B6E7B423AE860CC9D12D799E5A3889FC47053266D879879EBE2C28C4A
D035FFAC883613C1AEA1B7D5BD8F8A4D040B1107A24C66697C8C5330B5861F7F
D2003D4F2998608B75A7DA3503184AC5C0E92290E6AC7243F617E33E3293FCA3
D39E7AE32E5E2558215B49AC3C1DED70DEFEC4740329E137EEB53192C8055A52
20A4D1FF3E5D087577A5CE0F625307FA949B9F3EAF4E89451C2D20EC4A3BFACD
9AB54B8B5FE13C7A60CC1323974D1948F58B733ADC202F488BA00D7307E25724
EA3B963A4492672A3B3089D6F69379EF7295E467EDA3359A2858C6574CC8A558
AA08AA43DD0C5C51EC649E11855DCA5DE3DA818B0F1024C8DC3F36DB38D10CDA
60B905BE65EAD192CF5F07604D95C2948A6E91FC7412EC35BB3C07193E3BAA6B
E634BA234F3794DD29720B337658E1F15CD96A0C4AA14A2D68199AB65E8E468A
9798611711D8ABA8EBAF5D242E4E93B590FA4F9FB258A9EED4CEC2A40D0EFC42
DA44F2310B883C79BE00C1F3011A57776282D5DA960A1BBF95BF4AD2E4DF3C2E
65D91F41199979AAEC2E389E9C37A24BBD39AFEA340AA679BD0569F8779F2313
49F74A8D77551EE2E5FB356282E2C6EBB5D8E22B65D4B0A5E923150AAB3E87F0
A23EAA62731E96F3605FB68366DF276210030D4B4D2CDD76ED55F368F3E3153D
1BB58C9111AB97421FAA7EA898E6889AD3D9F4743BB2EFDEDAD58EC7E5140FBE
E35AA70C5DEDA6A5F483F8A97DF25AF3B0271B0147AEBD8E90340FC7CA528CB3
B9A59E02B9A33D47AAB41364658A7A5EC0A862D6B27E0F2382F21CD0C6E0902B
7343E89CC13055C3432CB4128822AC4F22B2B90B61A02173FA3AB87729AC18EC
967FFA37E2D76FAC37297184C00AAB0B0D0A2F4EB7BA8152D698C70DA9CC1193
9C580C7434FB963EB9BF23383B535DE835000D5520FDCD2D97A165292E8CE3AF
49B49E74A594BF9CD2AF645AAFB5411AE0F7E6694AD1DE58FC6F22A3F7DFFEDB
3327BA709883F660593928B2C5D7A50545302B71EABAC5FE4950F87C919505F1
5336D07AC3B4C5C85636E79B4F960420E5E1A4656E904BC7F12B79883729ABCC
80C45050A5A42955A9B1177192867A57ED0DFEB721570C6F9F81E0AB72C09A87
8EA081D605F69EFA5D10CF9C166F9668920B276EC31267DC7A41AB3017479BE5
549A85F691524CC9EAB32E5BFA7BFD9BCF4F3F9858EB48B1A8AB77403A0B1C8A
60706034F58796EDDFB01B5E58507D715A5B9B557C6B569D71D3509300777A14
D9C6925884EDD204A8DCF20A308392CB56A681E201E1D8EA663BB0FCA99D9750
D714286B2F448665EC97783DBF6B1AF5A39207535C12F48EE74CAD3F593DB3A0
D8AF267E2088043D6BAC93353DFCFEBC8B2DAAE2BADB3C2CA452E0EEFDBA2E91
75574A1DCFC0BE8C48545178CCAB4156E0E95D82BBFA087611479A6CFE5CE1F6
CC45FEC0E6DD5C3B4E88C07758B5D52BF3AFAF77B153CAD883B8DF68BE9217C2
C2F253E6809F1743571CD7AF73CF09D1A1667945A7D7970E1AB758D81DEBD8D4
BF97D88232FE1604C06B66B7C941D03316201BFFA9E537A7FC5F76F471A46A40
918FC032A5782CE2D267B6F66DA6B33E24E81346D38398D5F61532650D0B4FEC
B6022CF59825D71AECDEA8B38CD0EE43DCB08AEDED79F37CE516A6ED0CB26A73
7FD423B3912478F975615B64F4CADE38B115DD026FC1DECC60EF425951847483
D7AE3C3FD16EC6947A7532E588BE119CA04AD3E9E432166DE9FA5AE58B38347B
122978186E336D6EDA42356924818D6177292E71E8E353D5E72C6C2E82AC966A
55622E3CFDC120B4ED5A7C0CB9BEC2AA10741040DD689C7A5B4AF4BD5B50B888
1A08B54313ED37BF3CC358375EDB3B1EAE1348D1FFD9542F57D4E210C6D43233
0FEE5621B2073CEB06E42FAFC4A93AA1D11C03B49A5201E0230261809E2D855A
0DAFD4D25CCDEBD18C5BE8703DF93D1FFF71113D64ACCCF40B6DC112029F4502
53A46CCEDB15634EB0BD83094B481D776F843082DA67D613D4E6DE4998FB6401
15BA4CDFFFCBA6469908D5B3413B676C7A1F1D0CDEB9F919864792B6483BA8DF
621FC2B4CEBEE7608A1CC5AF799C43F169DBD4DCC0CC25C73F518B9EA8A3028D
4FEB6F83D2CEC821AD49D361691CA8294C452A3E6A5C46115B7083074239F4F2
B939DF4E7A1D47BA78CAF57A1CDD7F7328DF1190D3893239632A1A1E5FE7E0B8
991EE6081B05DC4EF4D523E980DBC5F3E49E1F73325CE6C1C1627F8F07A32CF7
B87A3D37F6B6F31C5A5EC1751C79C6B05A99758B3D7A5A1700B39245738CE8E6
86759EAE39337984B7FE21FD60F946A660DAFD305354BD3092F212ED276651AD
4B3A8AB43F21B13907B12ECDD92A4E36E44DD030545CBB3680CD89BFA3E8112B
67C5D025B66D63F7AC49B17AB6126C06A3435D9554C12843740D879DDF889DF5
4423E6199DF42FDD07DAF79F748B1DEC76D2B67E1D763425CBAEEB79A1B627B2
2AE70D0FB6EDB5E58E81BC90B90A84060921A742EA049184F369E08F3326E33B
9F8610C5832A28AE8D27D3AD983DDDD18EA9F107A6908BFB4DCEE42C1981EB8E
18B1A579A28183E1934535732A4DD34D95AB73E38234ADCCF9E466811A1D25B4
1759D9BCC39D5F7526DC08552CA63796E83547C0F7234B6CB48FD53927BD0976
7D15FC133E30E65C25268D2E44DA2D17B58CFEB0C85789A74A7F2AD8A324DE8A
0037E09693DB98DE236DEFB9015A6817A574EE7CC2649AD46F23AAA9730364B5
8AC76FEBEF86578CE53B22F7396C4A6C425CABE8D55FD050288238F868E540F0
C6B3CC53888A076C0EEE40DA08BDFBD0C9CD20C84C7B8F43DABAD9C30DD8757D
065CD44A232B3192CFE264FD17C567218F3AA4E1543D2D60C8219BD8B6A6C582
0A90BDB45E16CA1E39F1441651C9384A1C91F24466FA7CCB250D2C40A7580866
6C11C1BED8FD7025B951363A68C5B2F1EA995D3E91C363CC72C62BA2E50E975A
B796C2AC3BB7F2B4F5AA240E7E4F6A352AE9661326512BD7EFB3020C65DB0A4B
9CC321074BCF75D384D288A60BA8F446448C1DADBEC0916BA32DA8BBDADED91F
D38ACC4F20E718545C2F5DA06707A08A0206BFEECF90FE194EA056223468C9B5
A226E5184AC17775D399C539114B1A1AE1533EAAF375BE56AF47F845F27B4ADD
0DD6688A0CD0892E93D6FA3456DFC4A0E35551E2E1E0B8991EE6081B05D93868
30FF1C4B20DE2F49D840FCBBE60ADA11E534EFF2B4081793B28A6FB59D58C1E7
A63A7AFBA72B464BC33FEDDED5CD729D7255F7A9BCF437DB53D1C47E1AD2965C
3B5401A8A34AD92DC7D6305F39B21BCC5D5232FCC2BA481954E99DB0D4BCA40E
473C8A13323A5003A4F8E9EFF2D4BEA2AA826CA5BDE758FF0D235AFD2A7C8211
9028608E29CDA6AF0A4D8CD7E4D97835C9A7930E189369878E3FC652E1E342C6
0C893E5EAD05694C1B7B29D4703A07491A3E9072CA279E4E556EFB8402DDE800
6496746D1A63E58CDE4F51FCF9537834B65E0E0BCBE0AB012CD6D3D883A6D7F7
AA044C2795E5BAEFCDB07B97860E7A493E0B91C9DA95AAC4CC479229B792752D
CFB9F2A601247F581FE500D90E59F4F429CBD6F03CD8ACA7B70EF85406D80AF6
189D28998E78F419966687105B0B59DC6EECDDE032B9A808EB79BE64E29359EC
D7EB1BA969BB2AF589D4A875949C9CE5A6A1BE2B7A3BDD51B9F754C07E99FB8B
DC2D464FFBE2FD57BE733B526B9DF9EE1BC5C28141D49C1F5D684E27AD0981F3
BE5A1F45B28E0D6C21D629675633978D39C061C06ED2CC6501364A53C28EB6F9
E7428525F779DEEB0D3EF01CBBA994297921D88A8FC75D91B20058651FC0FABB
57D6C76E2B1B271CE0AB9E40EBB38AAFF1BF40E6F92D315661A1A9E387455729
9ED8DD53061C7CCC34B2C7C48D41783F7F1045CAAAE3F68088C8FED1DA6ED4B3
F92AA8E01BD608F244C1E775273B3955F874F7C21C64B0D6F8E07C28C1B70F90
6F674143E9322ED17E22F2386F4A6F194974555E11C719F48EC5B208C1381452
FAA41821B87A8FEADC454F5BE4D496B39DE87877414DE741AE1B6AB619082B82
4B5677563D94847DF9F74A7A9A963F37CBF0DE7689EB0DE10FC3AF16BCA29304
3982618A561D549110B8ECBF2DDE71931650821BB6950D332259D3FC65DEC754
D611E02233FDD81868C47BA66D3DA2DBFA1DFE49A819041483B4B0C4F7AFDBBB
D84FB7F011D591859BFEA637F7270527CE1BC6B1120F1D9B05A85B331BD3866D
B81FA2B70EE2094AA8269DEF213CDA207F2C08B2AA7E77CE5DBDA931A9BED630
A8F570E272C7180BC35794434AD9F9BAB51C80E223F515AC6D5DB669EA87480A
7B5F72D529F54681C990D1A5CD57ABFD458C88008DB1BAC2551A792C5A7AB3E6
1B8C0EC82B62F18DF5FD0A99DF2DF4E1805999615C9D3C891FDD9C37E21DCC7D
817438F881DC9C91FA889E3FA5A5F9FB52D3261CE1E9A6FC9FA777807B79BFA0
801785ADB2194B795D8684EE8A243BDF0C82C28326A709F287B53FABF7228ADC
48F0754B990CDC533E10C4FCA9D28A775479ECEDADADB47BB4DF127E1A83C3FE
9DDC67D2109A40B205E54CDF962316C039BBB499231AED4011D1BBD67CCDCA0C
831AD4663630B1AAF0E95008C7FCC53EA841882EC42059350098C02468F1D5A7
67C0DB38C5EC53C66C9C79855C653A9FBCF7BD84707734F58E74BB92C660CCDE
1DC1589ED453E97B7D437D60B32F93C767F2DA680E79A936BF9D9BBAAB4B053D
D9BA1E3366128C2005C48EBC0D657BF10018564A8B37AA7773EF9D9DB72059FA
853F15E0E7A8403AD45F934EE76531C65B3116B0F9E88408360A60F84F3DA6FE
980BDDF693B792153E308D5948AF5A4460D913F204BB9914E3261A5CB752ADAC
14B1EDD48D239EAA7667E1183F987E56B73FA1397D758B0F4817505B1AA3A274
149D234A75208633AA4F8D533469D5346A5A64DB9F454EDCE637938BA2D7917A
FBBB1F2DD5D123C96EE20CFC7EB44764781B47CFAFE219C83BD7EBEB5A61BA89
57AE16CAE3FF070CA76741A4104D288D1B5A9A77C0F73285962B048A1602C547
B3931068D88253E47DB1B4A7A8A8146C454DC8A2C1B9C6B7BE92C7966A9E6A14
87534F3DE646ED1183A4FDE0DD2177DC0E8BF41B6FA82BDE913A6F087E9585E8
4C66DCB20495DB177D29CDF6A80E3E0FB55921B6E0730E43662B8A72597F1D1A
D9582153E6B3D3E003E37A4660E997ED31106877FAB70506A3C0B05D05C9471D
A32B231AEC703F4C6313C1A18501F799C1CEB4BAB9A04089B4F6180B7324EC73
878BA324F2431B9CCC048536A4AF55E641BF8E1BD621449E0BD6AF013128C116
C90A69D33A31D36CB06AE60B46825C1E2954A999B8142DA132F220DE65426174
2C6FDD4EC583D4EFE2A8350B0DA76766B308576A0B05AB5357080844882A3735
D71E81765204D96D36A6B249D2B7FBA792E3DE9DBF4AB303E07B4FACD5A6FCCF
374088026568B49E066932528A617FB3E8198969CA8D808AC634AF7DAD27B5A8
08E0A2B4C581E344F1C99AC8D4DAB2A05E1053799422C4F4A774CE18A5FF780E
8D36D10B531086ACB0E0A33CEB72AF34AA11C3A04AB9C4FF7883BE799863A4F3
FDA683CF65A27883616E4161F3A0278E23CEDAD6BBBF70479F7E595B2421A15F
95F385D39FA6E250B79CDBFDD794EDCA1A5B39B8BF12B67A4B3394612D3737FA
1FA316238606DEA9AC63D69AFA5F87EC0B065AABC699E692B3002E9034D2EA70
96FA4A84C514C228F04C724FB500CC2D9F48B3E0062E2A15A764F88FA39644B1
5894DC81791FBB386464813FE263FD2908FEE3DC6C234D62C9EA4B92D369500C
68EE7B999C38BBD8E8E0B30F9C6717C9E55594609F1374CC57F7832BE254F747
4ED02AC29D4184F39AF258D0D541416274C757E0D2FD544D377E1BF9AAB09237
B22C84A4F7BEFD74C209800B232EAA3014D9F9F354B50388104CE688876265DB
E595B7996CC0A61A5E7F5D953C5FF3D8E80A7624B61EEA29C3884E9ACB2FDA97
0085798046F4CCF2DC28AEA783D5314584B2BF12F302CE64A22954CE1860787C
029C1ACF597B08CB4F27746BFB0C7E9AC6BD959848A7589C34D575CFCF7075FB
5BFA4D34353CFAB41F1293EFD309FA9533A4F87C21BBFF3E874D8490305F3987
9D4BDE12282728D11ADBD2E17F45799BB4B442658B3593A0BB0AA21FDA5F9CC7
57E65BDCC9DEAC62139C95900FFA08EDC38C828A155C8E5DBAE97C6A08A6ADB6
89E02A139E9D9FEC4C245815007665AA8237759CD916F1084380487F9176EDBD
F21252EA82798A20644F7F4E6497A1337BE1BD5FCC2F6B8232B0B231AADA2892
7F03B7B30092E63B690A69AFC46CB27108BFF3358E08BD1F5B0DDEB7C78F4EF6
68C2B31B29095347316BAFB5FE6CA95E1BB737D2AC493FC68BA13976D5C29B94
ECAC3E6E631FCF12213B7599339075F1FDBD28E63F5063A3033479D09746E3AB
B78F006F2EF27CAC48428B0ADA8C4A2B0CA15DCE17866B1D967DD00B289350F4
3F811DBD6A3397D6B19357162A776E9078E6C5F48038D597D87E386AA7FFA72F
6D6C44F14CBAD9A2C8C729EFB3A3928643A041D7E549CDD5D1238703E5933BCF
2BE3B107826F6E3860350DCF71BE70D07A5BD78C3F287B94346DA0CB1628D42F
1DD26CA0771131EE84CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 63 /star put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5B676256F9A00395D5C288EEC3C5054
7CDBBF0D53AD6A18492ABFDB9C34AACAC6DCA7DB1EE5E5E8311C1E98CA5348AF
83FE2453E0040F0C7E1E738D81729458455962600000523F7EF345B56F30BF81
761FCD8056639DD637D4CAE1BE50BBEEC8F5B693F98D2C829C2854DD234B182F
F7971620F6891A4FE773E61E3CB6798E8B8EC333EC4A664F4427791E46B36BAF
EC1B91036327572CABA51CCDDC00DCC5D6DFFD264C25C112B5812583EE0778A4
3127716667
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B38A74E29B9E7D4BEF828A51B13E71DF2C
C78DC0518AD29137C8DC053AD6D86747DC82DFD3366CBFCD581044AE5B23B88A
25842ED0050BE19E7F538EDAF1128614873F52B8FE20E16DEF21E3D2FB51713F
DB39D6C3E8B60AC7B4A83F38D6C3283AA890E5C5D4462D0CDA1D49DEB5221D7D
759291FD43C594074033868359A9CB523210CF1A2479FCCC7401AC1BBBA29A0C
F8449C165FECC03856CB08DA710B6DE98A17CA615483CEDBDBD9C2F47D84B562
1745DBAEB9560610DAA89F9D6EE68F8DFD8D0E136CF2B9B44D86E9064DDBA73D
4AD2AECB1F576EE1254970C70643BAACDEE7682FACB396AF64E102AD05E9141A
2A2B04760E9C6C61639B9E43B6D719F2431580556CCDFEF253C0B613B9BCFAD5
ACE01883440C3C61D2BF098A3823E734AAC86926CEEBD235D1F3E05CA0A67A4F
22C2D72A793CE08FC5937B4D7FC5E77105598B3AB259EEE0DA4D7517CF10172A
9CF549FC86FE3C79A1FE96E5ECBD1897E78765DAB8AF93587203554CB8008AB9
1561F7B489D2FA6D444F54CAFFB3F32607B0397165B14A96E463419831E50ED8
52C7FD7AD1C180A15DF66BCBEFF9437D80C0D133CBD3D25CCDEB37EDC5EB7AE3
056796B5DCFA1D8E053EBD8F16D47D7DB5B76D891228F344E7BD6EED033C8096
25340DEA0324A9ACA7AC7A3F8A6AB960365CAA37BAACE5B78B259A06BD7EB2FE
CD07DFD572394B49D184DD233FCDEBB2918B95470DB2B2105085D1A8E08B4917
D4DC3E7ED37B25286FCBB1F8B2FD6A4B950D485F880314EC964BFCE136797BF6
A2592730C9AA45A68D436C41CFAB8C3F360BC188F311A107CC4B9D012D9FB773
CAD49843D26127C572FA90C64CB932323C4D302D38619D46DD42291FE4C18F63
35C9AA3D95BB4CA5D12440DA36BF7F264F9CD0A984184AF757886F3AEA4D5440
B88F8027C7FCD0FFAB183250BA953457E019E1F784C772FC0E92F4903CCF3745
C585115062B0619C56C59A066C4CEAE0ED6AC5DB2C5FA1FF5A66C4DA698B029E
680F91DC1468636CABA978D7B4F56E782472DB08C929F945356154D4BC31F745
08C5A2869AF464AFE61BAC3A46D6A0ED37FED6546463AD64E3CA7464C3E04E4B
15C8E476DA4B7C3CB74DAC0590C073174345CA9B25C6A36622D2316945FED7E0
2A67D1D602269C73C8833553A5328128323B42A86FCBCBA30E020B958DCC1410
75B747F14336F865DAA9B03BBB90B546A821CFFD4DCAD23FD0C5E5E96C16BFF3
58E63D9F6032F887E36190E925CC7533901E182FA01997F7172210979FD74738
427DDBEAF2ACFA054661D3EE5D53A52D251938D2440EEE7D67DC835A2A7D4F01
B4B2D7198CB173CB0522F72187D83B605BB3B7140AD64751466616BC617009A9
4F0EBA5FE348AC8EC6888A4E1492F66AA2D95F3841E352111EB419F991F80E72
F6996DBC85E85A60BC7453B38D4C3D34A4A42A5AECC7DC4776BC150E8F5177E1
2FFC344FCAA92E27D3BB66293709B193910F71902D04983D46C778AE64D5A908
EC3AAB0BA65C597DD3DA8AF88992B036EFBCD54039208EE5DEBF76EB2AA92C61
66425DCDEB1E3CBCAD06E8F978A1F95BF4F8B33AD2FB94AFFB60F2B9E8868CE1
4E52FD297516D1AA79D8431BC56585EF6D1A994028DF04897962E378088E6C3F
E7B1CC83609EFF60857924BF0D2EA0259AF25E898A579D61315ED8BA4A98ABFC
4AB1B49F7E445EA991FDE1DB7BD688D8741903636B3B9F9E34822304AA49E2C2
3C7B1E59084B5CEB3517A2A6444AF039C7D12B6B9BF6A2587F0A3B64A5D91A64
052501AB8A80FF7312FE6F770C564B9357CE994B79546FF52AAE673C0884C3F2
C2638C307C377AE1A95BD95CB67D9E25CB76403F967AF3C6F677F342C3CCAA20
F1E08980A60321EF9E6603D3A9755B9041BF9B4458C4411FB47956A05D29B64D
C3BC06AEBC3B25E1D4D8018CA7A1B133A0F717C253F30D62060B42D6FCC4C8D8
408F277901934054783DC42C4F3F169F84419D8C87BC21D805200C0ACBAA719A
9EB93CA71FC9F2DE4BA2E2353E308301BDB3841E72A5F984E72364ABF20439F9
9E52488B4CC0D892573197CFB0B7C9720E9ED02B5E343CA7CC455AA3B464A030
0513E9681A6D7C5F734B5911D3ADCA7CC8DFB5AC6279C62BE82BADF29A721852
1050D9BD2F2881FA513473CA28B5EABF03CB51FE49F54F075D1A6E2427107382
E8356E0BFB7367DD9F74F9F9B5FBB24E3BC8C799498EA83E3ECF3733A72EA97F
B7158F291C8E0CE9342B0698A22D9E9AD1345ACE0F495B51751AF1D8076E1914
B0684FCB2D907A6DDF97AA82213B3DF67C4111DBB7628DEDC3057A4B96E09C7E
9A61E16EFE6F791C07C991D47B7F7FC1E7D6EC719EF03D21129B58E19016C1FF
8B84B2E592B01FFF0766A361869B97327625682E26303470EE1E8AAD15912E28
8DC3939D1E7D725D2AB5CBFC4A916A6CE9606BB0F3230FEA1602A75B24BF258F
ECACBD1B09E7AF077CCA7C77085D581A4592DBBC024CC452D45564B3C47C14E7
2395DB7F1F82F924B297B306E33F7E72D1602FE0F4FB6785295968D0CDFCD538
F9C3C575B40CC03F1C7685CF5C0EDA00F0B6816750AEBF3EACAFF4DCA56A2106
198B8F2980C2964836AB95CE7B51688BDF8417D27810F34182FBF0D5F63D4F16
AE25075730E60F04DDAF10E3513D141C037F947F9CC09DE668C744A9FFD7C716
39084E0D451E098D1FB67B9248ED38E9F0CA25E69488DF642CBE80A48A2B1186
D23A3661F2D55B0BEF461C74A8EDC509992BBAED817C8444F7A12F8768CB3ADD
F81D8FB730E042C990B4F194AD7E6E3C53CEF0E9F148AF34665F548684B460B7
7AA5F09D532FF5CF193E4C84C53D58F7D4235853EDB1476B58CA031B6A3CEEFF
844290FC54BB196123EE97196C5A8FC9FBC784A1C9E062BF8B9D022DE2987C0B
5E176DCB6414033D22B6B1211F59083D400150E1C47111A553000FFC3B3FB447
7F133CEE7A860B33B25977BD2AD81BF68FF2D1AE034C078C79D8E9A94140145C
0822AD4ACC38949F357F7F55AD261F017F650C14445A14B77593BBE8EF57AEE1
8CF0E44C6E68CCA69CB23E3EDE4BC46315D6066D22E6D781DEEFA97A21E595C0
7E6AC63AF44967DC210CE8292ED73AB77909F6716CA410BF482B75282A92901E
1FBC0A6EB846C7B1F8D9FCC459B6701384131D4DA2F670122E4593C573E74B0D
BCA5F45751F622CAE0B755D519B3F926A72A8A74DF4C9EFE9772C9F19CFC3F3F
78EE6A9BF7857E7F557EA65F283322698E9DD0E274E473E47E54BB25EA681E16
2DBC6CD19279D6BA2C21306E1058960E65260F71849A2534C3DA9A1216B974C6
D444EC61D8C4A965B6799691E75D9A5C01D1DB73464AAAD4106791B5E8E9F4D2
3C846C383A1C9AC60BF276E1BE2DB86F0F94CB22428BD35A79B6D61F4AF89783
EF318F215E6A0DADD9352CD15484C142CB6184230B08D4274A77BC37F4CF4E3B
CBAF6CC5D180D40A9E4080ABDC6406382278512A4D6804B4B23911868A4DC9EC
82516E8F04567E70DA5254488F91AE785FE4A2D0F96BB81ECB10C374FF7AB0FA
852538DDC3651059133E43AC2F5BB0BC9DC309E1619AB8551D2AEFA6191A2E82
FD5C78839321E380331BA4ABC516143D30692EB2893130ACA9883058B000B48C
2CF4EC04F24F0EE0E79FADF729F45DEE8F0C72655ECB439850AE10E38EC53B28
4307E54889EA46043DD8A1EFB1724DB6C99587C25E03C8ABED884866F27EF3C0
9F70C95F129CA996641951CE56676BAE4069420C33679899CCE8B36D79D041D8
7FF88EE386F26070E8E4AF674D94DA1996FA21AD70E23350C13A62204C13DAC4
CBB010D8E5020438F4C41EF7E166A3B303FB57D26FA08DE5209BE77958D3E81A
470BDDC4587F197C1A3A1F1A725F377C2ECF15A374FA5F0478E4FFEC4ADC96CC
40FFFB8CC7DB98B78610D2D795E0A75ACA00EA4C0863CB16DD09A3F1659A6F1E
E1891EA02B2E460F08676FD032EA80F36B6500DAFBE0CA7740A9F04D7B3A3B4B
6E36524ADE8ED697D9F368D927AF22752746417F8DAB249F0FEB671718E0BB56
06C2F453F06A11B081AC9D7A3DBC0CA280CFE218A4B5FF3041E5D2321D9C8575
9CE593EE09C79C5CFA483AF9AF1F0DDAC1AB91FC6231D56BBC2E221CB34AA4EB
2067FFC9902784221A3F7D2C19A3942F2E1F29EF28B496FF2BF705AEB5775795
49FD0AB537EFD7DDCB0F24ADF9B21AA9AC2E60E0D88D4E585889CBF1E7EF9C21
81C9DC66783428D554528FEF5AB6DA82DE6BA704B51B3DA0C6F6DC9DFE893CFB
8C9B7A761EB700766D976CF20A782776B970BC4D7FBB5C92F6848E3A72DFD02A
64751BBAF498196476E2B24CDCC5A61DBF3CCB014CB7BEABB6B6F3193E3039EB
AFF33E8C7B81DE412CA6463D1D1546B49E5F5F52A7E6D8DCA16B183EB03A04D2
CA895309CF945F15ADC76DDFF02C11C1B52C95849FC82FFEDFCBBB5F11E83FE2
B2259860E29451D9BD79F9CFBC03766A8141430525FDB764583A9974806438B3
33EF11AFC3628EF1101B837602483A341A599395BF80FBAC674E389223A80D7A
546F422F2272A74E190EB9D3874C0A71D5D7EA9BC1E044066353662426054F8A
3F6FFA36B5E3D15D8783F108ACDA4E402D89D79FD0452BABB6145E0753E93140
2C8FFBF26EB6CC1E820CF9FF390C2FE2C93723D8483A873071529406E5DA8177
D46AE2C6205637009C7C5E99A7BD7243365584B054A5ED9433D0C41611741EAD
CB680887273931F3CEEC2B89740212DE0F5202575B32E6A9A58FA6D07EBB2F32
69ECDBA435A780403A0BA41DD693AA607A9CF032A8B0926F0DF27B07C70B75AC
33767B7F0083D2DE423A5E2D221E593C66E080B8A237735C79EE7178CEFA88CD
1850748CB9D0D52C4C45F0C2E4EE46889D57BF0414CCF9445B4C8060211728AC
25EAF82A57BB9900E40680505B3B4568598F1302C55BAE3BC885E577E9097CD6
F43157FAA4EE96E104546783F46AA36A96D66D67C2052F37A318384CEA74435A
108D866841DF01AAB63AD28F724FFC7E5246D1BD7B90B5676E71B6C51A649AEF
D425AD632A484F7ACD91DCAADDCD272649BD4E859F9D731A3BA6D86A89A21638
7C68B701EE11DA045A6DEE34F7C92DF7DAE445587A6DD05BBAE7F649386E95EB
168EDB8C2A1D9CF924963E632BB1E91A428616B5F12FF470C4EEA726A7B5B501
43FEFD671409BB80DF7CEF71ACE0AC7CE1A70B2C176E793C31EBF5C8ABB3CD95
AF693C74A5C9F352A0938A2552D56AA3C44E8FADB2EF29003013CCDFB4DC618A
5843D1CAD6C5972F05E6532BBC872399453A073397B735B1A91FC72BD6653EC0
7038B435D2E29F88169F359C58F5315DD83EA858CDC797025E2479FCD4B4BA6D
95C14BEFAD8B31A931CCA7A1CAE0C6D5C9F2D3A6DAE2E0F7E40FF35326BD8683
B69613229EDC720460B9F702DADB5199D736F85D78983431B2419137573E6DBE
DDECE5284218CFAF1B03149E440AE9D3BD22FC16D82DECD741DC391D23203405
9467ACC33669815B3D8EDC0ACD26BF02BDFBCBA4C1987DBEF479DA9C6EF483D1
046E1AAD0A95DE4DC41C52E88C57F35D00B6BA98B6078C9FF856E05B2BE7BE49
20ACEBB930CE01199BD3D3486F92DE3789C01ABD7234953CAE9B7DD354E54ED6
C97EE6223701D9052942C452C5B0C9349232665F5E893DB7ABA88F67E4E3690F
C729A9C765933BD426559E2E36901309F7790871F6C6BDDDEAF4800A37830645
9C309DD963F1B334075730E60F04DDAF10E3513D141C037F947F9CC09B76FC61
E9DB78180BFF20B29778828DCCC9F3927A27C8CF60B6DD3A05D5E4578112195B
0AE2887F9FA07542E3B34A0BD8EAE264F74091CDF7B0247901EBA8C76AB23DE3
75BEFF807B3E840E1D1D47FE9FDA94629F2727628AA527A6BBE250F5A649FFC6
FC7B4DADA774CC659157F0FD64B086BF1993ABB4BE659E7EBA4669681528DA35
009EB338DD38AB0866BB00B7EFE75E9FE390C31A43F5A06E23FCC0B2CA47ECCA
E0749E97B5CD1DD39385DA849338A6BD32CEDD7CF8A9A814589DCDB827AAF23D
64DD5962599AE3BA3FA3ED367DDDAC10F51300CBF61A17312B08735B7691B909
A0B9A94076B204713BC9B1D391CA583B9A25C584A613FACF3FBF54BD9A05EBC0
9240EBA6DBA43B90D1EB55B342DF7D8BA3E09B153459D2368A1CC3964F845E8C
5B821CC31A23F0E14606F60AF84E3C2F622EE697A2A69C62A683C4C3AB2462EF
5BBD6BC3B2505080B4555FE343FD5AEDEE1B27BEC937020B6F50C8CB7DC9CB00
06F39578B8FA7451524CA810A650915DFCFC05F53B4C4070D03F498CDDDB704C
DAD37E0FEA6C0E7F38B995AB326966A1324BBBE0113647B2F3354FF52062A57B
B600DDD30888EA6D4E270A351733DD4FA34A791B13255A9385C1C79ED0A5A080
D9ECE69FBC463679A22F06F1E156C0275C76A38D4011CA6510AE65C7F2726F87
E97216645F82B9824A4B9912865C5D725C1EC2AAB13EDBE36323083804CC5ED2
C68B08841B04192C719C3F86BDF1F53BEA58AC77CD8FBC0EA477924D5DB46E0A
D4C1528807F8596D7DCAE84551BA09C852B7EC06652BAD90EDC58203B56B4F22
0560FC305CC58E312805DD7E4BBEFFF1410138B76CD997E9E16C770DFF99C24A
94526854C6F8ADEB552B7E7E2274CAFDFCFA1C62F7EDC861B7402EF8345AAA0E
A77CCF43C301B4F5A7CF4F797DA82F524FD2158554AE3FF4E0C9A5C6D24F9F56
0A241A16D304B2996DC77BD87472592808C316FE30AAA003CAE4721E7B005214
E1AC6EA4107EC87104EF610A55FFB9E7AA036C51984BDFB1E92A0B7050F71DB0
E31B4E6C630C4755210E773E8F0F4E1CA65FF0D539E40ABDA634431D9FCCDFF9
3BA686CF408BDEB392BA1AFBC9C5D1849CC811EFF68E4692793C71E23293E69C
788B5C8A0EECF092837E0829DDDCF3BB657FD8B6B51157F3A19B5DB1BB9D419B
3E98788FF5AF181CBAE06F0A0A3DD57B13D3C7BCF719E5568DA765CAE78BFC5B
D4EEA4AAF6FCBE1760A1463EC3CF8C3C67D05224B631DD1A67D6B5D1A4C2C1EA
29EA44F3FF154585E49E395545027C5D6643DF8E4E2B8E6B7A7106A2D0B0AB67
EAD22394C03A72E677ECB3172F5439710B0FF8C91EBC852F5DE03B3D38239C1F
B7161558E4F18C1B786322ED67B8950124B325522F64B542C936236A944F7174
2712F00B16A64BCF82C547CE1E53100A2E429F1EC4A5AB8022162FB700014BEE
1F5FABABD7B10614D35CA1A8A454866D1B26073CC246B97C8E1B96BBA5FB5A88
1A29CC2F63462E3DAFCE13E1CADC6C50B2B3B25F87E71AE457E111FB703139CB
3915562073F08D0B4E7AFEB04D94DB695D2C01C5068308F004D8C91F2960AED5
3223F0CD580F964B685777C0855D2E5E3263C745B314A4D0B7620052447B5C3A
F5B3B43761A01C0B3AF1F52F26F8E2C819804201860424224FFE7C5BFB86915D
70ECA96273EF45A81F2D3611183CE05696854747FBA5EFBE98CD403E6A8530E5
F9063601E02EF0E0D8FE90CD77A65872C2321FF79BFA055B27F0673DDD7DC871
E41123BE828CA964BF6A3E9C5A96301804DFB91962B67B24D09FF6061F0035F9
6FA9C8CC3A965CA4B0D9F8642A1BF007FBFB3F4511F1DEB35ABEDA8B95FA0E91
B207A764BC3CAC4820252498F03F96401354C92A3C8938CBDBDFCC15C736F2EE
6FA75F556FC4CB162027CBAF6531D5935D99E38D1EC6A482BE556D7A49C65A2B
1A9CCC6587F9A75AAD40303263FDE9D4347E37371AC60FEAD8E14CB85F7F229F
9F60C143CE134A0F264ECEB119A1882A36FF723EED99E3642C9B34C3CB0D5BF2
876B13FFA5B68F95BCD78139D583CA5380C76B5EF3148AE22AC1F7B544986C15
BEF8D7370E5CD89004BB241B041088734A75D72A394B601A335EAB97E34E14CA
E06B8C8A1700601397BA41B0073E1D3443B2C589C0BE07BC8789FFA040283ABD
9A5D055B0990124905F942DC1CB22911CAB49534A03AD175CC7824B97DAB7869
3C639B5A99800C7B103AFDD7C6689D34DB39FFFC593487D43D6E4556BDEB6D6C
293321EE6A55450CE5AEDA30DA4F2348855D71309D38EBD00B90DCAA6B87BF16
5B4CFF156B5828234242D8539909DEB17CE65D34F45D38E310D48E44579A2A0C
C7E1E3A7D35816E585646BC2C9ED73E6084B59B578685954E5CEC8CA5BF1E0BA
746E2FD21DB87F905165120788D71CF454C65584349831375EE733A9A20A8C1A
DA6F9E29F99A4E6E530A6DF31A11073D6791ACD0C762167148E243F0B0EB1C54
B5247AA85BBCE75D4047CA14C257EEC498452100300C7733837F90B5FCF89608
EE258C2A1F288AB3CD8E560FE6ED1C8AF7E21DAB4558135235C8EAECC9B7BA84
226C467E9C36B594E04C1837AD4F3EECD23304DE591FFC26224D89615F78F478
2ED735A16AA1E6758EC8AB545205D12ADC6B1514174C6D036C0260B2160602B2
4118E8504F2FADD1D6C3D2FA175FAB5FEB9E54085018252E9C7932A77E7ABE65
BC942E86244B62614069343E1A055F3380DDFF11711F60CBBF878BB9F0F80FFD
5547CEF6C531BAAAFADDBD2BEFB8E5B2CA2248511862F04415C736653A3069E0
375D0792E6DC7674B55BB6FF3809EFCAAD4C727D9B67A46676BC8775195F7202
E35C171E9BADF552E3752B22A429E7CD5BC2E65ED4977463D02004A5749483E6
F7DF03C42A2DA944E5F4CD2671EE980C9A1C05DD6C2A97C94BF6050DCAB494E2
3E8F67B6A5A16297731FB4996B3E51951797C945A4806F4661B0A93D64CE0419
674E856B2036634A72434D6643907C7C626702311CE73CA96739EF683EC53124
66FBE3A4180E9F5DD56DF2D889E2EF471D112763A6934419E31809E41F852FAC
D8C7F2439AD5D6EAACE2BB7539B7AA488840AFEA654668E3F4362C44B5D3FB32
36B892DF8D0A37D677756CCF76F70E4244C18B1EBF593136B9BB796531396BBD
420397F9216748129E8EA2E56A61329C96520A8745E880B7875C088BC9378E4C
4022D1CEE56753E6D9E32FA8276C285617B0D434CB73C440FFEE44919FEDD233
0BA2F3BED6E631D300A3202C3FBE9FA07AD35054A32475D00A69807F31630ECC
F35F18E32073D738C63D15C0441DAD01922BF03D6BFD3333203D264F6F19892A
35F527C109AB896DE24EA9123D18E6F23C766C747C1997A7FB5372277A76D667
6468BBE74C6691838E600146C44D49BA47846EA0A24067C709C3E41F4EF6A81C
0FAC337A4EE5A951A3327D5D4D1229EA3FC22A06F205DB000008C41C460406B1
E6FB8721026DCF96F1FDA30906625A3ED64B25B3247EE13CC028122315105BBF
1646253CC398E248DF3EA93C1AA74EE4213FA546B7DF6469479963BBA4B94AD1
5D9D208726B323DD47558EA0E536FA063D6DBE5E0587A1CCE424BD3195FDF7F6
103B2A5565A54CB7BD109420C68FB6C7F671ACFDF6751637E90510F661776A74
AC4FEFB0C8B049D36F9336DC3DD38886DFBB97F4109A8F7C6BFD65321C151FEE
EF712B62F7333F1654169058F9FEA7BCABD99C88582CE857CF1B762586C786AF
DC0DA0AFC48D883F283F5CC02398B8C8AD10A56C33C4822CF8F223E47356765E
A0707D1E4A530748A836224960C44DC616FEB2AD5A7435DE07E51E6BAD891BC2
FE47D6D3A4545C94587F404E262CD6BC70542121B0A03EBCA6A4A7AB694D73DA
F0F25A07BC4EAD505638D5CFD0261D3DD225ACDC9714E2C8DFA3EFD264B5C4BE
9E6EE4B252ACB4E838CF19730BD24D75340C6C14D144464314D1EB1829A0DFEC
935101221FCFF8D12A72CCD5780F5316533640C7DDD293EB63D5D51A18B8B8E0
32EFD027236DA48F6335451F570C39996D7AEE5FCC7AE5E7D47892FC9CBBB12E
A7ECA1A597BF84FD9994067BBCC8CA5FC594A3F8B9058850A3074DDAC2A26AFE
B893CA0FD99AF52E3D635BFE0C802770E17AC2A6C46D61114E979F4CD94739C3
6E60C6A25584F9845D7927EA7617CF92274001034D9C4E5F7685FBFF2A314BFF
CCDF3C03A76EEB2358ABB3BE6835E7207A65F3747EDA7428B68CA56DBEF3F74D
AB1D8590347B3C35DE9A22430E2207EEE1D0EA958C721BC8F7802E638B683A1A
6A43FBD8DF1F23EEE41ED3970DEA576E9734077FFFC1556A37F46BBCEB68B91F
D2CB5F6BE2B21AC5FED693529E32124F234039D0CBC762FE704BBD2772725634
41CE263187C01C312CA55295BF0D1285707759EA2DCA5F6E5A056E851575636E
16B126D2174589630DEA7B7DB78F4550824A25C1805E4D2DBC00F28379E9693F
7AA7393431960F7FAC6796C63E993E9ED7FECD405C7EF5833B8B3A7C9C8FF908
9DEA12DF029905C19796E7938E4434A04B90581C0E93CAAD5F165C35F457699F
FA621A6BBFB011C9AB9C152ACE83E912F94822CCEF7FB0A8C5C1F0BE92A02791
B710156A771C308A317C7662FB6A140F4226C7CEC560B2C88C58592BCECC15DA
6F51C5F52B538AB7784A38A53B5451729CFBA828A43AEB150A340CF2F4F4C41F
743CA15AB36672A681C20F0E79E2AC06E9DD147DA54DB76A1695448ED2924D97
B20CE477C46CAE234A46B51F89BD2BF082B16F18F1284E1B7C20D2B8AE152EED
24695AF71C2921CEFDC36BB2496DD52309A88E5EC195766E62477024CB87D87C
E09B1888871194FE9A898773639BCE93D5794AB9F10BF392EEB7D95DA6D35FB7
C95E6B9B8ADDF9080663BFF1B1FE9F78C6280A58F8B80ABE1048357E1727CB2B
431D3B7CE4CED1118A227E7663C38E46BBCA2774F27737D9E2BABC44991BCE9B
CAF917F48569083D3ACB37905511AB2F258D7086213EC782000DD866B8AE8BF3
AC50D9CDCF48C3233C178225B2108DA6D1E71520E0E630A20B34B1855DAB7C2E
E42288BD25DE0BB4DCAE70FEFBE6C62B0340D311267BB33D432AE05681BFA0BE
4BFB203071EC73E764587F4601AA53DEDD084A38BE34DC16AADC734D415471F5
DA72D60677B55CE291ACB800F0E32A9F659FB3270D9DE9377A93CAC57DB6DAC1
53356591125FA9E3064BCE32995ECDC83C8A91B71201A96459A02A0BCB4609A2
4463E0CFCE3336DF9400E3433E0CB343627CC5EA5630A5F045271FDAC2CE8F43
39403226583825CC1A2738F6BF5FFE5FC39E59FDB9C2FB5DBAA499D1C5BB0C37
48CA1BC0384018C92555B5FA228A91A912C5C0D92273302E7AF8194D84AA201E
7A8E5FB51F64669222DBF0C91D3399DC8B2B603B1F08584C8A9698485878DE8B
51246639754F3C6049DE8437487F39B4161F000772DFFBA27A9F321B44C3574A
7901080BDB57D45E9A5C4B78548AF5DB294F25EAE4C87ABEB28963120E4D95B4
40001CD83CE365D78126534A582EEC7C7719608B8D90B72B8B1C12E5356DDDFB
880F3266FE30BC461BFB2F393CC283F2D873E5883B6999A4BD8792C68064F27B
E973B40D709C8567D772AE1138F6BBCD00F6CA9C7281697D7790C25C4F7D42E6
D31A30036E5778C4B7ABF65275E438CC9B047350E63FEDB24200F47FA8101223
EB7ADF3613AAAD505CF8356865673BE28B5C04BC8B6FB664A3699FF18F6877EA
29FF755BF760B9DC5E665EDC04CD824EF4FB467581A67306DBCAF42D83F796D3
56BF755E25981770457924B4C59E4DC57E35BBE28FB20621E9E1C9C3BEC68390
0F5729668DD97D278679B167169AB38EF857943222FA93370666B8F7B0B4DBF4
FC695FC925A695E7D14DA39E5D48D35C194882C0D6E9A316F69F4993578A3BF4
F24BD115AD06A88DC601CE3DA0A6D14C6766C48AB20819C87E06076F1D458B54
6305A9D4BDE2DA1137E97B8E99A12AFCFE5B319DE25074B4C1EB1E3267B13350
1D25922724B44DEC73EF5733BF4960985B48A30536AE7B9E288A4C9A854BD228
27AC46BD85AC88C5E56489BA4D75B2CC051344C5B973D80FD534784AE15CA623
42F277B2EF2DCED8E3D59CCF5A52336E2DD2A9199BD5316C4C4B32E5039A2A7E
32C01DCE1B89A2148004DE2831FC2D25BD2B8C3F6F763E29D0720F3475A7DB6B
C1C5240CD2F6BBE7AF0EE96E2833A6264EE000D98F9F8C86D8D507AC15DE4CCE
A4C0A92211A0CF68E77EDF50C15D58D5152B6D5DBAA499D1C5BB0C34327D2923
4A96C1040C62837132C0C0109861075EE874175F356D03DB9EEB6EDB10B1C937
88359528534FC1CEC320E78825194CCC7FE4A0402727CA8C27209B8A8DE397BA
92D4EE245AEF22403636CC2CFBD73BC06D85E4A804658795B1B3C0C5C90B573C
61B5A8C71723B392B3984AB1AE2D1DACB35708D019956CD7BF88F9A7289EA255
1984A178F12A7A34A9128E6E061D2F6093ABFF772FEE19AEA0AA0A4C3553AB4F
2288F8E3848384E4DB68D4CDFFAD91E046C2E9652885EE8346A0D8ECFFDB9271
82F18988D3F72DA5A6BE52016B25F2862C4DF5EFCE6B8A232721004CDE2E88C1
874BE8C690635E74AC1EA399C1F7B9CCCB219B9836C1BF4E1CC5CCFDD73C03BF
FDE1B6DCED3198F93BB6DDD8079DF50A479FDE69E0B4BFC19BAB701369C9C627
F64ED0C8166671DC32787088591E3E2C7A3D9D024892D6804000806C1B9D2C4A
76148803E96D77B5B2EAA81E2977977BD2730266031FC75FC3AD1228EEABBB15
5AE78E700022F58B5FE8DFEEC839F95F39256E33EEEB3B393FC5E480C529BCB1
52C4ED90075151EABE73523DDCE5E7F0D416A4BAE1683FFE690358F0682F0EE1
A0A1130037ABF01DF588B0E1E2B12F4A766654D4DDF57AE0C473D35EB3202995
3F647B3008E9B5D9FE2DBA4C4E3174744A247FCB0D798A41F1FD9A5FBEE58381
EF6581C6AA35EF6ED17035F83F1D5F4748B5DFF3F0F69FF58059FCF0A1CDFAAB
7453F4EE2B8EF37D4A4720A9017A9D103FCC92BD8370A792D3276B233A5EDD0D
D11F2CBFB5B252EBCB4E3991EE9C7AB1AF80D28B3BD6A65A6C1B7B23C7F8303C
E432275847368324BCB11ACAEE48C001DF32ECDFF01D2D43AD2E836B9CDB520B
A8A9955E6545C414346F8F8F6A1656BA92A7F4DA076FEB6243DA4915B9ABACE4
BC2D3D6576598544F4D41D6A6C3F157BE2EF73FBC477730DDAD1600B59AFB77C
5F75EB0EF407549C9426FD9245CFCB54D5F26B5CC4BAFFE9F6BB6FF0442B3255
524773928A050D063218EC3D84D216CFCA8D16FA85D05B6741F83FBCBB7CC2F5
072ED9056FDF5D580FA9B8307BED6AB24AB1C74A3596683999CDEB050650609D
6E1269CBA7FD9313A3F16E0330A0D271B505C6377C170D75C65189ECDFD43221
5CDF7B26B3555C1D9524816490264FAB5143CED4D7786E3763C12AB30CB7F681
6FC35BB770A75FC8C61B6BDAD0D883B3300DF6B78CF15262FEB4B2C29FCCB75B
5E75FB89334EC8BF6D27A6453C5BD15D7CEE0E27190E86821C5E3280BC9C7FE1
8B781313B21ED88123C77904E29137328F3DAC5E46819BF8494CB2A2C58E9D4B
86439493A222D93EC5C973A5CA23911A2A149BAE5C9B730676C9A82F3B4FBCDB
EFBBB7D0E144D5DAE08BD77749B8B26A56360E1B79C2B70C62FA4BE47DC67351
64639B22B983E7E7699B745913646ADC227C9E63B6330ECAC79637CEFBAA8A47
B127B2378F35926039C28832BA4E13D087CC47847C92665007C12CD5B909C381
3548C9EE47C0F1301658C5151C8FA5245BC3850CBA871D61274EDECEE06DF9E7
06FE7772569DF64D20AFDBE58428C6CB29BC86EE3B3E94C5D830EE30337C600F
047E2255FD2CF221C69BFB46696DE01E140E4B08D7B3B058A9D55F2DD7AAE643
C38D71A40407F2F0A905C72FBEF5DC295F379559D5BF58E76261DF4BA2CDAF05
8A47E4DAC297ACAE50BDD4D66A8A4F39B2573B61762F5F8279E065669A8AB667
BC9128D7E853B586585CA2EDAC70C2A92E4F59F8811B5F0172CCDD048511C886
1FF3257B22288D9254C929A0FCCE9E9664D386173032B8C29F4D19C2ABF19F66
FA46E5613A330C0470E121557B42794E65CAD605C20C4ABD6914E623835F7092
0DB49E29B23ED3C8A09268FD97B24AC896F0921661A47208565F1779F79C677D
17F89569AA8C932F868F9EDC050457165FE6E7D0943FD76EE50F214F20214911
993EDA5BAF77007BC19DCC2B27E61F2D5483E8697D00516D0A580E7993F42DF5
06CBA583F98B7B3CB10B636201E4E68E852DB592F24E96D67AC955AAC4B4CCD0
1127FBD23E967F6E61CC71C6B0972D5EDE736BA0574396577A530317A01A7551
7F5D81FB03E7B61F032FD2976200668A85463BF1E120F3E6090525C6407B4007
27646261C7BB436A5994585147DB9D73CE040D321656845480572C96CB07A077
D87B1D1B03819143A1D63970ED9731A6EBEB02F17FFBCCEA97C91F744A3815EC
439C9EE6EAE42D527DF4C2E1619A7B2DD4812FF9C5E49A7FDCD55D65E432A8A9
C05717B5B8632C6E72B31E17902F6197BB74CD7D435F732E54776BD236BD3809
7A6D679C83F331EAE369CD3D65492F9D90A12317B71CE0ABE9ED22CC2A62C382
8679744C66C949DB01DF9BF8B4C4B8B5C39DAF1D44BF2CF3F154431EE4D2057B
30B0FC577FF8196F38949040EA414E8C2DBD3092F8DBD83088AB5043ED52D533
5F6C1481B8A24FAF6CDC1C0D93FEB70446B489F4CA1BE858C55DA051EB742D54
8588B102DC88D594D8AC1545DEA432C12009615AD4213C121F5B8B4AF6A93F9D
0CB4244281D396E47A70484E1F4DAC72D16911BAB2E051B03FB6D71FFFF1C1B6
5978AAA1E55219A6A0C03F5A4525CDA92631D490CC4D15FA2134641FC3E77DE5
3B1792B25FB1602A0F751CCEC11A62B9F83EF260F8B7D7DE7AE60D3B4222CB31
8E5F6387F11ACE9D311975E9E78B1320EF6EEB18458D29F0DAA0AD4A64A79CA5
D0FAAC8291971AD91F3BD3A3FFE6AEC9E8A5E2A6678257E7A19283A117B70A92
23B73A509A7FDE9F73368433DAE1DDFB86F1BF71D23C92F4AC959888A961A171
672396B3BD3E590E7C65606378BFC1A5737AC37F216F76786D4650C614896F41
17D176D903E67D569C03F91C8FCB9159614F3BD9985035F80B9A664A5EA5DD6C
98625A11D1670A0AF2EAA24A497166A33A0B3F0E3B567C2A6EFC90FC9166F8BD
421A5E00EE048F7CC5FDC0D2191D58AD1ED462A9466F465940C69BC0CA0C4BC6
E032A9C786C94D41336923F4CC1F13890EA7B610D6A79B89D6DDE146DD51E2E1
C229089669C2D86F2ABF58A5042BEDA168DA84C7DC2BEA08A39647C00A14E0BE
87DB2DC91E43B6D6322F2EF043456622640A6E7856E02AA57DA640D8CD639B24
545E234815F2A07F61EFAC91712BA9ADE018763A85CDD25CF58ABD44399A9AE6
C1005CD0739F4992FA57144737B423914FDCBFF82D6CDCC67074AA022EF8E36B
F6865193A893AF46DA6657CCBDA54EEE6EC9ED5C99AA459E642779F9725227B2
CBC924D5BD45DC2DCC2577B99BF2D443EDBB21313ABD7CA27F67A47329EE1490
A438FC92378B3676035BD198CD421FB33CC8FFFB26AE428E00FF84F7F5E65356
8F3309FAC873282599C797C28E57EEB545A0CF37EF13F7DF6AEA9752078D32C5
6174C089C1ACE9A25AB356F64411C586370736BD9B84D511C059C5833AAD3FC9
2FF61875265C95B68BC4ECB560C9974FD17123489C636CDB91B48B6EC805C06D
B13172149C7FE302DD56D6CE4C63DDCA66FB3DB12172979847DBE850FABFD0A3
284EB0A45738474E9CDA626DA9B2D428561AA2C726D4560BC998369BAD2E0862
8C4CA2B05EEAA266AF283A59804F6B1057A244BF56DDE58D4D7939632FAD0E90
659DBCFACDB7133FF87D3C4689BEE2F5EA9BA7785BBBA0C64BE3669A6323C632
6F43123E8377DB7B6708E752A1560373E21260981D9AF2AC90039C3E8468D585
9C039BF270B332431FBDACE3880F0FDCD542FCC7865922FA57F3EAFBF50F120D
FF12EA68D9E2BC71837418069B8D0669F6C3677097AD6C448FC89B3D087456C1
EBC7A84D4E167EBDAA60D10BE2C9C88DC0CE347C8051800FD7208B1CD439860E
3D281F9A208AFAE8DD09FC1CCC35F44E8F94D08C23A8EC99EAA740490CB703EE
8DD795F8E0255EC75862ED98A21288F59417F741D6826D8EFFF412505BC9D80E
5D1D87F2BECDA975FC4267B9165092CFD17E921435AA3974174921B78F91098E
4ECFC5392CDF9D15C9EED4A009C32032A06A0D71A78835FCB148B247AB10104E
C06628FA6D673DC167BE892444B01A77F348630663215B66173B5EE93726304B
9F66B31B52AA797A92E51FF8846136164FD42F9C5859B5D68B483865EA85A70F
25F39B1C4F9E74DEA7006E75F612B6BD66049E0BD137277E62120CCF735FA64B
DFD550E16A56CBFC492AE87D23D5AA7141BA27F1B28C299D61592D2ABB5EC57B
C6C764D29318B28E9B5CC126B013788E86D6605B7EB19CA720F69C1C5165BD19
BC20C01FBCBCF5AEA591233DFD1661CA8B9360FE39F964E2CCE69049B8DCD434
7F11CA6475E11B937E2404E5932B32A9D50391A87A3CB5D19CA4CB4D285C44A2
55A11ABF4C007CA4A1CF1E786EE3AE637E9871F218BA04BBCCBABD743EA5D4E0
32CF4C88AF743695997FDF88511002A595B911B57DF7D7F22BAA9D8698D73DA2
72090E6F38B3D7AAC4FA805320B569FF338184EBD6477F24A93E08A3EDB446EE
573A6FB4219234098DC683EFCBD377E9972645163E8F88F1449227A42DF1A7B1
96699616BFF89254C5272B75752F72F98218D222AC17A192B4239DCFD2F8FF47
E730A2D3C35C0084114BE015D69B55F15242A0E58EB4690742D872F3089D1A14
91D2A8D89D2A62CF6A4E8F690D715C22AAA20B685429BFC59AE5547E495D5009
074D2EFACF38B5F68800000FC81D9DBDBA5F556F05B3CE9CDB925717A881B476
143072EE480DB29E416D5B3B7CB9B9A3CBBB6F2636BDFCDD9012EF6E041DDED5
06F1725D72
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(incompatibilites_LuaLaTeX_LaTeX.dvi)
@start /Fa 130[52 1[52 1[52 52 2[52 52 52 52 1[52 52
52 52 52 2[52 52 52 52 52 52 52 1[52 4[52 9[52 2[52 10[52
21[52 52 45[{ txttECEncodingD ReEncodeFont }27 99.6264
/newtxtt rf /Fb 22[47 8[48 102[46 2[46 56 32 40 36 1[56
53 57 85 26 48 1[27 1[48 29 47 55 45 55 48 20[52 2[32
23[49 1[42 24 1[24 44[{ TeXBase1Encoding ReEncodeFont }28
91.6562 /Utopia-Regular rf /Fc 192[66 63[{}1 91.6562
/Fourier-Math-Letters rf /Fd 135[48 3[34 41 5[87 3[29
2[31 48 55 34[59 12[51 51 51 51 2[26 36 45[{
 TeXBase1Encoding ReEncodeFont }15 91.6562 /Utopia-Bold
rf /Ff 167[84 3[82 7[77 2[51 3[83 21[50 47[{
 TeXBase1Encoding ReEncodeFont }6 131.985 /Utopia-Bold
rf /Fg 54[66 115[83 66 59 2[69 81 78 97 62 2[41 5[73
72 68 65[{ TeXBase1Encoding ReEncodeFont }13 105.588
/Utopia-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray Black 0 TeXcolorgray -118 -189
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189
a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118 -189 a -118
-189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a 1919 -21 a


1919 -21 a 1919 -21 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 restore

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 239.47311 20.11674 moveto

 -239.47311 20.11674 lineto

 -242.22429 20.11674 -244.4545 17.88654 -244.4545 15.13536 curveto

 -244.4545 -15.13536 lineto

 -244.4545 -17.88654 -242.22429 -20.11674 -239.47311 -20.11674 curveto

 239.47311 -20.11674 lineto

 242.22429 -20.11674 244.4545 -17.88654 244.4545 -15.13536 curveto

 244.4545 15.13536 lineto

 244.4545 17.88654 242.22429 20.11674 239.47311 20.11674 curveto

 closepath

 -244.4545 -20.11674 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -240.94797 -3.0964 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray 0 TeXcolorgray 1 1 1
TeXcolorrgb 2876 -15 a Ff(I)8 b Fg(N)g(C)f(O)h(M)g(P)o(A)r(T)f(I)f(B)h
(I)g(L)g(I)f(T)h(\311)h(S)30 b Ff(L)t Fg(U)s(A)8 b Ff(L)4313
-43 y Fd(A)4360 -15 y Ff(T)4429 17 y(E)4499 -15 y(X)g(/)g(L)4687
-43 y Fd(A)4734 -15 y Ff(T)4803 17 y(E)4874 -15 y(X)p
0 TeXcolorgray 1919 -21 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 423 a Fc(?)20 b Fb(I)n
(ncompatibilit\351)e(avec)j(le)f(package)h(babel,)f(dont)-118
512 y
SDict begin H.S end
 -118 512 a -118 512 a
SDict begin 17.39995 H.A end
 -118 512 a -118 512 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -118
512 a 0 TeXcolorgray 0 675 a Fd(1.)p 0 TeXcolorgray 49
w Fa(\\og)50 b(...)h(\\fg{})-118 735 y
SDict begin H.S end
 -118 735 a -118
735 a
SDict begin 17.39995 H.A end
 -118 735 a -118 735 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -118 735 a 0 TeXcolorgray
0 903 a Fd(2.)p 0 TeXcolorgray 49 w Fa(\\up{...})-118
961 y
SDict begin H.S end
 -118 961 a -118 961 a
SDict begin 17.39995 H.A end
 -118 961 a -118 961 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -118
961 a 0 TeXcolorgray 0 1130 a Fd(3.)p 0 TeXcolorgray
49 w Fa(\\decofourleft)24 b Fb(et)d Fa(\\decofourright)-118
1190 y
SDict begin H.S end
 -118 1190 a -118 1190 a
SDict begin 17.39995 H.A end
 -118 1190 a -118 1190
a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -118 1190 a 0 TeXcolorgray 0 1358 a Fd(4.)p 0 TeXcolorgray
49 w Fa(\\degres)-118 1610 y Fc(?)c Fb(I)o(l)g(faut)g(d\351clar)n(er)f
(la)h(police)g(avec)g(une)g(instr)q(uction)d(du)i(type)h
Fa(\\setmainfont{OpenDysl)q(exi)q(c-R)q(egul)q(ar})-118
1755 y Fc(?)j Fb(Les)h(fonts)f(sont)g(\340)g(placer)g(dans)g(le)h
(dossier)e Fd(texmf-dist)p Fb(.)p 0 TeXcolorgray -118
5892 4016 2 v 1810 6013 a(1/)p 0 TeXcolorgray 1921 6013
a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray Fb(1)p 0 TeXcolorgray 1970
5951 a
SDict begin H.R end
 1970 5951 a 1970 6013 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.1) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
