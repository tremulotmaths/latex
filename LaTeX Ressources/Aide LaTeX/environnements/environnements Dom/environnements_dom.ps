%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: environnements_dom.dvi
%%CreationDate: Fri Aug 16 15:21:35 2019
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold Utopia-Regular Utopia-BoldItalic
%%+ Utopia-Italic URWPalladioL-Bold Fourier-Math-Letters NimbusMonL-Regu
%%+ Fourier-Math-Symbols MSAM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o environnements_dom.ps environnements_dom.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.08.16:1721
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /square put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90FFC8EC5E93415
CEE8039BB28A5D76F9F68D7637DF098278D8A99D797D4F0169E9946893AFD3E5
7973A009094890C94D3224E75B576439749E63B7B1D7D501B561D3E184A4788E
3893178EBCAE7FDECEE4C72436F44B4F3452249DA4FF5005A959C34ADF2D9D5A
EB2B1483938BB1554AF95F7E0B679C0D5FE02E0CF9AA45628844A54272ACD915
2362D162698BC6F7535E14CF202C75FD9B58F3876009CC5D804B153916371ADF
860312500155CCA40C37B251270944DB64EEE0EB5716FC088AD867E935B40F3F
EE29A68FBAF8F95762FD3FF5A5A560FD903432A3A9A54A710D942F8A6C4128F6
5482D34E2542A74A0B5C7FE79F79CDC16D3D574A2BA722EB0525A5EF81FAFD69
99AFDE5158AEBF878BFD7FA9BD8962186FAABF1E2593031D084359B02ECE352D
E5D3D4331ECE4C3BEFD80599441F6C28F8FFC6DDE8EF94BE83EB86DAF47CA940
706D4B043040AA2E719D767DBE0D853B0FA15A4D58DEF4812FDF9458012EC691
73C8EAEC809B80D04EC0A7F06E07EBDBC6F9BC7733DE3F7DD495DAEDFC651D4A
329919AB72B8EF795FC391D1F4B1B3CFB3AE8D5BF42610E48E18C515610AA977
88FADE52905B691435176F4BBE80618AE6B86D98E1F393E24CEE3074DF7C7544
76591F390E2395BD735ABF43B96CDAAB034405E456AFA4A45DE9C0D1C9F4657C
659E233E6930DAE802AFA849346EEF63528E67F739FD8C584BF5F2330AFC6861
6FD4EFBC7133DC0B71114BAB2F1E01799A57F82B0DC22D42426A9C3A2032D7E9
A167A02EF8CB8F8567D37C24D129F55C89C3D36D2742C651A69C2272740E7B26
42E0172537224B8B442A1756F8A44BF8123F9442C97B78FC23239C6DD31FB565
92515D5D450F37044F72829669A06855415A52C262C9F00D59438435E6D69181
3CEFE43FE80E8301B091A9B0051AE24D4B97337D621768
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7846985ABD6DB9B1404A5E1EE79A612F3F94DE12F21661
BE7E591D7947341AAD30F1FE76501224D644A36F805D33FAF448F1924563210A
E3A16A2A43888775646288E228A16F187998265F9861902FD93DB17DC1A0DE35
57997B95387966353736C5764EB5B351FC2F71C40BB26726AD672D8ACC72A4B7
0B89CDDCAED202BDA7E803F7745E7E978D666971730057B4A64742140C81DB51
6E547C662B898F6536AD1ED8CBED4CBA5E2BAB2689EF6D16FEBF80410280B323
F02BD6A726EBA19D288B30376787DCCC4197F3E95CBE949EF4B833D951CE840F
1F0F037DDBED1DA53DAC2D1E354118C14F4D27F1890A7406C5CC8B9AA1DFB603
863FA67D3BD8D22F960F9C8C5FFA7728F379FD8E34DF3EA0718B4ECD51553F25
9F8868ED28AB5C9DB4EDDEF0B7F0ACB621E3AF22B3FC13BA014E2D1D3FC9B2B5
D21EAAD7AB4FB0881F7525EEF435ECD573153F3C3478F7811D09450FB58ED8D2
ED10B9714800B306BACF3738D8EB2673234DC803CFAF4ECA0423E5B04359EF84
312EE6952ACF0B77A4AE07AFA4423177A81D95581A4247975F0A6A6B09147AC6
2ECEF68A2A2993E8657F47DE092F721A2EE6E1D2050E48DBFA3FCCD44404D3BF
5CB3D9FCB29E793C5D6ED62F12D68B90F29206BB92A3F801177BEC1F28EC7B1C
B6ACE8503C9BF8DDD904FAF6AB019A3AAD25E7467ACA28B2A64B8980F8017A84
BA6BCE39449DF4A65ACE61D93D8BE9B1CA9524457069EA8231DD2AF5754AAD58
969B0459DAFB515227EF2E681CC91B8B50A5B876205C693880BDC6E00A0778BD
C7980DA3F7144E7C23F7E891C29E74D5001A7EBEA4299653008B048DC3CE5EE3
0FEFA77BCEA2BB875975AD031E889BAB8230AA2F260374BA840BB625E227C139
48A609FA59E7C7FB7EF64D6E3235FDD56564A1FDC0E95261BA04D7F0263437E7
88ACA9B0683F0CED3FB3C6A9AB5C9BF947F1C2149E7F53BDC81FA3DEF700364D
E2CC36FB59DC29C3B7386767ED56DB75A9A8DE10BB7DC99759FDF767F203C360
C5CC9DFEF7DCE4FB1E0000FDAA2E2F1D141C208B87D0CC034B2389F51C496ED4
0FD8C2EE0E7F235DCD54D459E6F729E7E3BC071366BE69BA5D116C2B216EACEC
B5F78D4E5D9CB8843B02407FBEA91A5C184DE1FA7A489FAF991753EFBF63461E
D9B5E5423E94A49B89F61D2A294673F2A93F60D8B871960ADAADB929C8FD4E43
C6FA8AEBFD07C83198942858C96C5C471444AD37EE4DF66ECBD55D505523B4D3
2D35FFF8F12B3911E199F44F35ABC39591932A00E38EA26156ECEBF15BBDDD69
B474138493C5BF53DA34F2BCAFB8ECFC15353D89E36F874BD73323252F80D92A
EC331574A6605806E3B3F8A67FCFA28F83EF3C473CD2B7AE6C6F86708AC77678
54A502156CDDAE9410BE39C1AB337D4DA610402019C5B1D5CCDA02FA36D6DF5C
20801779FBC3307C39F5FA2C09BA5CAA88DC526C88F040E7EE32051334C37230
24E23D330A5463DF739FA28BBCB712C1685FF5374BFD8FDD146739924A5F84AC
8964ADB2969652C4CC22A32C2BA1B01A8F02C90D61BC146CF135C2B69D885D9C
2EFE0D82006EEF2B4088AB5823056EB131445A240FFA7C50C69854746E139461
CBC2995DB020FB69C8C12B5802AAEA741A45714AC8DEECAB7FEF3E9D87B81FAC
0D2FA4F6024212DB0D7F8D3B7857D39B489E544300A78C0D1CB9BC173C7B3033
BA860AC84223B15C93391F2BAA9BACAF1E05BF925A96E6FFDF4E2057F8731A90
68CFF1C8E6F121CE75480E5EFB6D36F9F210794855DFCA49FD3906B7E1CC83BE
F6255B3C0695825C007C719211DB3B178133D8A865B9780F83AA8B929E806E91
5068C856643E9AF2E10D99F17804BFE7ECCF61389F2E795CE64AC043E155ED3E
27B6F8D6B5488A941C64D12DDB84C76CAAEF393E2C728CC31228559BD618EF00
DB230CDFDD26D93214B50D47B2722C3A48C18BE90D87701197BCC03EE4568524
8EAB3AFF4E458AFBEE2418D70D717895A4C59976A32ED36E8436A60045B67533
CE5E909048CF2F4852C673ECC4BB82C205A8FA8140DCD7D304989A0D04B32F8B
F5646FD0726C679A4F3E27382663283EEB4E10F86C7E1454FE2208132979DD59
336B57B9B390BEB24A8492B51AB884232E9D121ADB66C6A313CE604A4509E64B
0DA61C03BF43526E7BCD1EE19E6801A63AF2BC707414BB4E6E5A8F90D0F4FFEC
436C4496864C84EFF5C2FC3FC6CA174E99FDD20198F15EF483545173C2FBABFD
A96B73885E3AC77CDDF5F9B7A6F59A94041FBF6A907F9DABF9EEE73B02661C89
26E4A0532745079FCCA81CF3203E8B4394448E0C9D12EF8F32405BD1E4E0BB52
D4D78B33F9C551170981B4344051A2D44CA34B00B0F3D7FF9E1C7E677B490F30
507B77F0F847C6D273DDEEE474D81B9D2DB0E53D0A1F5C189AC7FE935398E1F3
D8D4A2E0C4454AAB9E4C311AF75CE95448591CD96F95859662F35A17BC5141CC
A040C9F83CEC870AA6024087EDF765137F2616A531F7F4984C9B98E26BA36120
90F755F7F768D8FD3C09FCA1482AAE41D986F7EAB1DAD9709B2CBE7B11D941A9
2AC57940FED2309EC7A6B79E82C78F4A24B14FA0863B5F6F587ECBC18BF60722
7136D374E7AAAC9C7D636769EAC1C58A5B5AB308426EAC05671D408FEA5231FC
9E46D1727EA2FBDA798737C8A9C98B52C6F52C7CB0F619186A1DA33004216129
64B30EB92C4D78EF49DD11FA1D78E5F7BFFF8E84EE70CB016605109A209CCC7C
DA06836DD58C40DCB82C02E1E1F3E062B1E3401179E6B6067076F88B3EC71F8A
8BA4DE70EA33B6E18A5B930F80E0818EA1CEBED6FA159A247BB46DF5218484B2
6BDDFDD97CB26C052F8721B947EFBB826B7D5CB90E7759077B37CF09E613A8FA
43D4F7E8A4248C6F8AB7560B1582FA52B405EEF61971FB232FCBE3CE84D8616D
5F70B024C66DF408F71D0B8DF70606395A75C9E4EF8F8F348825008DB10D78B4
451FFCAB6AC4CD46A242C1A593612989FC5BF19B58DC72A5463EF6D0CDD92C0D
3BB399C6D544C238CD2B8B554985CF075FA94A817F38A47990213258CF31C5E5
038F07FC106467CEB998B4072AC8F1CD869C45D65BACFC8DB51789D7076DC5A2
A0DA365847FA61ABF9A72CA9A6C61647A4F5ED86AF6E6367B2B40D9C7D48DD6E
D2EFF9D66972629414ECB8AE0AA503D15FBCD34F990AE3FDC75D8578247FE5AF
EFC01104F02D59EB390801A1195C6BE9CB49A22AA095404C3B7A0D2BCFA57547
9B224424B4DEDBA62DE9A66C380BF272BED1B9D4A5A87C650C2BFFE80642A473
B59D542319CAD3EEB0A9E3C168CDEF0710660B66AC7121185B0DBE4142FC17CD
A4B5F14730C82659809D9EB02CE8EC07EF3494B4BBD6DDC7E9DB4597C61B12E5
B8273266E17A44B68AF6105A4FB59B11A471E174D0355D50E70F0FC4509D1F6A
D3732174D47597E676E41F91103923F3691E63FFF6B9914E1AFA9ABDE584804E
328C56C0B528626D562AEFAF2398A728020837031D7FC783AE7BFA1DE75618FD
B61459D579F59A74CAD18F35EDC17497128B693FC34C1318657706044BD0588B
2A644B2928626AAA3B0D740046D971A023FA493C52CD274257C3A77F5F55D30C
3069E5C568E71D1CBDC709C04587BE812C75D98EC86C95BFC3E9B0FE35F272BA
B2D8488BFA8F1FBA48770D0A5EEBD30A7F80FCE49816F0C8E94A5C3A9084447B
36387A5CD351DFB53011C921CB164D3E7F42656C12DD53504B48F3B94F7AFF21
4DCADAEC73B57211E5081EB835631A5D69CC6AFAA5311407ADDD79A9E39C505C
CC846B70A65AD823EAF016845F0AB09FC599792AD669E195AC6822953C2EF587
A6D6C04DFC4765BC79375D27C7CDC69C261AB68F30AB29E8F1593D3D6592C07A
6C0327E82A25069595C826F333232849FAB1495E0C5712FB185EF252AD10E16F
E5C7A714897CA1F692BE4378E1C4F6BE278D46282036EF18084C917A134DA44D
955FE160E379B148AA93A8CBD328EDACB8E3A599A61DEBBED924E1B12A032418
B93228959F428EB913E028C1164DB091707FF8D171FFC3A46418D14A5C170209
3A311F072F168AA3DAAD303748CA4E1596D1FF504DB94CE110143EA4BA181B40
83D59A06F0454B59A250AAEE3653056DFA5F6BB181AFF8C485BECE6EB1A57D8B
DB3D7B508A91B883DF2B766D1C7FAA4B8FAEBB5D60F011E32B7C0B2501E3ECE8
11F66084397D45EC61E191A1810E584D473A1A8A67A5061EF39C60F59C374DC6
AD4A9A9DF9551D56E47ACBF48C182FFCEC09C01622C08999E3E1BB901E688961
28C9A08D4A43C3044621CB3E57C49887C1D62A57EC36BA2DBF966368624B33BF
71DF2099BB293FC936BE1403752935F25D88067CCECFE9F227B5BB9656B33F74
03795FF5D7964228AD7A5A9B0421A92E73D2B309FD3FD78147524665CD2AB7CC
83E5F07772599786B22AA3FB84C5EDE3D7BFFEF7E2DC5FACEF493B08B942CA1B
C0384018C92555B5FA228A91A912C5C0DB82D5575E290E9F234CF01F9C6D90C8
6E90DE9ED306DCF1BC31F72515E5A4D7E55250C518558C496994773FCADE6B18
A21411CF6126D1716BB2247FC589CD92C1793C9969D0A21993A9B392A4FB443B
CFE4741219C14A5AB8D645F9220C5FE36799602E3125D2A68A1C95748F045EF0
D528653FD3657DD283E1BC19A5F2E031CE54E4EA8422B6E2806206612BC77E20
E79BB89D9850C1B834C21954E0B91E213252F724D5F390F6DAFC31BAD8315F13
34FB651CC9278186CB0B1C4C7D1BE938824230F0A147DC9406DE741055FB2A1C
F6C4772C79C3593BBB3EB0E9201EF0CA8F551282032FBD3166EBAB34930F90A9
C8FAF9254DE334F73683CED56C3F8F439F80E2890280FE57F6CB0C8520A55FF2
9A67EE9E41FE6C79868968101A50626A70E8ED74EE7E56381DC1E4B7A4255CAC
79805B71F1E3B18CDAFB031825A6D56CABF028FDD37B53D2453DE9014882A7FB
521EC409DEEFA530A83E16FD4236563F49920F9A07399453CF9F04D61B7620EF
A9C42C7BFB2093FB034828984E18738BEABE5E009C6F55787E1ECD23DEC40E67
6EA49E28847892F044AB17C70003D52EBEC5FD7A60CDAA091282500AC8B72411
E97281482694D17BC8E931D44D89118914A9125AA09D290CA4C68EF82D01A356
CBFE5DF6EDA4DDCC90EA538A55142025385E287A3AC6AB3854002FDD16A3913F
27F11E9AC04682962841EB76CBA0B2C2F1BCA49C711F6B3C4B9FB34197C1467A
F999FE7E9471210359986F174E411E0C7813C2AA4A9A69B7228789672C4F9691
9F5A4CBAD8D78B073D04E26729365CCD18471A49B62272F5BAE4631847CE88DE
C6EA3C963DE5D771C66E86CB01851D492BA6A726CFD5B6E4B4A8468E616771E6
FBA194BE43CCC9CDBB04C060FC1EB0722C162E9587C16E30AC81F9D773A3B7F9
BEC590EB6E1BFDF26C7FAAC01FC9598E9E5EFEE39534D67039FE96DE745DFA4B
804B0409836EFE7ACCCA5D4EB1EE78FFB2B37BD4F98C14FD6E83DAF59B019857
872D81D4CE0FB2B2EC7718F85A932038583997EA0C19B7D84AD4180E99314030
7F2F2A9FFB3236B881EE4DEC3279785B68529E545232C74B7B97CBCA28BC11B9
1EF49C36CAFD8B32CD50BDD780DDD4C572764BD1C519E630125AE03ABB958DC8
888051E52B2A11FC238CF0155E7DAD9D85DD15130B59BD9BBBD0BFA26E66BB8D
4850D8E8DB82F9C5D4445637ABE0ACA665B2D57D9200B960B965E9C7C5826D88
13326765DD438F544A14ED3C6454DF455ADAB01E30B2D9F88B76F02ECD75AD98
8AD2D1F4DC2F864AA7CD8A23839603D337AA6176F04B9C181469012842AC4891
0515EDDA5B13BC0BA2BDCA377484BE282F92BD7ADA0071AB1BB54F35D22FCA67
408A962ED03DE39DB9556E7C9A4450BAEED417807284B877DCC7B8F2C72E10C5
CCB3467CFB383AFCF7F34C81B0BAAACB58218CFA01940E07846A63D9AFEF22BF
3645D4AAD180CDF441BB5948189E7A094D7889340F038C4A68EC0355E52AEC85
21DF8A0DE70578BD9C765861A950A03B5D6AD11645F2ED9EB200A618182D57FB
18DEAE119F11323AB2ECFF6C310AC56A8C17B6F7B3D53C0B6D9AB9DF15F1DB63
F5B40CCF6AE0C276ABB12ED7869B28B39E500E1430FC3F4CC3E3EF1151CACCC8
49081A45933425C0F6457ACEB39386F0C2ADBE3B028C2F73CFE77C698542B394
75B7A9245CB387A5E7AECDF92CEF1B7E9D687F526CF5CDFAD06D5CB217F8857F
E0E99304876FAEF1C06791566FFA422188BC928DB56203DD8A41EE4E5F2A75E6
59365C1A48ACD2A7972364FABD6E0DCEEDC1F15EA29002E5FD0A9B5A26205F09
5FE32595B2F9E20CEC02E3251BE2E08E3664B7D51FF13A63E5883BFC16E5EA9D
19EE8175E878DD5C996A3367E5294D3C637C34F2A4EDBDD0F026052802E70BF9
9E708A364F251850416B790E8B4CBB917A02D65DBE6F08D69F8EC12BD7727BFC
D535073CEFD986A0587C63986A42B5445EB9BC726906A395B45483E7C3EA0521
D32022B8FA27FFB7B91007257937837DF89B62F4C0003E6F23293745DC642E6D
74CE0A21281D3155515FFEFDF1E309AFAE9F03070D98DA8A349322561746D69F
860DA404D50D1330A787D0F8712E1BEC7272A7DBC384F1C0EBE595243EFB5F1C
C88D6E6491D7EB95ECF4787CF3CB1F47A5C1C43E55CB6D816B53B453B76F7D4D
9156610A21D8442652673CFAD49B63B96D97FC546E899C8BC5165EEBCFFEAF39
F2FB995A4687F859FA6AB02F153501F72EC8AD6C18688DB56FF76350238B1116
F2373909924C43DDF2A24805B0C79243E8014966F4C862FC935139CDD190F686
D6AA020E4925CC1A998112FCE113D6AE10ABD7E9CBBBE8F9B76A8877985FFC96
CB116C72F915962FA074031B8EC4BFFEE86744AF31244A011A513BB62BE54BC8
33576A95F084CB8BD753C0119C5CB69A25CEE99935F9CF04F9ED5242BBCD56AE
94216196D29B5D1590C702791FD9018F85E7BA1AA64067362104E6FF7F6CED9F
0A836A2AE8C69D2C5A04BDAC79D6492D71C594D33B30DE0A6B1A98DEEB675EC6
298F5A30021665342FDE538763D649704D42BDDEA6EAD3EB497D16DB9B6D48AF
D2AFFAC5EE640128369F83AEC66C95DB634B20601321CA311947F0D4874EB9C7
987A5AF418215BAD4D4B627166E455FC5FFFA6CDC5427B17350001592D910C5B
EF5D34E7F747AEFB68085A4A0353289AE610630660AA53EFAE26EA9691554760
985B48A30536AE7B9E288A4C9A854BD22826FE33A43FA3B04456045B5D24DF96
545749531EAD8800C8AFFC077FFF1428AC9051C9F598EB9149B34720B3DC1D0E
906D9F27742EEBB61FAE7EA17EC97639C09F39E2C0AC07B0B2B04F418525F268
3D5D0A658C0F4ADDB07307529426C7014079D2B2064A9DF7CC25C29AC3EC15A7
4FBAF611F192F46D36A12FEB3E3D1EB9D50B58E530FEA2A363C5DF1C7D42B0A0
352CB1FD0B4D9183CFB3A549F65CFE7AA3015565724B584B357D78C8A1319577
CEFD55B31A5CCF22F5C2431DEECAF3CE272B57054140F1FC1BA2ED1809A5FBD8
4954BCFC767ECA4025390D93083A8B406131267BAB5112E6BEFAA4F7CF0AC52B
861424C80ABE25CA74CB4846F4872F2E6FFCEE1A394B894575BDCDA21638E5C6
82AB9C66A090BCCB74424422DB6C44002CE6D1E96A4EB0290817961C043DA01B
CC1EA317BF5068874D57532CCCB5DE4956F7D020D9A2AC777312BF482113B36A
71AF6CA04683067D523A618CBD3EA6F45767BD17BBC49436E16F442691247CA6
97B85A1B3BDA157D238C5A812A9357F865A4A45ECA515CAB9EB89841EDD7DD4E
8CC635E6D10EDEA82BDA17AEA10C9855A8555133E6912ACAD02436FA6AB95516
E4CBC86B14DFAD84437F70299DAA1AD7D0AC0C30796C9D24102E3E79FA4E0BC7
FFBCE183CE7577A0025DC21FAE81C9C4F55CDF1758FDC5F66F83BABF1B889825
105723C71963F36804E0D2F237E45453F7B47E3A3DDCB930E87484723F600C62
05819EE8E163DB09BBE50C8BF101950184164E42424C948857345789F7773199
64639CAB6F9A367623720A365E514DA9100E8ED02C9CBB7800EFC1895221BEDB
26608C71DFD3ADE6305BED5E3FA486E094EED2CFE34227238697945BF7BD7826
3AC3C2120E3F1FD258F57868F195E2709E0CBB9AB2D58FE647326FB8566EA645
2B1ACFD48041C9C461BB0E2F6D917A802737C379A1B3697F30F86EB2889D23EC
2BB5EA3E51F26419E4F13A611CDAED935E04C154076828B4DC3955E417913851
12D36848973E601059133E43AC2F5BB0BC9DC309E1619AB8551EDB1FED5AE7C5
7E4C47F8DF4DB692B362E6BDC00AD94AB7F7D25A00AF29A59207793C57DC5FD5
5025076893BD9A543F2BD7F411738F4F7286258B31347AD4AF29F25C8C4CB4C3
DD6BB3650101D8560B139C96285C8349624927FA6FFED2580475A3A2893E03AA
36B52DD965009D2DBD0344A43FA61801E09B36E37DCE56E01BD1EF8FBA216D7E
EC3391A5E3735C5E2C7880840BEAC76BCAE99FBDBB9D457DDDBF7658D6744BFD
9DB1B909F1CD5702CD2E5252E2379734E9F49C0DB8AA8931A2FE79603CE71AD9
F2AC4C818EA103F175458C42749FEF2F0E2417CD39A792574758249035E3EBAF
31C8F167E24E5B782C98108426C06859740A51E9402E71DA13C375DF33D21E78
0A35F8356ABB9A75B7DCA450E93EC6C6403EA8892BF0BEEA6EDD69083AA0AF65
37F5EB813C63E29821BE0A8F197672AAE32B2E763E1F51E8C8E7987F60639157
DC5DC79BD18498AEAB8117C3E8BDD8DD0E3B559859C6B14B2BBEF7E8CBC0ABE7
B3E491BB5A6A5EA5BCFAF194E8B032A08979AE76176E5788BC2F019AC8286E61
627505955A97F7B41B150CED0B5CAED363511FAF20413E93451E3DFFB974E879
78772CA3F79832DEFAF2A7CA03182967543D7D8C4359DE1918D028D47167A159
265490C1CE37D4138087D9D594055EA05DCA0FE791F95602D680134AF28C5766
7A4DC493FD26112C79D25A0AD0ADAF7E73D12016975E45F377C4189D8BC536C7
E047F65C666E5A26C0DE810D5A19A6D3CE931B60115BAE6AB6C4E1E1DAA03AFF
F9D6B0AF4290A839440D5033DA0E20D9A28646A6C48C36FA0857C29192867A13
2396D562C055167F6497C9C4BC36702B3F48124431F8A6AED252BDF993BBF681
F43E8C75DDA43D30C33DEDC839D2718CCEC097E3A2B424EE652588E3C1E253D9
230D889ED5CB99D586235534BC09FF5FD4F336A9B4B163D051B6ED3F43AC4790
F70C62BE5643D90A265E177CA3B5D2C0A36EDFC21DDEDE7EE2E5E247871DE16B
5C9F875F92C4620CC7CEB974E2368E570964C90541A218FFD4095F89020928D0
FD7FBC2EFC61EB4BBF074F3FB85CCE4E01E499345079327C6386195CB158EB65
C90EBD992C98C20FF9B0831A40FFFF75ED0635D5874906C7D437A91D8856B9EA
E6696DE4D14258D7617C6DA12FDF4B5AC7C1EE1C4293A042585EE99FD49D0BF0
C562C32CE2603B08868F0F26B2DE088289253B7B331447F5647C34D2FBEF4701
90991315D0F9FE44C8090434081D6650F1FE71854EAAEB5449B9E87E114540C5
6AB526D2D0F8635703C7E82B5BF71922771DDBCE0ABE02B225CDBA2FA4BC0C1A
260049F134828BD05416E7635B91063421988EA0AD80A5451871B66A9E542684
F7EE03D166EDA1201BB7819BFE9772C9F19CFC3F3F78EE6A9BF7857E7F557567
7772F55552E6B19A25ADF96AA9183056C8FE000BC58A73660768382649EE4D7B
B33AD0F7A13EE169EEDBE4EC8254C40D7F53885AE2C67A865EBBCF3F71CB6E61
B56674CB9233639D38159C8476CA8BBD43F0D3F96934E053BFC356A63FD9D4BD
83764A37D856213EFCBB3D0B0486371F1F8FB67C9AEE4A39EEE6E21DCE5AE92A
9089683DFC8FBB40B1153DDBC03ACEF89925CFC554ADC810B00AD2310CF91435
266315EBCFBBD972E52D995EECEFCD64B4DD72F7CCF671E2488F6B0E40DE1293
CF67C524702A8F024A141E0FC1159E1AD5D37BACDBFCDA7CE8E11C3E02E6E908
65EED4B73664581BA1551DBF3F1AC0969C1834309BB66D2BA8F121ACAE7AA45E
5DF518A616B45DA470700CF48BD8B9A6F995E7B0186A901A3AEA64DAAB376624
1E4E7041CEE0E1B13FF06F46D46D6F0B5A3BDC667EA1F0CBF92C14107B5BB8F6
AFF7DCA42E6B8BA5C30C185DDB3403736F02F04B7C1BB85F903AC16D020263C3
71B3E4DEF6282C880B70BFA4AFEAD1AA21660D6184548E5DA8195361B78E2207
CBDB8A7CFF0D9E413BF226173DD592E4B122A3924BEC8D2210B9F002A7049CA5
44672A851E70D587DDEF2EE8D0FE3627F7BEFF648AC82824F1BA3C5327C86634
67D2589101579EC7E7366BB970EB31C196B01161705FBA3BDB500A0B0B8D1C93
17EB4CE32C92444EB377CFE5C9353B163E07E33179DB2C4F30F56814E4D178A2
3D8B9D9AE8676B37C0A1817343CE36626AAEBB9075A211C6FA2DABE2F1A817C5
38EA7D410D1A7C631F76AC8BBE637931C2413E9C5122A12860C0F5C515564484
F88992B036EFBCD54039208EE5DEBF76EB2AAFC634793D66BFF46B6826D6CD02
BE668F239667B2EA5C7EEE1074D5674745A6C7456C63C9B90560D4FC5DB67831
D73D1837CF1FF5CAC5B7C07930C9AF1E61A5D7530706B5554FC1AFBAA48EE80A
2C89CD0299FBF3B612308A6A0ED399BE7298EF4FBB0CF39BEE5179FEDEC64678
FEAD2E7AEAE896669FA8442C1747473ED6C9B31F2EB808D21C3E9B38814F9CFE
45F4BCB0B429D7321D4471A81ED724A82EDCEDCE50AF4F5216FAD0457B911565
8CE3687FDAC730E31F55339E37B39B625BFC63529059C7B7C7D545C9FB9ED262
A92291FFF95397A9F5B1A1BF65D182E50AC1FAC1A7942690D15D6DE9D4F89DDE
8226230C40BBDFBDE03D211E0534CB8EC5699F1C430F2D8F0E94BB215DFD8AEF
9DEC6D2C6F0574944083775EECED9DCA16D7435E6B39AA70A9C4F13A717538E5
A8518D31882FE1C1E9A2C820DFAB0FD0FF1ED4DE58B1D06D0D63C65B923F2AA6
3EF2CE4281B98C5CF24C715CFC76B176E12295C35B6057F9A210EBBB56A72088
6E4FF6A9F8F6DD76A9C55F64CF59ADEB83536669217BCB8BAE0C8F64601FAF0E
A2F8671DFBA2E13846999CE579FB34B72479D0024D8277D3CC37B0E3B622C683
0E8D3D0575EDB1CA99C5012633CC89B940CF8E9FDD0529481EE2F12A76EA17A0
DC5B2C7112D6DD7709B51F6EE897A83F5E847D618D85A60C946A7632E2AF5793
F52AEB5D701E3D078AECABABB7288B2491380B1D9696D2B0B621C416D8E463E6
E8ED6D254AF22D51249ADEDA1DD45A169A5465D860737ED41F9CC53A19655DBE
CEC30B56AE56E68957E8EE7EBE77757351543E3C27D24DB0385F779FDA1F85E3
59A65465936BF2297C975CA531A5D060E68DE52A732B76C52ADCEB4B87A51BCE
072BC40099F57FA4E7F3C351EE1CAE0E0E618CEB996BC33E47A8F99AC6491468
078633D54EF5356EB665BE10073E3505C3D9644250CAB9845E6D2646002A52B7
312AD63ACD8B7518A548ADD8F2A02263C5D6DBD8A867989320F984867B3B3843
31E8FFF784A0B859E07731E0E46AB703065FF3A3A50EFB6A2912B7F2FD214290
FC54BB196128D2158430F617DD515F6CC525BFF8D7FCA04F5A94CFF77BF022AA
A5D4769DD1804359FAF21B744914C45D9A0F589F0129D9DD497A3F7F572140BF
32EEDAB8DB6DCA8DC9D67F0DEF481FEE29CEB79459B30C6DC15DB20CD113BD9D
19DBBF1749D5913F3C1DC19DF00F7DB449B30B385A0720085BD41F4736959B19
96025233D4208B1E18EAB9D9752FD56297331DFB3480015D1F80DDE966A180D8
98F30E385F19152F8BB4D84BAC4D6494E51CF4F8F91F8808C01494CFB36F60B9
E4294E178E49616E6C2FACA699C420444A6455939FC4EBADDA292FB70B1B6101
5CAF8715882E0CE36F223FE59EEAC66EDC9054ABCDFE778EE5993AB3337B2359
B090018C094D4C8026D143680320C83E1ED17838D6A4388AC9695D7F7D545DFC
478D3F521D1A79E1C7AC36AC8C7E06090CA9326D2B50BBD74EFD140AD072B219
E17CE02CF39D096DFEDFACA0BEF2634AA55FB02F823B2D5D223CC31A2D5D914E
13496EFAE16C56CA528FEB4FE16FE0FEFFDD1521164204C0DB00A0CE777F980E
334D0700E900A7DEAD963D49FD7633E23B498CD0DE18FF9A7E61A9195F335424
FD400CB150E8DD6FF858551F86DDDCDF0CAF931620E8DB3F89320C3DBBAAB886
52FD151E399EABA1B58D3A468B43B1A1D005D577A06ABCD0B89D520E918B1F43
F4B785A1DEFB7346253CB5CAE23145F057E47F1B8B65BD1250D8FE49510FEAB7
E492C61FE03209F7C1DD46971A0DB9C261B42E2D3CB7C48BF9DE9D47E3B512D7
E3C29E8FEB177036DAA5DD05BC094546C23D459CB970AFCCC415E7627F581DB8
AAF9FB4F4E260AE02CEEBD05DDB08B6C1E422DF50AD425E67E48A2C6DB953ED2
92A6047F7AD8105BCC5ADBF9652EAC937B775F52213C9EAE87892ED473527946
AF88D98FDC91A549C478076C8C1BB34761943313F408F5AAF7490D50CB35C749
607B7AD75ABA274E18BA35679B6DE01DAF4541CF7BC79705728E575A12323956
5D1060A7F422A61C8347EB74948A27E54329B65E14F2DF2970129956C71F1FA4
FF431058FE7477386B6619D58AE46CC98ABE8712EC7D62764E118D8CC80B14FF
B65C6E114259F99689963C43DCBACE1EBC75E8E465CB85513A778198F060CFB2
04F2A504082B19270EA6787A487C3872355678F28379F7F7BFD9CD7B75374204
2E9B880F9F2633735D2A68895BBCE921F65B41C33603F9B0FE190A766CB4801F
B6C7663E3C62CBB0DA1E7FF4731BB6385AF1FF9965B72E83B5CB9BCCF40D0326
E8420C00CCBF673354F89F48297AF2B467E3B2F0C412A1C787FD905E60E74420
E7C79B9B5D13DB3959FD340C123BEF83C5D2FA019C3815D25C1802C2B41AD1E7
1BE830EDE7C7E1D1A3E631366FD3F76BBD3DA89B4C4087825C5B9ABC971AFDB8
7661577657BE141E4F97B1F5E1DF730CC1E7B96908E28D4F523F9326A05C9757
34ED3E8603020E8CBC71BF20BD482F8DD81E746437820FEFCC1126C8906AF261
B409B8635975616EA35AFF7C15F55ADBF512F7816A3611A5046E3A4F0C22CF22
6A8A9680250A9EA255D1E71ABBDD1D6D176F925A272B7CEECEAB88D76280AEB8
3389418C439735AB7615BBF4D0EFEC7D6505E477B36C8A838DE4AE71CA0241E1
25983BA3E2095F15EF46280697D350F69EE511D83EE468800388636C76FD6BE2
10151202DDCB2BF7E26C51C3F01A4B6986F47917C66C793D930E98DA28017AF1
516F83594D841228EDBFEB3B91726B8BE013C3349A605B5C506CA0BD161B4F88
68FE11AABD45B58D24FADA659C00B09364C738014D8AFD7D7F0004E4221E5FB5
097FA04A73910D982F6C0B92D7CEDE2A5129587894FF9A979F99AE0564A1A947
2235FFC702ECCA19AA58226E9C78232F080D94D4433F26CFED67746BF21964DE
A6BF5E5DE4FA3211676DBAD27AC66A2F6F91B311BD929F39DBE0741C70837D54
AB0A90A6891CC693152FE8233BBE9DFDB7EE0DB28578F81C2CA7776CE56C8FFF
BC318FA1ED33ACB54B4E0EC5C0A4412F017848982C7DC4603DFA0305E5D50D38
3CEBEF5CC0721BC7ED828C8868158B4500F3ACEBF0C86ADBDA3767CA6D138C0A
AF76501C0CA48BB7830F425FC550393BBDD152BD16411714FDD0B7F0E4606DB9
63EF8D53D7553553D1AEA202ABAC33ADF6A1F6072271634CFA4B99BDA74B5D87
98245222866B7182CF50F6FAFBF213F30DCA560EAE8CEAC1CB470EB11106D5F6
56DC5F32FCE37228ED1000D58871E7D843FF39A9CF8DF78D4C51589E7BD3ECDC
2C923C0503FAF7BB98C2CAF3CDC464BBFF24EA3CCDC34CE3953C59B872FA0583
B122F1C3139C6568CF9D3B75FA3F32414266571220293C162644D1A73FFFFC4A
FD20A6F1134657F96562D5FD4472CFA797D52EF90FF45D691ACEDDEF3D3B26B3
7A650DE81F21F5FAFB072F4946F5FED3A1465FD1CD057341A34788143DD90FEB
A30A7B81A96EBAFDC5C84F0406371CF15074541997B7EFEC15BCA8F053D20E53
F2ECFA7C2893D727929390B00429F5CA919193D870AB42DC929D945647A74166
AB5F47B7307ADEBCE0CF17458689F4BD614F6E4BCC03F8E807BF741292FE5513
512A6A649A5586F7E05DDCBC6CB49F5D5639256F048D3BCCAA7EAAAB2D46B874
1B25A9D07AA582816A43CA95B2161823AD023A8052A2361430881351AB403146
58070A9713674870A79D4A969A39F16FDC335FB93F1C75FCE8375FAA9AFF636F
ACC589AC4C0E1D11834B8E9CB5670B0C5FB3ED53CD2979197D259E69AC0134D0
834B37C1940852FED59A13123F3D4C882652C434FE555954CA5D73027E5B1260
14A8C270FEC8455A80C0238CCC2FF34DCB09A6A8E124E58DFCBC6F3E1B86B9B1
D583655988CC68729498AB80CCD7EA11405AFB5664BCA2B606A320A66156ECEB
522D4E5898888E189F3C6CA33B97F97A4FD3D9ACDA5ABCB5F35270B68B211B45
756DFABEBBD2E52C8CC56E98FA2237D80559EC78C0B1015D96B904D57C690A30
B35C8D84170457D93FE35B499359A0EB090AF15BE40D0157F2835092A4D52024
FDC8C175C44B01B9F65F4914E5E775D39B14221E9AE74D77209D0AA9141C178F
0DA32F4DBD7B9739FEAE9A1B36C07AD94748266DEEEBD534008877DD01C67694
76E88F5E5847E78C90F14E450669AD9D84629FE0E4A635794B19FAD95818A2BA
E33D5A637E3DDE94692DF9D77DDB32C4BD50A6BD150B10BC7FA95ED808508C16
E4435257F16189941DE35F27907B71BE011B71CA6E408E5F165DEF4BCA559277
8E25D87053476839A56EFD4BB76630257AE95385FE5D4C1D39D3E475B37D058E
BA327C4F137E10093AB38CBC5FD4C3CCF2FB1A6B7EDCBCCACFF7EB05B6B3ED74
98DC57F85DEAA8A69AE2C83B750C2386B7F446A10C970C8F75814E3EA6E5305F
D7AEB4B8F67113488D7784AA6DABD6C49B550BC556720998D87643029FBBA187
693C6DBBEC9E8BA32A2366F355956B1EADF7B3BE6CAC69B4FCF8261FDD993320
40FE5916722113B69B2B9466CD55AD8699AFEABB6103E3E631724ACC12BA303F
8AC36B8096E4C600B365EFF2905A075EB99C0A06FDBE602A294739BBAFA11910
5496570D8FD1D9EE27DCF060F701BB3C3F144B35276198536516759781AFC517
E994C0D195B78F7C64AF4C1CC52A2C9497D7867D6DCB4EC7DBBA0BB6FF28C846
0B7798C4F208768AD8C1CCBE1B684C514A96628347CC656006192B3AC6BD88E3
F2E646BF556E172934DA0E2D01FA507B40DCBD52A293E0904F8319D403EF38CA
71DF27A7C1CF1C3DC252C112E82EEF427172D73A1B5251AF2DFCA70D29738259
C0C15CC6FC182D66A8A8A2D867B266D4893510D13DDF36A402CC5368DF1DD5A5
184AD0541CD2D84A156A12274401050E1A5C480E001FDBFAB3E109740A12A3C9
EA72143F5FBF89412EE321FC96944DA8B1206D92D03DE2B56C1525D67D196834
7C2B2D4A7452652537B57725A6BDDAE80963FD183D78B6ED699202886192965B
165D24D7F3F84A4BD198CAC94F862BFA56AD926DE188A3493E15F017D1AE46E0
0AF7E277697E3C156BC71F9B95332D6FEC6F8DE2F7F84397A2D00BF3FE0029BD
E21F350F5FD914192C0F3DEC5317260852C2E872DB01C90FFF3B2D5A31403B37
FCBE243086CFA2DC5BFD7D84A643A433D771C42D38BBDDDF8054501A790284A1
962C283FAE5EEE2638FF19E8A8B182557AAAC49DD2F764F8B7DE57C09218F398
662B27522630ECE45DB45952D797D1D017A68C6AC5AD78D0CFB88FAA88EC8091
AF33D4DFA203978D9D08819097EBEE430006A297DF322D0ED2E123CF23B8CA24
F6B9B6004D05B7B50E7EA98C8A613EC039611D159944C5346F962B550C375582
E1821BC18C26CF5D622D0485BEFFE66D42DDF053670A1646376F4CB9E60044E5
BAECCE3C63C1F0A1A04C7450A97CE0A339A995587B2B01C3754FC1A65467F917
074EE5FE76491FFB6D0515F45A1D1A9ADACE93310F8A42A6B60856399975ABA5
1ECFAD285A78D75871E7B3A01216AC63F651B7DA403604C07B84F3DCC790D0F2
D7AC23CEF10ACD8B493280D09B8EB996266F9E0BD10BC07CC0EBECDB312FBEB0
B3C17D2DA7A81499E36A323CA9136D9701BCFF60D0B9D14E54D4E87755984FF9
7AC0B733FAD52B0C3D409FBB2A754A490A52924278BD0DB7E898ABE7AB5E66A1
80732D4D0E71C4182CE8189BBDA3558B9C8F7E0988BD1B997597853A9651BC15
9D9014FBB5872D90E21C77B66DB5DB449D5BFEF25F0131314D860525E4403B0A
2303D5F2D8DA7DFDA64956C6A66382CE4F34621F99F995422396BF66DA5D1729
85BAF43D4489849CFCF8C7C0526C3953ABC851E39C4FCD6A2C8AA120257E2A70
BE6DFC97BD5478CFC4D67369C3756403F2069721C07EC35E1E8D2B5AF7E73963
47B44A273454CBEB0A3FA3B213549704E2630714AAB3024630DD6B58A8CB0BB2
D712E998EEB88DD14DB6BC4C456D330E7A0E8C3F84F6CFB58C50C8A11AAAD75E
514688165CE3AD274755B87D5857CAE733E7C220CA484EE7D095A501F88A8D66
F6BCA310EA9F54A02823CF02157E32B9363099D18B0CBECC1D53805C54063372
529CDA07E4B54CB7701D7A43D621FBFC2A764D372D3F53EDC5C2C0AFF0735991
AACF72DCC14F28AA8E3BA664EEA23487434A9ECE07748834A4B934A2740F1F94
5B9D2659F14CCAEA1B7AEF72F83E66E045854908BB7C6518EA193D7EFDBAE78A
87C1F84E120351492DEBA59B29B7C4BA3248B8D41E3F950389C50907DEBC1580
F9C7046F70D68CDF08F8AB8A0FF81C139DC66BD9E9FF31FB6EC6911DB33B20EA
AC4285C94DB7DE63EA1B13CAF1F6630EAC9F109D85821932EFB3F8CF77930131
EACB2A38A79B6BC1503AC9AFAFADECC4339D582998ECBFA8358BA0EB816C074B
936FE879A226B32B7B2F5338FB33EE4FD80522EDA742AA9DF162F1A023D9A33F
71807E6E7791774D53E2A898680666A1F0CE8CDB889B3606AC1CCC0EEA5A18B1
580EDCCC8306E7B0BDF32575180CBBE553509C9827CE8D39328FC1ED4BD91B4B
1E1F7B1D43042E9C74C71E5FD549A75CEE7BDFBAEE561F659FEC69243657521E
FE82B236AC75EC113F1137DC78D6E78BAD8F851C90970DC9602C7075F8A042A9
036CB698FAB22979720E3CE6C6A4235995468331796423806452E8CF8ABC5148
0A3E02CA4C17EF1D72F0FBD977DFA0BB13AC652E151287984ABDBA7531347BA7
B1525190747EE8C917EBC9D95163884DDE22DE1FA64ABA303FA35DC838CC00E9
0F8538A6FC56F06D9A66F314A3DF424BEC3A91022CCF4C747CA3FCCFC6C257A1
70D00D8B824170539026B544E042051498F0BEC2FDC7D142F41C7C89A418D876
449D3AAE74F77731083A319DBD5B7D24A1717E6559ACB97F7A8F3B386DFBE3B1
25D6110663E7E49BF434E5C006A95AE7BBC12B1EE6D24F54E2C9DBA604AA3161
A33DB36F09F77D2679D67B43E6D247F05CC03F1139E71E69A2A763F28883C116
9398ABEB745005BF8192E5646238FEE05778FD8F25FD1F25C377E9EB25CA37A6
DE04A363C73910AAC1EEE7BA964A457DD03FBDED726F291D967E11042C274C68
9123241520733BD1C8A66A07EECF19002907688BF5B8E6D75CF490685D338CE1
C5E50DD219A8E356E32E752EBA18B65B2004916C9C42E2EDA2CB0CF98BC6BCF4
966050B18E0EFBBE76C0E7AB2FEB7C0CB8E2F9A4461E7806BD2A24F694BC9CF7
83F54566B5270B0559DB9576F6D38E15376FA0FFCFD058CFB31077F951B75CDF
A5B58F23B2191968E756FB8146BBED76FED132FBF927B55C3C86BB722755705B
075C234E07DBC0125EBC212EEF007C68BFAA697B6C89D5BD74B159AA0B000E62
2D49ADAFDBC4F434A246A38FD3BE5ED76767D7375D6157D64AFD9FEADD6B397D
4AA99E4D9F56D05763180B1E6485BD9A756C2F8EF75BDB3C1BD8B242C38E1016
0AC94479A284DA3BA2312E6C778F98421048AE4AFF973BD08E47478B130F6055
9D05033557C5CF054888125B53047B03E14E54F0F87F9B317A0E0D8CAA2F52EB
8A361EE886068E92B83E511412DADEC33C345ADF37CFD05076D02F35EFB30932
05A0995804BC3AB14A22DA74E5ABD176C5B83D8D1CCFE7C3995B2354332702A6
5C76FA3BBBF0312A91C496ADB5E6E57139CA6AD2091E4365A63362D645E3415B
0668328B9FB06C33A3F38068642DDAE22F951B95BA079A8B2550984CA8B4A512
BD227BA0ED7B8F1C2325ABE6FA4BA9A16E777142E48A234ED6FD24D2511AC916
758010A6583A93BB2D6ADE0970011CF28AE84229A0A5B38392054A6B83F7335A
44F143A7B83DED2A4176BEF4D49B86368C93BCC4D7C2CFAE886DB0E9D4838762
30505E53D54A951EEAF04D974073180D791EEBB51230197B077C408F67771823
6C386C87DDB10F0EE8FA8AB62486A2E15B6714200B83DB467B3ABCB87914ED4C
ED3D0AB23BC00A0C335D050EAE74FCA0471427DBD333CC59A56B7B6615CFF968
1D1AB47EAF93B9E1E7148DC2FCE71C24A5088EADFE6D5544A6CC183D0693B53E
CB1254AEEDA92F6ABD82BF99036F2E219FC11587638662818EC31226B17E9D5E
823733BEE797448D16B7D4D23601F3A1D8C124AB5E2E277EBB166917E32A4F10
FCEC16E365B919411C67DF704CF9A5360B01C84DF918C9E14383E32F09F03FA0
4095E9073F99F57A6144BC4B773514C91B799BC4734091E2663D359A356F44EB
8A810A2C3D3586D2527DF459965F02D7D1226AB8DC42963137546126957B1A98
CE73643E009F45CA957B22D5E8E79EF00CD403C114539D452AFE079603B2B58C
7FA8443962A1ACC3C8F4D0C85113172938BBC1E5B59B4587B8113D3853EAD667
9425423371072FF07955EF47D4661247CEC409E6A6A3FF2207B02F4A5A6C31D3
9A8F2D1AC613C1B3AD450FD3D63E75110C0F1958C110C9B7B08EC72171BC312B
B46BA8AB70DD77805AB6BC57BB8113907C14D7EA2F6AFE99DD0A88EEAC894F02
C6C8DEEB223E60DE87E13D2E67AE0827C4D7FDAC66CA23CE5B7ECF7D6FCC0F2E
0F663948D6D3B4862ED7D6491128B1E6F20DCC68D284B3251A36AF76F05FB877
5645A344B48AEA34B4858BACA916150A3D6991B49CA4D33EBF6B9809C466E4FC
7668DDE4AAE206A8989D025B333B943239C13A5FE6E40BEDA2B319AE35F29E6B
E3B769A039D0731B6CA7725355090E1275B8A360F4675D8A577E074B3FAE8393
7ED936FF03270FDE29528A4DB2BEA4F0E5FA101ADD07018AB729F72520198360
F746B3F3408A7E6FFF1DCE8C37996E93ED4B2BD1684CA6003E1E8EDFE2563CF7
E71B1CEE2EE2891A58714AAF87DA6B1F10D8C39443B142F7448A5D995CBA2014
68424BC2F6A87C27129A0052265533D8F60743193724EA477EF1ED55B2772728
1CDE4E17E1FA83D1B34BFABC87A04DE6176FE3942E5E110A9181D8571EFBB137
DBD4637BA27FA71176054FA0094139BAFABF0F54CCF04EC2481952F396D22D4E
61C2B453337491CE67024D4D77EB6DAC633EA0041BBA3AE92F8FE159083C307B
152013BAD9A81E6670FE10BBE6C7C434BCEEB83AA027E30752B81E989CCEDA72
D71C5C7A74A6D77629FB4862C49AC0FD4FE210BA0F75F101E502036D007FDBB7
8A33F87B4D31034D0136A70E6B55C07CC630D8FC81675185BC3F6FAFD58E6216
0162BF7C1E23446998B5082A96EDA88771CD151D759DC444B515F0F0136BF89A
6DA3AD113EC0DDB8A0FF96A1918F21C03342D5B410CD0665AC5D4D4C2F0BCC61
78828413932CEB6E691B4F85C28D2E9606C8EE06FFECA6A9F9B25D49A94E4240
DABD9F0F570735A0B198DB53DC6E7BD81D02D53D4C4668016E0F5C144CE7785C
50A37635EBF0D3A58AE97108230C08373C831069F41EBF73ABF500B046D567CA
1500023D5A907B3C5262740CBA8F978318277BCB1EB08117770D9FC0FBE2E0A6
DA810387C017E63630DFBD482B5A7284B3D129AD4D9D73E8BCA35C57FD34ECD3
AA7A4D62943CE966A8DD7AEE3BC859794C4617EF62664A0E4ECF8A4B5F315952
2DF218900B94E772F178E80AFE847423423A079571E8C4EEA19C3251B7900D57
395A0D7E9B4CBF8D0AADBE45807E237B2C8DBBAAF9A807BD53EC49DA3D04B020
3800BE41E51CA5DFC244B17CEA576B0E5BAE091ABAAA33547BD91C4F99A99CFE
EB93D1DABC8C124A650509D596EF51224648F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707AAD628FFBC200
F981EE21D92EC9C31C405132953FEB327FA0B59F0D8CC9EC575218098926D914
98D143354CD9C86E537FB493B614D597D46DC07264A5488E05A13828E10FF37A
8F372F597310910B123D952BD186E7B2BF9939261113EF94F3AEE0A1F1D0B2E9
04AAC9A20BF8EEED607AB0E84A41E9E6F642E320D274C08C4EE6547F952685A1
D581050FCEEDB375914C1D5C1F52E5C121A53AB5DA29EF74CDB21BAD22B6C53B
A96342E0A408748AEAB486692BD636B49BE5E697A6310DDCEBC030383B96DF61
6BCA679B05EBAB669B7E15605E41A551F292071FC4E80232F0D4EA69C17B3EBF
86E4C7DEA821E382207E4C597F68D19BF1BB3A2F1F486B5A094090C2E0935E6B
A2C80628
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DD1195DC88F8D49D3A4BB280D18F7078
4AFD9E19F59AE914D2E9B0ACF3AB0316EDB5D83A44C80E0DF33C9AF1E623B46F
72EDB2E313597D50289F27A72B9CE7F89F4B642D8C70411208FBC00B8E8B3721
F78DF221F070D3D9E7B3FAF54B7506D690930BF6358739F9690BC0D8B6047621
EBC28C2F9B7884040258DB2E044A5FA95B1DDBDEA52F43F87CD954389B678E80
4FFAEE79EF726B0A8B1912083672FD2C0AEA6475261730CBE72D83A5F9CFEB1F
B36E9DA113EC30784398EDFA66CAC34B17173631233F1DC1502DC3E14A59A14C
A07A22105F3A045DF6C5410EB2B7CFA75B3D8B2401F2F483206468355D152619
74382D325640BE2763DA663AEF6B8CC75037C513EDE9E9FD829522BC0A24D578
D01878C314A46B6A90D74A47F921451B9CB2B692E047A93E96F9794843105CE5
1B42465F8229CB7EA69DEF300E5CD4B4A5FF216BEA8D8280472A4EC328BE96D7
60CE63FE51E3FC0857719AC4CFD53C5126E1350B764BF9A7AE1677EE86D9CDEE
C4F3047898F6B700C5D2D0C3D928471C12E13338F52F2E741E4E3F4DD9B738AD
F6FD49E6972BC1A5B1352939ACB635737F942D7C3F028AAB99EEF1B534EA1538
3BF2213340B86459BD0F10B04B2E3939C506EA9BFD0DF7E448AF2310F00A2A46
797E396157CD82CD86E308355C1C9F45CCFF5114909C55B200F32EAC0E785006
ED4CC9E41E6562CB8686551D715D56C034F4F3CCE73BB714C5A037F5BFFCA8CA
D6BD2F985B532B867E9091B4182B33BF2F7022B38CB7D8F04A510C26992BC262
DE9CDFC62600301076763AAAB9CEC6C1EF743214AE56A9D508DCE159469EB3DC
77EEBB295DF6E0CB7D0695B524676DDEE3E5AA8DE99D010B9EF71AE32944CBBA
2309A322AAE01270D8D981D110DE4BF0F217A07D62D09202AAB0559380BCFD37
CDB6C1C55A5D167CD1A5D3B03E54FF9946683A4012EEA129222B5B54FC0845EA
93A449CB342F6B5C40ED58FFD38B7F0A401C293E7D7CA52A907AA58CEFBEB54D
C4461BB62C493017F711A5C1709C10AF5ED1EC4A4230EE52CFD9DDA56E71F147
0EB935F2603322098C8EC3E9DAF063B335DC111D389D94D0930CF3FD123562DE
4356990653C9CE9750886C80B7D96924DD618B73BD532DF4D99D62B85E7721ED
7299040BF215342CA7541A75676C26ED1D06839B62B03402606D642F38B47BFE
14879379C67A6F1CA3C8F3FABED83E4A9CEFD61F5E7C9A940A69C5BF95CE3316
CCB514C875C33CE32BE970E6C4DB1783747CC3902CFFEF2AC127831BB14AABCB
42C0608973D98EB1E18C385041B9A26838BE79D6939B96650AD3D22D463D662B
9274D2D0351418F3611577FAF3E8EB34DBC6826105C83A1395D00B096DC1686F
4A3E2A31CD264EB3A149834E3802C09E524EE12AFB499709BF98A0A065EB678E
B667B9A1A649807E41617236459BA91BAAF3D637368CC0109EB9149A710A8CC7
A394EF6CED8FE7F979854CD11DE669264405098AC25FD9A144DA5186EA79C145
9B0CA7A8FEDE8348694CE0A22768284CB6C8C92BF499DA3C14D4402631A17B00
65B5DC26E19E13C79A7851DDD3608B8E4729D636C11D0E34BCA458F022655ECF
5CADA63F6116762463193055D48BE8BEF0C4CAEFBED2250FC166EF726FF42C0B
FCEE123E31AE8D710D3A8CF2C93BEF8D83D3C0AD445193BD1B16784B7E109C94
B6EC856BF8DBF362C146A2D5C7EA8C39CD8027475016EC496D35943CE7BB38EC
3A4FA6B67A551F3335ED4B815B7D1368619306C9D0708FB4A2CCD51C522441AA
6911FD34E736C8C63BC4DA2C8E1C2E379B2BECB9C828FBFB1F459084542E408B
FDE764E92B5DBE0735CEF9A078782F4AF3AA2F454CF860BDD4EF0C3DD0170666
9C5A27BC81BDBA976FCE898C8A9026780EF72E3B2B2390CDF6071B58C477C625
9FAD2032A32C420A628F14FCED37AAA1A879DA69900CF4930229A8237D954075
92D19173FAC4547D9E16195F9BC4E9E99428D6575DB1F8D7AC0A040AEBA65757
735045664AB9CB65869647DAA8DF3AA20F102C82BCCE0A35A2E3BCB74AB70EA4
016F3948DFAB12A33A5FB2B047F0FCF97754D643A8EF801B93BD5AB886357D1D
769AD20AC61A2755617D1DB55E871A4EEA31CF85C30F44972A98DBAA6C804135
CC1E2D3784CBFCCAA847888C736B3CBA90C11BC7113F02694C08661D5A5EC175
2E2F2BD96D7ADBF58B6F1E40B1BAD666E1B2FD167CC3B84A2DD55EF4133A3E95
2176CE7C1E5DF8D5214AEB154B23B7192A6D1BA549101079D6A9BBC92D4301B6
79A113B46384EE9F8B53A3ED10281BCCBB8B4A1AE4FAD56DBEECDAE15849DB59
B1C31D2D1B73FB6C3940C6E999F29E9E24772D2EDF3FC37D2D54977D7CC4EDAE
89A65C8401B7ABE0A6E5294D558161D78030AD14BC35763BF8BDD1FA6D002514
671FBE4FBB91105AAD4181FF26F060AF7AEC659E26F14F66F7A2CEA9384EFC83
56EC9D3483D4B5A6956BB34FF8D2D1012819E845B8D8EB8A4E0321E90F682675
0E253DD829526CA8857129BAD4F0E37A59DD94D3FCA5CC50A43CBCA725332D54
51CC3F33D3F55B17F8930564B89B974EBA0227AA10F218A1A46473C309956ED9
715BA9FF1F940728C65817727EE53533CD5D67018BDF772868BC2A430D06DEEF
7A8FB109B5FF9CBA239D6121543AFD3DBD9F809440EB94D828BB457D5BFDA260
53A630FF8AAC5E62CC5FBBAEDEE5E1F2CAB7A660FE7567F719617E77A7A7700E
D5B088CCFB91633A9B6B41ADFADB86B3ABA6127C0AF870229D53A05978A4FBFF
4FFB9E97AEFFF4C861A8157587E77BB3AC705C19B81AFC450F91A989A58F034F
B956FC79290592E860C899C24E5ECAC8015CB8EC93EF4B52F7FE70BF4B927179
4E29D33359B06D24DDB3D48C41B0FEEE94403EA5DF17D5C10BC684A68F7C8E6C
2B062C34ACEEA3CF69515419F733D2AFAB8BDF82F3E2E5AFEF471664177E03D8
3969D998B4FA3E227163B701AB727B64D2D56F37115E804F7EB66F0E152F2E3B
6B0B1244D999AE7377B09D5CA9F0103AC6DFEA6F004859EDB9D667FBBC9BE9E9
A242290DDA89A3CAE0A33AC6D344B758FC9059368A51EE750DEF00E25E76AEF7
3EA0C3728F2978A4442451A7D11D3E606E4A83B0C4A367B561339AE0375027F4
E913FA3A0B18E836B5287C153C87C51DD5170339051498222FE0783C319F368E
D2DB8CAE68028EDAB0856CCA3DF52B4D11FAC160ECC414A478053BF9212CE709
C004454A49B719BAFA277B8DD67B449A9C13E744E07DDCC7E785EB0D3639EEDC
BC9F34205F03B4320D2C60CAA7D129FF4957D4C790BD5DE8A9D1A9A32A4C229B
1F600A210F389D6B85F9078D1B8E209B80FA6F8911CC139E86E1BDC3C3525CC0
B5377F97607E6544DB7118D7FE142F2FBC6D07A2A3862024E297AEA0D945FF1E
24BCFED96E68ABD6BEE02E18BECD759B3333D2298ED30D3D9000A698C125AE6C
C4F546CB16D2DD15CF64C49FE9B49A10BBB9DF2DC211C92590D0054C47F8C5A0
DDEF52F121ABCB6364E90F89C51A038DA3FA31993D20C046089AAA37B2FD4D5C
3292C554E438E5A95E7A0F7CBF0C84D89289DE4F4866A7E79E0DF323457D3CAF
4B756A92460F8268D4AAEB2A1B9E7E861B8522B7AB6AB547EC52BB7A5C8694CA
22749D60D76627603543947F05A5D012259B8B0E6F2575B7A303E5626EABF860
EA3C145C1832565FFF84A6E428E3E42B434196C9FE5E41BDF8E590477ACB32CA
6E4F4E1699FCA95C9DC176DDF5EFF2C01D890EE2689F23515D676EF638ECDAC4
B896C64C44B58F9DDE9AA52FEAD42B143D9802173A98507B84A19E5289872538
AE559EC7AEF46723AE6A930CD02B6C7FA26455FE61FFAB4F5831510029E1FD27
431377F13101A11B703081F40D6C117308705CE2877000075D19A15803A6C7CA
CCE2BF55D261A6277A3B4ECCBCE499A8D210044D0C3F3386B0C0F578F478500F
9A415B6E78F30F09707B9AC4704620A61CD004E35AB8A8F531B146D3D081BD25
403F3594131B54FF0785CF5F88EB1EBAE8F6D2CFAA3A18FF4A3E82A6825975EA
F495CB6D6852481694A22932D8AADE8AD171268B38732E83AF2E7CD81AEF3FA4
ABDF05A9B44DA44C60ABF57528003CE178CCD2518A7445DB17459FD776E8BD0C
85717BDC3959C3378202428D1DF7D24ED9866C07EA2D157FFD05B86EEAE97A7C
4588FACFF44316033FEB0A7026E83223783E101745687180525DD31E5D9A3301
232199F55A7B7AE78AC94FFAF8F7BCE85D2A7E4CF90B7F279CC71C8E24A662A2
387A92EE0D8590A3A268664BF14767F034AB90608B28E0F2EEBD3857D3716ACF
5A2EE7EA03B5F0CC498C4BF8BC83D77D259587A7A918BFCBA0E1FB82A1FE7F45
4F398E78352250261E26C7484E4EEF30D05EA8D01F5FFEA2BD03A17B76FA9C42
29B10355842B7C464B6C1335B0B767F4E9332D2CAD38CE90C439D38E0E622DB1
4F25383814D61B30C25BB09DDC57EB076BF271B4E43DD964BE5FCE11DCA03E43
E92D7E2F15794CB9F4EDD4D699246FBFA5479FD612C7762E8658B0C7D5DCF94D
FFE455E2B63149512E7D7086371BD17F67C4CC7441F4C834881B7FF3E052AC7C
80C0A7172973A1A4A64CB65E93C45A4A6BECEC43F6F4292E1401A8BF70A3C01A
3F86043F6AD21BE6377A978C1D1359221410C17098191A8D857EA1B43194F425
BF7A6270CC16D0F81A6BDBF37C934971174145EF41CA3B9DB089F2106093A3E5
B2AC4A85A1A35D1BA557C4C0F1191124E129244B19C7BE39FD6F1A3B15021B18
2BA2924A93491A61ADF487C9543BA3C7A2DC65F431B5E2B656606F84B5DA7787
15E03D79C4F8441599E62D4FCAB033DCA43DFE85DF98316AEBC06030382FD797
29426BA208FEB6872FD6E4D184AD9329C7E56A86A59FFCC9386DEBD198727C6B
33F20649386C3C2FA6A4C86B4A286B557000AEE5E2E13CB66A9BEB514F04CA9A
B516CCAFE56EB0324AB5D89AED0CA83F71B58BD38E2D622F023F409A2BB048D2
373122DB975F9FDA955437BB3BFB62CFED083CBBA337087CED87B205B9A42EC1
F53920BE2B47FA5A945CA05859592CE5BC01BEA21F19025157FB5FAF0766F7EE
53F0E345D0BF7FF0F73B02B1A5707353F50B11D82FA52B203CF3AB9FE13C64C2
1AEFB35B52F055B3A3F0D47EFFAF39202BD31EDAA1125EF9C3ED577FFE6950E2
B9904BA525380B61C7DEB5B9DE9AC0FC2BA563035E63B3F886BB21AB72519071
17DCFD48854670C9263054529445513B2A9911B3A497E39819D72CABF0284983
70FCD25FCDBE772D82CB51956AF6389EBFEF72C5F9CBE4587D1D1677FD06DB1B
FD25F6FBAA0B3582FCA0F31C9689B95DCCC05752B7BF8F031652A91DC38D36A4
4F5BFEF4540A9941CD2873A023AD82C62FCFEA184AD04DEC34F23A4282D3C072
31A6AADB0E76477C14569A85749D699511C331122ABB1E389629D3C48D35402C
37C4008E97C76D46EC33EBC704685BD3309E79C036C4C7F0956A59095B38575E
BBA55657B8437F1CDCD4D79A062243ADB3D9AC601F550D884C71DB1261D04C76
3370EECC9E1E52F523C2D6CF25C102EA49158BE14FC76A3C64840EEB977F5BFC
46D8F54DBD3D2682E6CFA6BE9B8612605909792BD183F23E9620AB86488817B4
7C1D4042C86C036F2E0E500DB4832D70B084DC6D1EE38D6003BE808C8E508E60
00FE53D2C294BC0C5323164D1C34DD4C5C487A00CD2CC80FC5D215EFFD0E5707
18E585A88D069043F4BD5478C7A5FC5B329936FAD0C22A17719DD4E0739E94D5
623689E00190707E2406AD30A2E884AAA0F61F3B76672A6F3918E5A48BEA7D15
C98753F37C495B95A55F5198D7BD772C034A5914E16F20DE846AC75EE6B681A3
DC5BE02E3B299862A717C58D8E064BDD22F82ECE55AF0BC9C74D99EF9C33F572
F221F4545651EA776ACE07717E4174B073BF5EB3A43922A58E5CBDE7B1BA3BC4
0A604AB515D944C86245BD9D47C743C7AB0E8AC14BB36912B0582DD480C23948
FBCD46925290932E8E6DEE08D5157A5D02E35C8F3A3A8C2E912F859AE15200C1
0530EF67A7A412AD924829F00CEB40DC2ACA4EDBAECBACFF4F675EA38B6F363D
921BD08EFD522E26F194B7DA5A50186ECD90E2F15FE9274A91C1BA14118A938F
A9E5E37BD633B37F1697F8F6C074278B10F09DFAD2AA6884E9E2F06F49A6F66E
39270B8C5D814A27A0CD433AE4A9039DA02B117D19FE3A7CC3A470E53CFFD49A
57402A6AE9C67EB7F319640919767237D30E818E8DEB3E8178925302C10D6D84
E12F59AD62684F52F0605FFD462EA92B205DD2C9E1DA366BBAC471EA5973370A
A8F41881A36A6DE3EE6075C8A819E7CA94A70F6AC72270530E56A19F37A12F60
E741D6C7E35E907AEC244189F32C7D3BA4D9D5CBC391AC7A287E11961FA85588
B0F2D0749B788010DE1F1D17CAFDE33AD6A4A1C31B8CF65B3DD39862AA18E9DC
E7FABF8F6C5D10C2C0ACEE08DC1CFC9E0C74E8BC79D7EF2CB7CBFFB6ADE8FAB0
05EA68043AB6B947790DBA13B73874C570FFB31FBC84CBC737D30EAC3064219D
4262C6252C7BE1DC02D37C10FC1098F9180BE93B8E83073FD78619D142AF661F
7670D4C458861A20074C2A48DA64CC9D8117B90861C4659C00111C760523376E
3146B49CB9C3F4FDA42258DC11796EBDE065D219AFC78678E3F21E7CA92478F1
6B0E8891150B592058557DFAE2856CE3F978F7AB6FBC84982AA3F51A82EDC3B3
0A9FF949B09B830F9A79907A37B4975437F7567192EDBA2075901294622770BB
4B15A2ADEE24E853A531CBD002AB3BFE033DDA306042435C92AE025B1C8AFC22
ACF90949369D893440117E10965F800C4D68FC6C6E6B1D1D190239EABFD04194
8FD9DC457CDB07482EE6FFF6783C0D29DBBF3DAFCE31ED7A57A832B69A71E061
02FA04D545A0C2FC2D90A4FED21DBA11F1EEE96FA7C5A433E71537C26BBFE9F3
18D77C53F55F5A4EAC5EE97E0F559824A1FA9CFA36B581F658502C4E4CA92197
21E4A0527BACDAB65302B806542E8C2BEFC54FE8448CFC2F7B80CBD1E4F4F443
485A9303422FA0C1391C73584961D0D4576D59E7CD3A3AB0FC1492B7D2675E81
C750AD8625E5F224EB8230F9DE2484C2785C81FE0ADEF9F4E540393C807681A5
001B7E660F193A90405C53048A4E5AC4E328F34209414E329D0F0CD3D6198C8F
D2494BEEF534CF90D8281EB19380D0A2FB65FDB23D999DB095B46161F4E3C9B0
F74621B55B476B035FFCCC158F3E8F7D0010ED32681229C8AEBF3BAB92EBE58A
46F1E9BF9B92F2ED5429A361861352C528BD08260FB6576E617BE5E0D1792EB5
259141F44C4E86BD33DF7AF5075E5E3BB1666906514A74DFC6E2FDE688FEAD11
17F4DDB1DDD8EDA770C9A6E4776508E9C038B7723C93F78BBBC2610D098BD1CD
ACB9F13B492A713FFA5B3FF85373A8733C0F891928EF66527B59F013C89DAA11
EFE1A57A0DCD34AD02296769201FFCE8712B2D47113B09C57DEA2BD8AB6D6CB6
48EFEC1362A13D2374FC98BE84620A56597235312259CFDA89504DDD58B0CBC2
A5D9DBEDA42C2B3A1AC8F597F7D933861D46B7F7EBE4C9A81AC2569429D7F6C7
9F64F6AB6878C9A0CCB76532F18571956F65FF3473CAF698730476BCFD1B5BF8
E9EC27CEBAD0E1E1F6BF7A0AA2F57890C1C1B375B702AD96C0CCB12920E89042
C4461BE835A7C594B9E14A91A2F73B5410203FAA11C154881E5A4B3F245D9611
D6179271AADC82AB0C96F035E6B12496AB8C0AE132B4A50CF8A5E48D39B4E0FA
113B289E81B36EEC988EAEAEC01ADE9CBE51D1F380FEA2D528D4B3D8BB0AE42F
50DF3BE309A586259184585FEF68AD4A1B5AE622A5B2992993224999A373A0AE
7BBDA4BE20A0DAED7D041B7B738B70DACC0B1B261741F43DACD5F696FC6E2C99
A7277B31CF6C2D7B23D36C6BAAB175F1D53FFE1D2A6EF8AFD948C59077D2E092
8A29ADA91DA1D968D6681EB371CAD3BFE9A667A67FE844C60336D86BBFE6ADBC
B1BB5C82752E47C1C525ACD7BA2BA010C1C4BA0B1F481D5DC2DE545CC95584B2
CDC327D9F3F769E299D269C2A3A071F50A3E3749DE84DF6DAD46FB3ED01D9101
4325248F72AC3FC4011422A233DE3D2DF7BD2005D0A7EBDE43DD1A2E298DC0D9
A1D4887193976DEB0FECF42A3B50A75A6044DA7B3D652070BE9BAD9A12238574
F8A874B1C87EBCC7CBD650A955E736EDD52495C680FF84197C1A8414EBFEA809
D4977AA8D49DFE8FA2E58AB60E99620ADB40E5FCC1E67DEE19ACBE8BFCEEE92A
309F88B897125259ACA9623AFE9CDE39DBB2658035E88275484C0629418764E4
E657E9E5B07208B9C95A0FC10A40EE42CDB044706DF7D06053A9E178031732D5
C55E98B010E70A59CD890824631AAF588A6866AF1803514F8A263EEF4CCFE988
59C87CF2C49E4D135C62CDAD26E29AF52764895EE7FEA2E480D01CC8DAE6E410
E5ACC4885154B2318FDD9AA86F3F538BAAB4FB4EFCC1159A4199297E2E836145
92E4D4CE860C981501E0E486773B39054D6DB691E90A2CC9ACFA0B9E885A3CC1
8191A96FF51857CBB1392F68C48A0B2E6E048D571501B81E7CDE96D0D34D8C64
10D3C649AE9443CE44F4C640CDA2F44F89B7934B2DDE184CCE2D83F1AA96AA9D
20697C67C54DC08C86DF7809DCB92F3B9DB2E308508AB010DB07153311CF44F4
D4A0A9F7CA19E6857A7A5369A9AD6F5F13D9C61053249824F1598058BA86D543
9EFE0E3E9C4710A69E42C667B16F530214C385D7E72C3437D8CAA5F97C74DB54
3ED78D31995BBB8F9648CA4C4F298F3A80A2F5E0F21CBC01383519F6BCDB46B3
1DA11287C2CA1A277DD1D163895D15F05A5099D7C4C1678902D3B1140BCADA8C
A3C221FEB7C976DDD619D9A3F2AFC8AB7EBD2345A087C79096EC12A59C415584
C1F2B9A79724166DC5DDC8CCD31B7ADE4FA27632AC5B4A5E3DD6A33258A163E2
5ECF996F276B56C61CEC340D6C6BCE71592964531ABD6CDAFD3D6D1F5809D3D7
9F652B2F32C7ECACE069C8B266E9FCE7F2EF6D04B8A523163BDFF5CEE8F957BD
E19B2C039170D57AEE7F99B29B1DDBB40357DF341B90026AC656D01600FE4FE5
B6FA774B61B7E033C13477ED9D40A7AAF727F2D8286145674D4C79B5F64834AC
B769B615D70D22A88D5903480EAB1BDC36EF3D969449FE6F069F90F4A8468537
49C86A6AFC2A734D7C2E772001252A2202D7308D13BD3B5581A0EE578B13CBE7
57198522C48AB2B69ACA67713CA0D731EABB9D8A55A9F496E81FFAC8EC39851A
08889737ACB4C3C5F345DB17E961841C6AA3DC74610A9A3A4AA8A17283B07CCA
E665269D4029B598C77DDDC7DCBD3764ACD4DDFADD039C000A52A2C0916DE9E0
E18571D3DA6267A4A66901948E62D956CE9AAC012C0D49DB776D97BF351E6927
9150EBDFBE964F881988063CF7A8ED0B539A03EC8E4BA601EF15BFDAD929E860
0CE6078F5C1D22462D7681B6FF98ADAA9C2271BC9862A082FAD6ABCC59658F4B
99C8B4226E864A578969EF95DC1EC63E390AC39D093C86FEE0819C3F1CA38A41
27B534BB62DFE941EB0549142FE8D1300D67A0058B375C6BDD67BF4B67BF2BAE
D64DD3B42015E941F76A224EE8E61EB1932D352DF04FF46D0579D4792207D133
7D23BAB453C9814FFBA4610837B434A7468F7577DC90430A367D804267EF5684
66C90309D8039B6D6E3D89FC26A6D947548C7D9E59A0C711957C0AF3397C8222
B226407E6C99CF8458D54F38918B815DD449CFF37CC41C1B45C606F0F12CE41A
B5268C2B9C8E5A32C266D556C1906F3244B7C3DB3495723CFFEC1FF39DE1EEF3
819986C2C6AFEC7FCE0FE10F7DC07E7DAD059A37BA51922EBD2D3299DCFCF3B0
DD223E5C6F0FF3D683011C316FB5446A9665CD6A28C806E115381000B2C68484
57E4A6C4D68E47B009737ADA86F6AE11CADAF36820D3120BF7D4F277476845DF
99F7E5C4B803A0E4F2490A6543E096CC9B89827D4997F70A9130E6936AF27B3C
DED7F21BF7305CCBC0503FA4BCED04CA18CD9013BD4925B4671F9315E7B20163
7397F75E1F95DC5B86E8D520E19C87F668AEBDE88EBD48462933957F8BAB714D
9B09C4D2033DBC86F791CC32BE19A6DF05AE243C91B996ED653B7265EE3A53FB
C3E3C6E2CE69906EE72EF7A7B1F7793B2E59206EF9D2C557F7CEE4F267B09107
DCF8C34200C304F9ADBD5940AE24B07545BD63B5C591975E184FE0C510719FEE
9C100E9949F9346AD5464F76424C07861EA850C166AA50BE57ECB4E7CFFAD5FE
935C4E3A14D713C9A78286C95AE90D9B012935A407D1B65B5DE5450DD70DD393
21C35AA6157DFE1892EF16E7FC84B41CAD74DE0B1AD9CDF5EC9B3EB02DA32866
7E139550D5CEA1C3D1F50A7DE0827FA9CD55DED63E3F1428F2442B46137EC82E
E66B52449B41A9E6381F9A5721A83E3ECF3733A72A5D9E972AF628516BF65D9A
A90CE9C695969990D925B7C8A1D2EE717C3C10C3DA53BA17481BD7FD0815723D
42559A0B2E009BED8CC53F3AD8AB029E2333CF9ADD6AB74B4CF10EA1427901FC
C2709D6B1A18874534BDEE62E99EB3209831FE3B3FF28E5C144BDD57AAD991E6
24AB1C05CDC062320722028B7149073AA2B40B8A261F87E42320CFA1000A54D3
2B095322C82349E31E57B5A86E3F355B0DB9B5745D56789555FB5DF7215A5B00
7D92C8AC76E3ADBD437CD8D116AEB406AC865CD577F70BA0C6D472A6B9E76AED
9EF42CC4925861B4FF1989B01993E8F5117E1D6D04B6345587EB3B17020A1CEF
8A1AC94E16A640BF90CA271FDDB407BE8D8C80DD46E4D972CAA80BE9BF0D4B07
7C4DB0CFE994610A4B748AF2AFD97E079B429F014356258FE82EF3F845B1EBD7
CCB6319582E520354999BE932855F87668EBB7BE3D34DB7C75926F6CBCAAE78A
D761CF1D54B96F8E7A5348D800B66C1BA463EDB4FD11A69CAEAD0A6F4D9E2DFE
0F7D2F565ACA8FBFC706F504B1BCEFB14E30D18928E33AC5E516F18F719D247A
030D933A941CC4B22F21C9BA5FCCEAABEB14240D52145DF46034812AB2FB92AB
6E4F32525616E7762AD5CDCA8EA704D6A083D083D2A49064FDE911D9E7514CD7
0665001C7B4D02B951E04C6FBF1E3B75E4D6E690AC3C539A54234FE345E1C28D
2E27852D8200C62FDDE5A311B522FD421A101868139CB79AAECD194F37D3E802
339417A1DB1BC9CFE54AC457D222E7DEC06BAC08EBBF4D83D6755812ED82F2F4
4AA1E3C2C8821A80D01036080C4F5FEAFDB29FD1767A6542E53A1E603066D5B8
A2E45BA9B0E799746CD367FA092FFBF047F136CB29865B538D351174F8D1DA9D
11F02D63A507A5A1561550EBAB228ABDEEDB3A05A0D0C7DDFB52DA823AB69689
DD768E46B8B6525D70B5D231FE5E26BAFA71158D1D3286AC43DA29B5331137C9
5B50D07C63244F68CA1024DE3432C1FB83B7AD35DB467CC9E9B4CB209D662198
5465F7325F0641837B82AA179727D3340BBD6033CA4DEB8D020557C277B92AF2
B219A6CE394A134702A7561A9B83B8EF77FBC63747C1CC6BB671161652E2DE96
9EBFDCDACCD54A9D0FA3B5F445FE21207DF6AB7A4AA64849895AD2EAD722B76F
79A1E11ED613BAABDD0D92BB53630DB9A2BCFB84E8415E79B29EE964C66DF0E6
C9671E6162E8301CEC8E36516756C850BC4C84C90494A3BE1D4F5B2ACE376697
657EACD10ABF51C83CC465514E26057622C65387B7E7178CE78E3B035DD4598E
A74E1F92BC16E448BBDD412AD361A69923450B0B1DC0C08551279857D90F886C
9029880DCDE416EE75E88A68F2850C4AB457793DA45006DD347727CC34FCE070
EEDC5FA5A94B881746D41D1EC44BD7C9C080BBE4898E0F4F89556783F46A20F5
EE30F476F4E7269F61C479470552FC8C1E9BC735202BCA3AAECE631E4CE9EB29
3D9BB6549D6D3E046E724C727962F446E9C589F3E44681B1FDAE15815E5A0811
DB0997C6CFC6FA76D137C0F4E8BBE238BFC6A128924E06700652A2444F3AEA4B
5F8B122BC2D691EF046CB6C68BBAD0FE4EB7398A6C70A4D5D1E699E60FE03D41
BD09883E3130C65189D9DAA486ABB260E8AEE75218BDE23E4E01B091CC5846ED
293BB4A1D1D9161153F499666AB1368F5639AAF817118D90EC92C4B9FA0658C1
54807CF48E47257C1FE414E9AF8C679F306B9282C3FEB2757734E1AC072FBF1D
EBD540CB98E1B528A19A2CFA8A7A5283C0C524A443C0866014EA5DCD4317D6CB
E3500591C7FA1651CC2BE278A0B9C3A92FAD18AE821A5BB5D65461B684A22F00
C0253BFBCDBDD64743F6687473EBC160B0436B0E3372662A189E60686049CE34
E3E12DF15E9CC37A8DD4CF483941FEF33628CE825E160D623BD5FFA3400B810D
DEA06B2DEE2E8CA3CB7BD921499A87C0AD162766A4E405E4823F95F9B04BB359
BC3B56650D1C31FE21A76680DB885B7BDD49AD74B2DDF6D65FE6442433E4BED4
E39D645A03F043C0E6F3342FD4479A56CC4D1D42171313543F570BDFB08D9434
71C6C848D58042C53C23A8032AC0F14905B1E7DFD42DD947CF05ECC822654772
80E815AFD9CD17B20342C10C08B475E671AD1D4058AEC3334F96B3C5831928CB
F7AFE582C0D34199E34A2F1C9A7477EC215FD698B6233F27FBE21F34D5585B38
943210B6EAFACCA33D40B2425ED820BCB9AF4516592E36D0A048814A8D3DD680
A033F87CF126A4136D83A00C2A561ABDD311B1CD252C8A9B75630E8CA9E14D43
340B7E408E9FDE9003CCB87E506030155A9B31E7F9B2B2076F441D3A47F234A7
950D09601EF5D227DC181E4BA8C79E38CC5C774FCDD1A1C65DE434AD7DA81012
23EB7ADF3613AAAD505CF8356865673BE28D3900820C097E7DF276D5BC92E677
6CA05820EA9B809EBB58A29E7C0FADC600641485FEE36BB65EE3490DB7185AD2
CA066DBD69DE0EF85DA90A22EF52FF12822F13D0607F00C9A1887491D32DB060
002FBE2FCDA34374E2994F76072D47EA26EA6F8E87EFAD78FD819A7D6EFF895B
3F8F1FCF280CF3B7EDB6C45E6E106E13371E254CD0FEEE44DCB3AD545CF2DC30
1F13A4C1BDB00398B25948BF11AB5F264BC41873E432C3A1776396FCC1A22138
CE3A613078457A14BC6F63591BFE0EA1D14CEF8BC838793C63C63F6F3D622DF9
CF2864F9F2D98AB3B19DCCF734C07F8AB87D75CD415C21732DF9DAAD2D2F41D6
33C0ED40177B4E700546D34768071E70AE99164C2A8951D88BBCF602B876E2B4
31CA7085BC248A7A50FD312C23BA894664251C927F94199DFA0ED25BEFDD8D15
CF8FE035FAEE582F88081808AB8A493A12AE56D01313F2B9468016965C81F502
0C9C6D8A7B00C7AD7401A618CBFD44AEDF8072B2D64975DC69CE74DE05B0E5FC
E39813ACFD30379824C640313A36AFC7BBA22C6C8FCBFD08D730ECFCDD2D9903
92C923A50F06B418C729D521B1DE7B3CC9DE7526DC08552CA63791FC122FF0E8
EB34DB45FF1A5027F99A179ED76FB374A6A11AC71A3E198670E3626BE4E0CEA4
96759FF423E61A287E67890E71A73269C57DEF16DEAE8D919C81AEF0D0064EC0
29748F9B23F334268E0896B346FCDCA87242F45AC4A19078AE65277FB69AC639
102506E9A77EB22EE057944C96AAC5FDB8FC20C1D356EF78C814B081B26D5A42
5A811DD7D30F11100C2BD43AA8868EE91C52EC45E062BF8B9D022DE9672B299A
86EDBB14B2632013957787C9DD5B1A5F84506C1D55B28A3ACFAE62C94F0E911C
AA9928A4C4A69338D34866F023B413C86BFD2EF247DDADBC7F788324419643B2
D95800406F342853A01156F3A6242FF2A3543B6D7995D35DEE30EC07FE8C7FFD
D15D87D32F71C1363EC7F99083EB1A96FBECAC0DBAAB1A24A182CF8BFD6A443B
9E35ACDD4B0BC1737F7613C00E31EA14EAF4FDE70C7583E16AB815346509E427
4357FEA1E3474271A856D24879E38F992E118A1241E37AE79E52A00CDDAF9F3F
9E5C473B64B4973E3F62809E3BD91753B28CFE084D0DC105FDFCC27E88CFAE75
4E35FCD3AB7B39D3C97CC9ABC08E705D42A0D507D93BF8C3E7D7E76945789096
6683F4B767284C9D2FAA2263E4CAA1B205D9023767D8AFDB64E591A4E27F8DDB
4F05ACCADF9CCD20BCD2A5D4793F48077C487DC58C4B84B8875F5E8D46501064
D4984C348232750FB759DB4EDA22AF8A70B190B20CC9BDC0EC805A5387A1639D
0D46100CCD0533323697D7D1C08EEE6614A2FFCF5E23071A4571F2FF5373C38B
775C0FDFBAAD8668EEADD7A3EC9CC40E8FDFBCF941518C0724A6438CC9BD3C04
111D0667506B651435877DDBA8592BFEDC87271E47586BA6DBBD56E2F67665A3
511F05056DA548D00EBA83FE48CDA367C9659944DDA0B5782AE966D091E73784
090D880F6690B7E53B50C3A1FA8997B45F298D5D58525EC470D2086A7C608465
2C02613DD03AFD4C4EF8058EDC39144484066F17A9C65F6BA614EE6718FC4F19
40F23ADCA6F262ECD504910063BE0ED30139D77F4330D4CEA86518933AC98EDC
BE1D577118467A69E94B5BE5BEF1D6894B107F50D12D48F2A8040D679EF3269C
FB0DC976269B858DB017FA4975BF3D2FAB2E689CACD7EDC98E4102A25CEB5DAB
3925E06AAD3CB705812C2C94CC58D54DB5DA164F23BEA5305CAAAD15CB028A56
366C7126DF571B3F5167F05E23098B9128ED21509E9FB087E47150E40CB99732
78DDD26A003EFE01053CFBA0745887BF473F4FEFEC4386DCDC7F0C6E397C24D3
0A846A4189398390D65B3D5CA34F371A0AEC65A62C69128FBC230B92EE8691B0
66685DC98AFFF5361A24C8FB79DDA0B694FA7D31C929A5D704AA5214BEB32252
0792BC99D758B5B63546A94956A03C3D9C70E0DE718295BC7AD7B43F364EECE4
0E79426C6D96A884EF54B9CE98494BC1579AAB0264FB4DB87B79E7FCD8AB2AAF
CB0C635EFA38EAF47D2BEAD1678587C0D728F68708314F26D2A2729ED36C79D0
9140075B4BE1EC26B99CB38A45D651C9B7106658348B071E326470ACF82596D6
A08A5D6C962D53A654F2CD8058A6CBD606DD31F21EB7E7F05E6FD171C7A09829
9E727E243F314F23A4ED79591A18426074DB8205F03C4AFAD06DA086BA182DAC
D024669DC346564F238073FB129953AD79B9BC7385D57974532B6ED3E04DC41B
00461AC2CF525F3C69F95FD172232C22836D454D886E7165884B3C3F0A13F226
42F92BDF08A01605B20D31BFAFDE1F8A05B8DDFDFB223E0DEEF7648D06C3AC36
3328D31F67E6D74AD7C5620940AC66DEFA5A09E0567FE9D25008CD4FB0931C50
BF4BF92EDC847AA58F93B7CF8C6A86542B6F3909DB41E3DD657C1C0388254DC4
581E676615FA9F36862D9EE82991D12ED49D8357005563022BBB48A068270EE9
60F4ACBDE0AE697504BDD7FF1C136304F482AF27EEC8E600F0D57112CB68CD96
13429896112D52BE585917DFF2A94EDD7453A29818F72AA1E6A2DD67305DEF1B
4580FB83B32854AB6B17F9D82DF991FCA19831F43025BD6F32BEDBB6011AE93A
BBE2F4990271EC32FC32B3D98F7686712E3A40C5741CE31256ED71AA518F73DB
E3C69C353F71349D1F33F32A68A7312BEC7AA93AFC90849EFC4611AC2544F7B4
CF851457FDF0FEC7EC0F5BAEB6C028F689BB35A59364522B85301E7D4297E484
ED9A4C749C97D3056EF94F3FF44F90BA9F856D26B1A8DE3AE9E40F6EDE8A6AE5
C91715B344E7E47D370BEAC90AF7D9ED07043971219EC2B9FDB6EB9D2227C7F6
DDBD0812FCFC3914142214BE68789A5627505EFE03769712FC14D21164859164
C151F09F8372AADB490B2ACB7B4935D967D63D4984BE13AC3A09DC270CC0ABAE
8A2FE95F7F59357030268ECB6EBA50DC2E1C1A128C93F7C6CE4C5C12958897F3
2772A4AEAD8531381F969093331CAFB562E2826D58682C2B8438F78F24211915
F9575559094B85F6E3D097B0C11731660F0B583BEBFEF467BF256BE7C63C4EF7
5052DA3D62BFD5608DEFC187918F44C3028D66035CD690A0E5ACDD677ADCE466
162394F4D95ABDE531692EEBDBC6FABC321086F5E6291AF91407A4CC75F1F3C7
9CC42C48D7F45DFCD553C1397B787B0BF05B4214FD42DEF04FB721603338302C
04F4571A2FDE41C19FBF5BD30CC9F7AC5BA95406CD45D98CA4D96A6590BD0524
730C542A8BFEFC7D1204EC70F0F57D6AEAD258434DE26CD1DE2907328312BC10
516F5F7F2BD5527F5651A738A7A015A7D116EFC225FFE67B332483F28262EEA6
D64AFACA2EE8789F670CD886095D6AF84554CE9E1E532EE63D3C0E7F2E183D46
353D0F676BFEF6743B2025824210F45FDC67F38ABE6496008ADAFE4DC4A3EAC6
7FA57B6101985D24DBF31CE3C6A688CA5F356828D99E8B8194B8CA29A10361AB
0DB5EF76B50EF622D695F3188A8439D06954DB816394719152960C800D3A80A6
A89D11312096824112FDF8585810EA8EA63188E9BFDA7854FCF0D0BF5E5C125D
A06A95933B15E1A798D24FB498E53B248F052C608D1E5F0EAF66D03372E89D3A
9451B166C871263397C46E0A802BF2C5E8E134831BDDB99050DB1718C413B70D
2C5B5A34CEF8118993AC68423594A2546B35B0BBDA2579EEDCEE832B5881578C
1EED56025FC7A8791242CC70F4C490CB661203901811658B42E80B10BC073DCD
83EB5834B1D7E9192A8BB5D15D47A066199818A591C60ACBD6173DF6C49A59DB
A63FB42AC0480C4CFD2CC5D3FAAED329886B64F2B679234727758D1BA27834E8
9559B5C2BC8A9AD3EA6DD0E2CFC9B036A4D7C3DF7EABEE218799176C77E96C4D
54D2CCD54665B3EA8120F06BE082A832A9BA1B0AE2B9791D93D53A719EF19519
F62471EF8466BFF9B0E421DCF682F12F575101130BD98E1525FC3C34EC17B4A3
3F1F382AE3143EF07C3024970AA7B842F79EC742F5FD6F1021DBA9B039789AB7
5614934C9943489E945F42DB7A7C7F1EE86FF76B8A4E803FD2FAA55C4EF35070
75729140118F27D7A84730FBA1FA11E43B0A98CAEA3A513A61989A6D4C3C73CC
7526EA879EB6FB5CEF4A33CA526653810847ABB44962652F34C1E797867B75F2
B44CAB392FC190D63EB7C1B283A40FAE6A972423E1665D6B203D75697A8F92FC
67503C4ABFFE24658A111C41FAD704122E873AC2232475CC29AA107260E01880
4C21F35C32F6D74C819025676E2175D3A97E9947FB53054F845198D3AA7AA3CD
9B384D8BFAF6A96257EBF0E17C1943C9AA290F0871E0B4478AC534ED03DFFE54
692EC5FE0BE26056A1ED345261798A71131471D918BD99BEC89C786ADB79D570
90F9EC5A787BC2B2974D041168CD586ADB8270A963DB7B3F14090F336727597B
469268EC6E0209C58224AC277C3C42652431ADC8F97EB370995DFDCBF2B4BA05
9F0EAB1085A6DECA86D23C485105775DAB90DA8ECDCFB48894C779714D329955
385B8654E09A45041174F329C0F087C26BC75496FC312574765B8432E92AA937
53A32A2FB47D4D1A6C882128BC4721A0A585D29537B625F66C15EE896D2D524E
D330E83FE5881EF321C22D5F1D07E96F2917EA404C16C3924945DC5D4AA83506
AAE14B9F0B83402466C5487F764CDA7BE6384DAC72582C64B837F92AEB3253BB
62911A5A38D34BC02D63C2EEBF747178C2BFAD02F9B3DAC38757CBAC620D96CF
4765F4941A1D004BEE429A06402FE8060EE4DD1A60206F1D5CA42E2F9C5F9605
737ACAB15831EEE8CCB4873A64E56A8FA096F0D45CA0B55EFD84FBD537AEF2C1
5EDCE1C69E9DFFE22C90244E5B65E1DAFB65AA653189242847133939C2AC8BDA
F9E1E8940F2E358601C3211185248C94EBF559A8324E8C662810D426B7B27FE0
4BC5AF8B8C99D04C46D91BBC237CADA50B88C1E84EA3FC968D467D2AB1A98B12
929728B26AA05516C020A17EA777644C5C6719B8C2133E7BBA0772C54BE5C7C7
2D2558759015A26113B497CDA3F811E0A17B17FA31CB17537E0BACC0DEFBEA9A
B6CBD447BC34511D5EFD72B47EF37755C1DFE5A7582198998A4580CB5DEA4428
9DB95D025C1473E1C6CBD52EFB62D7CB55C533BCF8DF28BF0F742C228396BBD7
F9B928739EDFBC972F9CD0478D698DE3F8F1609A015C5F9DFCDF6F01A1FFC897
7C3E86FFECCF595504B26A262459B2AD026E0BE2D892F8471A21E0C3321970D9
B87083B61903C5A437A5E7ECEB2ACDB6A8283C102A6D3E43E5002D6085D93CE9
E013B237D148B142D9EF8D817ADADF98D390470EBDF17D40C2E5822589DEA9BB
E5376EA186A303CC3029235D9530CA4F87DAF2C568E36806037A673A3DCB8523
9445269AEE8344F3377C9CFC79D45E26FEA0BF57EB0EC1BA5D508F5A604FAC12
D252FBD15BB150DA23D2032CF8A077F75BD74E10CC7117F836783BE5FFA281DD
38C6CE0373D84F5B53209CCC43D9D4E44F5612D86F5A3AD4E6D7D94E0FE95E7A
42C52D6D73D90BFB598E318B5F149DEE8D99110F55F4E99101ECD558B255124F
1517738BCB8161F703187FB45194AE467F9A66A878D5DB265EF59FC9D518FFB7
C1EFCAE64C4AFA3C807C6436858E7C88E240D30C0BF058C1C16C168EBF68789D
77D69970FDED9632BC47BA65430F0AA40AC8866A48238E7D7E395EADA6FC5759
312FD1E92285095FB2DE6D9F55CF391FB8235F3595A11648B11F976E5D4C58C6
3F81AB26015527813F83371B1AF331D5743BE877089E06515F6D2178D933323E
EDF2ED63D0458CB58D1CCB51958A1A6B510CA3EFF6CCD51C91849A42835486CD
A1C86ACCE12DD6D3AE1D5E1ED124C65BBB4183F1095EEDB664D6C78F843FBE95
54D85D0642BC81915734C136CD3B378AD48F90EC5B3D70C8E6AA184DA7742BC0
A02087F0C14E1212D132F110E24B0D230296AA31846FE5F65688EFB5ADCBA829
B870C93D199B4977D1FDBEC590EB76B26FE3CD9241D0183E63BD3C6EB97FBD55
BD5AF9F89B04CE37CEC31962B6574E462895E5FC06466890853DFB67D1CAC601
2823ED7B87B9F92740752714843B3909806F7AA6238CF8025F1BDAABEA475361
7B682B3578B213168B72CD50432E41926589679638E48AA8E16418FB8351C054
9D7E29471FAD0611BD7DF1D31E48ECA6996190A508D1510E2972795ABD083D4E
41E29B349B99132482CE7628C786E1F670721E9DE869555D52C89E5B01C5F6F4
941B5A27499AD18F2A92837B02A0083C7E1F89DA32EB8E8C6DA544CED6B69CC4
BB57770009D3C370E9BC086C0AB350161DBE32B1893EA9B7E05CED934AFC2088
69468F7001A1D30DB4A081F157CA3D02AB78DC04F4F54CB78FEEDE98D1674023
1CFD947FABE5C0A4999FBFF0D3269E7438C4A03FB60E6725D9D0EE2CB2A262D4
F9AB65A4E9D20820F8416084F71BB4A8A4DB2D5274D30E46F0CCA2D1D063955F
23868D8E70FD24DE69DF0F3F61A632D6F08BF51664257C201B4DDCD49C5FCC6B
A0DA0E69A0171F21545DE1B3C1607D52B2D16FDF12E161A0C5D71C9D249D7B77
D7294869EAAA1A3B548845804D87ED7A1B7CD30F28F32953309E40222981A73B
2E425FE17572BE30EBFB487E677C765A2718EF8D2B8B5A269CAF03FFF8C56126
A8332D943FB708F32F5C21D916F8AB4960C835BB67FD5BBA1CEA2A7946518817
F3A3DC18FA21E11A54951B5E8ED7358A31240739CF04591CE9226182BFDF2AA2
BBD9ED368170A2CC61DFB70FB19A1A3799A52F91B00520808560FC203C9E9340
1F12E56271CCFE0DDB1A59C1DAB423DB1492B44FB9F56AF277FF5D32F0D2B9C7
3E30DAA0B74AE925438E9E277A4E8961D9EE652A53A37823AD9A11AA7473D08B
69FE68DC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDA417B02BD110204CA1CC8DA7A39DD
917E09FD39B4341967F5C055170D7505B97717ACE39D7D4B8B6AA528E7A4CEB4
CE6CDDB4BAA9EB42B3340492F822C11204E340653A1B4BA0E2792D227EDD02E9
99E7F31385A3D821F31923D3D8A54E790A3188E4AECD685BF81CB8BB3376C1B8
A53C44B727AF545A3B6DFFA6D7243B672147138A85F84F0E1339008A3B107E1D
3BA28699D9C0F3EE9462D973F329D281B6346A901E84291B9BC6FBB6DC560599
BCD491C34C62BADC626267CFB8680CCFF63BBCABFC4145F47354C1C1B24FBF55
8653AE50868A70B8C4FB3BFD15FD78FC26415E6ECFADCADA97F5E442312E7C71
7EC32EDA5264F9AFB4B1C23F755295DBABF57F992408E3E8BC945B8F5DA83399
9F9D8865D8A7FEED34D4B3BB450CE561EBCE71F8245BE46883FBBF86FC42D933
764491F2111DB1AAB1889FB06BEAA1E0A05C5B34B73F2CC4CF7E8DA48AE10F19
464273ECAC6A6CB033D54FDAF26B69FF8D6977A0446F6FA88A5971DA9C4C7C54
0C3FE0EB837DBFFFAF3B888134AB38B5B3BDC9B4B693CCD10C045215C334AA21
432F7B87CFC3379E39B03AB1B045CF5A585471FD2528CB9881A8D662574D9D50
AB0402644E83479EA265192B41D8F3E81B4761ED2F0550746CA3B21B026E261F
8D920C2BA8F9DFCCBD1B7733EEA500102E39529212B65E7565AC5AF020324F9D
E6D8E2A8B188CA63FEF456A75E140DE04E20DB774161952D462620AFCD9D1A3B
E3D924CFD804CCCBA52BFC37FF627F4756AFF8FF8228DA79D22F234DEA2B1357
B57FD13D103555BC02EDC17DE7F799706A7FD3F9F720E758D34457C4375DABA1
59A0BA4C84FCA53BF48C6C2A7301B9AEA1991D60C1D342C94322EE1650813B5D
28C3D12101A2D479F06DE3B3989EFC9A88118F099F809C932D563D765726D115
86344133382D331831B396DF4BFC1F0A92D6F02230552813D09056A4641DB559
D48D595441661A4EC81D335BB3962F62637D567840A46DA6DABC425E3A9EF06F
4EA3E088A6BD15DAB344C2D399B8ED3F37CF56BC4FBD7D532FD3D3F43B63C5B0
D505776A23D1FF9BC1254E676081F8D2385EAB829575B1E299B90BC0E2B10849
911BFF3661A33C7854DEC7E3B360C908C46B93419B99BF325410F56BB1A0E289
C7A9FB16CE645E375D2D9602780E1AA7C716432AEF9668F3810179DC90C59520
2C09EA3BDFFEAE6F0FCD498AA9A95CA04C177AB8F232976C755BF088C3435ED6
A5E52AF86D77936A6DBC19C1B530BB862022BD227FBFB835B72F954CD6EFE824
4CE22B0906EDEDFF46E92A556B304EDE9977C4E15B9FE0A331E73187FCE8A620
1D5D357665016DA0D967FA153B1DECE00BD6616EA0A4169B6248276BB9C6250B
1E8213746BF679A35FAE9F6799BD4195B48964E2F4AF06E10BFC4FD099199C38
7A31768609A7F38B46E72BBC36C3BE990DC7F38817514AD69DBDCB239E1E9680
DEE87C065D2BCD6D9873A2639BE52FE1F6CAE547879A56F9B5221EBB3FE57AAE
D5212E005E90CE5595423F2B6C6C9B35033BC7F153B18F55C5E1F0FE593EAE2F
A8EA033CAB4B28C9ADBEA5451DCE37DB12384D48A70A43187A73655F4CD05351
BC7621C7DE55DC385B2E2E3B2B5CC33DE5CE03D9F2515BF63CB289D701A43491
C4C0838B8D797205E96BBD37331DB4068BE99D304F82B16B3597E8AE55B7EB3C
046C2694DBBAF882F87811A96EDDE55E91EB1375ACD9152362D162698BC6F753
5E14CF202C75FD9ED078A504A6B8528B9F2B8D803C41812E5A530C0BCB3698CC
81534EE437E8CC706BA4C3D1F8C10556655F21C8B06B4FDF37FC4C6C7ED97BD1
5B1763422CB0803339C6F13F534DDA1DA88A06EE36401A2A54A603C7AEB74884
2A457D7D25D524AB32E027FFB7349F60E61F77EA29CCAB7F5AD6B25795BA44C5
A01A477E2B06293A8F7AE05761B5334EC794BA47E30E92CA26032FB2E3B0B8DC
46F0BD3A5958376B794F2043A295E20957A964659C86241FE188A2B151D9D4FB
A51E499C415360671187A075E0F09CB31C059ADB0351F9DA69CB4238908072C4
7C3B4A2404A102FEBB173400073C243D3D99DBA4A742B4993D2CD41C77916F09
CAF327C00EB60C8E07A7519DCC7CAF54AB233FBD38636C7FC6C86C17F454F91D
FD32E68100B416B920AEE5961F3998DBF89F81127D86DAD3AECEEB0FAE735566
944F7A9EAEF75A00AC502DE539D9D1E10FE243086CD270CCE11DCC1AEDEADD41
F3FBC41AD8265BA7F47BD26C249CC889C8236C4235FE8754256B7C13851A77E1
E7EF70D68ADE47B35AD94ABFD4F3E49F4ED6349103E97E90C869D857E5E4A87F
B4F67ABD854B7A7968BEE119F6775636D7ADDC4B61BD20023FF06A5F3B1A51AE
4850C6FDD08E699CC06CC8F3C38638084F8F4F7DA8B4AEEED92180D834A1E8AB
45FFE334532FFF6EE351252820E23932AA7944AB0472007D1FC5978132A8D4E9
ECB3F9E610F7F5B818ABBAF1BF0EB39F4DDDDB970B76BE54F518B0969A5E6E93
2885990E7EE6C9F7CCF0EA8148750E685156270A536E5DC0236DA24612993121
152E790F08DEF0F19151DEB13BBE9608B43085D30037728B54553B02B7017DC7
778496D1A7100D9A915D2A8FEEB52E65BCDA0274E62FED8EDFD2958C261EB631
08D296B63D3812D4FDAEB0748EE27407028A653314B65D06C5BC07BF32162700
94170B88A9733F8AC91FDEBDFD3D137471276AAE0A4B270E83763B0A2329983B
9E6D3ACDD980D00F32114D4E6878DDF75CBBC28E40A57187FE3ECD1F3A95257E
B6BEBF733F30B3AB2A4999B237665D56CDAACDD413FC1B81E54048AF22B22DA4
E0A60CA6556B0473D8CFC67C2D25384D8E7B9EB31D79E2C4607421389822FE49
C0899A9FF862A4DED7EEF9D6D3DFC4725763035585B9AC04EDAE551CBE68E845
19D138C233FED4D46D491C992B3061D71E2CA93C19866DBD95E41C04BBD8EBF9
8D81D8D42F0A83A78BFEAD7F2B6BD949559C75D50190C0BD04D4F6898BE61012
BB53D2395A6CF373C05EF8A7BB32F7D29BB5955814EA226DAFAD36D8E3889C23
B903B1D4A9906F3EAC5DE29FF4E6F14E8394F0BC5151B2FB0997E30E10B11C2E
D407DBF4E8384545462B07AB66D806FFB4FD9A6110CAD90C5684346F4B34DD12
080D7BBABCC56B4CC24011214CB26E1B288213002FF7455004899DFA70E32B08
AC6964F9E3877134CCD5C05E3694F0747C51AF468722A6D9DF0F2CC97C981D1F
C2B60290102FE6FB37F74086885043DAC5546E0C6937F45C869DD22A3144EEDE
7097839CBA65F0FE940B3C44B1F90708E170AA533B314D3388E5EDC9798AAE0D
B68A07DEF75DDE7F2801BEB018406664A41DE7901D41739D3BBC75D023C39D42
5BF39CBC57D26831631D815671BB840727AABB2D62FE2EC7EACEAE14BCE3F098
92D3E0DD4F4D3623F66A0C7C1541FAD33414B92CC178DE8854934420AF3C1FF0
4299D1A7AA1A794E51C97A21C0CA0BF3439BA2BE59F8E6A87D609F8112FE1693
7C3B113470B3565D3F81AFCDBBFE12AA6D8BBEE635DA350C7CB39EA96A24A474
4D21E2ED4D69886517F3C288032E20E62FCF6BF0FE11A1768768D62E330A1A3A
1138EA6A07CE358D979C7BCF0215BCA4082D71845FBDF9797E552D9371C3C780
EC2DFD2F44F72E36F45ED80C61C96344FCC4409AFC64A50A326C29ADA8F9C932
83949AE5DDAA3A124D814805FEF6FE71FA5F00036964E60F4383BEA654EC779D
D27CB4B23D2BC736647D31FE4B56D74AD399FE64DC260E83E02E5778AE4B66E3
E62FC68024167570887B909FFD01985CBA3A3193DC19BFD43FB58238A472CFFE
D6901B6A915CA708D66A56E22543725685D53509FA2529A052AA14FA1A81F472
ACDA198F13F6752484F5267DF6BBC18AA3D72FEA2D4A122D90C64FC0793B1780
18DB98ECBE34ECC1C5D3D13DECF2FAD9DBFD939B0DFEF5275B9387723E21DDAD
A6C8FEEE4CF11F9410B30C4CD52372C3B9A58EEC40F4BE6FB515312A345FF18B
169B121155CC018DA8A7ECBA85BAD11E560633221700A5D79FD0452BA2763B01
36E0B3C29DBE7626520C3D5B005A6B6FCFB4DDA7962DB9B7851E6EE24A0C5347
5186BB44083AE0EB573A80A22D36D08F90A965C7707608D027B4FB3158E70BDF
616FA010BE479ECA5B7529BAE86B985D635A5C22D9DC361A0FFF2CC6C99969AD
FAB57808479497E3DA4F77FA2A33C0EB41B17B37AD959A00105B171463A54C6A
2BC2A477CBD1EF75BF4DCC2109372BA2464D679D681C8CB9BB0E985ADECFE052
28623BBD35CA0C79E221EC7CB9A782AEDF8E3B035DD4308D9416FD5AC2239A45
6BF26D6CE820FD9AEF5C64C4500E5E2E27059BFED024643F11E8C556B974C8F4
AFBDFEBE59EF1E1BE6B12BACF17861E1733EAD5B5304E662B2B74079E230BDD5
2681B3F2C90FA00F676CC96905D0903759D2160CA4E48711F049BF66A4D2536C
75F2E1F60443A5976A1D80A56B2DD3F25D5A9F620224A0A463B7BC2C470BB798
641004773886A04ADAF6F101831BBC5693961947C8E634517D4C7214E2BEDFE7
B9965171FF22F317E190EDABF4589FE68B29179A3EE7A613BECEC2EB1D508D77
7D12E6F369AD159F4E57DB6C8E2204BF56F8C16DAFC52C182BDCD360198A1FBF
23086C6228B7A1F6CB912C11DB4B6844AD72A716BB352EE5D09A2B62BF68EF83
C6189C3EB666676ECDB3A801A16E005FAADBFF27B268E561EACD36096C1A2C66
1A86696A7A3DC4DBE06386F011EB453E7BF1C87E0C51CFC7AF5249EEF89C2440
4813498B0753276F4BB7E88D9B25715C038D31E57C27BFC71800D99D27C91232
2C4C7D067E2C8F2F848948235DE1213C373E7CD72A95FA87777ADE6B081ABF68
EA8FB65AD04BF515224AC2DEB09F90C6EDDD19B3F20D1A3C5064D261E53807DC
EB18AE31CA50246268C727A160C1D93F90B74C08F28A293A332936D7F569B0F3
99B9DE9AC0FC2BA2D452A48A918EF0FEB00E6F5C40FF92A66704671E563710A0
663CFB5DF462A15DB507610322A4E259A6A166AEB318C3F9677F1EDFFB70E37A
56387975D2D1A7FD2E08954B045928E89D218F1F6C4BBF03742D98BEDEBD2737
E9FD76F13D74D63940BF6F0B1594C0E654BBB8C088907CBBC5C364B79FA5E978
162B91343D574BA11750F8E4E56DD5354B3781C27A8293F9CECF50CF20E418A5
2E37E86AB2656B3FA02E39A102D4A34D617FBE9D2FBC52DDC425C3704620D9C4
0AC94F0B5E57259CDAE5AF6EA9E6AAD4B2CB911212C29069BEA65011F5DE0182
9D8258D714D2B1A8D3358EC6EAD174672085096C79C90822CFD205B67489C32D
8598046EF68D0D72F7B6FC21F2D9A9DE704F61F7B4583DEE0DE828D2DAB89D6C
C190743A5C20DA6A8178F935BB8A397636C82C9E0CA92F06C6868A12631F0E05
EFF66FDDB2710B09E9D191779B1B18519966C00058434E3250B1E3C51432B0A7
D280DFAB8B0B3A520B3096C209F12E47A65CAA1D354A5CE0548710F84BF53188
8ED292F9E585256923F98A708B1CA042037D5FAF6BDFBDC7C05C288A94E0324A
FD7ABF1382034858C5F3AB1494C4FF893F23CDA9C9211DA2C205CD2AA342F57B
79AF03E06953B7BD26BD650D2E8BFD6DF38B0C016C2F70D9D5E1AF1ACBBD720E
190CFAE11784B689D1F8A83AD6C61A2580AD70723CA6AD93D0398BE41EC9D909
83844C3D5A9549C017EA269D9DACCD1EDBDEA727254A4791466991A433C221B8
1883962192FEA46273B3F25A32DA0A44303697F620329AC046829628440A985D
511CBD9A9350C9D9026B0583124740AE8532375D1BBF4D440AF248939790089C
C7B8310AAD89D385DC0C12205C7C32C2724171396D6DC75524BFF39434E3F758
FB4E4B985BAB66F691A493D9375713C8A135D77B311E109ADB2A481C558A8A58
F4F6CE6B5B7B9EFD3848E5B940C93539C03A084CECC414A478053A37D8581767
12F636C95B9F8A2E259727FB442889C5BAA90DD7C6471FAC0F12FFD947FB7BEF
ACBDD14EC74FAFA34A540D8CD190D65BA79839288120C5D1F96A5ADDE484D92E
54EBF822D93B4534F8EF1937DA1C2E624057D43218BBC1E804D7E734890C67B2
C9161338F5B04283E03E456469890FF4509B2D5C02CF374A21737805D0C1CBE2
84B3F92ABB3F58C8E45D64FF0A822A263BF4320690F24B4952A15C056D3DED4A
35DB2DB26CF718703C1B96ACBB738FFD1FA059DE8972CAD02226662C120E04A6
CCC5DAC8FA84D7991CEC0E53979C150D49077398E62C40C9B4B9F94C3B9DE3CF
D06CB91348E4B373E84DBA934E14B445370AE0E08932BA43F63188280506409A
648B7CC49D3C849BBA0115240EBD9F3304B97C2E49A2B0BCDD7D1266A3DC4391
BBD126C51614CCC4AB6038FC4E4E8B1C5D2C91AC39A18D7BF2EC4C60BA60AB0E
753072BB4534A01A455AF29279CBCEED9358BF4F2D5163CADE45AA5E6C0AD8E8
F4F43C55797DF4524703C286468CF0B1E71B047D5B45CE05028DE5DEA56D5FE5
DBEEC9B73A52E0619712BEACFFA0073681EAA90BC4FA26B7719676D8D365CDD8
FF305059C2E913B7978671AC30CD552FBECE96714559BC69D21AC4717AB4DA3E
17E4C4AFCF4C0252E4700CC663CD9BD9A96BE65D64EAC7FEE09C6B19CF4EE5AB
4A57D00BF296001714CD4537FC4CDC8A0970117AD025F24591E5C2055184841A
F62A2BCCBF93175CA07E1A18F5092A40BA110B22BFA41D5F9839D353FB2BB4F2
D68B0BEE81DA8961F8B1E7017C54BE7C5D0A985A86DF5A45B925E6295A955A95
11130CC05AB774DDAD26A1780F64BA6366AE184786E200708B9E30FC6F7D1196
4C40CC52ECA9B4CC4A60829A6261940F0E0F7BCDF3A3D0148384AB91C348E863
D2435716CF5758B38327DFC9737134921969A2778432F82BA262D846549BAEB5
492E6172C54C478BC86D679E946CA3BA5CF413E9465984E32BA2EC151E461AD2
8A9416FDAD02C66B4962C2757CA9B86261AF3E8D1343D6790DF9CFE7FB43D842
99D336731B10CC544FD45D8CD8ACAFC83A59C68FBDBA63C29C3A654FA3A87896
0546118C9BB6E9CA089C6416DAD9ACAFE3E474D777E28143BDCD7C48863E5F79
F7C6B709640B2DC602C756B50B21C4F86FD758BBC0A03F3B94349F1E95F04ACB
64187A1D78943C2158D476D0FE0746FC177ADD014E879EDDF50407A18C6C8254
DC6DB34497B1601CCD1D4DDB1F26A81F14E95C760ED3FBC1E3CAAD28C864A007
BCFD45C3CDC89CC8C9D5D25C97B02874536B8C57A1DCBAE2F4E3140F39C37661
BD3F8DDB9BD095FD80DBC3702ED6C885FCD70225D45D3279763BCE0EA770F997
1AA17DE0E17BBE37905515FCC4A8C32A45266F3F74CCC6D36338C2C57A0FDFC9
64812C731406D0BE0A44D1C62B1A54C22791D1E6B510C69D5841D811C7B885DE
E349C0C1024072F3464636DC16E7D05FECC03335E0043DEB92924B8AACE491FB
A19CBF02B8C539FB20F08257D40F890FC7E35E8022DD8B627C799C8989072BEB
B4E8D9E3BCB218EAAB70B00167D29AACBC589A197A4731E8D41F9227F6BE6853
7E823DA67CA33890CE564C4112B0B0769EBAF51D6AE1F86E024C544ECBE22F4D
868327B0BEC20CB1CB90603811072A328A9C0E24054F54CFEE4F9C307EDF399C
18ECC24FBCF493BFFEC3846A4D6286F04204F9D0F86B98D3F0109FAD7C8B3AF8
FCAAE0DB54E31F51D2AB5429BF76E1A750F02E22997354EFC264E79A99A5BBB4
F12FD9992185A4C15B57C07FB38DE5C5CBDD2E731F319A6ECCFEF16D1ACE5E31
854E4A1372610EF8FF08072E0A9B0F155E56DB3DBAEC46E8326312B3BC9640E5
BF72A2C61F651E0B0956824CBD4B5E98557595851B12A3C1E17BB96E1A699C5A
C2D2B878504A44F08C3E41AFDF959847EF868AC4807F7A2CBFA6986D17A05914
BA21C23A43491BEBAB4DDC58186957345BCAC6ACBACAB9305C85783D9F12EC19
CBE878BEE09826E76A507C95304DF78CE809817FA8ECB93C8F0DEDE8516C3788
B0A9C1675B8AEAB22AFA1014A81DFA7CE57A9133406E0CFA2AC76F3CB8BE4AE2
2957CEFAF8497205D4BD589BD7698D87AD81A19F11688A44F32444AC15653614
9F76989E8C5CF3A281D1742398093CBD222B556C8C3441A119A49BC5D7A89F9D
218170F274A144230CAF5F9BD1CB5BB791863A11DF3B27E6EECA76CAD8CD6BD0
C7FD1A9820EB286C2004296461E479AABC32D7014AFA15E7C614C566419924E8
10BD5F2A845265BEFE150377C2D15597A4D5B01D9E885E0D70023CF144C77A16
2067230CCEAC1D25459655B51446E7E5661E9959F54649B555049CBEEC0D70CE
98A6F91CCD580EA19FC754AF1341AD3BB645B0D7F97ACB233FFA576119456D0E
EFB12A70B27C106BD04ECF97530EE4658257D71504A354FE5D90527700DC510B
038AD7F32FF9EC47514E5876FB911B7207286751F44FD73FBE5B089E1B9A97FE
F3E0342CDCE87E866DF89959D51C64C7A1E697B5E0C1A47542DA7E4BBE80618A
E6B86D9812B7DCD557FB92419B6F325FD324D3CDF776EAF4F2E07CC84C4B6A6E
C0C35157ADCBEFD087BAFFC6C93AF8FE338E70387B4F1BA2119F2776C290B203
FEC93C2A55B85A45990EDC7897E3FD01ECEDC3C4AC7AA8B27CFF05C5E768115C
104826CC10B9E952564057CC2A94AE03DAB88E2AA787BB7D77A8828581E23CB4
325FFFBAC2E0F8ACABC6F575CBB58EE2E9E2B9D40DCFF585F81454AC7D54F59C
5D94588BB274601CE2457847107009B163709687F03E8904C670CBFF1BC3F8EE
02B3E24B1C4F7EAFD43D3A111D7AC375945F753985089AC58AB5536A25751496
0D0F91B297578C0D1262FB2D83DEDA1A8258DE0377CB93B456DA0001A1ED0F59
879F23A93F31BCD6269FCB4EECF3171B30132CB709E9478F4BE682E5162DC70C
D52C30C67B52B16D78473321C76D2EDBB23894BC719D68C21A6625E48518D2E3
3F8722F9DCF35E935A614069343E1A056DD350A3CEDE442B51AE330777D90705
5650B89F5EA54F9A330B97295831D9DED490CBF46A09BAE5AF2334D5F766F526
26B632183FFB39E0BFE3DF69B3BDFEDA4AA2F15003996D966AE659680FCAC828
2CA19A33F4F18794570C0036D413CD4310E0E73CC759AC64F3CB8EBF8B5EB56F
41B247F3F19082D609A1EEB7655264E5A5CBFF8E21C8BA71BF2BD98D57B717F6
BABA6D1482E9C73B53029A4C47FE961EED2A60C647D71C880908CC9DCEAAF4D2
CA084B9F14026D95A44F1F65508A7BD68F0D68967A0401053C68ED7AD76EAE69
88B4B6449EA9B498E23B5611D1ED1F279FF714E4BFE0D7A1355DB2C5D658E01C
1E864139C168306E9C9A081B6C9DBD03C02B591D94084F72B337D52BA0C29171
B40E5B3A2198A05A0A208AB09660EB2CB8DB04F66C4CE99D581F41B2E466CE4D
F70505BBBA6A3CBB9136C229194F0E60464C77F615195ACBB9D81B7ACDE3255C
A12ADCB16D37037C46264EEEB0AB0F3F53E650768233F7EF94FF18F2A0DF0CDB
2CCE83B83A3AF433EEE6ADA85F944CA2938FD47481769F64D145A7C308A40EB9
D3F253C0B613B9B633EBE43A317A31B5CF413C5AEB9AAED69FA44A85557A2207
970B04647E765F31A42FF495C1F87AE8E2EFEC60C950B735CB7A1EA2B82737D2
FD49E0051D3DE07A91624203BC9936F54CCBC714C2BEA2C26F768EE43D2F4A66
71859A1E8A864D17ECF179A923F88CEFD4976ACCE231CE259606B28E63372E8D
A264DC74AFE50E44F65E2CB0A1A45BB6EC900FE55C13C056DADFEDAAD93A0740
10358A1F4454D9AD2AA32F42B6BAE080F59777FF203C063E2A284AEB24005D27
AD1EAAB824D6459C888A428F93ECB7FD8F8D465F7F7669CD8740019C05E7DC5F
A22E48F0D8B554898FE5A7F68AE4F46EA4E94DF8C0CF8D592A2083F7D1FD2D9D
AAF0AFF6DAF7CCB2F683EAF66A0A030E6741333BD9E8D6C27173368CC29BC7B3
F85762A0881765BACD0D957DD184E2800FE0A2EC3D65AB1E0614195C9C622EDA
2171FAD3B1B9A5AAFB7FB94D285FC986DBBB1F3D0BE971812A8A2481E7673C55
540362D95DF3E6322AF32FC2DE3216EC23343FF9ACF3F8387DD8CA44A5444EDC
6CB02E2FE17C0A3F8C3FE9A55C1A56C776C66585599E61A2C60B1335A2805ABC
3BDD397FCD36E2A59E57F9AB0C5BA35630777387FCA5F7EFF91D63AFC49AFE92
A4F7686797569D918E635D4D7CE65946B6502899FAA6F2C9712EACE9F9ED5007
61D477BF2E71696F40B9280E31DAF15907F0E3330146F527C2045B34096424BD
46D237D5AA01BC6FF7AA340B58FD8E51F3CBD577F6D44DCC6A69F94C1D544E10
280177392F60E826BC6C58F3065D9E77A3EBF28F571279CFF261C7D433B2ABE2
9D96E5720E9ED02B59C7974E59812F6CD9F83F21CFE1217CF272748BB9CD757E
BA6A31319B517B5167975510EE20E487556F5DAFB429D825D44DEEE670BDE027
8B68EF896E2B0FE4E7F1C88DDF250B9B5A29475E6D8C7941A079B1FD89BA0DF0
E54590636A011123C4CDFDCD5ACED4224C927D32A783E20FB2AF7EEEC2F7DA99
F12110E07D663DFBDC0645DBF8386C20076B0AEAD03AB485F43DD669E9F6D78F
7F3A3AF42466FEB2E4CAA480DD1974485126E0DC86B790B23CC66F6219AA73CC
43AFC2BE532E50784B9EBEE6567ADD2E3EFE169705B61EFA719E31F3B96284B0
BF99C0E1E1833E2039E24363A3AD7CB0C2037CF791113B860B0D47CC14AF0AB9
89732566F8438B23892CDB6A03A7921BB93949E5A9BB38D19E9CFC76181E7A39
3C94FC18C1B05D415D27F984C2222C78829B92A16E8AE2275E83B62148390BBB
5ABDB1948579E71AA12D0D219EC1D72037E7EB556B62EDF98D758E1F58080B0E
69813EDDBDD6A50E85C4905911399FC92CA4F6D6FE72CA460F99E254F777C033
D331304FC61E85B51677565E8CBA8E27E01F80385CDDA42BC4773F2EDD7C039D
572DE4DAE9060FA7F9A0BAEC0C425869B4CF96EAD1B32794C8710816792E3714
A650016570E0661D52C300B648997494E26582C63DA4F7183F4D00E642784CF6
0A7160BBB63AB922D93FFB23DED8FC8271833ED1A77EA1698C2F5CF49F26F26F
D17F45AF3028669319549C504B0D2F736920C2B741BA1152BBDE8A886001F7C4
02581B0CC9EFBD5FB3FD4D51C982DAC8401251FDD52EE2947D11E5C8608879DD
561E74226BE2E2ADC5D5981A30669CB58BBF707A7599643B3A3AFE6769D626DB
145919DFE7B50F112D7B3C74146E9BED966ADC9AC3066DEC620131A7AD233E25
17EA1F3A0D717F627E6E35A3A02E41A5B002F270FABBB2FB66F1F99672015F63
E799FD8F0930297B9502E608D5D2D02E2EA537EB4A212A039657136BCB527910
85E29AA91B0E9C3B65BA2CFD50F50EDF89471EC54020100C4C88FED6831B1573
DB1568E754F9BE2B31C69D458491A14805FE32AB67F9B931C4DF3BCCF19C989B
10C63E09BA4AD90D250887C0AC4B0630AA09544BBBD1EC62BCF737143D7CFEC4
D7504C2A4EE8807CF574D5CAE264D900C87563B9644DBC5A43A26CEAD1680EF1
06FEB041E83771F98E7B5882811AB467D8F7510E779BCA19E8B862D9A7732C55
FC2FFF0626FD0627185737E61412FD6F58C0F36BD8EDFF73F64C04A253FB6B38
2A71BED2EA51CAB4B576CCA11A04B220C5A23E03EBEAA698276DE1526B9D864E
A5D47229410F7EE9853B43B1B240A8362813974AAA01A65D54933D88CB885F85
2C436A8827D3BC6E645006400442013414EBDDECCAEAA9D4A36AD455F8B4A794
23F4592759ACA39C85E33E5A6730C75EC60A21E113BEE3B07609C5476CE63308
7A7A94841288F4914296498C6676279E25D3EF435173A1AEBE4A76344BC71752
CD1C643272B55ACCB38213D7CBF5F6789F0F8FDDF9E9A8D62681096502112710
68E40FBAA40081BBE33D277F848F5D56F7A36A1A26D7869FD2E1FB8D233102BA
A1E989E1BDDABBD45B6775D4A43C39DC235BF5AA166532E51765B51414911413
4BFB10D10CF44ECF6808357965EFAC0BF2823797412664FE29625CE9ED7F3FDD
8973F1FAB90EA4CD6CD45D38E67CA5B0070EC33AA959A7A087C1E0ACEF9AEAE2
2EA07D19DACD572820E9921B37483D92AAB7D688A1EAA810FD63A78F2D0967F9
732D0D996485E892DAB7F5B114E3E9AA7B29B4B7AD7E20F70A1504517B1DEEE9
F2AA3B54C7E20A0209F24B08A6B98DBB2A286D03EAE2C249EB715CAED426B56F
FB49288306D5EA042BE129179F73A461ADB8814049088CFE0F2034B1F6813CA5
879DB357E8CC804950A43B2D2707455C2305C7DA7391F7331F6E69FD85DEEE58
3B3B2865F90D0953B14EC8E545CE56812EFB4132ADFA39097E2AB4C727082AE8
66D04D040438092BA52EA36DD45FD7F871F34615D250C3EE1E0E78BE2BA0368F
34001ED91D94DC8A6EA0D7A00318012727C98E4CC4DF3C4737DD6ABB038A666C
543286DF588E80334A90E1452DA826291D7C90CB6F6CE8D94E299955DB065A55
F8E4F056547A947CA8CCD1B5D61232121EFC74CA0E20D703CCA4D0EFA2DDA860
29439D9B7822941D7D4E8D4D3492155A45399DC1A9FA200FD57DD32D10BDAE79
349AD1F102DAD82F90F6E03E1AD9F1F89F1FBE7EC211262B9087D88236882828
5A3CC7182560C4638DBD51CC57C98D841499F1F6A34B8EEBDF20E14FFE7B32A4
16CC5EFB7CE7A5953BB55492A8113C31693DA9DF2CBC91D14993B3EFEF926AE8
6BBDFEBFACAAAFCED435240A15AA677A159BC525A20680062D5FFC8102087E04
886178EC3ED978D685B2D758515ED79915E2DC9D012B20B7337AD518AF153978
AF2EC4B9179657F884F98E5EA069ED49E93F1F2E655178DF3A5AA3908C06CFD8
0E7155D56526A99AC6D30AF1A2655BEB079605D24D0B4BCB2F4C7615DCE91D63
29E3DF55E703AE09F5120049F002AAE79F056B2D445D7FB8DEAEC2AAA236E95B
CA448E48C3C817AE60F01CCD0259C96A7D703C2FBE3CD223B145F810A7815187
2916E37039AE61356E4107BB5336C5C3957B84405224D1175ABE92D6E4E75649
ADE048113CCEFF2949BC1785822D31286DEED651A3D81223A218CF5B89CE505A
8B3A05921A4697DCE2D4C382F34747F6BBAAE0CF9CC862C0204D9D06076EA7B2
10695AC75F7561CDDC2DB7B39B676ECA1799CC660B95F9B92EDE54961B656863
9F3D50B5400A16795883050956B0A0209AE82D14471C23D8B86C3908887EA170
5AF7689582BE22375471A6BA714DC678F2AEAF847947F40CB5DDD7A0B74488A9
9997E242F823048D0E6EABCC595278735EFEE47C7F8524A4270822A5AA429195
8DD8DD7AA63E81FF84C339A03E2692A6DB575D2EC230C7727D1602C06F88ED25
C6268C467352F45684E0746D34AFBF0E3F4905DC9B460257D4791D8FAD89F22C
972588C056EB94754D32E76078E17BEB46E7F34EE946325D42D1AC4C7D1ECBA0
DC9BEB0E4116A6948DDB1A3904626526CDB1B6502A09198A575F62E557748542
D519AD4B761DF69ADECE4248B272231A269EE34BC6D90500476C211AACC5718A
40C7B7C9EE3E8DCAC61BEAA06D2B4DC9BB2673937D2CFB2EFF92FCFF58A58B05
869FC1B6E66CE6E0D9B119C61E15DEAEF52D097851F2C0E054A950DC17B49278
253C7593F61FB620169F2BCFFC7F75065A97CD631AB6F49ABFE5BEF3DD0C3020
B918019001A14CC34DA018AF2666B646FE3810B4B4C0089D76A3CBCB8379C165
6BE602CAAF7D5D2A982ADABC981C40AD9294B1A5B7ABE5C66FD00D5C109F96FD
F0798A4397FC921D2AD184A5E7D9D06894A54D71CDFFAB5E55E0EA415ECE6383
C6EBBFB2B61F5D426CA0467595BEF98B088E77F359F77D2E45DAECB41BA07AAE
77183C14FA5BCB919BA7FEFF80258843AC7FB0468AF36784F09BDCFA0E85C154
51EBF292BDEA2E5E6B4D3B533B799869DAC086F83E4B37F52CEA473E2C952819
DA6204CEB404C94ABFDB3CC94B49515024664974A51CC31CF4C4C11A6A3B60E2
0C692DBAB752B2B099C0B08903D5B44ECFF52F1A13087407AA5D072F95DA587E
AADE7C71723629C725EA94C2A10B6C9773E15C884D10850EC0B926A3A57EA542
764CF40D037C9D337B9DE708020416C269EB08E9921982957B49EE9D88B706B7
49A50A273F26323DAB875F4F8BEFE92BA396ED32B885BD897B35F8789F51F974
530497AE60C647DEB7160DDD926028ABD8EA1FEBE04B4E652E7748885D57CCB1
C1A3C554B9F51160F4FF696B54C89AF1837C7B8B4DAAB62D570D85C4B67C5DDD
369348789093AEC9F7268B16B63877715D4FFB613B098E8FE3E121F51420E068
DFE890EBEB1B36EF6DE2314A42BEB6D94861E72A254DBB429BB6877ED641C02A
DAF5E01F783B3444BACAA473F0D51E81DC69EF38357704D4A06C426D53C4FD2B
6CBBEFA4D46BD43870F7D57709D8AFDCE30DA157E875EE565C715F2984BBB860
7C6E5BEE7BA2E36B44F57019BE1DD6A616BEBA38C71AC0BC464158B1EF6267AC
318DE71073BEC379FFBDB13A43716F052D31C822081D4217110C92B24072034C
419AB856291D21DF9100F1735852AF646749750CA4F9B85ECDBF793E1A44503D
0A3F2095574A62B9B49C9CC878021BE8A5E38E311648ED5F71781690C364DF62
5BEAD973AC62D27DB9B7DB6A72B64002F28FF55EDAEACC80E19D72B2AB1B8BD3
B20C22B6D4C149D8765853B4416F4227485343EA38BE0BE95CFF21503C931509
22D97EBDD09A71C57357E8DA16000C4A4F87D1DDFF337E694E2E64A3935DFE0F
F823D7D6E9B9790131A4E20D55568B1F97D90F7A847905E064CF125A14D81E04
E49F5E8FEF55568C2FBD6619A88273ED164B0C09EB21544174ED61ECDAC4CC8F
8525228FD4BBC4863EC27DBA2AB81A5F71164E77F44E691188E69CB97A658DA8
36E4BFC7A93E2DCE36B645D7A7A3B347D8B59BF7447DA941A0E07E37A7ED4930
CD1445BFBC6276F47A1A015A1CC20BB2FEDA3DD4B367181B57D0783FDCE6B630
CBEB5A1A0FB53477370AA76F9ED7484FF8FD9EDCEAC32096F1276F5FC76916F9
F5B893C188E8C7C1DF956E24A29397B93203F74E5BBD83431460B85023D823A8
4A64DD57AC4D75D333D71ABADA8CB73CAE7B2B36EBC8AA7F89F84EB745B07714
312DB573060A7E73FCBFF66FF96D75D4F4F1D32319EC3C47EA6C37FD3F1066A0
392545EBC4A68915222A83AE5830D897BB6993D104F48C2165F5D8779BE74B30
1CD6249F29EC0163D38A439BDE76692AF3BFD51A93F9BFE05DD595591B2D2D8A
6DF58825B9A9E7E0B4E860AA88B368BFEB23B57CBBBCFC041B6B5645D4602A2B
913D7A3ED9B52F30AFA2A24BAD16E7EA1BAFAC1CA99AD0E24A9F2ED999E7EB2C
87C8790C006372F08A20676F2BE1339F28FEAB364BBA44AFF2A0DE7B5326BD38
1AB81DD9494A11130CE67E33FB5561B098D0BAFCFE654EB805407B79833C54EF
E35A40DDA0D14B41018B4AF7952297671EFCF1938E385B873D6EF941DDC30626
627D2A9E286602CAA78324C5F725D078FDA6C993C68CC76C8541335BD9EE970A
2FA1D92F19907892A7504742041573B39709A83A9DD0DD8F4DE83599FB0332A9
34041012D708447CE75E8C123569CABCBE67922F9C2F13B33F8BA90677EA7770
57623F782305AEF823BDD136131E9729DDD097218CB452F104382A02384B6A50
E60C9FF8235688A90F795DED7479FA61245C709721BD6E919FDB8A804F768CAD
36789F1C1037910EF10A1BD80A52C2214E7CFB694B55C187485AEAFEAC2E2ED1
F6A1B37ED3F18107C4258996A622246234D47501C56B2E6040DC671FAF0BF04F
4D411F64079576DEECECE04D0DC315F974E22A0DB77DB19DE290FA6572358FF3
07B5D10BA599856D85911744A52B5859A2E9B49443242F6DAE11568883CDA3FF
4661A7F2A16B7A6052F2AC0BAA941F92C2E37B2C73F514DA322FD824B1B0BE3F
09B6162AF726CBA211DD74D0F6A2AF779C4CC2FC9272F9E05310AEFE9D707747
8B284823CDB7C4763A2640A40B5248F14FC21E8CC4B80B8CD62020C6D9F19F8D
7E9D16F495EC57EBD9AE52B2297A973F513A65EED284B37F363BAE06A244C28D
31CE9A788AA54B82A1C69BD1452D3FB5352D928D791698BFF7A41E25E0064E8E
83E98BBE4506967390FC918ABD7E92CE8B791A5C45AE186A2F9E753281F68417
A16A538390CD61793C6FB39FB2688CC4D487901AF4A990CB4C1FA385C4EAC7AE
468CD4C4964C07573F05B4482A9549495B3136643C7E800928D25A9DBF632EA0
701460B561C286D9084060FA3F0609B3F7D8F29019A25DB441539E203D910903
5207F2AE6C1107A24DE4A75FE3B1CD880B0B566039B1C206E6913CB4F4378471
74A8A1637218ECB3D232167A61979783C114C3B6294590016D5EDFEC4B07F0F7
09468FB180380A3A486A84FA4FBA65E8E9D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 63 /star put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5B676256F9A00395D5C288EEC3C5054
7CDBBF0D53AD6A18492ABFDB9C34AACAC6DCA7DB1EE5E5E8311C1E98CA5348AF
83FE2453E0040F0C7E1E738D81729458455962600000523F7EF345B56F30BF81
761FCD8056639DD637D4CAE1BE50BBEEC8F5B693F98D2C829C2854DD234B182F
F7971620F6891A4FE773E61E3CB6798E8B8EC333EC4A664F4427791E46B36BAF
EC1B91036327572CABA51CCDDC00DCC5D6DFFD264C25C112B5812583EE0778A4
3127716667
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FED1E41534E9
EA6F14F0175F0EB194260AB3C99088BA3E5E99D1BEF8FA31DFDC7965DF7386B7
6196E350498D4D6E99DEFF547629910A67E9C18F5860124FD1504C60DE06A7F2
96C7A9189A9F1693CA17FD09A3C723DAC77B64A494147AD18E43156C122CCE4A
7E64C9645598540B0F9587295C79AB17E0EFCF9DC7455C52B576DFD557FB9241
9B6BEEA4296669B1AC6FBCD6A36E770D676D2D16E9493A2BA3C610F889315EE9
2C675C4AAD0D289C2CD57F80252D5611A196544197DD7994C11CE94999233291
6E9510F18204616B9A1DE160E081B140D7E73D6FECA39D368A2FC841785DD8FD
E082F797FC2A67358363FF20B5A0762AF9674CAD72D502790E60C934AF2992D6
1E00C8FE8253111A1DF3EBCCB9386DAD58D689D1231E310E26BB4DCB5FD613FB
052F5A18ADD75DEE6D2906F0E0156E91B6124ACD233B3A6A150FE90102E5075E
8FD84410360C848D236984ED2EF0F728D61E02422BFC73FE205DA17C15CC1A2B
09E95F87944EC709466D81A03DB3E4C30CDDEB936D191264060F3AF475E30592
F5B5B257D2551523DB672509B279210024C81D6546452138D6EC7BD602ACC3BA
92DA3E39C2E82786077D93492ECF2B562A2004258F47856731D2B3347F514E97
3975AE8458669835299F6A6966DE25D75B644AE2C16B463727A8AE10C1D99B77
19A3F0E4A1776137664AB17FD0BB8F00C310010BEA88078A6C436A069AF3591D
C15C2AFC4524BA4A10F86C01D9C9641201B73FB8B48E107D6A48A8E490C7DE36
CAD6DBFECEDFEF976AE5071223CA6D67758A6FAC4DF0DCBA0EF81E7AA860B96C
A41C168548C01EFD540B6C1366F6AD6AFD1AB243502A86FB184B3C7D9E62F397
DAEE458E60E6058ADDAA14EA5738881447869AA4C14468B701EE11DA0468E18F
946DF99C0E14434C6DF848316629CA47FF9B07038337966F12D383CADD3191DF
D0C105CB6FC5F610237BB3C6E242EFE7F516B4E2977709EDBD3DB7AE516C55E7
42F598B1128C488F11D9AEF8DBAB34EE26443381C8DB3FA8EC5D51CA73EDF779
8A4397FC6B28F7DFB72F5895A6B85986933AEDE8436846C7B54BC0DE554F4920
881BA7F72D4D74A987FEE10268166BBE2451B7E802445AA7F37281BBC52D622C
63C6F0E7C375CDE595F97ECC93F9B1D7B4DA58A683260D37E677D919AF1F8D07
019257782228E4602776546AC8B18751096B35060915B9F57FF72458E4DC65A0
377A0CDB71B67572401CCFD3A3D6E666B4AE09D0D0BB7AE25E9C74677117EB46
041AFF25E4F0660D6F0F20FF1B1FDFE85AEDEDB77D1EB3D6DD2430D0A41D0AED
339C6B43972080D9DD4F225BD4583692763255C545927B84D3AF737D197E5A81
604DF9507DB1DA56A16B74D2B54D37ACAA1E71668ED3E9929056DC63595F722F
D8B2FC228BDC222B99AC020743910999695ED677A030032EFF6BE57E0827E470
54DCF627A2522C130F2A36EA68D564A3AFB3F74B7DF109DB070404B13EF6C6B6
28B895011B8D52604547AE45ED0194122A2571DE7C2864EDC5DDEEFC3FCE4F18
304EF90619A325153A49EF7F70D1F11EC100496411DCEFED612FCA55E38C825E
12DE734E46461C5380FE613F4B4BCDD23644A20A65A53D1ECD46FB16960BF6B0
C4DC425EB4436AEFCC9AC31000F854266ED1B940429B793DA06A0738F6D6A6A9
EFA0398C3B1799E2B0F9D63A046D4897AC9BF9A43DC450D2E9A12DBE3E89200F
A6D861EEA984B1F911A4B2491ECC44B826A026A5F6E38B3E5253808D085F08DD
8BDAD380D59E9D3A6A52A4DE356AEE02D2932ACD588E1E18810BCB009ABEBA12
5A0E424131144F348B1B02C98798499C86B3F8D97655EFDC4FFFB8C688AC77E0
E69575F0F094D14F4872A4381DDD93FD4B7EE1DC737637D9DCB49AAD24D51D7F
34D7D316F01DB5019156A293155BF03A84F0DC42F030D2CA5990AAAC05B707DC
15A1C697A6ABC3DC73400F28D669EEAB3686691127537A7BB9D22D58C67D0B24
E3CB20F8A8AB86D914D0494A56BC659F221A41399692C0826EC7A0F4A11399A9
2F011BBDAE2BEEF7EFBC3A06B6B6361BE870FB9ADC09B69179C4B086E8E9F53B
1C5434D234A1DB0E467C4DF98F1962B30F47CA64B41F0C7C9DE90049CAF442D7
063003D56F447007DFC22ADBF491AFA1DD38087B9F6472BAC7F2E986465C9634
6BB2F441647EB2A78F5F8AE7AFB98CD96A4DA312BA7BC15CDE4DC12EAAFF930D
E7B7E4678AE9D960DCADA3F2C1F10FE36A7F29F05682A045931E3D900296DCB1
2F1107CFEF0CF271A9B8B8EA9847667B3F8630660116D3C2C6E7B9326E24A0D4
7D6C5D1D65EB1583EBC21520FAF42680772C1BA775A6EC0E8F93E8BB74CB3573
8074BCB9FEE4077CC0C49C421C60E412CA2AE3686F7DFA49F81BA6B221FAB4FA
645D1239A7FD2CC98708E04A5AB714B111D8A8FE81B7B4E7A62C4655FA5FF17B
14F01B02C1A4E8BE81D84557D8894876F46A2A4BAC73AD3C0FD804C49181CC7E
BE258F901A0B50141288B7EACB5C756637C916496617FC92A87C319B62B7902F
55C78D8B2C6BBB0765C5544694E95E6AF67C7B558F90B31DF454BD990122003A
5EB61D83AF76F0EB2A1FE048E1172069E61AE5117DE376AD0820BB68EDCC21C0
D0D73521E4A2475462F7ACD7C3A2511C0DDEB1E6FE32F6DDD1138FCD3D81337F
9F8F00D669265ED53DB0D8DB88F2B07019C3FC45BEFA31708BF7B4723824FEC8
5076D9411D53BC4FDD03A4A76FD60FBF89A8CFE1BD96B21DEE17C8D1A39D46F3
3E1FBD5220E9D9C920428D5E1FD50E09A8CD2D7E3AF1BA8BCE818A465DF2722F
56E84DF4F03828D69C187E7683F6456CA7208F78CD667BD566A6C2F83EE7BD3C
84B28DA1C2481415BDC3566BC250319EA7827A150D2B80472AC1F42680E41D32
4FDA332659E321FE09DA8F0F6CFE3C91EDB41A2ADEBC1668DD7C22CA8EE7AD23
5AF1F50DA985D21FEF5897DCC7EF4C2FD90B7D89082D383212838E3FFEBD5FBB
076BD9BE3AE33E4F0549473B1E0C6CFE144177013B090E062ACDFB22495D38BC
8D05DABA5643B0356EBBF5032B608B0618B6B3407A6E655105235B3419660D07
9F71D58198A7EC74DFE4B9A148D9DB524EF389B1FD4EB8457CE6227FFC663764
7F60685A0DAE8F715731AB8EAED1C76FC6E52A9C25F8091C4930A63A3BDFF5CE
E8FDAE3AB927F3D32B1842C362C65CFAF72D25E958FD57A44CBDF387FB03FAA5
AD122CB4A90F479AEB32B0CF9C5DD8786EFEB0341790224929C26CD5771AE5B8
DF00A45CC1BC7652B9E76547827EFD90798F41EFF7ACB9353F976C988D6CD724
D33850E9238163713290D8828ED38ADAE77DEBAB8084EC9A7564AAE4250DD63B
952122F0EA43B63EEC52D32EA4B9F551F30439ACDD1B2BBB107A3EB31B9A6ED3
200298887990213258C0DDAB3AD89740749BF8CD563179BDABA0348C46BFE3A2
E9E6E6CDDBA5161B6520ECC043475A0FD680DDA06D716BDE9F3379CE9878306C
D4905832A6D7971822C69BDBECCA3D62CF8656281C776890FA71FB5A983888D1
978B6BA40D5F8F12BED3969657670228721A6422C3991D7DBD228759702CC5B1
2BD66CF5E8CCDBA8BC8EE4A8E46B80B6A704A0C274D99B8FCE9BF97A642C0800
1FD53B47B8613BCDCBCCB6F6229A9F23C597208AAD42D9AB73076F309317F7FF
BDABE56B4CB2B6E50FE38F5643412C907A02188361D42ADCF0A5F91524B919B4
0FA880980119B56DDEC0DD2E452EF82C430197C5D9896F2BFD0D101F03E134E1
4130A4093344CB44074C3B78058725777666DE7703EAC3383DC10D618F184A66
D911FDA9633767CC89A787F82D8BDC1F88DA03B7F86166C6E95B3D63FF2D022D
AFAF5278C642A27A9AA8A21F616EC20C91834AAC2A80D5684C59800820DD196E
4EE2631788B5B292CBD205BD8A7EE24395E0ECC246A1A96A67E7EDE8C1B81FA5
A78EE724F2158905238F53B5565761668A6EA34CABAFA33A73FBA58F097CC13C
A9BC695F782ADBE50737CE43B152535A049DB0DC27EFB27E091728626DDDAB2F
325402217564A3574A9C02A9899CE0C16B339B68A2AE14952A38053D427DA3EC
5D297AB110438F9AA9CEDA887E66D9C9F75FBA92ABD47A5EF18C3A43B9B7A3D1
EF1B675ABC8E80769A51F6D0206186F857B2FB2F403BE015613781FCC99AA567
13FCF06F2D8196D967F64D700340061AE33FA2100DF8D274A5B7A04B57F2471D
3BEA8AEEA67912F19EB02D56869F7EBC6A93EEBAC76949F1A036864BE7672774
3F9266BFA212BD428B67B78A36EC3DC87A4D3FB3D3EA12EE51A708C6EA3EE347
B082DABCF46FBA30A15F3334CF0FD9366B5A94E01D479B8EFC40B58D828722F0
FA75A0F4913D2F5DB4EED1DAB9F23767A1D3A0AF7BCC25BFCEA010E023A2FB11
7C451A26F20B8B48A09E2463A388E3D7498A032F336C94C6B0EC72C730016968
AA3FCF6D4C15FC110A14C6B17D82A3D78866A036F901A464DD4880F9F40FE635
F580687D026D8FEE1661A8D1A476FC1744FF59909EB59D1EF231539B207C35F3
B014133645FB9F8E53A6E2A1CC08CED7600867A82845403A4DCC892D2809761D
B613442B58CE0BEF278BF062FA279BABA8F1BBCC93760D4AFB4311D7E1B323F9
DBEEAA6286AC239CC839AC4E5EEF317497B20CE47744BAFD7C56A3EC7735BA75
015D1132EC6D54CABB0D9137662D2AEA2757F34ABA4E91EB08E5A6040BA73B79
EE7E8C0C96C9DEF26063D0B8D2C5B939FE6B779373B27D34B280B335ADF1298A
0667D512F6F3354E0F259762F00A7EE36053FDF9E5E72E34A40B91854656AFA6
89472A753E11DD99AB05D0F1B1B324CDEF431CE80A30F2656ECC4A00D36CE959
93AFE630E128636B028AC20FA52DB5911D60D8D828E78BCADBBD8931555D2772
BA66607BD065035241C478F73E1B15918180C5E7FD537125842ACD0D2620426B
CE13938343D104103D30CF36D6A61913C228C7384A67564D3A5DE1E90F9809C2
8B96CD5FE5DD214FEEA739BA382FF3A69E4CC35B1290BDCDCA436544F72BD9F0
6BBC1C2BBDF0F5708EEE0671633F0FE9A9BEA238AB8044B1746FF6148CE49015
828E2C2CA02CAE79CDB0E11ECEDB5E0C03AE37BD7ECB937DF74507591F8506E9
2DECC325BB0C4EE70CAB7CAFE81792ED7E6DDFE02C0150A31A2D66190083117A
D7AB39A00CC8DE01C14CB61A7403AE77A40CCE00515C13AA796907A9E84E4068
2E6EB744C4851CD927C5AC11727613980F1795301F225BA17E93FC8000D54B00
0D430636AA68F93A9C848EF811B4AA5D1552DA6A043FAB2AD11291E45874345E
4FD5FBE43173CDAE1AE72BEAC11FB973CB71C595458E7F703D2377C26045EB67
966E9B6F104FDDFF62E82B16CBE3D401AAFA47D11246696D3C4566B179C91DDA
D4676EA84BE72B39ABB69FEA070E40A41A125112E1B0067304660294A309EE64
54A6C067A1C107EC6B0AFB4A51865CDC3399DDDB5A2280DEDBE384E8DAAA2F2A
FA130DD7C6471FAC0F12FC4384FF171362B3551FF7356C84CF0F2434A53A3870
5F52D96D9C79201BCE9DB330AAA57575E2B264F8D2CD50C1376A2C3719CB2FB7
C4B1311ADB97C07BA247725296CCE74557BC27F73C857AA0BC3D5527C8A3FEE8
D1DE77094A06B962B7E28A73BE0B2713DFD32DEABA293EEC336F9E6BEB1B8B2A
BC98B7DB4F5159A408C77D206AC55328DE517DDCD66E0A7FECAB76E8F772650F
2F536D029449C62AADF6FB326BA0D4D95BC25B242C73A631A39B2F909636BA68
231730C7F28137AC3A0D90E781E785AA1CD1C60E1A40B44AD657AFF96B2ABE4A
E0125D437EA8BCFB55EF678A9F13829F5C336597F0A2025CD5AD78D0CA51C341
5855EAFBEF4701909913270E0060FE23E1DF875F7E6C88D2697B5AD4FF8BD031
61544EBBBF2A1D872A2A5C97C3636CC28E8121753A367AA87C9AC1F9BCC89CDE
F5FEE75FE714FFF3D54D09C9747ACA01CEFD260980ED6C9BB1B0730BCBCB20E2
2D06AD1AAE225D5125AAABE3D83D5A2230B4673692A3A3E95A52591D7947341D
CCE2974D7FD494711BDB12C2B9C9CAD23E8692819FF9A683628D913A18025F8E
5BFEB2D17A7C0FEFD23738AD804327CB278DBE285E67320C5A6960CD1303BD8E
C91C0B782FE2A6C3F956DD94E626075DF739844E412A15C77877ABCA35A2F5EF
67A825501B1AA72FD601B4C22122AEDD698B04E48B967253105BB225EAE3D71D
A0F74302564CC69AABDF15BE759661753911EDF2B1C6494E5E3B14FA099E5AD7
C3E9D379B517470FEDA825286F8A36ADBDE0D75B0C7D19FD4FDB0A9DAC5E8ECA
E12389B12B73607C7784773FC79FB1ABDC3096B3E6A1F580988CFFD75476B71F
407F3F98D2E7E6AD3ED8CB9A2D385589283935A627EA1EE0973AEDC94B5FC237
7A61EFB2A841341E5CE62CA979917DDE8A08108131575E65C8E98443C11E474B
8D014D6EE20A6825FF695C6CD6B51F33D7438870303A05C2C07AD25C299E4388
8A2EFE2EA7A80E2951502C0627F622C02B06B1489F09C786072A8FFD4A81C67F
171E85A256C9FD8BC3E390D71B5E8ADF7F3237C2EAD56DA9F09EC52455A0C48F
5FDCF5E10577569ACA9770A56D61D2D3F44842E447C17717D84D969B2AA01A9B
F2D3FB0B7590DB526CF0F636BD427B0CCC7717811FEAF9ED551EE320CF1A36D6
2C69F94434737D861974494D1F4DD346E379F801BDECAD038FEA8082B1894CE3
09A0F99F5FEC19BE71685E41E68540CD4A2E65454128578096718CFA621E651D
CFE340A9B86C61D7E8E2633B50A074B678D20E541F4688B102C3907CB656BBEF
2A82BBBB7D0CC5B8982B9635AB75E2F3010CC15E87B00AFEE3C7A9263975B998
4B5742AD57C699291604A09D1CD6C52911954A21977992FF3D8D326B69D5FE9B
893354F539958B35076A4BF7496D78CF8881AC474655DA8DEEE2B32279C16898
AC95E42A51B944FB95B901029922DFFC2DBE4B6E9F25285B7F9D84B0EA777615
48351CBCE55F0A838346B7C97C619EB08F5EA45E67CC4F221382E96161BD961B
1804CBEDE142785F3E5A4AE2D89D3FF66EDEFDE68E1B539A2B8414C0E36F13D4
AEDAEB5C27A84001C30083BDE4C249D551CE4DCA7D717569ECED521BD02D571B
A703896A823C3529050A3224CEBC7841D7092B5C3CF9FD34A9714AFEE880D469
E32759AF4B7E8A0EB878CDB1196C788BE843089982915AB56B587D0BD7A121CC
9EC2F4C602634CB6C6F16EABBAEDC2D63368007863C0981794040D745C6A28A9
3A22D46CCAD7D2C5DC62968653F92872CF3B0A4752A431D4763D27E446FB7047
3226839B85F43D024A9044A6819C2C2B28FDCD429F8072DEF14FC6CF05C0A0F8
32CC933CD94807E829A0FE2A282F8110F865FD1485A6E1B9ED19A7EF1C00E37D
95A01232746320A5C5C57030A7BED83EB73C7326B805E3E82187939E36A8E5EC
D7EF44A571156406B7FD0275A65BCDBE570BE338038FBC2F4C548E3C01125625
03832AB107A179CB30F3FDE4291724BA210DFCE1D1388FDAA040A900CD88D739
CAFB526837E6FC9CE04E7AEA2C7E4A824F8054FE402799E8478A355EC78DC9EB
4AE83D1CB6E4DF546FBC914A6FF03F95927274A732813A49A473EDB7E9886B6C
45605681A1254B77C333F7F5ED56931FF5704B0A478D6EBB4F68953C70D5F1B6
A8D13F6A0D3CBC1D2C64A9EE5A3EFD38C40BC331985E76C1B347E5B5FC62CEE3
2D1605B65B5550F6C9CF2FAAFB73E3C7106DE30A0B606350007D156D65074873
BF9CB31AE27A29E37C854308EAD917E1EE274DBF6C97AEB8FC5D08A18483DEAD
3F6F83587076A355F267133BAD6D6F8A9B26F9D8A730B36B22482CF96F510A58
9E6524988DB0C1485322327B91B844FBADAA58CC5E254AF8DE7BDA8C5DA2B784
C8F19E41F705C5E10A90D299BCC1FAFE6D25FF8F941042919E5CA8C9263815E2
A504733CDB34A10F5E6311EB9CB0C69C819243C6ECB203D08011E04E2C4AEE38
5E9542049CFE3C101D0CDFC5C850C75C3BC05F380E9F2AC19B7EA9EFEB7EAA8E
29D2ACF22F6A924DFCEB3EC30ED892173F3A88761FA17F243330C836C9A89C15
DEFB745AD29A236B069E44C930FE25F58B19A72F8FFF1DF19D8BE3DD1053D195
4DC0CAF378235DA3072F7499EF18DA25A64B3ACC060E83D8FF926CBD56E7660C
2D8898A59D4E2D60FA39F06E18F1117D72E3F36CC97E21B7EDAFBAA48EE80973
67398729D75BBCA23753399208FBE29BBA7E0E523A168DD08336B04CE14F8694
D3A4EAB1BB014C4E30A32EFF6873C3DF76B78B586A724C18B2947BAA0B38467A
BB82F6B1620A7E063A4B9C666B96214D503D8796FABD2C27798C922FB1B8D8B0
0E89ACAACD38DC94DBC22F571590F4C85CCF00A962E27E1DAFDBFC032CCBB03D
0964DF8D25F7BDCDE7819BF8605A64384C2F529685F965F25D9E0B3809BDA31E
4E1BD8FFD4B50C8AD964B73257E99E21BDE93097394764C2D845E91C640346AB
81E636CD8B885562E7760479712E2A5A618F0FA1B7718E29FE12173B5C171C71
86F5BA20736B8110F6DD64B37AA8944560A683DBDE4625014380D44F1396EB0D
8448B77715660A524FE73370D3F50B913C6B83E7F402A87F17ACC58E811472E4
097CDB7181327360E073B92873327C02DC1ED10305A301877042BC223D53D47D
E14D831B708EA26DCE4D53D819B36434C28C1D8C5C1626B162BCC85ACB0BD0AD
65B350B537976E514621DAD2CB9645E3C158940CC86C3E3C8239CF843B0C5C26
D49186665C96C8C005BFB0F0379CCDC9C0F1116127DB8540FA56F817D5C12DEF
9A1D3FF160EC1A165D8DE32F328764E59505D49F02A74C9BB324EC14EDA33121
52286416F8613EA974BE61C5BA4660F7EFB6E8BE095DA853A868142A50E1B765
08744C601A7A6CF83E93E12E3DCC7DC2F27D0605F4E9AD20D55B01785B08DBBC
29847A369B140DF4659E33C7129249749BEB8FADCFBBBBC2B889DC7CB30AEAFD
DFCA305BA1ED908E88EEA0CA70F49B2041E4D1F56AB0754814128AD4338ACA7A
224C8B040FC94531DBF48071E7216AFC2B008512BF5DB50C23FD8DA460C55FB4
4447618B70639A7E95B385A020E5B36BBF0CE122366E9FCE79EB1A275D16F3B9
CCE4A66331063C161E403611A6DD83BA4FBFBE416956F5FB075AB9AEDC331876
62B519F9C030B5260C8F851307C6204A77B38DA4FAB0BD9AD63C8D23A2FDFDFD
11B254DA5A7D7BC6EEFDAF46C7FE256D4615B6865AE4107C91DC06732E931AA3
408E79C7F00D978BC732FFB3B2912109796C1C7ED9C455E590437447E72E6B54
D19FDE4090933EC688C0C3BDE4B43501482B5D6AA96421FE23F4830EFED86966
35E631CBD65468E1F426AE46F8A91315E4C054E596D5CCBAA6F264F2DA1094C3
CDD387BE6EDD46E091C9D3DF773851E90483C0527F926D84BD0609CCECE485FE
C9F241E7005137FF6E4839DB57FD74A803E0ADC0CFDED4BB7F02B17DA994EC28
25EA99595B9477146A20B0078E46D8635CC7E03D885421A966059CD294C96933
55756B12E99AF2C04024D7E2E9CFFC0E791B86E695A53F18C05C8B1D79E128F1
28BB4346CA27B05F04AD43683D80CD1BCB6B980FA68EB7A23A51C8A2A005E1B5
CCA048A1AEA30DA02C64C613C9F61C1FD5A30B240DD1FB8177DF56958EB02A13
7E896DDFEC3016130BE8F3E7C2E2C0DD526771756666A132347F5F471F11393C
98736262C0F79D55A31FD47BA5F55A6C5E200BE98607721925F0BC60BF16E566
57F87122E2175AC6DA8E033FF3DF0FDC7F4F675EE4C14A5B63C90BB1162AF602
DA2D5D4F3A3328392B5F3F3116D146FD2B6C69375E9E0B1B272B51BB1829FEDE
A0CC893DD68C5C8F24ACF262A36A8205C68AA0B892E2BDF23400318F45CBE1BB
1A6E0CCF1CD79182D3B235B454AD4314EE7A4859BB0063EFEAC267B5D05C903A
EB022A428B5814BDC0A95D1A0D196A3C7897AE48DACFF21C811EE145ACE59705
8C23D84C0FB8BAE6E8B396D944701FD2EA475B0936BE0D460129D423FAB61B1D
49C8AE59C302016E92B775B1065B7905FB03E72387826A14D181B9BFA0FC23CA
5A3BAD048442CC1F0FCC4305A72F95B92B182C8E3112888B1EEFA597E1623529
F8734C0E096F1DACDEB89904A846BEB906269EF691B4B66A9FBF2F42FF3132B1
9D5B3A8E7D70F350CE3D478B733C5A0ABB6A2FFE229F55887CE8299F546BDA7F
7AED71F6B5CD27B12D0404821B9CFC3E1E4DF8435E64E52C0C708B0EDF87546D
A70A237AE606E363DDB722AA6DB7E0250B51958700E2379B56DFFC008CCA4106
2A1B17C72BC73840A3262691D0C44636353D8317857B2FFE01BC07C04E76B765
1CE15917DE8DD30CBAC762A232F07021D09B53299F11BD25958A9B7189D98A37
6DE565D11502692B3F5E4852AA3ED07EAB1A36B2447AA0BA820AA34DE42256AD
22455DB4A3CDD8B30A7D0CCE1A4F498B5896B33A04BA1F3E668B0082724961CD
D8AB05CEAD3157EAD4D217ED437B23DE309A360FF60CA82A8251BE5671A57FA1
E5D5E4B896D55B67837FE1B0D9EDEC9711F4E8F4784B63AE9FE8C66DFDBDD58B
EEBAF5565EE90A4DDE084BEF8A29BA9972B1C7AA6BA53BA32A081D3006CF3161
301F1C77C3E72A5B7F902BBA4AC52C1D5ABD368FB145BA5F29999C7A0E3AC55C
7435402D28F2E84D2EE6403801D1F8B1CB9CF8D2467147DB637922AECE879A80
BBA305C27F36EE9B552645B83D67BA54D4C2D3463B82020666CFCF46E43E35EF
09F568E615CE94158D9E0A1622452B2B07D742C3BC581F463B390F50E1D2DDF3
FDD7B1E929D6D9242351C65D2F63B02B227DED699ADDE69F0BB01D57B0A1C2AD
A3F755618C93209036C0D43F1AA653A8E903C5E792589DC8B9172A0752D4E0EF
8B8C63299CC78BF22C47DBE5057A83876A036A7E21D02E62A1BF86B7D610DBDA
14114FAD3B7507A1F2E69489EF60C9F55916279C22CD3AFD9020BD28B685618D
CBF1E63745312EE01AB3273CF931447F021DB863F63DE614E90ACC974FDAA2E2
2CEEF3B0E43AB77F6B8DF3A17C45721C3C2797BD1341553FD8801B19A8424284
60AC283786C067586A259A8D2DA7A751332C1F6A268398987D7BDE70B44FF5EF
5CBA6284829EE410C1781A4E2DC6BB8CA4C96B19722BD65B58A7D3045D605289
4C5915607E3BD7DCA54D8D3A8018F07EF690F08E13E483D3EB2263E895FA3541
582667A784F44F872DA7E4740F8BBC91379EE330A885FD5F1BCBA9FA075340E6
298B3B7A30E87F9D6EF48AFBE10EED9B19CF8D1A03711ACD7355594B80602145
9FB6F81F2408C1410C1A553FF47AEB55E074E0A7EDCEF6F7111078FA6AAA4882
740BDA38E755DDF36B38BC481B7EA2D35D33568D6E3A14590FA2407BAB1E8BB5
63A9C89C0F79AAA61E70573C32955BC90EE29DEB37DDF577BFA71B8A651C0307
CFBCF37B79B1F65339265C3BDC27CD99AC7D748CF6B4529755DB8DDD05ADA032
418DF7C8C87EF4E48DD21894279551645EF4A3399C2832F197C27808D7DC3A93
0E433D0337BC20639E8F4C770B3CE889C0627172D10DD3369D42D7B7B612962A
9DC4B8DD8DD87504652967C67EEB1FA6C6BE1F33A0DB7564F01C4CD135F96CC5
9DA79333920F20D821F125DD9B4396F2684BF4963FC18B0142B4080C93443F0F
B9FC74E637DF7A7C47091724D0FDE8460EF7FCAE1A015F1402E25F52E7EA80E6
AA3F52F69644C3569CD39CEA3D28B6228A8E3A9678108178F33EC0699B20A901
AD98606C248E4453D8EBADC19FEC33DD6C3305DB4DDD3E54A6FC00F6B83D33DA
A908377AA57FA252A414A654509D31772F680E47CE4FB77C94C9D4473CA1621B
B620B435C1F8C806B6F2B26C65BEB92B97EE5D07F836D7A0CB39AA651AAF1C7B
11A87394AAF5689551C201E8728B9458990C7913426DEC6B5C057130D3F2F379
101783C3D81BA82AB06651EE7211E9B621BD851AC42B5C2F512686F02CCC6634
3D83CA952DF1C68576FB470E8ACF5E146290F93ECFECB66E21439D3DF2D7F682
92C692A98B01E6571FC2537538A4DA5C46EEC25AFF26042466A9962CD0DCC4B0
FD7120F0C0E1D2C9242AA479627C132EBB0EA34CC47CB9695CD7C3FBC4C07402
31310A180EA9D8964E0ADE352E5C7E82DBAB63CA3B171E6A9938F5FADC331BE9
AB45B21FDAB2FC4E466098C15AF9545ABA8B8C624C21F595F9DDF47D3F8C164F
3AD58805DC0020DA1618F70FF2BE76ECC93E99000A88A396ACA72B2A6879C6F5
5FA39CE608F23F2B0335B34C7586B595BF85EFB49AAF2FFE7EC95CBF55FBFEC0
9764D160AF4E8F36EBD4DE3933DEBF90ABECD193E2625B61C56A74EA87586CAA
9561BB4F5B83C2E21CCBE5F2E638FA558BBEF71C2FE0800C83B80736ADE2B714
572ED42875CE39E28A15B48866A0698E72EBE46A5D13210AEC71AED983171862
44404D4812EB1E27AE133368973B45F85184B78E26188B16670ED4D9D1AB7630
E2718957FB7EBAC97B2CABD2C65921BF46BFF3E43884AE09FF5C7902A2BB6AA7
A3461EE185969A08789CAA0CBD36D4625C005977FC252F5375E59CEA3571258E
7EC290808776917394CA89DBF360EAEE3A158304823501DED9BE9D6B06CC0AC1
B58E624B57FD48914E72FCC45B23B47EEC734A79E967505D4EED6DB69C1219BE
525A61FFEED697A4D42438605C1F9131277E7CC6FFA394D91F33B685C73B4156
106771E8260CD9AF6056A4F22D45872E13FE9F309982171134977EAF54C6BD68
52A22B9E76366BC7263D2AE89040803199F23717B33AC25611568D20439C3E3E
835CF60BE10AE680E165D6B4E71084792C4B9E82D8B8D8D9C3EDCF45F4072F31
D1F538028370507A6E93AA25F61FA26D7BBE37DC0D168D06A501EAC3EFF381B4
8F75240F1E4F7A64B77EA34F1A5D53A5B58F3F96A0EF46C7A96B5B69D1861F86
EAACD43BF5D50A9BB79325BD873AED47A67223FB5D147F0A784F0C5A4E9A786C
38A137792EEB4FFD3FAFD44CD71CF1551EBBE8B2E16CCC5EFD174057C781DFD2
70EE45EB60F57D1429AE67240FBC800AF56751FEEEB69904849EF88AB6EC4502
F736F76AEB861A3516C023DD8E36C09700652D924259CE629A4C114C8032A9F3
A9FE3660AA1FAEAEDDCC8D794E5C43A108C7EF008663290F10C98A9FD1FD73C9
AC4437AE94EA563F9CB6C43FE96580EA52D024DACEB1FEA3B1B0764588EC4A65
2D1A7F8DD8C00D07B99BE412452247B0D8CDAD32D6982637028A7DB25D4D7290
D83A01C80C7E195EEDF6CA42F8B32E1766E71798965B8EDBCDE9CFD2BC34DF60
68C72D3FE008DF3212ACB456EDE1966C41E28D9E33FEC6EDF59F573E7EE66E72
FD2A357C0098265EDD8DCFAA7F25EC0DDF6B8AF6C16763DD8855C16DE3AC1F8D
8546FB082031266CC36D29A59410D3F64CBA7D25DD0C437EA4EADFF6FABE7C94
EDB0AA8EC09935B1D2571AC62AE4318D40F24EEDB3E75111F8A9A4147F2893AE
A9159C390BC240DA061C1D92123AF83DABEB4E849B65BFD89944986C15BEF8DD
EBD19A044A63B80E60E46E121CE7F15B599FC2028AFB9821E1D9263D3A14BFAD
B8DE9F28CF3726514860C927DAC812AB3FEB37E78106CA8932EF75E7182FD500
F5C86F83AE64F2E1AB983D7D85435A62259F3328001B9E8FB902DEB084FA4170
CF621599E3A951DA34E44F55442C4053B30A15AACBDCC8DB585D05EDE54F7B88
1613A81A1763E4217B4FC14BD6FF18B37A143CBC66253F7CE3745FE9FA4FBFFF
CAE245A23E831BFC8399CDB70BCD5F437BF4593B1BCCFCEDA9577FB496F37496
E66638778AADBEB1FD0E5F80595162691EF7A85BFB831EF961F6E6BED4A1655E
DC31C235D20B206326C7E655FCC13817FE377B75CDA8985F786C799656ABF9DE
D163E0E2012DE4D277E12829BC4664D0C24008A142A243B334435B815D0AF54B
B3A4D3F533C02C1BCB7046DA4473EB112E1471F447A7DD92F2646BF7F75A7E49
E187449B981266F35A1DF71B9D1467228A1E94569DE87FE23F11E4F9153A2294
D50482017147AEC06E091D3D0C7836AB107BF146DEA3BF9F025F902A9F7B36DC
21B2DE6163C9A37478DBB6F5946AE2A956B48EB0A637EE829DC4606E21041B68
294AA19FF199CDCE603053E47A3FDA799F40F54141FF5EA01C929EE9E8131E21
B7D924F6C6D7DC29550F7AC69F712C382DC6798D0F2DD0F465416F5E62F9AB85
9BDFFDA1CF32A9E980DCC76CCB5F48EF825A8FA82A35411D8C6D27E8649411DD
9CD78DB5CDDB697EF8A3215F44ECF955E0A89AE1DBB00D7356FABFCF36D0B425
531F43735950729768DEA3D128979C1CC1A667358A1D0D17E6DAF942F3D07F15
A0FA6CBE3BF2B6178F78EF07961933E06FE29E67644F726AE02DFCF207EBD2EB
C82B4D6CF85C93806C8A8891E892D1917B1AC5699E7843E91B71F5D13B14153B
B3B81E9F32C221E7188A7E9019166878290DFBC3F2E9DD67E07F8EE3CB068B05
EA1B257E5F54731B63400DC64502C7F2717A276EDA771B83AE6FF6B1CC410417
385C01ABC78BF3733406E20C16A3ED0CE3439F1B6CC2077C4E82AA02A8E06C18
11DD46452C909379024ADEAC156E38FC29BEE3E32ACEBF058D9A295216E3F82E
574C0E3C98A7D319934077AB3EDCC088CE5E86DC3688C3C226D11CF6584FBF0D
451CACC5A8D8397B62D46A6DFBD692E5403E04C6269EFB50C53D07B8B577D80F
664FD94D067C7F361F6103EED22F32651FCF140560DE8322DE6BAC3A3A95414E
D148DD1961BE3D562DDFAA879991EA8555ED7D8D1EFC4777B8EB30561F242DC5
A7648F03E50C356973D5648D43BB21E3F4977DAF090BF54FD4E70948F9ECA297
4E70D9E670B23274AC88E149F0B713F55E6CBD89F98F98DAF8C108F0E8BFF129
5C13FAEAFE734CB9C02BBBCA7151025CF5509C19982021442B67F97BE57CA550
588F1BAA92E1CFFCF7501ADE17C40DC830C25CF3351E5AFAD9E4D85277EBB046
3A169F42851326E90AE28E858F80DD155B1014691B545E7EB7AC472EADE8E95B
0ED413A7DC9BADF336BDC27C46A4BD6D0D7DB7E2EB96322F81FEE93897D7BC23
150A7CA36DA70783DB82E0B1A8DA0311C579F6B518BFB7E72D477E3ADCFDCEF3
B68811AA2648AE4D4F7A5B57EAA0DD24DD0DA58DB53D8015F1CAB90597ECA3F7
0FF47722E48B590F4D23265E5ECBB5403C7766D0C2837A8DACEDBC688FAB21FF
A2EEF8762859353E431197C8DE8DDB16A21490FDC4F2CA42F77885B3B087BC8F
57DD43DAC6C32C954808511956910C1DF5340E29DCE7432F94C9EC3FCA98E2D8
CB43FA872978060E65DC5F211B715A38457E7C51FF3F2BD28E46725F701039F9
F1E4DD4C008ACAB7C66D807BFA1E964CA7A105706B379647E65AAC40219A3795
AD6DB62103A7861D4EEF3CCDDA4D68C1EC98F3793D045A04F2EAC55BF9D4F43F
24665870A106059EF669253852EA0362638E64DC9EEBF6F7FF0CD81B7A5ACF96
A94D4F22FB10F8D1D325CAE916233EA483ABFB1594535647AA794DACD05675AB
2FC5DF309559641CFDFF0BDA4F5C8478FBD11C29D9BF5BAB50F23B4C0E3D9109
B21F3A9603BD5E5F28AF90844BAE94C3B29957F69D61D6F5B16CA72F10CAC4B0
53C7AFB90DAF84B2AB5647E0DE96DF72E94A7707B0A2E3A52C1D76ADC11A31EB
4E044F296700041597D32C42EB4CFC619C76EF7670244A71BEB6CD869DF230A1
6D1834BE4F24C47E12658B15F422ACBE15743411F4BADF218E7D524D3D993C46
C35A9FE42B60BD6A1F46F1C0E797692688BDE226256E3D3C970D19DD685CA5D3
4E7D6998B05F24E67FB394BBAA2156E28A2DEFB637148ADC4C87FB1ECEB4B94B
F5C1B9B312A1B30F67D21E6CA40935501B843FBD456FBD174BD126BC6EE352A2
CF59B2E7D38CA8E202D9F57FC7C4446C51A60543BA447E8CAD29E54731CABF70
4A0D60358D01144DBB4DDB17B2F871B5DB9F300382F7F7F83519FF0059A7314D
7FB1EDCFA1C4C752D6C3CBA0D9ADEF0B3C0902C66F7FBA4C9867395A1005945A
EFB95B24685CACB061EE68F8B6BA284B649351EA35830FF35D3B45A566928062
3B4888309C867E639F6DA664DF2BACF6CC89311E4003F0C7DEFB1BBD1DC1F9A8
693E932337296619B244820D099C984BDC6D719C5DC8E4894D963F255AD979A8
CC3A9939F2403F452D7A1739A396BDBB41E145DDD971EAF239C7DA88ABD6CB20
95E3ECE28114AAF4BB617187C50EE0D0D73C5D0A93E31F372C1C15B60EC5ED3F
C2AEABAC60CFD6D71E07F526FBC2F8E39471453A50C30660035F3B0CDDD27DD8
0B7D4F27A4B62E885647F14127DCB749519770C2F02AA8281F10E1D2A4778E80
7E97AB1C7F2F07983711D33CA6F5936AE1D0059D4AD4CC3FF4CDCDE31B2C183A
1510ED106ED00C99CA5985A4E2CEC7BC59009AECAF96CB28916CBD51170A0A25
AC9B3BD3371D622E248DE3DE6A7AF39535DB93896392008E47719182521CD86E
FBD82432E16A04A2D615602389BC2ECF0AA68E0364813BC07A2DF7B404C138C7
A4824F36F3B06995C0B09AC39E056FDF2BF985B1A84556A34C6AEEEFF88A864F
0BD458B5EF2993C53FF0F1BA60212D3FE9DA6AF137FC8E33616AFF3BEB7F64B8
9534649D57B75D44BCBC700DC41D8B5B14EC34DBC26F8298918AF775D26921FE
15D79A87C315BCB0F0F42B55D00432DA7EFCE0762EF6EDBD5480E203AD2D0E26
3EE151F64193CCAB3B7EBB603A68D54103CEC4C99242C747721AFAAA74F47D1D
4916E3F4D1AE68C229AAD6F730B871FFDBDEF61D492A4288863D486CE8281B8C
FAB40A50B64634A65F5D56141CEA02326734B0E1E8C7D9D36CAA7A8C7AA1D47E
0BCE784F633E3161FACC174110D7C58C1B8256FEA5DBE274EFC546D8C22C8BFD
2810FC54D05C9F604B799DABE9E379E94279E28F5348C8C0433D7DAF280CD264
AE3F34DDDA919B6B192B687DBFFED05F166C486EF1B4BB1C889B2B6865A7642C
2A9ABAB575909F63A73423ABADFA80FBFAA9536B7001F027BFF24C2F07E536A6
BB678D120DE4A8AEA1E39FD03DFAD6EC0776FD80A1117E792232827D7F91F6D1
2AFB45E6FA59D8702B0F176CB04E4F0A51519CDDC5BEAB218FEC51D134FAFDE8
88828EB85FD39CA4D760401BD0DDF6D63D4C5AFCC76012F9F0502DA595EE8564
31F7C22FD687B5C257E5F3A96B5CD4782C3F3FCDB6D6ED3ACA2F1AA28BE1EA89
D92E8A13C2F7B8BF15F94DAB919EF833D72AE088F54D54FC986C9D30C561B962
00158DD9B94481E767608372813CDBD8CF8571E4595D8F6B5D56552385400013
0CCCABDBA6C53418F93E3E49AB502FB3B0C99E8E71E7D83C1819AA668D95A5A7
60967E07B2C14CAB2C2B206697A87878FA7181B4239E8DE6ADAED27D0B240500
4C8D47E276A9DFBC7C078E0597BE47A7BB07573713C1B3FFFFA3E57FF2E7D9F8
F82498A962ACF7FED540FBA57B792E30CF79D11950985FE13F6F382B73F8809D
8FAA5863129C1955062F5036409102CD5FC86B6C7ABA339D40EAC5E93B077083
A9A0510CD3542774A3AE98D7E0CB8B516B60B746AFE7A503D0AC9F4029C8062F
522D25410415B90C70F8AF50F55A0295EA9D64D7777008A2DB6A4655F241CAD6
5662B0D15FBB29F2295DC3926CDA00C951BE6D9D3E9276207DFC93A9EE4E1C85
2429437C562D76CE2894CCBCB22012B28B7A971E0291EA7CDCB9AC6BC87622F9
9416BD463B44679C5385B88A1E0843A08CD41ADAE1F2533A63782FC99386B0DA
E0436535733D811920BEA472A8D2B6515497C69550D58EAEF0E0B0920CB68981
318F5D0DBF0C72BF2FFEE17AF6F6E9849FD4FB93090DBB99AAE49293CC770F44
3D1EF6ED8A047F6DE53710121E9BB6F10B179A303F66FB1367F0DBDA1EDF2BEA
E338BEBAED8A49B82FF79A63C0055238BDF812982B30FFAFC9FD9EE96ED4FD17
EAF140743F782F0EC4930E9D9A6708B8E7434EF5937799B98BF709574EC2918D
46BA910D4B9A1D2EC8F047B52E686C540676D2096D38291828B302A241CC30B2
EF14D015E12A0C280F9633442FBF6BCD2D5CDD50611BDC3D39A45A4D6AB5E1BB
2271B45948674900CB03A00F9224CC7488356687574159FFE8C816413AE45E4E
CB9E7FFE81A601FD9D30E623BF44D2582BAF454CDB1D1A7D9F83D81B83C794E6
8FD7B9043E2B1C55668A22117FC989D583239E52BA170969983AD78B656784E1
4662422FE7285FB90C300CA1679EA182816FF6AEE75D4352F911A3153AD8C562
67E9FD4EE91E648EF2B60EE19D11015C809D4E91C9574FAB187C8C4A80393B89
05AD539FF81C6F3D2742F1267E1336AB18254C0DC2B645CD0FB297DECA6CC107
BFEAE0F14E29B6D3F7504313B41562E4C1E72FCDD00DCB2388EC695EB48D4F08
208A9DAB69A1711C60BFC47287BF5681DFA8BD4EF4AAC2D3440187C8FED99DFA
987616EEE2983CDB25DBA38930F78E258DB1CA97B4DB5869045553ADF828EAD6
2F40DB28B32CAB31A10AD01DFE443FF590FE4EE233ADD6A05FED14880271AE75
419B06733376894E965544FEF1B7CCDF419AE367B22F0EB0626943FB64A84636
24F853B17CEA551406
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5296FB33A7C728385CE3A6CF8AE664B90042462B94A015D5E8704070AA59636F
6DC7EF0DA3F7829296DCB0F695A236FDFDF7F6259B93A89085A7E9C818578EB4
A5B62CE7194D5AD4ED8D7C0A1593641F0609FBBBE7EEBD2D0C6FCB75E7A5907A
D7EDDB8B14D3295A425583E66138AE558807F859688E51C1788E04F8FF6AF035
3ED1B6827637A8043A451DED8B6A6F25C04968AAB2910DF1314D1B4A010CD4ED
2FD8455FE6FB032968765E65BE3556338A12454E8BCF6DC82DF9529B9BA37245
C3A13FA42B9C8A9C98B34D79C82F9E61598ECE57E551BF193BF37ACA22B901DE
D22B528806F4D4A0BFA0253A5BF89BA1451F39C395A8026A725FA8746E36EA41
C57E7E0A23C7592786987A899E28EFCEF81C18AC249388867DA67DA44DF3E926
AE8AEBFDFDD85BFFA477D990FECD8CFAA40F133E5B492B50B5B0A56669AE03A0
F69BA3A59693416B6758A4EE5CA1F3AC445031ED0B3FF53DD57E53AB4918EDBF
1B76FFC1DC977E95A4B4BF0AB273EAE0E4C1613540117E10965F800C4D68FC6C
6E6B1D1D19023A9F88A39807511D45410BFB50959821E14F973B43BE23DD4755
8EA0E536FA063D6DBE5E0587A1CCE422CB13471E3FABC48437040563AEC3FF18
E73E781CA45857DDE560013B3B394283B77D62FAEB6119E0E45D3C997CF952A4
EF7713EFF5620309096E21A686825B3FF021709810ED004976DC33831D413CD1
10DE5D757A13E41BC82D0980459AEA993B1A885E53B69F001742690F9808BF40
F20BC69852916113CBB5158E5DFC873FA6B0C2D93D9F77230D85A609807A5168
4145A8BE6A43975C6889379218C0E12D931BF34FB85047FB40947EC4EF31C974
2197948EFB982E4BB6CD532F97CED47EE0E668886402A70535A31944C0AD9331
242663F9133829CF75DF14BF50A20BD3A373198CB56F38BAFD1D89F33FF7E0AB
552FDBEEF31D677979EF1B4EA43D258292F85DA230D1B573A0F747AA922692D4
53BE4BA1FFB2758F28291F1F6FE28DD3226C5DC353ACEED85F6555D22E45FF2D
FB499D69F12F4CCE2832BD989259DC4A49D4AD1B581C9DC97722C444E1BD70C1
E35DA642EA0224A7A3F86028FA508EA0B7C8E8021AB9C36F7E78A1FCB3F11769
DABF2A0A2EEE072875ADAEC3D3A43334316C38964A7E9AA45ABDCF527CAD4930
59BB6DEAC694D5242B0ED68AB29844AB1ED55F31D7D723D6E9657CF914424E42
EF74D317123123018D1A97238AA98A42C53058A33A87D040A9A43DFF3C144D3B
70F916FA4A5032D284011B7B4DE933EAF370C2B8A5CFB7C0C43C6C5837DE85B0
1546EBEB064374451C96626F328476187101E35067CB41F763FC0F6950B2772F
4BCE6AF00228DD0F4151A3CF5FD03710257E69F6A4973D52B28D6CA91F4E34AF
897017BAF00719BB3BD4D84D1B7B4499D78177DF56958B251816487C4B96934E
724F616B55F212F19C2A516FAD51C00E0300CED68405A82F27DC0F0D90E7502C
3D8DF47D448DB15485BE5285DA16AE15C8F2FE27E99F5194F7B6155DF7C08072
FDBA5D33B1FDBAA976C475B734BA463409FA7694087A0AF3051EED31D9B6B40D
CD96BDC1BC902B99CA436114846D140FE6880478B42E7C08210E5CA3B7CA2508
355C51B30D1976F394D0A1E13562CCFE1A789453679BC3B5A10A2B5ABCBEDD71
655E482B2E90A5082DB21C405D5A620D1F3A73B34645F2DE0C21334AE0D9FB43
7AC5746734A20789FEA9497615FA099820501F4BB41694B31014CFCA5DCFD255
D088858F5CE1CA3ED5FE39062545FF6D1E8F8F57DCD581C46EC3461DE2884E34
EFEE4350F24A38BEB5BC4CE60E29C3A3C7227D66D7AC1970B318ECDE8AF4FDE2
02C27BE9895EAC7615927CA941BF5AC923D14D780D3386702C1B405B496D0BB9
1A19DAEB50A58FA0454A9CE27ACA8F6372DB49799F5CA131FFDAD747649DAB31
CBD759C2F9F6D1271BB50CC86A2FAE209B1A7E9BFDFA902BC1F61B40C27EA9CE
3442F5D91A97186391F3632043A295E20B36020F0BA12912B17D53D40A2B52E5
C2F883659C1AD20A68A98EE42D2A815A57C88BD747BA890548D058CF57D7EF9E
DAF5CD7F0C4D808F55588168B56500F104458EE3ABBB8B960E376B35B9D8D184
E6BFF3F392F2B1FCB716933FF6962B8CEB6CA0D55AD7C590C73BB5F44FF91AA4
3A6A17337FAA363C8C06EC3D3E9D9180496B83388A03C605C1599A2B89F3F54E
23FAC9AD3120EBC9D73F53D813C2311B9B8266E6D879752198F6CCF0816FAC6B
80301509DCABC4F8B83133C7570409C68495EACBB5C8C949F05AEC43218F410B
5D21CAF17361F2A7B9E1D1EEF0A922F368A99F81AE188A6685F511C5BE007E67
9958908702F5CF7E32C12738F73F24DD678C1605F3C320876230FEAABD359AF1
9B0F94AA52CC54AE390F2BA10757FA1AD809E6444EEFE8D3AB2CFA64468EBC66
654D1A46FCB5A8CD32157C5EE9DE91636C5D64C166797ABD0CB23472C6A1228E
90CC055291391D9222A7E0676A1A8828E531D41C51837B2EC63A2CBF78CF4001
D09BA28DDCC18A61ABCA5AA2D18DA69F91C196F62E601AA5B36E8402A2BBB1BD
D51BABB1A1DE4BE0DC4D782A37A121FD34D43BF5320516B77EB8B0D0CD8A7120
A136D9B4705B9C8ABD0E1D2475D4F83C486ABB298061FA6196FCC45ACBEC24E0
8B40C5E867BF245701C03C39C0A1E29AF3B66CBA539F7DAFF7649DCC530C7965
559944B7031CE539CF773C57BBC03F703E6C1C913772E150BD2F4A0AF4CB954B
8D0C0173618978B07BE7B675265622BDDA9C417661A555FA1FF06AF7DAD5861A
F47BF8B90DE7DCF2F1DF8FE0A77A3DCFE978637C9C42B7842876C034290DF999
84F2B01C5049C75686AC428D191FF2FE5FA20895919269E025ABE40056EEE0E6
46700C5238029F3B43AA1DEBF2C25B6C437052B90528D7B539C5461FEC830E70
7F9AE6082734EB6FD4AC89B40BADC9DD2863B0395B35E55442970A9D56E5EDB4
0DADCD7786DF4C8AB46C8593C264226D8E0E13ACF275B1AECB0851A8F28334CF
BD0585E7A0D264E5A199EC2EFFC0D1DB8D8AAB6BA351A1F764CFCEE8A7AE31D2
1683396A250BAA31D6D1ADCA7CC86A1FE55F536983682A41B11612B380599141
CDEE718D4A499D90DF442EE12E1993A36D35E7367D3312073C7EA122C7CDDF16
10B2D1DB0CE9D1747C93C5B714D11C02FEB0A27A20D808E48DE52A732B76C52A
DCEB4B87A51BCE072BC40B49CD4CF273EBDBFB6E2C4742B66BD7D4D67C24115A
8149F16DE4CC07407A115D6D7732DB025CC66EDCAE65552C4AF43B9E2A0B9DEF
CF792513C2AECB3EDF1353370C671A4E268BBADA772F7C16F53928A692C220C0
77D748C8FC4FA189D89BE20D38903767338E72DF46767C44F14C80FCC7FA6501
6797FB13FBB1A115C8321B34591F66241ECA825BA3AB32CE9C7B46B504723EAF
2A8164F916E3BF46FCE745EE5D955CF1E8733F52DA492B8A590ECC217E590223
115919D85C00890038C4EA453D65A8C955255DF4ABCAD445E61884F494CDCD58
E55A38A3438240E0E10D39633C0DF6940B6935D7F1E5782C12D2FBEE0AA452F4
17D276CAEC68706DC5A4413A36E810F50B0547375222A66936678C0CD721147A
8E07AE34ED2310FF111F801E3358E0B89311B79D64240DBB494670CE3ADE6D0B
9200734B43DAF66B69FE61DE94D66C33FD48F1442F1386DDB6A579947B7ECCF7
05322EFC4830D830D0DABE025F919024A85D1FA942CA3BD03B58AC590D680C5E
99D98D7FBF7F5538BDE9F57448C205E4EF82134EC41DD739487D47B6127BA66F
A0E5B4D0C766579DAD52D5C1E4AE9D5DC082F340B62D5AC2E973A03F642F5DE5
4BA19CAC1BB3AAA4E70219B65693723D66AE1107044B81C6EFE43B92437BAD03
6E19316AE6537F776BC41AB14C189236D556819D5A7AF7CB0ABE2E10D76446E5
314010FD9CB4A0CF190BB8B893F3E804795EBB863B8FA25FC864CE15A459776D
E5C1587D1F82D049A44DA7D4EB492E6C301BF2589783EA9AB08355F6EA75A1F4
E9D49053A4B270E509091C9F2C9AFC7B0177C9F4A8B41DBCFA296AB3BE6175D6
DD2E8897CFE1D4D0B9C92AF57B51A0FC3ED021147E2BD169C75FBA4A2258F2C2
491E1490B397F9B11FE454A9B3CF6D6F613355FDFF41E89E89494A567EB5016E
91B3D04DB26F791741200C2A56AC2340A40AB1CBBCFF47D5FF7EA0CB9CA0C495
5C098DBE8C22431014B577586E2C8AB300B8723FDA3EED3C9B17736CD9E28D95
EB967AC2EA94F0560AE491A1A172FFBC57BBBB490D205F80DE02455E979C7719
896A4C729305DA2D0F0A14D38DF7EF2B068A2CB98B02EBBCB378440790521473
0B3AB6349F3FB43DED6D37762DAC452199C535387137F29D0457FD9AC85000FB
D2505DDC0A5842CD9438A16A02EDE84F519A65F7FF37D8919AE84F3141B35EDB
458654159053A7FB5A2D1B27FEA224A856E0850489ADD0914A53D670F12C1A64
42A2AF30EEA757E86E94C594D4966EAA31CB440253519FB73BA2A718F3B3269E
9FE9746BDD89F8574D666AF67C7B558F9081F1AC50E6BA5D0FEF9E0DF323457D
3CAF4B756A92460F8268D4AAEB2CFAE48987A810EDCD86876B9AD3192ED99299
F90994401FC067CDE5B7DABB4F13C0235CEE364ED35373ACF78F9EC9FCE32806
235D9D92030F4C925E7F593291227C6905631340E28DCDBF18E719C9ED3F75A1
58C399EAC16DFE390B28D99C6AB4E66BE4E541A01B9AB5227B7431157184EAAB
559F0DFC4B36F4A79DAAC256276BCB0211D3D97F40F1B3C7C7B0831A0871A8F9
F505FF0B7549D2D4897E07633CD822A654C068E4B566FD9BBF3F247F1E1EBF90
B7BA18FB7FFAF275CFB40691797440BCD7078BB7598FEAC0277C0888F4FEDE0C
50921CF2BADBAE8475A72A85EB7C2523BC02292E1B92E5465B85B62BDB2362EC
179C20B20084673727A1355C73358E62902B304B5D06FE662EC1F5C5C777FAEE
CCB799C0C74E63D756C79DABF5F5DF57D97EF7EFF713ED77E47261B893616AD0
E8E6FDB57DC0C4C7F02164C064121BE1EA738390CEFBFA90823BB00182E3BEA8
DED2305A984F6951B5AA2E8EBA60639A27F751A7AD4B9086F239D69ECB4D0391
8C0CCB026E694B27039910BF54017FDE0B8736AC99F15017B2ABA6EFE04DEC29
A2F1A776BC4D143A27F5ADEAAAEB4173E16A5D95137A1EE57E7BA91C0533879E
B77540A176CEB091999190222DE1E0A224FADE626404329268F442ABE164BCCE
DEB5274DD8EEED230B15269A9DBE9A10F96C056586B15C32FB649DB9DF110FFA
2FFF9F86484B6E41313B555B67E04C3CBB340088115BE17055DD2FED17A9C1D3
05CD6D4F240700979F8B209A4660C170EF20685F2141874EDFFD6835997B7BD8
E0D6A709EF073FC721AD65C4D6AD94ADF1B819BBF8799A87D44A3A5FA1F1D19A
EAA4A823554E471B2FEEA0BE4053B578201D3D4ED68C130A72A06E8D6EDA2FF2
4F228228D37998A3558B1056F217B2BB9C5DEE369B64E669880C9AD968635FBC
387D06AE5D07915EA0190CB414110FE32874BEF8686E3F73337E2872A401DB45
4BCF258F8C9E187596A57B785862408C23BAB6C9EF7D7AB3BDE3D0DC33423D7D
91ECD8217372CDE5A52A19CB716563A3B92E136836AC76C0ABA45C03D7D0BD14
60A363E0B500F04410A20D83A8223A85DA277A0ABCDA26DB9DF97106F10453F0
42B71ABE8E3840473DFBA1FAE38DB7DF62F406DBE98FE9E52BEDBCFE82D329D3
A450A68155F992890A8B6CB720A8CDD9EB50FAA299A0DAFF4C554918A7DEA7A9
85D1C37ABD56EDF5FA021362A4146870701B78B1DAFE794114DB4FE4ADDC41C6
B4E0D32458282DC5C3C2C8FD7D6172EC63B0420C59628EF494AE79594669827B
BA82FEEADCBE041FC4B95EA05A90620EAC5FEC2823BCD4B50D7DB2172E7B06F8
638AA4C31879C24C649478840A418074615F737BAD7C006E85CACE430F725009
111AF68AEFEF88D9818BDABCF41018024CB98169C9FAC00011B6E29D347F78D7
2FF37B7A1400B49D57E5AEBDAEDB312FAD20A33AF2A7A6E8A48D6F0483F604EE
06FDAB64AAA3BA9CFB42DFE133B2ED5BEFAE55C2ECCCDF64F4D76A580EBC8D50
3585D7115AB6116957DAA5DD05BC0945446FDC31F62CA8F00F1E1B7F5A048826
96273B951CE3B3495A0C14407B8692C501C75C628889F9BD1A4073B549415DDB
F4F5351D3EA13DB52AF4B4550D5216AA5A06717E4174B073BF5EB3A43922A58E
5CBDE7B1BA3BCBEF0315A6133C72DB239FD7070E228B1095657C3938498DCCE3
3C38842223DE23A6509EC4EFA5119E6BBA8740A86907AD07643CB2C30CDB0792
CF315BAAA7D583189F4780E5F686536D2C58562D7DBF6792235B4C37D3E80233
9417A1DB1BC9CFE54AC457D222E62F0802CD1FE6403FE35D5AEDA6D674DF1268
561146A70564C84EF2FAB761F94727DF474FCF52FFE8D10E0235E038A149724E
295352F5E0E2304C204721E87EEAB8944146CC60C6EC0922F248B977089E4881
67D0DC20075C9CAB5314D1BC62CA552479586AD4366A75DE83C6BE214C104623
F4FEB36379EFBCFDA9A5BD482E6723B0736AC1D336F25E5799BB063ED3771923
0066E65E294C728B08DE4B15BA978CE82EAB07B0F607E19452EDE51E1B36D2D8
CEE36C9A1F5F3E4553178483BBBFAFCE631E4C6A7AF6071B2BA8C45C94919231
A453D6326F9CEE7DB005D835B04DF19A62E23446FDCD99FF89402542E543BF8C
6CD4A24AA61A47B1A58991D5A131F1E5C5F1BF03737057D21EF2E6897F39ADA9
4AD358D5BBA0C3FED62118BDA074AD2500BD03750C90CDE9161F1ADBCBAA1D87
26FA89C76833DEC9FC8620931E765933F0D521932F48134C1D4308FB33E7A474
75F5536A0FDA0C3F11E3B29A35B34248238B435C9423DBC6C57A94FD51797307
8F15095E006F462E8BB406F880A98E0A467F7DDBBC495E3070FEDE72BD07873F
2BA07B3CCCB2CB624861707D2B98701285BFCF4AFD40B5BF0DFB54EE41B2A2CD
B8FEAA8215C8A850E1A7AD8D3FE1D0C0217C057987B5FAA6F2C9712DF529F33D
E7E4A5E56FAF0E6E738B4DA11DBBF343AF54B81895626923C0364A289222E6E6
F224558BD0C63A26BB87284256E76E1878171F4B498DA00E281EE10BE30A7961
4E6C13B1CB62F544C34B3D0140393D2B80061A3A1147BB504664F9F6AD7827FA
91ED654B759739350147BDA603E117A0410EDDEF9A663A888F8B3785F6E298BB
127E46709074225CE86AE6B807FEA194AC92AD30BFE08ECE219BA650EEC81643
0F8B4403D693FF2773E1A6C05FD9870C55B7ABAF82D8258EF1D056E4DF10B61D
47B3B8A76671E6A86931370FF1C3839EC88042BCD5D03D137866473DEF4DA314
F6A3F41220C9AA3B7599F4A19CDC6E8C6A25054F39D525173C41E196EB48DB5E
1A0E9807D360EE99780DBAA19E106208974CCA3615F3A79225FB98D7D341AD62
18459F7C3BD1D3A67F359558542A92D1A7A4312F687015450465239AA4BCAC07
63BDA3A81371FF60479439B8AB4971500D0DEC14605B80C950D458E33ECFCFA3
0B2E49EDC9FC62C5D7B7B1F2C546B0D22A05DA6DD7BB3B42F34064C785F06E2E
591CFA2715FE1CCC6EF9C0CAF12BEA5A299ABC971AFDB87660A21451D12B5620
73E762A4F1897D71B04C8FCE4CF9A0B0F6B52C9A2B6836B241E0E173AB63C4A2
345A764FB8833BF7B2126D6285F7C0FC4387DDEFA19E96AB7BB8643ACC8F59EC
71F6DEB62F8261BD425A1E0B388B81847EE1CA8B7A61DCCAB0BCD5E1C17CE2DD
7AAA550E93CCF57EB1F6AE19458CCDE332FFF055EC439336429286D30A1134F6
2FE8D619C24A0D53A28973D80C89E31ADDF4FF0B74776C789F9743DAC7A57F6C
63E84658AB36724915E33B4017AE2B293114B048DB7890533FD8CB7A8DCFDB21
1A68D7F0CDA4C12195AD5994E179D48021CA8FA54192D3F0F29F3E0548EDBE61
878B9A15D0639EC9981079534FBB96B0AC654B2C203042300FDCA187CB0676A7
749A2399A7A86D70CF9AF7CBA1E7C8657BFFC485152D775C77C55ED01005A99F
D8245D5C133BC73F0ADE1EB4DE93FB95D880A41CF7E26E1FA91CE8B76D7B56FC
3FCC0A34A058999554FE7430773EDB5E2E70336CC06B042F9BF639BFB8C01A12
8E164EF60CB8B6687F806DF3A1B132A68C61A975CE0FBFBCD5A1005F6C0D10D7
85B77F6CFD3DBEF3BFFC666A3EA61974BDE3AB3916E379EFD0EDD9F850A5B0CF
52783BBC3DE594341CAF73A80011B57394CEA2BDB4D98973EB6ADCA1FA187F89
8929E057650C001FB8EBC5102DDD64C0F764C00746A4B11B0DE54F7E782548CD
D5E26C9EF9FAE03E5B241CE2C2481C8BAE27665147172AD55F57D780BC5806F1
899AFA130B69C698E145797ECFDBEEB8A4EA40C1A9D1BE8F5906993BCB49D97F
40029E9E4354F80F2C66174EAFA95E34E6136DF335331CA086A18E97991B3613
B485BA19A5203A13070141B5FC5054DDE7574028247317FB109AFAF835F639F5
63F5C9BCA7AD921170145972EFF3323083288FF849E48110DFB40454501FDCF1
FC507D4B01CB6CA16BC937CF93C690BCDC1C21BF7834B346C089077724560AA6
AFE98231807317CD37AB03B5F53F9BD6EBFA49C464FDD13A2A04DA79F7054CCD
4293C02F42657115A28497E3A791C743C9A6EC3FDE5F6C07D4432B775825CCCF
992115F2D5639CB50F1620EA6044677AE3BF40764518C30C5F3737BB8EA24AC2
F9EABDBA30AE39017444579516BE2D5AB36E2941F9B475FDBF8782037B070E0F
0FF81AC0968E752B284A8B6E1F5151D71E0308B9910F92E0A3F0C050249A0112
C84419356A61004920959F61D0BA242F5FE84E969A1CD9797E04B0847D935471
DE4D40555EC96E763E29D0720F3474F01987646A8841A895A905D0DCE8960904
B7CBB3F60774DC7604078742EA170FF2EA987A5CAEA48390EA22B35E601A0D48
B5A45EBFC49061E7020E9EDED26C153FCBD474D9C27D9C1B1A2B15F78127C23B
C0AA678DF8F8CFD3678640EEF550FA6DE75AB40F6A52CD891EFB3044B0D90C20
D921CFB6E62431C96F8D4FFAE416ADEFCF3DE605BCDD842C5D5B1403E30D2052
054D416231833359B4088DDE28173F4C28AE2E09541FBB7A00A7CBDC61EB37DE
F48DC2FA9A0D6AB57E7DAE800602409F0048B1100AD22717395D23096DEAEFE9
A5599F9A04F72A3DCEB6B4F98BA80877BAD9D6D54932D54966A06C3F9047F813
FE63F7BE11A407BEDA6A2349280D020404FA6D362FA317072BC4458A11C02F59
283A312FE70F509167A160A5D9A78C1F6DB0E088F48DBD76EE2C4A30C930B159
B11DBE71788C672D83520DBE31F1F410B1B4BCB3CD0B5A1928BE1AF6D7D534C8
9BD780CE9FFD454DB3755B7B65FF6A3CB03E56B150131CA90D4F3EA399FE8A9C
2DD8753416B13ACB369F48B5815DAB464990E9EBAC4EBB090D6077F03105EB0C
CE04D51C2292E837E37D3D50CD92D3093283DE3EC907FB67D323344819B36155
89E4226FBADD57DA5902EC382BB4B5ECEAB97D743DB2DFD4042C7CDB363F7411
00C93D3E24E44F8BBF317A12567DA35A9DE395BEB0D4E85054BFB321A0FFEC68
4BD8F4BA2DE05BA2B74640D984B80D3270F5BFD5D36AC129644E8EF21596FD9E
9ECD102881B49DC2FFAD10314FE61D8C067D4ECC45F7763C6DBD32C2800D15C1
F76F58CEDBC916D7911D4F0DDAA9E228528723192B136410EAFD222E5BEE9FD5
D7C0C51CCF831938A07FBCD227E444C718B101A8C0E6A0D8E88B132199159947
650A41BB38D7CFE9F333D63889EC77443C3D99DBDB416F62F742698DEE8F542A
42078E4A43CBC6717F22417815CBF0CC562646C1D3470F561C0BD24576D4356D
1650E889285442986F45611BB4F96B0540D4C0664770CC4ACE14D54BE1B85804
A5EF035EE887E8B94127DC5BDC0C10D4CD1850748CB9D0D6DF542D010D70F333
CC3A99106479B041216444D3607905165E64C08215013ED75BFA313F26801FD8
2D914E35831C7F47BCAE3BFFA83B7DDF753FDD58F2F70D4299A4F753F1BC6121
E347DCD2EC0A737B7F39731F7A97F4BC56EF4B9844801FED3B5AA3E93C7EB07E
A8902F5815ADD8088D5951C3F9DDA2E46239765957DD1A9F802932F48796E371
DA7052DBC8144577D08D224A0A54D32B095322C82296608B28E0F2EEBD3857D3
716ACF5A2EE7EA03B6ABC3E50BD2E74F1A2CD0C8F876DF5D08A3A1C539AF6174
13E348FAADE68D81D6EBFECA39F51924C76A2D42C74E08BFB7697284F9D6B626
02A3C3FE5B9AF351AD71750A4B58083F708A7003B6476C75470603DEFA2D979A
C4A3466D34DF751C44753BA414CFB869168B633C8C7DE74F4DA0DCC64F288ACE
92CA630B16B8109C5A4CE5403D5597F79F56DB26D00FC4E46CD30C2768667D44
A0E3BC518F56C1F89D6C500BBB7AFDC6D2333854DB363103A1FE2107B371CE5F
60375E4EABBE38838E6E37D565F95DE040BF06E521456DBCD13910FD8580DA92
1CC84DF8E9792F2984F79806CFA272AB1CD3A52987FE8BE43AE197A253559351
30BAD9B241D1A6DB793C1B1F3BBDD14A68CE87B7DA5AA02C42EF73E59FF3A700
8AB6B54AE1A539A8366E910CD5578D06CAE267EAB6A3E58D0B625D7418A892FD
D95412A61EC99689AAD463E6462EF94BEC9B9AC2265000F53914FBA829A8127B
FFB29E306F2F65D97822FA0CDAFD008FBB2EE8E02238248E5B44D5A4E5B09F1C
BFF378F54C83554453DFF21B670A6EE75D274D46D3959416599AD6CD239CAA9B
2826B5EC44C53F585ED1161E86A4BF6A31E7D6F109A50012F1271DAEB2341FFD
5AB20F18DE152D2F89E9C060E23599E89B062ABE2B9533CBDBA90EF59319F4E4
516169FB0C68E3AB22C14ABD38800C59B7DE3E8BD033512CABD1C04CBE42B458
A0FD79E302012F22F597CB7BFACB9700745AF3B8E94325766839F216AC11ADB5
3BF16A10B16299548AE6A0052683E559F4F40B00A68E220D41EC88E14C076E80
F8A0C1ACF2BF1872831DF2BB87EED0C73F2F2EB2B020F9347103FE85C10FD0CA
F0A2437F56F50086782E33972AAE679097BD2DB616557B6FE260D456A5C021E7
15628B95089930BB412398C6351B147AF3D9F6B71A5AE5E78E7B383A7B3FFE20
16F935C742ECC98E953BFCC90729190831A5C4DCAD041120AAC0B4986A784384
6CD1E395C1D533EC87340D1EA9E65ABBC15FF191604ACA46E1648427294F85BE
63F569FDB7626D36E970D437513CF2AFB4CCB99FBD65561E1B6F1491DCA17310
688992D5446E8A87C0FDBFAE15DCE2969AF1049EC956BB5B407A4ECE534CD5EC
3AE7ED8375CBFB3052D3FC0EC77F4A3242E03AF4C4F633F763994D195D9758ED
C8246EFDA4BFB00807370BCAEF73890A65E3154A97C0CC3858629155B11C1578
B6C41760E7CDC379555D037D5AA21FE903863C24A6CFE9D7AF904EA0F4A6F7EC
12B8B4C9700C1367B3D9CEB74154B6DD3B86CE7AD0ADF38362A743BDA2432588
5DD337DE2F7E9E3B6A422FCFBD1D9BADF061BF5F70D6AAC9543651AB357F0F91
FDF57A2CB32B2039907FBE6AF19C0DF700A23135048CD572B72CF7964F550E38
EAEBB1CBE20321748CC5AE43CFACDF4850957F79B3A9913AC427CDBE6B564180
12E289CF2D97CDB93551047002AA99777A3B3CB8AE7A28ADE58AD58910CD27FA
C8782521314697AC952E28777188974BF5E2E6B7FA20C31AE31F8C52A8B12B98
343446F1B1CFBE3C57C6A63083C1D5DA810B4DB9D32B3574A1C4D9D8A396D2B9
49E206E79B93EFBC4FC9D93FEFC39637ECE6791BF199433E0512006421D98863
36B100F5610D5D907AEC244189F32C7D3BA4D9D5CBC391AC7A292D5E0E0DE1A8
9830C9698D22D84CE0DC46D9094AF2E5A86ECF2693940BE443CC57607F420B99
120BB47C8A65F002E1148BFFB3D4B6FCF5EBDAA4F63F6E6631DEE0C2DBDEAF1B
34653DF3CEFFA857CC8764025ABD322DB5BFDE965C7398A47064A68B18D259C0
095BA4D59255DE020C1F91ADE9155E70C32A4FAD88841498F58914F54313F10A
3EE812220D71FBFB8B507F85E911152226C2D9AF9DAD6FCD464B060CCD95553D
053299E75531FDD90971C093AF5A9BCD2F35B402F0DBABBB85D49BF0818A069A
9EB514E0D3DCA77FE028FBD9E4182ACCCC95EBD96FD007773CA1FCEA3C4A91EB
8EB6C6D4637CC4681FD2C7D002838220051CD6D7823C452EFC0E4D06900CB2C8
1A3D1583DFFB1CBBF3906AE5EB2146BC5D1425950BFD6448D2C7150DDB649355
E38B515D76E5A139B120BA823016791EDAB7A210A8538F7BD909FF39B66B32AF
11BE7B3BC62F7F3EDB1C6D604D2F01541CCF5EE2434F76265BC88753A025F760
169CBBCAF5B71F347F797AA215D517A9C240CC06218953B139F81477A8BCF7C8
32890778B55A6BDF5E9DBDD4F5829859078E45A484B0129EE906904C2976D274
C172BE5D65B6C6D9F7389E48968EC723C6ECED524A95C0C8869A7F1CEB6051A9
9418ADDF253158CF4A2BB166D9893A2027D960C49B442972C592C2458C2DAA5D
9E3288446ED6CA9DD00348905482FE174288DE8F2335EF15691257127FFE1F8C
0DBAE7620F27C3920FAB1B2FD0262116BC150A9AC30E49469F3D224A7400D7CB
020339B56A479248D9FC0255E8581ADDA03F59440B4FAD19E288E4B65BA99C7F
E8251B828BDBA63A77A753EF0DD007738FB65C3298DBA52EDFD3A21625BCB886
B6CE9D3FAE74890901C0F1BD3BD8F42BB2CE44978CB3DDB79B67368D05EC1185
2913C5BF793AF9336173B743350EC81B54BDD3275B8F3636CCE0A2A1F9E59107
C895D6B9E130E321E5B70A60F7C3579A72FA856323DB582DE95515BE5DB70D52
F21E78CF757F43AEE7725CB956B0B18FD09BDB2CB0617EC2D89EC932CC5F9899
398FDF6AB226A038A2419CB0567EF7EE0190047B569F57D2AB2A4FB1904B02A7
AE17C56E070C6432AA9CB375BE393F09FD664A7710428A1AF42A65466A5A83D3
F0160FEF70EE4F26ACD2A212BE477697ECA5D504107F8D5377E8BCA79685FBD3
616DF6FA7B0DC668CAAAD0DDCC978474338662820BEA695AAB99C9B522B5E8B1
FB899C2021FE3DC26E1B6F13797F2FF3DC202DC4E80B7EACF373A5466FE07EB4
ABDC6955212A4FACB5CF6C4A78775233DC978CF8778177A4260F9FE67A52734C
0E5E104F863BFF49B5917A6105E21CC3257654C82F72405338EE0E74E0FA7B63
8A65B629178E2E13BF2D66D627632340BF3947D823331572C5C7499D17327334
45412553515E541564ABDFC596E92924A72977E41804FEEA809D54EFAEC773B8
1D0064F8434A824531732B5BECBBC2C1510A347D145494AC823CBCA8479E4705
7DFA2B0A381AC67BB2E30097DC6318FB39E9B5843F6ABF614D5306AE496375F1
A369ADE595EF0ACD40028AFDD88100A48E03D8FBDBFD8C4F4223CF7B0FBE1869
E4B38BB63BB9AC51C37B1A9C0857E527A5C68748541E50DE50DA3B008E9C984E
C1488C5A8CA4D9E31626D05806CE5BBFA9AAA23551DBFFD2F499C78FF892A863
6120AA645700A793313B475A6AAF6C6BDA07C8C2E36BCA75055CDDFF4D00843E
50E65D202D30FB951D8AA018F073A2E639F0FF126C77A54DCFF710B03B603993
9FB0393C5F29EA124C7646E1840332EE3C44A7C20A99ABF172A41E76AD431351
B33BA828A92E6E4D0AE83AAC750290D76EDDCE7DBE31E57BFBB71947CEA2BCBB
ABD8DC3BFE1AFF1ED9ADE36C6EEC9D8774DE081CF0AD8C790FD6BDF2D9B8FE42
0775ADDD07AAD1ABDB773ED83DB263636940D34C8C209255FC05398CE3828816
57CA842BC40C9C10F7A87005460FAA2E6EC298BB4EE9E5362A5474CB062A53A7
20868B64E2B4927980ED3ECBE760ADA48D8FF3771A6331B02A330E1B39C8EFF7
FB6F3AB5F8365AC9EB2207B808963688BBE11FDF93E2BDFC361EF7F9C89CF985
0D85AD4B23A8FBA32925A3A11CCCF5EEA110720FE5809FCEADF498134775337C
D5B0070944A835029A1E948189FE1FF6DE6BE523D523D5A58210A95BB7D559AD
E77FAC3FA0CBC4B68F9714DF11D4507796F8B7EB12568174767F7F18C5528C8E
4EAEAD8AB1D388BF6794F49AAAFDF0CA82ACA4BBDCD158F0FB97CF221ABC58E4
5C5BF0AEFC1D2CB480DFA8656E94BF744B0B13EA351AA057DAC95D035D353224
FBD70BE640B6D6B57BBAE25023316D3688D0B6820EBC8DCC5DC00D47255540C4
37C406BF47124714D77714F5B70D72B70375247E295F64309F748742656E0C2C
B519D314025977D428230EADD4CBD8C304C62B7E0409628A3EA4169232F53C48
18BF410B443BA80DA4613437A0221DF0838214FC07244BD513499901A2807E75
DD42D70F1F28DF1E22F682EA8BB281CB4BF3A774D4553ECC818075BE08205A4A
9DFAE4874A60B45AFB414943AF188891EA3DBB873F6918CC004B778228FEA0AB
F341DB64B7C209563BE9291AA39A2E9BA6F61B1A4D20C03A9CA87E140F9FB5B2
8E9696E8790D93077A81E84720687BC97618753311DB45E1C7B1B7DFF70ED6A7
7755D768DC68DEC4698F84C9432E5561B5D4784BA3BF71353529BED0140EB393
5852240D85495FF3F3CD65955A54A3C178A2C7C770333546D966007FDC04D415
14C26D03D57FC0C5481B0382F10897CE248A2A5C3DB30F8183918422E405CD67
ADB2886240506D71D7C1136E4918EC127B2A58B99588BFD4E4DDEC9C08A340BB
29A03C225107FB3B427B47DCB3C0ECB6391732EF8F9E644D778C67DCE0082E9D
C337BDF9945C51BE6705B3CDAAEF405E82BA9383E4755E53D2D4261B1062C0A1
D38FCEF4EF0A583A00B56AEE434C4E78CE0D1F151023085EC105B378947398D8
86B4DF9565F037D7470430FD820A8140A92B5094A314D651A7E9AB7E6A918943
EC45A06B39034A15B34B537C6911D0AE0EFCFC174AB8ABAA51D42B571F52A487
7E50BD2204246CE79BFBA626EEE5A3F6E9BF63470494C96AD14897239C15F1E2
CE14E1E901138091367009B17AB99669013810DD8B0F009217616CF6F5FCD65E
3FF56DBC73E349B835A188CE73244FA54DAB465B4C8C321B15B88878438DAF53
E3B57E3CF09BEDC93274CAE80AE1F0DFA340C93208F8878EA1B4C880F04B9EB4
90718DE02B559C2D26D41C89EA7C2481552E9B7EB0B26758A52BB7872FE2DCAA
2F47D2E6E9E97DC5695B31699E74B1FA26E7896042DBA6CB866EF9EAA8B69D56
B1A9FE50B69E14A6FE97846C14CB38F7BE2DDD9527F0B77E2AEE2A617226650E
665810CD3B420BDC2E6E4E2512D93A6F9ABD0B8E596226478B0AC5D65B70E9C9
27CE49076715222C1EA9D410FD6D3E1B58A64C3EEFD9FFCBE5DADAC7564F1C82
EC7D7D2C78B23D1B615A6B9CF3B7FA239B8772DD305A87A8E52A9F7537D5731B
4F3AE36F8ACDE6617E545A5F6939735536F5BA178CC4DCF2FCF5EC7BE25E5DE9
C498A2CCA72ABB70D12FBDC15E2CC8E92771CC5378057E369439E3DDEE215469
BEEC76585744F7A33C50F487B31632434D6597FD50C3521CA85193BDA61D60A3
236DE5BC7C102A506FCD3CCC868D1B41214C98DF584B01C8C8626584378259CF
20BFCB1D4A8AF3EBC0F08145D5521DC1782F10AE239A549D327E4FA23EC58F9C
6A093A5C6A7C496CF29EE56AA9421A89664EA1EF4502AF0C7BAE6F68F3D92320
05F8D9A97EF47094A4475B0CD36D674A345AF8BDA226E51845AC3F2B7FFF9CAD
8A5856BB578B776BB1BD6B8178EDCF58396A09FDDFB92BFA0BD09B8A7150574E
9C1276694FDB03945AD80513FB5311F3B40C9F13A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-BoldItalic
%!PS-AdobeFont-1.0: Utopia-BoldItalic 001.001
%%CreationDate: Wed Oct 2 18:45:57 1991
%%VMusage: 34429 41321
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-BoldItalic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-141 -250 1297 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD789529E8D36EE1DABC3C45BB4DE1816585C9F4BF9766A850624E44B20AC
93A406081B22A04FB097043EBB899A74B5A127E0B5394795BE1C0DF2C222E4B6
61D28575358E2FB0371E15F1D5970456DC9B2690759CB47E3257D43022F4B295
8AE5E37D2A4F77490B9E7C35BD97BF3E3B7ECF265A8B8CC108876E0EF68EF8E2
FE3A385E38F3EE6C8813402B75D8335D623CCE26E988491CFA2A265A48EAAAD2
1E9CA92A56AD1A9D343FE26BD76C4F5A0F089119316904DCD00A36AE42C948BC
DDE4B9425F5640EC3E17AD414EEE968C004253DDA0E6AB96DE7A4F847A49D30F
1B21FFED38C127EB3DB4A09185F0A282F7DD376A3ED073D068E84D306CF21315
52DAC1DAC1BA37D3F60185263651860ED7735D90ABC4C62D425CB7C2EDFEEBFA
B7504D43B2ED9CC62355C8ADD1CE8F6BD5A6C5C459DD1C3EBA2A0B793A94273A
4728C918643011866806088BB3ECA299D6B9B5CDB32246F16C1443F6918EE375
BA98380F3B1B80278922665CDD0F7D057ECA67F2ABA4C7CE35797BC72AC5174A
39765D626DF71D81AB8A824501892F055A4BA315EDBE7B2E41A6C1DD9F17C3B9
1C9B0EDB9D006C8A472EAB87E14F6C82A5E0F16D24256E5AD35ADE7CFCF34F80
16F6BCFFB7016166D5B517DA0B751DEE50EF6071CAA02AE69908332E2082592B
0822BDFEFCD4EAF5ED7B5B2DFA65BDD044EF67F55F01713772C8492CC19C86ED
DB6BC2EE17C2A344633DD930080C918F89EC5CDEBE8B655EA92F063CB0B7618F
F26C3F0EB3A5474DC3A0970BDAC8C378E0F7BFE7D96244DC683803A0855DB604
900A5A763D79BF855220F975CCD10E56C8CD8F468AE87FD02AAAEEF11713A20F
2529B15084600D1954BF0304ADB2CF68A7E4A95223E19F5D4A94575CF1D2FDD8
032C0C3249870E1FB046CB95FEF4DA4BD6E38AE2AA3BB7DB64305FA7EF605075
EE1F7C8235437549A2010C51A4B6D952552CDC9E11241BC75C7A1B7C750374E9
AD3436536A9FF8FABBAEB86F143A944ABE063BAAC314FC3DD1ABF155B25772B7
9A51E12CED705A58238DE355F989A6D27134E207822CA2FA35DB491BBCC7FE45
3C4054D35893C712E08C2C8975742F75BC8435ED0119A05EDEBE954133227F06
E0027197999E1D74FA8A73F20B6F44EA140CDECA487AC35BAE98CC6628E51EBF
4F39893ED348BEA964AA4D708A6A10BCB91F1578DD3CECECA3675882369863B8
EC236C1FE9964D8816593D7332B2EDEE8CE96DB6DBAD4F53B9901E964FCDF935
550469FFE8C0BEE3B56365091EB16327986A5C0359F002AF1A86C6E9E4AAE06F
D6BC3906115BD350501E8CFEAE8CF4CE5FD7EE17353C03ABC6D1A198E0D26C27
359E520C6469B2856D44249AA90013DB779EFCE712EB0B9C99C192E9067AF2F2
64CE7FEED858C464F3D842060DBB235EFBADC0B2A908AA1E453E7574D949072C
7CEC6FFFDB4A0730A217C1FC0D7E8214F30327ABB381B011BA64F22CE0A8FE40
F4334A5F8ADA32421376F3D24725E549FFEB8FBB596ECBA121403FA7E9F546F6
46AD31A9E80120579A17EC0CF408C281A3B9347D401620CEDB0A5894469974E6
A7E1DD476687534C5AD5C9C2975B4ADCD6EBD7ED27129CEB71A113B847E42238
5D1C16EB13E3202979524862725A48BE0D21D5FECA07384A402797CF2A25C5AD
0869B587E4AAB9AE0AE8B1F67006160E0C10C935F70F2E7EBD517C75CE2B6171
EA3FB1118FD1A281E9E75281E35446DA185095B15EE57CBE03C44D9A9F4E2CB4
7C3625A13DAD43232F4C691F9E8A33675C97988704661DECC56BAF8D30501087
8E9D8008C33FB3318C9516CC84825BC064D6FF860CA83C4C77234910B9AA3BB8
B45D76F038CC386B600925ABEACFBAB6A49FE620EF6F1B099DD50C1EFA7D61E6
2F70C72BF6110B2A5E4D5192DB11164E99A03A35943DA6097CEC06B95BFD4A92
564CEDD266C3CD4D3D708B23F9B41AEC02CE64CE9F9D8CBB45AB5F7645752628
9F22233FB7E42E841B120EDE4E53006483EEC43E0517E174A97D5AEA46525083
C52DDB835B06B6A5B2D4D3AD35AC7918A9C6C1DB8BD432AFA423A5FB5B36958E
E472B30B7BADB9E7EF9153005F23A5FBE96F5FD1D15A151E76DB426D84CA8E4D
F60ADBF99FD46C4330668C1AFB2FEF970EEB60623B94C3E9F77BCA0805884943
DF21F3F3D4DC3CCBD05072F36284F63F199B1E265B3DF29C68F323E4BA777A03
270608CA3D0FA05C14186D300837F93F3C997507E35D5DEDD46D064903215249
880BF61BA790C22142989BEBDF22FEFA476BA0C12104F2031BAB26A7B5B50143
FEFD671409BB80DF7CEF71ACE4E6545A73138B53170D46D4B234F82BB03EED7C
D651F871229DCCEFDB600F329705D4B3F397CDA17A8DEB8E306BAFC235679195
FB194BA4AD5F0D63CC1E83AC130AF26315D5D70AC07AF778A53161CB12DFF092
4FA99DCD8A91C01AE80B55FE8A4C3B7165DF155AC588605739C74104E048D823
7FC68CAB8E5E89C672D5B872F733DA1AECC715C87987C4699D7BA2DAAC5B9C55
25603F5B0384DD61B29D1A4486A0E607ADD0349A89BC930E21D0F16CE9556272
860DE35D639FFDC2C37DC26C9F998D7BDEF4AB44AEE42B228DED1B4AC68568EE
D6538118CE196BF5EA0D847D06D61779ED85B22773F34FF959D7F9E134B12226
C150F1A6D06910BD9D6B538D48D265B665107E47552DB1D42FD4BAFA31DA0FF0
1BD3CC7EF69EEC2B2AF1D74131CE7C86275428DA14BF12EFD5E34D41EC266C58
861F40465C49BDADAF2DDB65D7E222349A847ADE3C34783357F86D321AC33160
CD970833020CA53922F05212801CD800F5539D57809D7078A6C9289FBF993780
D05CD84A504912E1A0789C760F618296AF8D676BB6CF6E1922C399AAAA9793DB
66C9EE07FC9FED9960F3EB992EA549EB2D07502E7DBF202BA56A6D192A347B64
2CFA80E1EDD14AF63B1FE6151C58FA36CC4BF04E6B2E140C9D323818BA294E33
24F8A44CC075792C86B94A6733C39807F3416CA876F32E68A2D4AC66800EB55F
C7E54D643F7C2CED3AC82CDBE4A5B54A71495EBEFFF494E59E191BF8E9D0D84C
C312AE5B99CA89CE44379C031C3F3CEC8BC2B95E0824E9A3C46A9E90287744C1
4EDA36C1155EEA1F34D5585C9A8791D453AD70372DB634917AAF48FCCEEB2AB1
AB21AC051F12CCDE534C568E5D9217E47855B17E9A329705877309BB086B3B06
876D1221A641DBADAA9B42A7E824250A0A5F56587A7DF65C4A20BCB41C178A93
712B2F21CB6AA3CF6F3D7899DE97BBDD742C892907493BDFD769DFBDA8AB9D18
A3A88883E1ED03C696B1640F391998993F8FBF4BECAACB23AA5F0CD90E38BE2C
A8C72C61F41E4BD4B1E3053501818C989CDCFDAD5146186D98F00890223D552F
2AFBB73C1846FF96C09FC915BC075B11631383AC6E2BC016B1C2599225E46049
42FE33605565901359631C83D58F6096E9075236851AA662D4F063D0F93EE445
155AB87827052CC83562182ADC0AD0C2DB9C77DFA39B4072E6FA1F48AF2AE779
DCFEA57BDB6EA32276E1DEBA8CB89756E1B415D8FECC59DB6B6E375516709741
93250FD7F583DA17825376C97D391F14502D1EFE35CB126F8F3B4959FA0AAD06
D9A5DDCB6281B499DD427A235AF0F3C38638084F8F7D4F2DBED85F1C753FDA4B
CFF831B298E84EA6F30E698328AB9636156EAB4E966D3136B9DEED11E9363A8E
149EFB55028B8FFB7043853688E3AA3162D4B534249B0DC342CA197B6619C85C
CC6C44715E2FCEB58C7EDF1893F4C6462590A1BE6742EB71BC3BFA8E8118AA52
5EFC86D357862F8813556E164064CF54C8E0A982C3A3BC9056CD848969A7E52B
FC97F1A2E1146AA3C91856DE1812A60DC090BEAD2AD299046DFB339097EB480D
01B8A274FE59DC3B9150EFA6946B712CD58FC2F796412FD08634D4D7694F73F2
6D55FC8F79C315821F6E138F4371E958AD5B9977D09CB02D912D0075454CE999
57103878B1498E7EAF30502926C23FCE9BD02AF6F24DBA456E47CB5CD00EBC76
07EC75EC3DD97F919B9BE1DC58DBF9DD7C73DE15B2107D86241C4B3AF06A56FB
00DE5A754B465E1238246CC8CC072B11B3AC5D16331DDC2696FAF30510796FA0
C248F98C0677BB5B89C3EFCA17662FC475BA88E87E62F7F3ABECBCC77E4FF4DA
C8EA47A11BBEBA73C5D1BAFE3C2A458FC51B4F695F20C03A5238D53815E0C8B5
9F9895ECDDED43129D2B3B2B1C8CC487F7EF85093A9BC1F8A014FCEECDDE32F1
21AAAF7D56AE4FA0F9521E5171333365F4D28E55AFB096A34FE405AD6CA60D17
74E48FA8671E8FFE42B60DA883BF18DFB558DF85B06DF35C2E9BCB8B986A35A9
B4892171B39C9422488636BF69838AF7BD4B2B2C1B26C3F650CFD430BF0BD422
AB9AFAE57ADA3E0E37286C39A9F3738C6381762482408DC5FD013634A6BC6C66
6E71E5317A6E0E87A2DBD42A7B72FD42AF5FE58F90C815B7A0FBC160399427F1
230B08EE766B8E5DB510F604E10AD60B51838A6B7AD79DFD2489057161375158
817DF6D23ABC079B753C8F00A066FC9CE50C3DDA1CE1392F298969F5E84699D1
8733A0086A47DF0967A9DA37A6E22E4EE2E5F3F0D68C42699373F4FEB7F5D4C0
5348B811066F36610CF1C507E26267C26037037FDD15E6113A2ADBB52362404E
67EB800708A66EEDA6F3147B3861A2A947CC9AC1257D6072FED0CEA49246F8DF
FA8CEA4BEB6D070EE7721A872E27930239BE719F6DD2F4427AD5372F6AA8E159
1667C50DDAB0C4BFAA296AE511BBB8C427C9B17155D83A61B028FADDD8202F90
FFD86B46AC98A5D888805B0599894F1EE4FA49EB9622E46ADE60BFCFDDB7A567
D5BA779D08E02B88EC78FF895EFE961C62995EC59842D636C7E1AC7341D5046C
96DB983C12F76D62E0F494B7DA5A50186ECD90E2F15FE9274A91C1BA17BE3F68
6001C9003201CDE43E7D9109D02CE66AB3D69AEB45DDA82195725CFCC84AA3BB
B07B287EAE62CE1E31FB41EA1AD07B613542F58DBC930CD472F226E8BD90218F
721781A1192C83A4E6EBF2C55C94E4D9879B9FCC5A5E6666D2208F2E90FC60A3
CA285454D782F4249224A72A21CCB8D949E25D7D865C0FEAFE482EAB9918932E
2952609F48029307D8168FEC0119ED1DBB073BBF6378B076134E5B5D5D1DB3AA
05C9527316C5F03A97E2FE0E435250BA042B1876CFE243C77442F0C401F6473F
FD63B89563D02541A61BCD23DE64142480411241DE390FE335A955C6F53CCC12
012D47C2990AD037ACAEDD23E0362AE977FEE0CF62D091D5208321A2EBCCADBD
DA22DE061E1197F44E6642DD04CBDB0965F3B8D76BDE754050D76D66DE699CAE
72345A5501DD675943558C3A1D8CDB3A7546EBDD463A19AE295DDBBD27DCE62D
2E1EA7349E327AC0E934F6A017E60BAEFD894A0AFD6801B1994321BD2B267CDD
3210A7A8A644AAE629BFC8F0677F7473894CA9D7E303B8CA3BD5102EF21F284A
783F001789B13DF2D7F68291107F144E52EEC779588A0DBE866996D6507AA0F6
A1F0CF3C036D1269C3BD6136F0361F1463A922E378F99A0137FE131A01D4991F
D23B742F64F44664D1AC51995C30E50B9145B62ECB4EDD7544CF5D08322098F3
E939A5165F621E4B4F00754562828431A9821624AD6E54F71F1E5E7DF6B1BE63
4D96D53B6F27341D59450623B46250F5456FD299F593C8B9982FD72BF46E4124
5AE70CDE373E47FD68538C8EEC103F4D58409B6EB0270B1D5F612252AD8A869A
1A259DCC364386039A1DEE7F0A8DB0E6B555EE5EA7AD4D458BDF3DE1588EFBDA
508EBD5F8FCC9BC9A52DE43A18640AFD502DF75613DB5A07F3903E1FDAFA7FF1
88C5C455A6398D7BFB87BEB9FEB0D7F27E8E687DAD0D64BC4766A7C2E7E79D45
E2CE24430DD0851E102988862B2BE3AF10DE37C2623F38AA5D0438288069D628
E4EAA659E2FAECD5154F992E9E2263E440A719CD8CF493676DE5025DF4D110D8
611215A556AD4E4FF19AA3E0DDE69577451A7978572EB6D05C92A7B0ABE4D5FD
377529CF1008D5A3E3BAB453AE1936D5AD5AEDDB6857B1565FE02E235B449BBA
58F8B073442BE7A1A8F78F5959CDBAE07413B0C66AACCD06F0D50391833B8E50
F75CC7893C85DE4EB3FA1F3C18C7AA4D499D439A96ACC0379E64E2C08C2C2263
C6E238CB19DC540731889292851E8093A65778F7F9732884FDD3298130A00483
93BD80B5A7A0170374B669760C4C5E1684D5D86AF4F001A38D4D3F7C9A4B5BA2
4469119A8D00ACAA214DF47B13C05F4D1591F9312EA7D1761BD80997F8A4BB93
6F1098A6E9A6191A2E82FD5C78839321E380331BA4ABC5161C4B0E7DD7373BEB
508567C7F34AFC97750AC8A9FBCFF9E12C7AF8CE26FADD7F013DBD5CCEA65322
A742EC4529E4DCE82EE452AE33258AA58E23553311D5DABED7433B351C845192
05D57BAC8EBF98755417A2C55456F1A2BA4126C067EC4C03A2F8E60F6D53CAB8
AAE9BD0318C67B6E2D7A8C97E9EAE1FD71A5844B36510B9822E5EE48D80B4B28
F0547E71733A48DF5E0C7BCC91BD5993893DF194AC881C70295429C8A8DDDD48
7830DCE3BF9DA76211DE163DD6384503D8020CD263D843C1DC10B1DA4F944DF0
E71A1F08FF470A62E38B64E81498F1290FAFFE1CFD4672A05FA61604934BB5E7
5187257C80A6FB7130EE72EB332141EBEA85F76EB501E87187744831CAEE62F3
7E54D9A82D9A43BF12756ECA46C1B7669A29BBCF83E95F3E8D45BC7C9611994B
F1722BD9688F6207BA17A892B2F54054B02E8F463F244C09EF5F389FF89C666B
AF241A0C911F1EEE63143FDF84688392AAF0AE56AF9A891D0DD80A5A0954B48F
C5DE2DF79133FCA7A218E59C3473A98E06CAB4A1134D9DD02633D5B6A764A8BF
A791A352BE082CCBE9D88356C3756271121286EF5145742C55D97F1DC74D6D9F
69D26AB2DF600A2268B3688730FC94AF59393F2C948C8E318B65E43FD1227A14
289955FF8AF6B8765408A15B49C5F898C408A7E575D535567B2F723FDF41B057
D4D5E175FC7E481EF77E1B69B90ECD4B61461955000A4822178AE1D4463FB68F
CE4E68B91BCC6D18D715E86D507F9422DFBAC2D85930BE230E0646FAEFB0638B
85743CDCB7175B5782AC1DA45C7921708CA89EA4B8DAE17613658DCF3534CE42
EE5A34FDD92CAEF490385673C4C3C500CD79BC707725C13B800C452E938C7EF7
57E563E6D210649E967338BB1AA12BF294B5553FA2642688D107CE2BE4D40E7F
673FBF1952E4A21D367B0D3E71748BD83B1CEBE5CEF0BC34F282408FFAB547F3
026326F68BFA456D1E80328D8270FF8F9815646B9E1785BA871952801BA30B36
D65E8791983C973AF69986FC414C019AFF7CE7CBDF0E471978C30821B49DB97B
066CBE26A95BAB5B1C5A25C9042EF97F81BFD76EB9EE1F1126722FDA291E9708
5B42C43DEF045B3A8D0EE6F9E734439EF1F1941D308B826CB727CA71C5C8B6CB
DB84268E2FB3875C001E76ED44B785A49A48300127212E2FDEC1FE44F00164BC
FE67D2C90B95E57D6C72C9D5D0A44F17C7E38B333C7CDB4591F65B5592F7550C
0EBB8490BD3D8D56716D1904CACDDEBBDD19A513E2FC01EE1971699D124616AE
3DF8211E13A49B11EB82493C2767A7347BC167E0066DFDFF43460B2C106ECE63
2FB14E5239B90027E7F8B7723E7A47AD40011BE1CB767AC301183EB1475B58C9
E49561EF39E8350312E62600678D420B4FBF1373F816D9686188AC9DD0591C5D
F6F1CE3D8831CC2C410F1AE805644C465B486D47FE88E5841D11AB231F4E2FCF
07E437E5AE38C9028C7698C7757CF9854755B9E967CD057C280FC413A5037057
0B2E0DADED1196A0D32C85EC0CA0B098E43C97C770426EFA76748D89FA11FB0E
36C96750D81CA98349E2300E8E7A259A05AF57A509DE0BD29AE8C4E6CD42F22F
6E6E55456DEAD957E0B1FBAA1C8B3F90C151813F9D735495A8DEFD649D70E0C0
EE6E63F020BE9157241B16ABEBC5A817C880113D24907D9E5636440D3E23A0F3
4C8FC227BAD040C666BA6A1C7DDCA2E413F71DBDEC2BE5392CB2F56D62F81FC2
05CA7DFC042B9E9282B9A26FED60440063558F2C332ED4281D907FBECCE90304
9AA8BB7C0188D2B2894BB7BA5E90FA604C09BD8CE5DB777751395E7896365ABF
44530A8D655AF599DBA5FBA7F4F47DB64A00B371819D72DACCEF6E99A472F453
340A7CFDA8C03856F2FE4498201D3C4ECDAC3D65D9594C8EDE9961C7A24FB27B
6F89BAD1EF95D17AECADB2C832D53175D8D768760E80FE268A21B32DEB108BD2
4395DC256B1FCB824D08F80CD1038C4F5F67B498E30938BA6C62D276189F7DAC
D4DDFADD039C000EA687F85851E840B498BA43863C77D04F4BCB9D5A8650D380
E0D805AD08488B1C71AA5DDE077781A9E73C9F2FFB6F88904009407BE4EEA0D4
27E31A60107CC5CA52DF4AE41B665172A82B6CDB91F8A569CFE3C162F7C2491E
1490B397F9B11FE454A9B3CF6D6F6130CF6E50BF1051199B86EB5D52361F4960
A720C07B7C55A4426FDB33DA6B232EDB2FAB3EEA589A446A1B1D4DA286F156B2
0195255CCBF3A8C141669AA5A98D70F945BD6DCCDFA0B4803E96402DC55C1343
18DF8DA712C29AE4C05699094F4DC32700E35DEC925A757F1B14D0233F960A1C
60C398A531AA8B9B5A9690A14F4B92D76CE20F9EDB78A94E9F691E1B89F63D3F
FE5CDEEFD2B3A2BE8110330D8FE4C8F0C8AD3C9B499F496352973C0DCD3B16A9
431610348A523B9007AF4C64F9D235E5C89E493692C9D9184AE8F4AB2CE87597
0636C38313D3085B8909203DAF101ED9A5697CE38742A92AB81EAEEED52251AB
181BCE9DB330AAA547046F7E559C2E1C3B3FD002B0D3CE3D7D51B2115A29B54B
4303F7E1C8AC7D5C47AF6DC2983470FC5A9B82FC7FA7204DE19D75E10783F79F
90DE3838F8AA7E1654880E6C6A7ECB65FDD09268906ECB9FE90A9055079A8AA4
C4486DB53E4AA152E5C3389962E955B4EB282E8848B40AA6BF0B022A9B59AC93
E6AA36A4B7742E251799FB8B86473D404A3321F338F859DE80B694323BE5327A
C0311C00828E258EDAF9CC898A50F5C1D890D4C814325EE561E124157F21D63C
139E2DF2090699D0A484D4D688683EE038CA05A3B89199286AD172B0A6A029F9
5B828F815680B622E0981CAADC33CC35F4EE541349015EFB730C0FC37425534B
ED3A069494E0B4A6C2B8989DDE3629B20D494FCA2CB96A4619A4911C215D2855
B69557429B3ED5E27676073B5E48BCB10847ED474E4724308009DE710899BD66
484B5CF972B851D01C889E649EB02CE8EC07EF3FB75EC9213024DB79FF40D788
26AC60650BD6D0D1AEF828EBEAA48952F01FF1D4784AD306A3F26BE495B9D2F2
F52DC6664B28E842A71AA9C5DD2F2CD9880140480A458DCE7E8A42EDF6472517
81DFF83E7AF220D40AB75F8A61F20E2DCAECAF285C3FBF1A53CB338FE0AE4A84
4C996C73F53F63A48C7F4ECEE23E1680B000EFEBE75281E35446DA185095B15E
E57CBE03C44D9B4DD1A2F9664CF4A150D05B25BA9CAF1AF680016FB3336F3C6F
D511E7AF14A6E9660AA81729AD861D42453886CB34045F07CD6B0686B1A34F10
C953D25984802794FEC13CC430011AE952EFEB6B47919734E32EF8D91C757286
09757CF7CA8B8F86C7840D85D6EB6A1411D0A3EEE9D984DA842003235CC96E83
18FE3A23E68BEEE562E1C578C378FF22E495086F993A8701DEC9254F203A107A
D377CB6121DE0957AD1622116BC5EB64F9BD1E85F8E7266ED5C5CCD247492202
44808A443680B8346C54D742B3DD3FFF4990833C720DE6D3B23B3E49BF5CFB3C
FE9A476912EE771037CA67FB37E8F7085B449B47E512E4D4B3FE2FAED6922C81
D18026BD029FF6FD8687C37D5EABF66B2689F09F1EDC75C031E483D00129B815
9490317737F63BF573DB14A107BE0DADFFB2B3977BC53C881896D9B51D241745
BF13BAB18BA15DE5277152AADD032718C03B89AAFF7D49756A208FB77A6480E9
7698F781C7F9C89CD4B9C26C903940C5BED0FDF83EDC8C1451D41B9530C73898
9E93DF18B3FADA86B2C55EE2362449869DF6EDF17D2D7FE4231AE2F4794FF8D2
166D004FBBAF0254E8C194DB436590FA1387594F6EB054954D2E86F3BAF0649E
2F9EB3714EC8950A4C1E7358A9F526E5606A1C8EA440CD671389833E320077A6
5F78697B5F53C6B074FFB62C410B0C6515C93D445D40C7153D55399E75F2F0E9
273EC494D1AAC8CD81508A190A37FA5B36E0A2A5A63EC593C6B84CD8468B6921
DE99260B9AC010CB8BF491119048C67795A15160D49402EBD65DA3228C58A422
CFABAD2905AD809440050672147297F8A64D1C43A6EB3FA0C9676DDD4A580DCC
0BF1B5159319416902E6A1601BA5C8F7AABD54BBB85E8C856308761045189829
176033231330529B416CC04DBD85A788060830BE729498C6C337F2D1F9A40B8E
6813509120B0A0ED2BADB20B52335AA3889AEB90356C867794DC13D70E9E4903
814B01610E077EB78941F2E169D2E94BE40B2B951CCD2D9ED2C12239607718D8
E2E330E2FE63DFA87C42ACA6BBF226C6E514BCE41E6A2B41331C6455AB5A8226
659E9D243F7DE079B26455E4B7FC18B0946E05361A8F7FD072AACB87B03A8D5D
9620DEA5A672B4B3BE25BA700DFA2F3BAF24926D8C31F6EA95CF14177FB453CA
771CEF93D1B4135848B220B04AABE39577C01078881AF46BBD3DA89B4C408782
5C5B9ABC971AFDB87660AF963C47531C15085B7A59E5137230C2CF016E6BCD35
02501788EC3823DB51D12DCC5FD47142F762E107FFDC572DE345BE7A4FDB2503
72CF72ACB1484FBC1CAE8DC58BB4BD474C0602D13DED427E9CECBBAEF487974D
912CDF52103EF9BDDA9448280CE7A398A633DF176FEDE3323D862796AB291E1A
3C2A9A5DE011F4745C0414E37C1124A4843CB86FC4DABB5BC82380FF42B5C7D7
D461C590F6CC59B4E830382334972DDDD9D727ACAC727C6ECCECB204928B04F0
1EA4B4FD6B6DC4D906668651177CB851C17668F3264693519C8B0F9955B84D74
EB7AE8299901D9209810E034DE6F56F6F7F06DE5280AE72E332B077C5F5DA708
89935F8F999F88B7FE21FD324B72364476912F3FBAD0489E7E5F05A2B2590F24
6CAE71425FFA9D65E27069A88598BF4B5669FFB96C28D804A745166C6E6867D3
E413655D7241194A1714687B9E351DA2C4E50EA43A32626E6E61840B744DE2E6
D4B23E9E7F12F2AFDD0C7C86C4FEE17290D76153A2D5106DDC2B0E4178A04524
8B31B07E074F8F327B40EA5676F7A13D544E9B81C460C166A44753F52DD5E5D4
C8B3E249194C17EB9DB0B0B6AE78C8A3221351CFFCE84D465FE6FB032968765E
65BE310D8FFFFCCFE5C2150199EB87E1E06902887B4732C68C40301DD69A54FF
B9E8580868E72DA6F43C7221041B8BA820B37F56262A6E7EAB8ECD165182CC4F
D3BD0F01BA31D8A0E1DB0F9C85B5C8A209E3EE44AA952CA4265AA5ED4ADBBBA0
5FF639B335708116F850268C5550332ACE6E53FF054B8C5760A04E01750FF981
F5C988607FAB4C37B6A80798EFF8FCFF86F10B0BB14C4D4DD6524A30DB6978ED
D75421373880205353683F94448CCC4EBE6596B360A0A47BE1870FF765B4485E
9D91A2FBE40D773F6335426B6BD48DFF5C81E18C2DA521764563F6AC7DD1402E
E89A2CBFE0A09CB71BC7203BF068D8A63B93F359409B9F9DDC28D5BF70FE5758
520C434F65927F0BEA4F9E681ED0B835FFAFE78A6088AFEF5FD1E5F8CA76F868
48C10500F6969489386C8878EBDFF1000F36D15D428EE9EBD7A954821B1F5A0C
22F4CC10CF9C166F96689332167C8FE6BA3524F49D4F6BAEAE03E436EFCFCB53
5E798CEB6F2D2FBD459FCF89FA30D22401FD0399A1C6A037082F299D34A5F317
B3A7FC2F3F0ABCA75BFB32B2D1D66B6F874B9D6AC543B626B6761AA7917669EE
3494A97721A5114C1015DECDE7563656C9B206082C6DCD274C72531A336004DE
ECD7CAA85954534EDF392FAF6BF7798E9853CF21E82EE9514B408603A0C4AC3C
A722A014371FA1408D9FDF2E32184A03F917593E9EE713AF80744F0B6EA1A74C
9A9B70D18FA28DD307E1D9737432C982166CD8F39F442BDB19F19FAFD1C005FF
BD5EB57BCB951610FA663E1F71096C7A76B6C68908C0E17D4C5C38C83FF456B5
C433692D9DEF41F69D431E0C959EBC01F41E5142CC0A7B6FC67404788AAC45FB
1EE1032A98E645625EC8E3767EAA73AB3ED44881AE0F23770018135C8375333B
0148D26EA558EDC89F2E35801FD76E86A74FA8A5BC6D80CC505D7766C9404A83
6A801A9445E32FFAC7E82E13F510DD5BF815478F8FDA342685CAFAD20E8C5FD9
C539B247CDE343509120874BA1434634EF8C82D88C3D3BA5165F621E4B4F0075
4562828431A9821624AFC1B4EA7634FAFDA67AE11CFFFEDCAE6A94C6EAF95C3B
F4A9F1EAD2922C8A8C89D44EAE93A0C123C0DBC0761F2D42688E5C34175E6B7A
6DAECB705D304607A056DC42B00A2670BB3F46BEDFF82E03DFABE61F1850CAF0
5D6D267618646B4FD2A1252A5A786E20FAD9DF86ADA04528B84717C2B0446614
F2DD281DB363AFE598C3EDA16E64902235363FAA0DC80E19DBD767D7F0788071
4169920F7F6624B41240C4D8C3CEECD16A5ACEA26EF85E09E637216848C55C80
B9755F28CA46D48D6B6E9E32289587F0D8B5C42C361E416274BAA664748DE304
717BAC748D441DC58720CB71E4A82E244D50B21E8DC2C3FCED06767495632CFA
7512A326F5F9A981C797F6B712491B5F1204C51EA5D8141AE4014B3FAA228175
B0F29B34120D181C82D5BE7C77C89AD0B002FF392B9552FECFDB651C1D34C215
8CE5A9BAFDEBBDEA690B6FE109949234CF847F2920932B2B830A67930D2A2894
851566F8268F2CA7BFB05839C798F7284844BC9A335A11FB8986E8C8238A7770
A9CC37AA2A1D46C878027B11DCC934045AA2E97A9683A20FED8D9652E81298C9
B9C6FD849C9E6ACA556EAC607EC504DF9D3A794D7F28F90A1BEC37803AB97773
EAF6D50ACCAB7E3A1BA3104D122A78EE430277E42B750194357B1E5F2F91D297
E980E8F126E744B2E51E28278DFE77B43427C2EF6BB3E94AB9F12F8291EAB213
D6A428CFFFDAB82199976FB4A36569AC4C70CB713992688AFBE2ECEF69FEE034
329BB0325A9EDDB6DE1E3A228FCDC896E71ABB3FDAB7ACB31DBCFDE4A5AD9387
C0367810C7C474E18EC1ECB643AC7DD253DD42592DF5D3334DFB961629F7BD7C
960EA599341F140CDC10DEC6A11959500859AD893109FFCE59FE0D55A795BE91
DC5DA5DB7031968BBF2782CFDBA4174190A3C00796AFEB627EA15556013032B9
11E1777BC91898CFFB86E9738DC9C84E62C71A6CB80C3FDCBDED81EBDDF2EEED
D3B16E61903CB40ED117B3A61FC431A1538861A855A4712CCF3798E9CD53534E
37D7D5D50AB5707BFD1D9200F672098212BED068C3DE7BBAF745CAC4B18896BF
8D0C014CB7C3DD2878B49686B54F5481219F65CFD980E4C5320346A9521E9994
58F28461DC206A4B588E304E9B1E658B3F7E8EE7DE274E10FC71A3A76F67DF39
30EA5584989B24A38257506EEDEA8291A672DFC71C3BB75C6DD37E5F4B145331
E10F37C56C1A22719BF520EBB94976386C81FCF98889DCA42A6ED6BF9316B06A
BF295A8DA531FB59316B94D2336B15902C36B93BD9D53DB95DDBCC73CFBA1357
BD5FB7FB5855558D85CC854763832842AB06ECC9EF55BD3FDE36889019E72E9C
994EC60C37C3542DFBAFBC4A3FB5BD4A851299494DE7613892495C264F7E587E
4EB9ADA4F004CAFD3265D9CCF4EE98097D87BB2A76297E32FEF06D9A4E57CC67
ADC836AE2DD97554990C258963F374C2206673222D5AF3071A4D933C93DB2BAE
4ABC9B28FD7374A9FC2DE1BD0A4B71FADD1C5E8C5F454AF67BB1B125E19CADE3
4F77EC5EEAC3F6AD35DB943EBB370F0B8F17C78C15601F74D7E578AE6B5B3884
CDC8B06969AEFC9E551A2A3454DE24BECCDDE8B199C28CB679E99EE25B932BFF
AA6E484B254826C7B5B6247E32DE850B6CE8D63F1D350B264C1B8C672D3D1231
D0D903DEE85A5335CB4403F1A52D20BA40FF89631A76189BF0E6EFA07AE259F4
7EB9C7999409788B25AFDE13D202AEF929DD36C248338B9953C26B5E8A8801F4
43A04577D8D331AD21CB2899FDF5F7C3EA1EDB5D65B767E2AAA0905F344D599A
A0B9BE3F1CCD00CD7D9F2A83C12901F20E2D8FB4B4F029A1DB9F3BF7EF69A285
92DD3046A6DAB30CD65A5ADAA38C46AB5D76C068E004A0F052FA8601C29B72CF
6FA989327950E1D60D0CF222E3067F21798C80644DCA24FD5E92C9FC3EBB311D
69BA2115350991069CDD6B8E63E98D690B99011A2C75F5CFAB224C08AA3B9ADC
0F88EA39EAEB7995D141EFF62F6E61CA1FA18D06868038B4EB0E311FEE54DF89
514F4E129D0285255879BAE70738FD4FE54604135AE46DAD019A79DE68634EA4
BF7078558445CFF8A13102142B973A9DF737AD58B3107D818129AE6A30633C77
CB21513BAED04969772789954EC309451805A9217ED792225760F580BCF0DE43
CDE783518D59D36E323D6F9BFDD51CBC76E94251447147288E69F4284BF20CFE
4EE1393B1CE2630404C0558801125638319D00A8699FE4C08A35FC6EE7AAC935
9433B72E7E84A24367EBA33F0C9AFAE2B98EB1FB7C015E2DDFA39E0DCB66CCC4
FCBFB4A9C4520E7E4645A5B0332AED9E5F8C17CC6EFD60C7D66595053AB9403C
B5310B60B98F6D4BC29DB760FEA1A30FF2B394FAFCB696C879AA3636D3DEC74D
EA0A4EF49C48ADFD5BE46FB9DAD815DF29232FB1574DD0D26959F023CE21F898
121E242D62EE41E44E8C7F86D99E4A8647A5EB2EBADBB16E7DA89A9EA908BA19
E64CDAF76797A3D0854040E167E8B63D64B5CAB3300C0BACFC197D64798A8E35
97E2F40EB5CFAA5369286D0E7D2A6717F37B4220CF27CD172434C5E189D03D34
792E6E4D2CE3EEBA1C5DB9E5568D29B4D2A7CB5AA5EFFF6F40D75618EA1FDF94
4818EFB3420C95E0F402453E03893CEDBBAB2C38E55052EFD9B36DC08B5186D8
C391C5D8CC343E9F70F97AA9C63BB1ED13B8367AE9C5B922E733B301E4667A5A
FEB5A9D36BFEEFEF33AD470651EDFFB9DA5EE30FE73921D55DC84A1E54A2EF78
4699175E8F27F37223DD236A1A2ADFC7222030E5B15467CF8FC71BEEC0338A1E
759284387BDE109B80CC3564DA1E227577C949A45FB505C25C034CA3DE7ECD97
2C83D2AF03C6C2209705F9D3648398F96341F2E089405FC5E978C0066C1CBD2B
F328E56496C66F6BE57E3A3DEC84D275DC1F426E67AE2BE432E1B7D326A60507
85E24AF44CBEA308E8D4B98472EB8E9BC7021CF1AC8D3E2E847E792D65FCD908
FFCF64D03F406952D809D940632A65BEC212B11564C0189948C3BF49A4DA8E30
3E03A2454C160A5BF00B01DF3855ABB0B06B3F4FA10A91C1A7B3A9144230D003
34BA18BD246E79CB938F2F346A8DD0A7BA0A55382825F32A5645DD8A2EA5C50F
020DC95C45F38AA4FB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (environnements_dom.dvi)
@start /Fa 252[77 3[{}1 99.6264 /MSAM10 rf /Fb 170[58
2[47 12[44 57 68[{ TeXBase1Encoding ReEncodeFont }4 73.325
/Utopia-Regular rf /Fc 57[66 66 197[{}2 91.6562 /Fourier-Math-Symbols
rf /Fd 22[57 57 110[58 57 2[69 41 49 48 66 68 64 1[104
34 2[35 69 59 1[57 67 54 1[60 12[69 1[75 1[71 10[69 10[31
4[62 2[62 62 13[62 35[{ TeXBase1Encoding ReEncodeFont }29
109.987 /Utopia-Bold rf /Fe 22[60 60 106[60 1[60 1[60
60 60 1[60 60 60 60 60 60 60 60 60 60 2[60 60 60 60 60
60 60 60 60 3[60 60 60 4[60 1[60 1[60 1[60 2[60 7[60
60 60 1[60 11[60 2[60 60 60 1[60 4[60 60 40[{
 TeXBase1Encoding ReEncodeFont }45 99.6264 /NimbusMonL-Regu
rf /Ff 192[66 63[{}1 91.6562 /Fourier-Math-Letters rf
/Fg 22[50 114[55 61 33 44 39 61 61 55 61 89 3[33 61 55
1[50 61 2[50 16[61 10[61 1[72 66 78 14[50 50 3[33 42[61
2[{ TeXBase1Encoding ReEncodeFont }26 99.6264 /URWPalladioL-Bold
rf /Fh 23[60 111[60 2[73 2[47 1[73 2[106 3[40 73 66 1[60
3[60 16[73 6[47 4[100 68[{ TeXBase1Encoding ReEncodeFont }14
119.552 /URWPalladioL-Bold rf /Fi 22[42 42 114[57 31
36 37 51 54 49 57 84 28 2[29 1[46 29 42 54 40 51 51 20[52
29[24 1[24 4[20 39[{ TeXBase1Encoding ReEncodeFont }24
91.6562 /Utopia-Italic rf /Fj 4[58 17[44 116[33 38 40
2[52 58 84 3[31 3[44 3[55 12[56 15[71 10[51 2[51 3[51
51 51 6[32 32 40[{ TeXBase1Encoding ReEncodeFont }20
91.6562 /Utopia-BoldItalic rf /Fk 186[83 69[{
 TeXBase1Encoding ReEncodeFont }1 131.985 /Utopia-Bold
rf /Fl 167[67 1[68 83 66 59 72 1[69 81 78 97 62 2[41
3[66 69[{ TeXBase1Encoding ReEncodeFont }13 105.588 /Utopia-Bold
rf /Fm 22[47 47 5[48 1[48 102[46 45 70 46 56 32 40 36
54 56 53 57 85 26 2[27 56 48 29 47 55 45 55 48 9[86 58
1[57 10[32 73 1[53 56 1[63 59 58 13[49 49 49 49 42 24
36 24 4[25 5[22 30[56 2[{ TeXBase1Encoding ReEncodeFont }48
91.6562 /Utopia-Regular rf /Fn 22[48 48 110[48 3[58 34
41 40 55 56 54 58 87 28 2[29 58 49 1[48 55 45 55 50 10[59
1[57 1[63 1[60 1[68 84 7[58 71 63 8[26 3[51 4[51 2[26
1[26 2[33 33 37[59 2[{ TeXBase1Encoding ReEncodeFont }38
91.6562 /Utopia-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray -118 -343 a Fn(N)m(om,)18 b(P)o(r\351nom)h(:)42
b Fm(.)15 b(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f
(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)2089
b Fn(.)12 b(.)g(.)p Black 0 TeXcolorgray -118 -189 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

-118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/Count -3/Dest (section.0.1) cvn/Title (I Premier paragraphe)
/OUT pdfmark end
 -118 -189
a -118 -189 a
SDict begin [/Count -0/Dest (subsection.0.1.1) cvn/Title (A Premier sous-paragraphe)
/OUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin [/Count -0/Dest (subsection.0.1.2) cvn/Title (B Environnements d\351finis)
/OUT pdfmark end
 -118 -189 a -118
-189 a
SDict begin [/Count -0/Dest (subsection.0.1.3) cvn/Title (C Cadres)
/OUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin [/Count -0/Dest (section.0.2) cvn/Title (II Deuxi\350me paragraphe)
/OUT pdfmark end
 -118 -189 a -118 -189
a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189 a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118
-189 a -118 -189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189
a 1919 46 a

 1919 46 a 1919 46 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 239.47311 28.19455 moveto

 -239.47311 28.19455 lineto

 -242.22429 28.19455 -244.4545 25.96436 -244.4545 23.21317 curveto

 -244.4545 -23.21317 lineto

 -244.4545 -25.96436 -242.22429 -28.19455 -239.47311 -28.19455 curveto

 239.47311 -28.19455 lineto

 242.22429 -28.19455 244.4545 -25.96436 244.4545 -23.21317 curveto

 244.4545 23.21317 lineto

 244.4545 25.96436 242.22429 28.19455 239.47311 28.19455 curveto

 closepath

 -244.4545 -28.19455 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -240.94797 -3.0964 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray 0 TeXcolorgray
1 1 1 TeXcolorrgb 2754 -19 a Fk(E)c Fl(X)g(E)g(M)g(P)g(L)g(E)g(S)30
b(P)8 b(O)g(U)g(R)32 b(M)8 b(E)g(S)34 b(E)8 b(N)g(V)g(I)g(R)f(O)h(N)g
(N)f(E)h(M)f(E)g(N)h(T)d(S)3635 151 y Fj(16)20 b(ao\373t)e(2019)p
0 TeXcolorgray 1919 46 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1134 452 a Fi(L)-10 b('usage)20
b(de)f(la)j(calculatrice)g(est)e(autoris\351.)364 572
y(L)q(a)h(qualit\351)g(de)f(la)h(r\351daction,)g(la)g(clar)q(t\351)g
(et)g(la)g(pr\351cision)f(des)g(r)n(aisonnements)f(ser)o(ont)428
693 y(prises)h(en)g(compte)h(dans)f(l'appr\351ciation)i(de)e(la)h
(copie.)g(Le)f(bar\350me)g(est)g(indicatif)n(.)-118 791
y
SDict begin H.S end
 -118 791 a -118 791 a
SDict begin 17.39995 H.A end
 -118 791 a -118 791 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.1) cvn /DEST pdfmark
end
 -118 791
a 1 0.2 0.3 0.1 TeXcolorcmyk -218 1031 a

 -218 1031 a
-218 1031 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -218 1031 a Fh(I)-218 1031 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -3.78604 7.88034 moveto

 10.60582 7.88034 lineto

 11.70628 7.88034 12.47154 6.99686 12.3151 5.90703 curveto

 10.04698 -9.89214 lineto

 9.89053 -10.98196 8.87163 -11.86545 7.77115 -11.86545 curveto

 -6.62071 -11.86545 lineto

 -7.72118 -11.86545 -8.48643 -10.98196 -8.32999 -9.89214 curveto

 -6.06187 5.90703 lineto

 -5.90543 6.99686 -4.88652 7.88034 -3.78604 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -5.7786 9.8729 moveto

 8.61327 9.8729 lineto

 9.71373 9.8729 10.47899 8.98941 10.32254 7.89958 curveto

 8.05443 -7.89958 lineto

 7.89798 -8.98941 6.87907 -9.8729 5.7786 -9.8729 curveto

 -8.61327 -9.8729 lineto

 -9.71373 -9.8729 -10.47899 -8.98941 -10.32254 -7.89958 curveto

 -8.05443 7.89958 lineto

 -7.89798 8.98941 -6.87907 9.8729 -5.7786 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save

1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 setgray
 -218 1031 a Fh(I)-218 1031
y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 -34 1081 a Fh(Premier)29
b(paragraphe)p 0 TeXcolorgray -118 1234 a
SDict begin H.S end
 -118 1234 a
-118 1234 a
SDict begin 17.39995 H.A end
 -118 1234 a -118 1234 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.0.1.1) cvn /DEST pdfmark
end
 -118 1234 a 0 0.6 0.9 0
TeXcolorcmyk -73 1312 a

 -73 1312 a -73 1312 a


 pgfo

 save

 0 0.6 0.9 0 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -4.65056 -4.11562 ] concat

 pgfs



 0 0.6 0.9 0 setcmykcolor
 -73 1312
a Fg(A)-73 1312 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -4.84938 6.44438 moveto

 11.66916 6.44438 lineto

 12.76962 6.44438 13.51372 5.56349 13.33119 4.47685 curveto

 11.15756 -8.46196 lineto

 10.97504 -9.5486 9.93495 -10.42949 8.83449 -10.42949 curveto

 -7.68405 -10.42949 lineto

 -8.78452 -10.42949 -9.52861 -9.5486 -9.34608 -8.46196 curveto

 -7.17245 4.47685 lineto

 -6.98993 5.56349 -5.94984 6.44438 -4.84938 6.44438 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0 0.6 0.9 0 setcmykcolor}def

 -6.84193 8.43694 moveto

 9.6766 8.43694 lineto

 10.77707 8.43694 11.52116 7.55605 11.33864 6.4694 curveto

 9.16501 -6.4694 lineto

 8.98248 -7.55605 7.9424 -8.43694 6.84193 -8.43694 curveto

 -9.6766 -8.43694 lineto

 -10.77707 -8.43694 -11.52116 -7.55605 -11.33864 -6.4694 curveto

 -9.16501 6.4694 lineto

 -8.98248 7.55605 -7.9424 8.43694 -6.84193 8.43694 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -4.65056 -4.11562 ] concat

 pgfs



 1 setgray

-73 1312 a Fg(A)-73 1312 y


 pgfr

 restore
 0 0.6 0.9 0 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 110
1350 a Fg(Premier)24 b(sous-paragraphe)p 0 TeXcolorgray
-118 1559 a Fm(I)o(l)c(est)h(vide)10 b(!)-118 1559 y
SDict begin H.S end

-118 1559 a -118 1559 a
SDict begin 17.39995 H.A end
 -118 1559 a -118 1559 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.0.1.2) cvn /DEST pdfmark
end
 -118
1559 a 0 0.6 0.9 0 TeXcolorcmyk -78 1805 a

 -78 1805 a
-78 1805 a


 pgfo

 save

 0 0.6 0.9 0 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -3.98705 -3.93929 ] concat

 pgfs



 0 0.6 0.9 0 setcmykcolor
 -78 1805 a Fg(B)-78 1805 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -4.18587 6.26805 moveto

 11.00565 6.26805 lineto

 12.10612 6.26805 12.84732 5.3886 12.66121 4.30368 curveto

 10.50053 -8.28879 lineto

 10.3144 -9.3737 9.27145 -10.25316 8.17097 -10.25316 curveto

 -7.02054 -10.25316 lineto

 -8.12102 -10.25316 -8.86221 -9.3737 -8.6761 -8.28879 curveto

 -6.51543 4.30368 lineto

 -6.3293 5.3886 -5.28635 6.26805 -4.18587 6.26805 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0 0.6 0.9 0 setcmykcolor}def

 -6.17842 8.2606 moveto

 9.01309 8.2606 lineto

 10.11357 8.2606 10.85477 7.38115 10.66866 6.29623 curveto

 8.50798 -6.29623 lineto

 8.32185 -7.38115 7.2789 -8.2606 6.17842 -8.2606 curveto

 -9.01309 -8.2606 lineto

 -10.11357 -8.2606 -10.85477 -7.38115 -10.66866 -6.29623 curveto

 -8.50798 6.29623 lineto

 -8.32185 7.38115 -7.2789 8.2606 -6.17842 8.2606 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save

1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -3.98705 -3.93929 ] concat

 pgfs



 1 setgray
 -78 1805 a Fg(B)-78 1805
y


 pgfr

 restore
 0 0.6 0.9 0 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 99 1842 a Fg(Environnements)25
b(d\351\002nis)p 0 TeXcolorgray -118 1955 a
SDict begin H.S end
 -118 1955
a -118 1955 a
SDict begin 17.39995 H.A end
 -118 1955 a -118 1955 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.0.1.2.1) cvn /DEST
pdfmark end
 -118 1955 a 1 0.2 0.3 0.1
TeXcolorcmyk 55 2032 a

 55 2032 a 55 2032 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -2.98883 -3.93929 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 55 2032 a
Fg(1)55 2032 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -3.18765 6.26805 moveto

 10.00743 6.26805 lineto

 11.1079 6.26805 11.8491 5.3886 11.66298 4.30368 curveto

 9.5023 -8.28879 lineto

 9.3162 -9.3737 8.27322 -10.25316 7.17276 -10.25316 curveto

 -6.02232 -10.25316 lineto

 -7.12279 -10.25316 -7.864 -9.3737 -7.67787 -8.28879 curveto

 -5.5172 4.30368 lineto

 -5.33109 5.3886 -4.28812 6.26805 -3.18765 6.26805 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -5.1802 8.2606 moveto

 8.01488 8.2606 lineto

 9.11534 8.2606 9.85655 7.38115 9.67043 6.29623 curveto

 7.50975 -6.29623 lineto

 7.32364 -7.38115 6.28067 -8.2606 5.1802 -8.2606 curveto

 -8.01488 -8.2606 lineto

 -9.11534 -8.2606 -9.85655 -7.38115 -9.67043 -6.29623 curveto

 -7.50975 6.29623 lineto

 -7.32364 7.38115 -6.28067 8.2606 -5.1802 8.2606 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -2.98883 -3.93929 ] concat

 pgfs



 1 setgray

55 2032 a Fg(1)55 2032 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 224
2069 a Fg(Environnements)g(num\351rot\351s)f(automatiquement)p
0 TeXcolorgray 0 TeXcolorgray 11 2278 a Ff(?)p 0 TeXcolorgray
49 w Fe(\\begin{Thm}[Th\351or\350me)55 b(de)k(Pythagore]...\\end{Thm})p
0 TeXcolorgray 11 2503 a Ff(?)p 0 TeXcolorgray 49 w Fe
(\\begin{Prop}[s]{Th\351or\350me)54 b(de)59 b(Pythagore}...\\end{Prop})
p 0 TeXcolorgray 11 2729 a Ff(?)p 0 TeXcolorgray 49 w
Fe(\\begin{Defi}[]{Th\351or\350me)54 b(de)60 b
(Pythagore}...\\end{Defi})p 0 TeXcolorgray 11 2954 a
Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Methode}[]{}...\\end{M)o(ethod)o
(e})p 0 TeXcolorgray 11 3180 a Ff(?)p 0 TeXcolorgray
49 w Fe(\\begin{Exercice}[]...\\end{Ex)o(ercic)o(e})p
0 TeXcolorgray 11 3405 a Ff(?)p 0 TeXcolorgray 49 w Fe
(\\begin{Exercise}[]...\\end{Ex)o(ercis)o(e})p 0 TeXcolorgray
11 3631 a Ff(?)p 0 TeXcolorgray 49 w Fe
(\\begin{Exemple}[]{Th\351or\350me)54 b(de)59 b
(Pythagore}...\\end{Exemple})p 0 TeXcolorgray 11 3857
a Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Rmq}[s]...\\end{Rmq})p
0 TeXcolorgray 11 4082 a Ff(?)p 0 TeXcolorgray 49 w Fe
(\\begin{Demo}[\(Titre\)]...\\end)o({Demo)o(})p 0 TeXcolorgray
11 4308 a Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Vocab}[]...\\end{Vocab)
o(})p 0 TeXcolorgray 11 4533 a Ff(?)p 0 TeXcolorgray
49 w Fe(\\begin{Regle}[]{}...\\end{Reg)o(le})p 0 TeXcolorgray
11 4759 a Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Cons}[]{}...\\end{Cons)
o(})p 0 TeXcolorgray 11 4984 a Ff(?)p 0 TeXcolorgray
49 w Fe(\\begin{Cor}[]...\\end{Cor})-118 5124 y
SDict begin H.S end
 -118
5124 a -118 5124 a
SDict begin 17.39995 H.A end
 -118 5124 a -118 5124 a
SDict begin [/View [/XYZ H.V]/Dest (thm.1) cvn /DEST pdfmark end
 -118 5124
a -120 5283 a

 -120 5283 a -120 5283 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 17.97003 198.01108 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 6.40166 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb
-120 5283 a Fn(Th\351or\350me)18 b(1)h(:)g(Th\351or\350me)f(de)h(P)q
(ythagor)n(e)p 0 TeXcolorgray -120 5283 a


 pgfr

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 14.8557 476.95367 0.19925 -15.622 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 14.8557 476.95367 0.19925 -15.622 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -11.29056 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
-120 5289 a Fm(A)-5 b(vec)21 b(ou)f(sans)g(titr)n(e)p
0 TeXcolorgray -120 5283 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 5461 a
SDict begin H.S end
 -118 5461 a -118
5461 a
SDict begin 17.39995 H.A end
 -118 5461 a -118 5461 a
SDict begin [/View [/XYZ H.V]/Dest (prop.1) cvn /DEST pdfmark end
 -118 5461 a -120 5621
a

 -120 5621 a -120 5621 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 17.97003 199.15877 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 6.40166 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120 5621
a Fn(P)o(r)o(opr)q(i\351t\351s)e(1)i(:)f(Th\351or\350me)f(de)h(P)q
(ythagor)n(e)p 0 TeXcolorgray -120 5621 a


 pgfr

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -12.03479 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
-120 5621 a Fm(A)-5 b(vec)21 b(ou)f(sans)g(s)o(,)h(avec)g(ou)f(sans)g
(titr)n(e)p 0 TeXcolorgray -120 5621 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
-118 5892 4016 2 v -118 6013 a Fm(.)12 b(.)g(.)1832 b(1/)p
0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fm(3)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1518 w Fm(Ann\351e)20 b(.)12
b(.)g(.)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -8 -481 a
SDict begin H.S end
 -8
-481 a -8 -481 a
SDict begin H.R end
 -8 -481 a -8 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -481 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -118 -189 a
SDict begin H.S end
 -118 -189 a
-118 -189 a
SDict begin 17.39995 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (defi.1) cvn /DEST pdfmark end
 -118 -189 a -120
-38 a

 -120 -38 a -120 -38 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 17.97003 198.1665 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 6.40166 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120 -38
a Fn(D\351\002nition)19 b(1)h(:)f(Th\351or\350me)e(de)j(P)q(ythagor)n
(e)p 0 TeXcolorgray -120 -38 a


 pgfr

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -12.03479 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -120 -38
a Fm(A)-5 b(vec)21 b(ou)f(sans)g(s)o(,)h(avec)g(ou)f(sans)g(titr)n(e)p
0 TeXcolorgray -120 -38 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 270 a Fm(T)-9 b(exte)17
b(en-dessous)g(pour)g(v\351r)q(i\002er)h(l)o('alignement.)e(T)-9
b(exte)17 b(en-dessous)g(pour)g(v\351r)q(i\002er)g(l)o('alignement.)g
(T)-9 b(exte)17 b(en-)-118 414 y(dessous)22 b(pour)f(v\351r)q(i\002er)h
(l)o('alignement.)f(T)-9 b(exte)22 b(en-dessous)g(pour)f(v\351r)q
(i\002er)h(l)o('alignement.)f(T)-9 b(exte)22 b(en-dessous)-118
559 y(pour)e(v\351r)q(i\002er)f(l)o('alignement.)g(T)-9
b(exte)20 b(en-dessous)g(pour)f(v\351r)q(i\002er)h(l)o('alignement.)f
(T)-9 b(exte)20 b(en-dessous)g(pour)f(v\351-)-118 703
y(r)q(i\002er)34 b(l)o('alignement.)g(T)-9 b(exte)34
b(en-dessous)h(pour)g(v\351r)q(i\002er)f(l)o('alignement.)g(T)-9
b(exte)34 b(en-dessous)h(pour)g(v\351r)q(i\002er)-118
848 y(l)o('alignement.)19 b(T)-9 b(exte)19 b(en-dessous)h(pour)f
(v\351r)q(i\002er)h(l)o('alignement.)-118 972 y
SDict begin H.S end
 -118
972 a -118 972 a
SDict begin 17.39995 H.A end
 -118 972 a -118 972 a
SDict begin [/View [/XYZ H.V]/Dest (methode.1) cvn /DEST pdfmark end
 -118 972 a -120
1109 a

 -120 1109 a -120 1109 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 15.31 68.78612 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 3.74161 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120
1109 a Fn(M\351thode)f(1)g(:)p 0 TeXcolorgray -120 1109
a


 pgfr

 restore

 restore

 save

 /pgffc{1 0.9804 0.80392 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{1 0.9804 0.80392 setrgbcolor}def

 16.34413 476.95367 0.19925 -17.11043 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -12.03479 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -120 1109 a Fm(A)-5 b(vec)21 b(ou)f(sans)g(s)o(,)h
(avec)g(ou)f(sans)g(titr)n(e)p 0 TeXcolorgray -120 1109
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 1293 a
SDict begin H.S end
 -118 1293 a -118 1293 a
SDict begin 17.39995 H.A end
 -118 1293 a -118
1293 a
SDict begin [/View [/XYZ H.V]/Dest (exercice.1) cvn /DEST pdfmark end
 -118 1293 a 144 x Fd(Ex)o(er)n(cice)k(1)f(:)3038
b Fn(\(6)20 b(points\))-118 1582 y Fm(H)m(ello)g(exer)n(cice)10
b(!)-118 1726 y(B)o(ar\350me)20 b(optionnel)e(en)j(\002n)f(de)h(ligne)
-118 1789 y
SDict begin H.S end
 -118 1789 a -118 1789 a
SDict begin 17.39995 H.A end
 -118 1789 a -118
1789 a
SDict begin [/View [/XYZ H.V]/Dest (exercise.1) cvn /DEST pdfmark end
 -118 1789 a 122 x Fd(Ex)o(er)n(cise)j(#1:)3004
b Fn(\(6)20 b(points\))-118 2056 y Fm(H)m(ello)g(exer)n(cise)10
b(!)-118 2200 y(W)o(ith)20 b(or)g(without)f(the)g(points)g(y)o(ou)i
(can)g(get.)-118 2263 y
SDict begin H.S end
 -118 2263 a -118 2263 a
SDict begin 17.39995 H.A end
 -118
2263 a -118 2263 a
SDict begin [/View [/XYZ H.V]/Dest (exemple.1) cvn /DEST pdfmark end
 -118 2263 a 122 x Fd(Ex)o(emple)i(1)g(:)g
(Th\351or\350me)h(de)f(P)q(ythagor)n(e)-118 2530 y Fm(A)-5
b(vec)20 b(ou)h(sans)f(s)o(,)h(avec)g(ou)f(sans)g(titr)n(e)-118
2583 y
SDict begin H.S end
 -118 2583 a -118 2583 a
SDict begin 17.39995 H.A end
 -118 2583 a -118 2583
a
SDict begin [/View [/XYZ H.V]/Dest (rmq.1) cvn /DEST pdfmark end
 -118 2583 a 132 x Fd(R)n(emar)o(ques)k(1)e(:)-118 2859
y Fm(A)-5 b(vec)20 b(ou)h(sans)f(s)-118 2900 y
SDict begin H.S end
 -118 2900
a -118 2900 a
SDict begin 17.39995 H.A end
 -118 2900 a -118 2900 a
SDict begin [/View [/XYZ H.V]/Dest (demo.1) cvn /DEST pdfmark end
 -118 2900 a 144
x Fj(D\351monstr)n(ation)e(1\()s(T)n(itr)n(e\))-118 3189
y Fm(A)-5 b(vec)20 b(ou)h(sans)f(titr)n(e)-118 3333 y(C'est)29
b(\340)g(cause)g(du)g(fr\350r)n(e)g(de)g(la)g(tante)f(de)h(la)g(soeur)f
(de)i(la)e(belle-m\350r)n(e)g(de)i(leur)e(cousine)g(ger)q(maine)g(mar)q
(i\351e)-118 3478 y(volontair)n(ement)17 b(de)k(for)n(ce)g(contr)n(e)f
(son)g(gr\351)g(apr\350s)g(avoir)g(dit)f(que)1722 3742
y(1)12 b Fc(\305)g Fm(1)k Fc(\306)h Fm(2)-118 4006 y(sans)j(d\351montr)
n(er)e(pr)o(opr)n(ement)h(que)h(1)12 b Fc(\305)g Fm(0)k
Fc(\306)h Fm(1)j(alors)g(depuis)o(,)f(il)h(y)h(a)f(des)g(pr)o
(obl\350mes)g(de)g(famille)f(non)h(r\351solus)-118 4150
y(d)n('autant)h(plus)i(que)i(F)t Fb(R)t(E)t(U)t(D)31
b Fm(a)23 b(l\342chement)f(d\351cid\351)i(de)f(les)g(laisser)f(se)i
(d\351br)o(ouiller)d(sous)i(pr\351texte)e(qu)m('il)i(n)-7
b('est)-118 4295 y(pas)20 b(n\351)h(\340)f(leur)g(\351poque)n(.)3041
b Fa(\003)-118 4379 y
SDict begin H.S end
 -118 4379 a -118 4379 a
SDict begin 17.39995 H.A end
 -118 4379
a -118 4379 a
SDict begin [/View [/XYZ H.V]/Dest (vocab.1) cvn /DEST pdfmark end
 -118 4379 a -120 4516 a

 -120 4516 a -120
4516 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 15.31 110.15152 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 3.74161 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120 4516 a Fn(V)-6 b(ocabulair)n(e)19
b(1)h(:)f(E)o(ssai)p 0 TeXcolorgray -120 4516 a


 pgfr

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 32.19086 476.95367 0.19925 -32.95715 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 32.19086 476.95367 0.19925 -32.95715 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -19.95816 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
-120 4450 a Fm(Essai)-120 4595 y(A)-5 b(vec)21 b(ou)f(sans)g(titr)n(e)p
0 TeXcolorgray -120 4516 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 4831 a
SDict begin H.S end
 -118 4831 a -118
4831 a
SDict begin 17.39995 H.A end
 -118 4831 a -118 4831 a
SDict begin [/View [/XYZ H.V]/Dest (regle.1) cvn /DEST pdfmark end
 -118 4831 a -120 4991
a

 -120 4991 a -120 4991 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 17.97003 82.30757 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 6.40166 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120 4991
a Fn(R\350gles)e(1)i(:)f(E)o(ssai)p 0 TeXcolorgray -120
4991 a


 pgfr

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 33.6793 476.95367 0.19925 -34.4456 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.92941 0.92941 0.92941 setrgbcolor}def

 33.6793 476.95367 0.19925 -34.4456 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -20.70236 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -120 4919 a Fm(Essai)-120 5064
y(A)-5 b(vec)21 b(ou)f(sans)g(s)o(,)h(avec)g(ou)f(sans)g(titr)n(e)p
0 TeXcolorgray -120 4991 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 5319 a
SDict begin H.S end
 -118 5319 a -118
5319 a
SDict begin 17.39995 H.A end
 -118 5319 a -118 5319 a
SDict begin [/View [/XYZ H.V]/Dest (cons.1) cvn /DEST pdfmark end
 -118 5319 a -120 5477
a

 -120 5477 a -120 5477 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 17.74292 122.9676 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 6.17453 ] concat

 pgfs



 0 setgray
 1 1 1 TeXcolorrgb -120 5477
a Fn(C)o(ons\351quences)e(1)h(:)g(E)o(ssai)p 0 TeXcolorgray
-120 5477 a


 pgfr

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 33.6793 476.95367 0.19925 -34.4456 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 33.6793 476.95367 0.19925 -34.4456 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -20.70236 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -120 5405 a Fm(Essai)-120
5549 y(A)-5 b(vec)21 b(ou)f(sans)g(s)o(,)h(avec)g(ou)f(sans)g(titr)n(e)
p 0 TeXcolorgray -120 5477 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray -118 5892
4016 2 v -118 6013 a Fm(.)12 b(.)g(.)1832 b(2/)p 0 TeXcolorgray
1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray Fm(3)p 0 TeXcolorgray
1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray
1518 w Fm(Ann\351e)20 b(.)12 b(.)g(.)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end

-126 -481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -126
-481 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118
-189 a
SDict begin H.S end
 -118 -189 a -118 -189 a
SDict begin 17.39995 H.A end
 -118 -189 a -118 -189
a
SDict begin [/View [/XYZ H.V]/Dest (cor.1) cvn /DEST pdfmark end
 -118 -189 a -120 -58 a

 -120 -58 a -120 -58 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 15.53119 100.88612 0.19925 0.19925 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 3.9628 ] concat

 pgfs



 0 setgray
 1 1 1
TeXcolorrgb -120 -58 a Fn(C)o(or)o(ollair)n(e)20 b(1)f(:)g(E)o(ssai)p
0 TeXcolorgray -120 -58 a


 pgfr

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 32.19086 476.95367 0.19925 -32.95715 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 32.19086 476.95367 0.19925 -32.95715 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.70576 -19.95816 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -120 -124 a
Fm(Essai)-120 21 y(A)-5 b(vec)21 b(ou)f(sans)g(titr)n(e)p
0 TeXcolorgray -120 -58 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 242 a
SDict begin H.S end
 -118 242 a -118
242 a
SDict begin 17.39995 H.A end
 -118 242 a -118 242 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.0.1.2.2) cvn /DEST
pdfmark end
 -118 242 a 1 0.2 0.3 0.1
TeXcolorcmyk 55 489 a

 55 489 a 55 489 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -2.98883 -3.93929 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 55 489 a Fg(2)55
489 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -3.18765 6.26805 moveto

 10.00743 6.26805 lineto

 11.1079 6.26805 11.8491 5.3886 11.66298 4.30368 curveto

 9.5023 -8.28879 lineto

 9.3162 -9.3737 8.27322 -10.25316 7.17276 -10.25316 curveto

 -6.02232 -10.25316 lineto

 -7.12279 -10.25316 -7.864 -9.3737 -7.67787 -8.28879 curveto

 -5.5172 4.30368 lineto

 -5.33109 5.3886 -4.28812 6.26805 -3.18765 6.26805 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -5.1802 8.2606 moveto

 8.01488 8.2606 lineto

 9.11534 8.2606 9.85655 7.38115 9.67043 6.29623 curveto

 7.50975 -6.29623 lineto

 7.32364 -7.38115 6.28067 -8.2606 5.1802 -8.2606 curveto

 -8.01488 -8.2606 lineto

 -9.11534 -8.2606 -9.85655 -7.38115 -9.67043 -6.29623 curveto

 -7.50975 6.29623 lineto

 -7.32364 7.38115 -6.28067 8.2606 -5.1802 8.2606 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -2.98883 -3.93929 ] concat

 pgfs



 1 setgray
 55
489 a Fg(2)55 489 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 224 525
a Fg(Environnements)25 b(non)g(num\351rot\351s)p 0 TeXcolorgray
0 TeXcolorgray 11 734 a Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Exo}[12)
56 b(p)k(152]...\\end{Exo})p 0 TeXcolorgray 11 962 a
Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{Exoa}[12)c(p)k
(152]...\\end{Exoa})-118 1239 y Fd(Ex)o(er)n(cice)24
b(12)e(p)h(152)45 b(:)-118 1384 y Fm(V)-6 b(oici)20 b(un)g(superbe)f
(\351nonc\351)10 b(!)-118 1578 y Fd(Ex)o(er)n(cise)24
b(12)e(p)h(152)44 b(:)-118 1722 y Fm(H)m(er)n(e)21 b(is)f(an)g(aw)o
(esome)i(wor)n(ding)d(of)i(exer)n(cise)10 b(!)-118 1770
y
SDict begin H.S end
 -118 1770 a -118 1770 a
SDict begin 17.39995 H.A end
 -118 1770 a -118 1770 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.0.1.3) cvn /DEST pdfmark
end
 -118
1770 a 0 0.6 0.9 0 TeXcolorcmyk -76 1993 a

 -76 1993 a
-76 1993 a


 pgfo

 save

 0 0.6 0.9 0 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -4.31583 -4.11562 ] concat

 pgfs



 0 0.6 0.9 0 setcmykcolor
 -76 1993 a Fg(C)-76 1993 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -4.51466 6.44438 moveto

 11.33444 6.44438 lineto

 12.4349 6.44438 13.179 5.56349 12.99648 4.47685 curveto

 10.82285 -8.46196 lineto

 10.64032 -9.5486 9.60023 -10.42949 8.49977 -10.42949 curveto

 -7.34933 -10.42949 lineto

 -8.4498 -10.42949 -9.1939 -9.5486 -9.01137 -8.46196 curveto

 -6.83774 4.47685 lineto

 -6.65521 5.56349 -5.61513 6.44438 -4.51466 6.44438 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0 0.6 0.9 0 setcmykcolor}def

 -6.50722 8.43694 moveto

 9.34189 8.43694 lineto

 10.44235 8.43694 11.18645 7.55605 11.00392 6.4694 curveto

 8.83029 -6.4694 lineto

 8.64777 -7.55605 7.60768 -8.43694 6.50722 -8.43694 curveto

 -9.34189 -8.43694 lineto

 -10.44235 -8.43694 -11.18645 -7.55605 -11.00392 -6.4694 curveto

 -8.83029 6.4694 lineto

 -8.64777 7.55605 -7.60768 8.43694 -6.50722 8.43694 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save

1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -4.31583 -4.11562 ] concat

 pgfs



 1 setgray
 -76 1993 a Fg(C)-76 1993
y


 pgfr

 restore
 0 0.6 0.9 0 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 105 2031 a Fg(Cadres)p 0 TeXcolorgray
0 TeXcolorgray 11 2240 a Ff(?)p 0 TeXcolorgray 49 w Fe
(\\begin{Cadre}...\\end{Cadre})p 0 TeXcolorgray 11 2467
a Ff(?)p 0 TeXcolorgray 49 w Fe(\\begin{CadreColor}...\\end{Ca)o(dreCo)
o(lor})p 0 TeXcolorgray 11 2695 a Ff(?)p 0 TeXcolorgray
49 w Fe(\\begin{CadreAlgo}{0.5\\linewi)o(dth}{)o(Essa)o(i}Ess)o(ai\\e)o
(nd{Ca)o(dreA)o(lgo})p 0 TeXcolorgray 11 2922 a Ff(?)p
0 TeXcolorgray 49 w Fe(\\begin{CadreModule}{Essai}Es)o(sai\\e)o(nd{C)o
(adreM)o(odul)o(e})-118 3119 y

 -118 3119 a -118 3119
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 1.19553 pgfw

 save

 1.19553 pgfw

 472.57004 -1.1648 moveto

 5.57913 -1.1648 lineto

 2.82796 -1.1648 0.59775 -3.395 0.59775 -6.14618 curveto

 0.59775 -7.04005 lineto

 0.59775 -9.79124 2.82796 -12.02144 5.57913 -12.02144 curveto

 472.57004 -12.02144 lineto

 475.32123 -12.02144 477.55142 -9.79124 477.55142 -7.04005 curveto

 477.55142 -6.14618 lineto

 477.55142 -3.395 475.32123 -1.1648 472.57004 -1.1648 curveto

 closepath

 0.59775 -12.02144 moveto

 pgfstr

 restore

 save

 [1.0 0.0 0.0 1.0 4.10426 -8.51492 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -101 3099 a Fm(.)k(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)
f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h
(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)
f(.)h(.)f(.)p 0 TeXcolorgray -118 3119 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 3314 a


-118 3314 a -118 3314 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgfsc{}def/pgffc{}def

 0.75687 0.04706 0.7804 setrgbcolor

 1.19553 pgfw

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 save

 save

 .5 .pgfsetstrokeopacityalpha

 .5 .pgfsetfillopacityalpha

 /pgffc{0.5 setgray}def

 [1.0 0.0 0.0 1.0 2.63014 -2.63014 ] concat

 472.57004 -1.1648 moveto

 5.57913 -1.1648 lineto

 2.82796 -1.1648 0.59775 -3.395 0.59775 -6.14618 curveto

 0.59775 -7.04005 lineto

 0.59775 -9.79124 2.82796 -12.02144 5.57913 -12.02144 curveto

 472.57004 -12.02144 lineto

 475.32123 -12.02144 477.55142 -9.79124 477.55142 -7.04005 curveto

 477.55142 -6.14618 lineto

 477.55142 -3.395 475.32123 -1.1648 472.57004 -1.1648 curveto

 closepath

 0.59775 -12.02144 moveto

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 /pgfsc{}def/pgffc{}def

 0.75687 0.04706 0.7804 setrgbcolor

 1.19553 pgfw

 /pgffc{0.82745 0.82745 0.82745 setrgbcolor}def

 472.57004 -1.1648 moveto

 5.57913 -1.1648 lineto

 2.82796 -1.1648 0.59775 -3.395 0.59775 -6.14618 curveto

 0.59775 -7.04005 lineto

 0.59775 -9.79124 2.82796 -12.02144 5.57913 -12.02144 curveto

 472.57004 -12.02144 lineto

 475.32123 -12.02144 477.55142 -9.79124 477.55142 -7.04005 curveto

 477.55142 -6.14618 lineto

 477.55142 -3.395 475.32123 -1.1648 472.57004 -1.1648 curveto

 closepath

 0.59775 -12.02144 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.10426 -8.51492 ] concat

 pgfs



 0.75687 0.04706 0.7804 setrgbcolor
 0 TeXcolorgray -101 3293 a Fm(.)g(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)
h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f
(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)
h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)p 0 TeXcolorgray
-118 3314 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 3832 a

 -118 3832 a -118 3832 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 38.36867 lineto

 0.0 40.717 1.90364 42.62065 4.25198 42.62065 curveto

 236.69598 42.62065 lineto

 239.04433 42.62065 240.94797 40.717 240.94797 38.36867 curveto

 240.94797 4.25198 lineto

 240.94797 1.90364 239.04433 0.0 236.69598 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 26.26802 lineto

 239.53065 26.26802 lineto

 239.53065 4.25198 lineto

 239.53065 2.68643 238.26154 1.41731 236.69598 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 27.68535 moveto

 1.41731 38.36867 lineto

 1.41731 39.93422 2.68643 41.20332 4.25198 41.20332 curveto

 236.69598 41.20332 lineto

 238.26154 41.20332 239.53065 39.93422 239.53065 38.36867 curveto

 239.53065 27.68535 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 31.34792 ] concat

 pgfs


 1 TeXcolorgray
1 TeXcolorgray -118 3839 a Fn(E)o(ssai)p 1 TeXcolorgray
0 TeXcolorgray -118 3832 a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 10.74626 ] concat

 pgfs


 0 TeXcolorgray -118 3838 a
Fm(Essai)p 0 TeXcolorgray -118 3832 a


 pgfr

 restore

 restore

 newpath

 restore

 pgfc


 -118 4245 a

 -118
4245 a -118 4245 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 38.36867 lineto

 0.0 40.717 1.90364 42.62065 4.25198 42.62065 curveto

 477.64397 42.62065 lineto

 479.99231 42.62065 481.89595 40.717 481.89595 38.36867 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 26.26802 lineto

 480.47864 26.26802 lineto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 27.68535 moveto

 1.41731 38.36867 lineto

 1.41731 39.93422 2.68643 41.20332 4.25198 41.20332 curveto

 477.64397 41.20332 lineto

 479.20952 41.20332 480.47864 39.93422 480.47864 38.36867 curveto

 480.47864 27.68535 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 31.34792 ] concat

 pgfs


 1 TeXcolorgray 1 TeXcolorgray -118
4252 a Fn(E)o(ssai)p 1 TeXcolorgray 0 TeXcolorgray -118
4245 a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 10.74626 ] concat

 pgfs


 0 TeXcolorgray -118 4251 a Fm(Essai)p 0 TeXcolorgray
-118 4245 a


 pgfr

 restore

 restore

 newpath

 restore

 pgfc


 -118 4270 a
SDict begin H.S end
 -118 4270 a -118 4270 a
SDict begin 17.39995 H.A end
 -118
4270 a -118 4270 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.2) cvn /DEST pdfmark
end
 -118 4270 a 1 0.2 0.3 0.1 TeXcolorcmyk
-195 4549 a

 -195 4549 a -195 4549 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -5.5806 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -195 4549 a Fh(II)-195
4549 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -6.57635 7.88034 moveto

 13.39613 7.88034 lineto

 14.4966 7.88034 15.26186 6.99686 15.10541 5.90703 curveto

 12.83728 -9.89214 lineto

 12.68085 -10.98196 11.66193 -11.86545 10.56146 -11.86545 curveto

 -9.41103 -11.86545 lineto

 -10.51149 -11.86545 -11.27675 -10.98196 -11.1203 -9.89214 curveto

 -8.85217 5.90703 lineto

 -8.69574 6.99686 -7.67682 7.88034 -6.57635 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -8.56891 9.8729 moveto

 11.40358 9.8729 lineto

 12.50404 9.8729 13.2693 8.98941 13.11285 7.89958 curveto

 10.84473 -7.89958 lineto

 10.6883 -8.98941 9.66937 -9.8729 8.56891 -9.8729 curveto

 -11.40358 -9.8729 lineto

 -12.50404 -9.8729 -13.2693 -8.98941 -13.11285 -7.89958 curveto

 -10.84473 7.89958 lineto

 -10.6883 8.98941 -9.66937 9.8729 -8.56891 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -5.5806 -4.72716 ] concat

 pgfs



 1 setgray
 -195
4549 a Fh(II)-195 4549 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 13
4600 a Fh(Deuxi\350me)28 b(paragraphe)p 0 TeXcolorgray
-118 4843 a Fm(I)o(l)20 b(est)h(vide)10 b(!)p 0 TeXcolorgray
-118 5892 4016 2 v -118 6013 a(.)i(.)g(.)1832 b(3/)p
0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fm(3)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1518 w Fm(Ann\351e)20 b(.)12
b(.)g(.)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
