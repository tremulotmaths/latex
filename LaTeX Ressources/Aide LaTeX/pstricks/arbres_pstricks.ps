%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: arbres_pstricks.dvi
%%CreationDate: Sat Apr 01 07:54:14 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold URWPalladioL-Bold Utopia-Regular
%%+ Fourier-Math-Symbols Fourier-Math-Letters SFTT1200 Utopia-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o arbres_pstricks.ps arbres_pstricks.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.04.01:0754
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 876 2014-01-28 15:03:13Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2010/10/02 $
% Version         : 0.62 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 692 2012-06-04 06:47:40Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFTT1200
%!FontType1-1.0: SFTT1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1200, tctt1200, latt1200, lbtt1200, lctt1200, rxtt1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-202 -360 1341 829}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA11E7AC15F01C3384F89075B25B2605
942C0A2CECA9A7B578D31EAB935BE7B9AB3ADC0F524C109CEDC6C957EC56766C
0FC50BFC16A9442F5E255F3B0A67EE59204698AB70A1A39761E9B16DD89BB0F3
B2DCDF661B96C1C95C934AB9466827D2E4AC2F341B8CC4A08AB82A5D1E25B865
E925740538369BD1FAFD3AF962D17D14899B1BAD67B780B2D06D6D6743CEACB9
A77A234354E7767050119B9EE47F033B8B3AD59BC17B84C3B929265ECEB12176
454594C17B4C8A9BE7CFDB06CAE1B189B7B72FA023F2F671095CA1679D71C627
40DDA7EE2E28EB5EC2F297B019B93073CE0219E736F88F03E11B8F8D61132ABA
E20CB0C148E47FB495C9FC70AFBF6D9260FEA67AC4FF14D9CE253D43CE471E4B
09C61209FCA852453561C54B179D77D8D7B4BEF2852FDE1CF7A3D5DA6081944E
735D7BB3ACECA094F6717571CC15B2FD29D40FE9AD1BCCE3208DB35EF1515BE3
D4F0CD696FE9B889069B62BD57252AFA4E675A9EBCDF695915446FBA1E0DA982
DE636E320753B3FC033138F766D844E965C1B266F165839DDFAE9127316602E2
0B8635508042F84EC62AC29AE1E6CB020009200B52F025E7D7EC7FE441F242EB
DFFD1341C8928EFE881A3D40E9E62FED03BD3F83346AD2B6C5AC99D5F2C775E7
F7067EA1BF99B552EB3D1EF83AFF1B0C1C58650FD2487C2178954BA58D991C4C
7CFAACF1A0E0F4DF7FA73A74C1813C2348D02916B225A6CF9BE1E9E7BF3D8D34
8873F6E51D7F7BF679ACC5B00BB56FE8532B2CD4138A774184F24718DDD67E0A
154F2D35A8053DEEA29458A13E8CEA3DCEC48548BB1CB4FFFC10B11E195979A8
5921924688EE4C9111F7D23CDC01B08B5CAEF0EFDD3D8921EBD573C4AC34AD46
54FCC0F08C4A9AF4E20CD5C521B161341FCD3057DC2403FE6BC3FCE215E06587
DC9F82B6BE02F8D53DF8AF91E7931CC63F9ABBBEFD7D8363B981B4C8C8C8638C
A3E85620CFC9B0C414E419047BC51898C1AACB830A618E255704716186A72123
315A46D4B1702728ED604AEA156B3681C043CC0B55C8825B44D0994077088050
964EF0FD12353B47D56E7EFF9BC0A75E0E4DD995D2910B6DBCCBA1E77C5FC561
F61D00903019DFE92EEA4D44E9F55577D929DC9CC15BDD8E82810A67A2533074
30956CB4331B6ECA3D2F062637B25AEF0ECDF6D93DCC6EDB5C10DE964A8E6F94
424263E5C12332DF5CC083CF926BB118497BD332F36AE1DF94C9D23A83233FCD
EBB2918B9545B08A390AFA9294B6C973E26B49D2D5CF1B8FB274A16300BF66BD
5949AE73384D30E690328F06818BF0E80636D9349ADB297A2D0511E4525A562F
78DE222F693AB94CAF60F968669F4D0EB43EEFC0ED729468C5637E1E141DE264
4F058C01100D0808C7300708BE33F3599991D07DCF2C91949BF46181AE32B386
AB3787C9DACCC3C6B23AD6C1BC8707A4822F3C035CE24A5C89D98E88B45A8772
E1250A760F11E3244330D83143145837FB44CE9359121E23AA8A9CA6C09B9B70
1C20E811C3B5BB1DEC79AF1F03F937ADC8C60DE9FA7BCC618DD5963566DD674E
513D791E8E13824C1C2F4D025709D28EECB76E417619EEE85CB885D9CDC33C28
FDDF8B550FEEF2FE6BC4DA19DF5F562826CEA8A857305FA762B5C477083AC476
40886D955366BFB43EDCDF27B191A6D35CF856DCB95144CEC2AA1CD2823D9C0B
0D233256F46A5A06571DE7C485DBE6B0ABD7E1CB791021D197F75ADF310542C1
039ED26276723EE577E6EF13635A4000F8F4F61939FA92CB51AC6A97F32C9783
E60B190C331865581A5FF98FEB82C16DDE509CC731BF18DE8DAAE3CF7EC585CB
D90DD7BE01BEB4E1E808FB3C71BA7708C936B0E3C63B90D1D0C006DBFDBF77F4
A08173182FE22A3B3FCFC5F810414634BCF507E7A1BC1231A780403A001CA305
644A55EA5AF926C5646D6ADE7DE0A3931D012BC2CF389D4F68E24D7FAED43B6C
417A05E55564DE2EEF671E9BA70B18C3AB8B2DCC9D92CF549A7C81F83356C4E5
4F3D2D26135B2B69FD5EA29376999F39808C173E0CF7D25C105ED983DBB22B6F
FA59AF34834A8A88BC75765B90ED9D0C3779A1D307968FC725C17BA056EC76FC
5016FB2C4CEFE2D05B0A89C535FAC179898DE54B5857CC846C6676F16CDF8D32
DCFB75BDBA9D6EE548A507D73158928E265C9FA4C9A1555C27C73D19E9537688
EF6301255574AE15D8E216F49C9996ADEDE43E477CB2A8DFD6A7491E05C0C6FC
7B4DADA77311D2BF413CB128327442D69D1B7FB6EABA6F093A46408FCD38B85D
1D7CCAB29F21AB8E05429F3ABD15749A54893931D057D712E2D4BD0575955BBC
1BD97582F13F9899863C4A0F5136C0C24D15ACF07E3CACB0761A4C3466DD14F7
6C7ACCE6A26404B4CDFE96F3FD98C9F28D75A8CFF0CB1362A1838AC6EB52DA26
F442EE498596FDC4250B00EE1BA1FCC50705A5E75777872349CBC4E72381EFBC
72C9A40DA6E47D339A85B5CC850B9CA31DD8F5776E5672D0AD0163FE72A32E95
73B9D7B6B19308C7344ECE4046D32E5949C704C84D10F6D46D625A6F2AD247E5
96234C5F223ED5F7E70869CB5B1D3629A090D5A7E045608100C7EA9523DEBF95
10FCABB4488B685B409A742BB9E89BC5D93EBC44101D873F0A7ACFA36FD2A314
7460C67EA899B19687E500810E65F566A1C695F8D501537ABE3F1E38F2D184B5
5AC1CB0172BCA0F8DB43761F1A85C48BAAC56C78BFC4BA4185765E04A1F679DE
EB0D2E27A2EC80946CB3DEFC26C1A840B15A1B11BD38059A4C12DF4F564FC007
EC71A049E04049B8C28C887F25CE5150CE64CE5E6019766336E623860C137226
EB16D3762E4F749A571A3E2DB2FD0841A2985E68BFCAF73D5DCFD19648E787A0
D3E0E3AD430E4910D1712E7D3EB466D4E4A427AEB9E60BBFAC729B388E9D969D
99B78EF5CB60A0B62AAFDF916119BC09DB32695E34EB7238692EB8901B7A3D3A
4C31C55EB5D0DB70D626793BD8F82BE60741A3DBDD25B2599B59A55405CFD72C
726EEDA77CCF43C301B4FEEC2789B00B4F7AC6380FE28906349462C0BABE4B5C
57B445E575D535567B2F7983D6FD699E670BCE55AA2BFEB24F4F5F3583A0A116
F15F70CC78279E275DBB8177E23C9AF1E62359037314FCE713643CA2B80F6FA3
4E07B1C8F6F2717BB73FB3C7CEF91B81084BAE108865FBD8A79E6435D1F24637
B63C47C0AC7CE26902FB565176F6C84584FBDE63C182B6EDE949D8F732F747BB
FE41B156002DE6DC5FA7387F15F064F42A8EF914AE91715B92EF1AD3D9F44C93
A3A5879F715939E3538A92472BDFAD334ABD669800DE853DC4F08F34E200D9AA
FCBD51896AE8CF172E7CCF93ECBB9B499D9141BB15716F2C7F8734D5F89361E5
2FFE1E8D9E88A9F1C84F6743B995E1D0EB52E57A53519516257BB08B6CBD2CEF
2F86C2CF0929FCE570BDCB469BE15D596E7A8CF2C21EE1C72059B42961793339
42409B0C66BC259487778B71FFD462A0E8CB394D72F75BC7865C29E83766EF24
47C58CC8D68BE2BE136F150CC59629D6C055A6EE59350A7A08E04B407891EC4F
845A140857F842B95161B324F0C0D2E81C7EC7CB55C9715BE8EBBBFC6365EEAB
490902D796340FCF9DB6CDE7CEF52B03FCCADEB6080BAD7CE18623BB65C781A7
C59C6EE548A507D73158928E265C9FA4CEAA89D8CD751B0BC0035C2EEFB2FDF2
5E186D6DE5DA280B0C95D81A4F14607A001EC6DA4ACA73678D7A2C3C1211E99E
55A854125C24FEA619B830DDA1C2A25B44738CFC4D149CD3E5428076E6C53B59
0747A3038B90ED802FCFA8F6C019CC1F0AA01C31A93ABD207377BB8D691CFB30
3481B529E3E5D1BFA3F6E55D2D19EF5B8E1F65BF779C7B5A2F69325B397BCB52
0332FDAE59DCD1A258B0E7B321F8571D5613562682AB5F6E55AAB07CB459B1C1
2529AE33B9E3E46116F1093EBE05CE53D3DB4CA5805F7FF34A48F815BB15250E
E5F9B0FC44B0A3F5822BECCFE992B8F7EA0104499889F572C02A2F6319B8CCAD
F5F7D940CE90267267DF0BA9C29C80C6A1797019CD90C60E8F9976AD3F388B2F
FC563024205C9F1796FB2642333CCFC7305DAA148B7E2CD22F12F83B5CC41C57
68A59ACB8E42C22593968C3046BC0FF754402B8DEFB8E5B2CA224852CF48564C
087A81A7E7AAE047DD7717EBC78E3BCF0215F77CAB733BE4333BFBE1B325B535
4D436E3A3D6E1C289B9B87015A90D419FC189F52FF5723D85F57344BD20B1596
FAD94A5B85A5955CEBC0DBAD7B57B980E242E2E6DD0CF3E0E5DF96C5727ED814
46B752AB6381F593D01036549F1D6B75D752E7679D09E1D95EEB271B48E1BE9F
377BE69A31FD1F592C3F727B5D756E04CC485B2C6790F49AF535E6A6C0865F05
19E0607A6ABAAE21DAC8F2A8FC843395C2D6B668E8516E59A468EB8C4CDBEEAE
52FC4043F8BCE2046D248C11D365ED0514155ACBB4AA96AB501F66B1FC88D642
4727F622FD72228AC15E38575C255C8D4455B08FDE8A0B8845A09CE1627B9ED3
51776A911DBB57D9D3424A001D4AFAE5CCF96658888D69BA0F664F19C2AE0385
4D9BEE5E8EA86B4C15D3822CF6245A1CF11B28B13EAC269A92A80787A0F0ACFD
31A6BFB34EAAE8CFF50D4F7042C9AA03A28832F8320AA4EF346E86A74FA8A5BC
6F65526061535199A8147612F8FE12D52CB005DAFE3C533FA38D373D1C290FE5
BB84BF7EF73F148B3C4F2213690D7E1DB47B800E950488F69E0358AEA66924FE
644DA9ECBF999D22B12592F60907AA2F65188450FD8547649E8316E259A5320F
9214878C181A43082F036C00043A2B59F14A7ED8305E2C64A8CC235330FF7685
0CCC432D15F5D60F2404DFDE35136EC27F22CBA45506CC27B032CD5A07EF930D
1492C37372CDE5A52A19CB70B2E0A7DBC1269991295B712A9A9258B7F6654DB9
6BE3CDCFDB7DC8582308319FF3BB4375111084019DE1FAD264E2B59878BC4D21
E6388FEABCD9034F7EFE58A9C1BFCFE3865BF40778BA6A3B9045E1F2FC3FF4B1
C5B7CAB71C83A0CC9A2906BE23EAABF4352A98B231D72DEC8256A1AD11EE5C79
A768E69EA59E750328852B6564063DDBA7E1F476FE68A8A58951957698BB8CBF
4FDAF0DB6279837ACD44D8FB487F177868A6E6F4AA762CEE4EF4BFA24A77F444
89624F7D704DC0AAFDED35FEFACCA51967BEB2771D9E8A1BDE91A7BF6EF0E41B
DC59938672E207A2B8DF80BD36581D9566AC866281A032BD76BAA8880A65E810
194FE359D12A2A41C662397BB3C822670EFD612045B9E2AEF564F09351B8E91D
BD0424ED4D682D6B2E5E4470BC130CDCEB505AFB301E0E382F837F4A4C4505AA
6FD67B11F6A711D816A851B73B8D6FA8439506A9B400ECD3EA1B5A6C6EF7F3AE
677B81FE7C180D6F89DFAA9B0A2EC1A14815787AF5B3CB7D4F09208C69325CF4
FD7E837BFCBA0145355D19DDE02E07486E96E9DB70288311F4EEE5D08EF2D25C
1BCBD86C9B29ECD539B48217B4DBD7804181BAA235585C26A08505569BE3FAD4
74A5E0C3E6767773EAF77A490E66977BB510FA6AB55D07AC5C15BE73F5BE6522
5C38E0B9D9C7AB22B458833AB8ABD3FB181AA07B54B45D978B9599C3D533A1F3
81C5C6F8D48F2D1C7AF666DD39CFAEBE34AB819B7850F858A12FE2614F8CBBC0
CA2ABFAFCD8872A93CDA89DC73930AD0823F94B24BBA596E7F84AA936A32634A
C16A3C63268117213EBBBC0E6DB1212A294ECBB6E6E9D6FB03E01C35504FD4FC
4D80968032536580C04714BFFE5DD4584EEE909743EB7746AAC3E9E93C8DF81A
7ED68580550ECCB910D55B7A327DF7FC84BB026ADD240904A49D06B04E7B77F7
0EC44408A14734CB2AE1F68523081643DC29EE750C54BF1AFA48CCECC3897046
4F63E2AFE6D0CFFC391E51CA09EDCA5ED3CDED08689E61B12CEBA294E01F2766
DFB49E029FB45F8CB7B5D2D2E33B43B3DF9F517A6D2F7F6FB801971F293CF8FB
11761D1070FEA8792916A12F081EF44E786FAB814333C50AA82AC1E78F3615C0
5DE282619F0480126A329AF043673A0E4190244B84241A7F524988FAB25D090D
3FB87B3777F2AB7461609D1E612FB55D1E06FD6B3B421C8708721563C2F5153D
85FE62F9DA6DC4972C27A19844EACCEE92640A5A42B10CB34B28FB5F6A563D3D
3E9AD1BC91CA673ECDCB795A4E3B23480C8E2B8EDF26AD818632BAD5821F1DFC
9DCFD174E76F7E1A90B97C9C64F2DAB420372F543BAB0B827D651C7BE4AC3E8D
668AA8C676E4D7CE48276DE9EB064FA545841C4925817B2E61628FA5D0C8174C
9ED2CA50CAAFA37ACCDF54DCCE517C629F3B744B51DF60F362988BC536C76C76
F77F2A35EA7D7C64927DCBDA8E18D49A4A86BE44B4E65AC10A428630EE5B300E
9D90770698D8DCA31E77D5C1F4D886899BF5E379EFD0EDD9F850A221F034BFEE
600E6FD538CF202C75FD9F810F5C84EE7265C2594D51AD9144F3A403A8279835
38F5B8BC1F74F77C197D9B33CA18AEABA414BF33F49B14F42A0C4A86F0304DFB
91EE97F6D885E3A783173FF8AB5A6F7D1171DFC916D791C2002E32BF5153AD66
2780E452016C9C47D191A10F10DFE6507608BE6443CA56B09B90A74E190EB9D3
874F97FDBB7B54C475B396B403E0F2FF7860EF5EF97052D34876059CA1F3D815
CE48486EEAA5A3E19B163737CC4845DB7C9F7DA841830A815C49AB169B710AFE
620F8C4CFFC3395024AE7CCF549F7637A5D6BD59ECA9233C868231727B9C9F49
FA0DFF40006597DBCB7E1449A2639C310E4F2DEE07DF4B8D92655E2915F517A8
C0BACF192DB3EFE5D98755A3707EC346530E9A0828FC2A6D8B6285F2A5F8693A
F906D3740443ED14DFE8D5981A60228D6FB49DD87E655B321D70FBC7D1A29F5A
7F5AF4CDBB5AF4AA4F83D3E585AE820C027B69F16172472E903A1C4E266C1541
D2C9EC1E852797490C824BEB4AD7FFF2B86E53E9AAC46F7B59C61C69BE68899B
AD13621A58FC9C6AE89500FB15491E2407EA740AF97C12D90452DF1DF9AA2CA0
14EAEEE253EAEBA48A4EE9ABA87CCE6F8424DD8A87F444423F2D8F9D3C44EF68
E4E09A0E25A91D1140AB19923A496E1D5AE0F672BEC40B6975567E77A8B604F4
5E03015795FA9615B88F713EAA61FB659D85577FB496F37541DFB9284F2CF430
9F8DC5C0A6577A87AE82AA1D138C51DFAC44B6D836397D450CCA057F7F8A2831
CE023F28908B95F1B879C103AE18CDEB0A13DCBFC51BF53728D93B363118D84F
980FE0109EC357546996C6520012F95035DE216B78BBBC2C2332D5924297277D
D116EFD5E34D4AB550FA879014528B7E7C5C51683BA2CC39CB3621C2741DE07C
4B084B3B34E8BF0071F7AFE2CFD3F6B4CB6FFDFAE845C12B060EF923C0D63896
96993A133F956E9DD530B8688AC898C391418EC9A4C512E98761CE192120A47D
39B62D4E6006B6E8D9E0BF9D5D227E22058F45E8717F0CE7E9B06935877FBDCB
7D3E55B049C4D9E59499905E5E4FAAA726B6E67197F659ED4A97E92F22582A4C
46BC42C7F6C9C2C60C075416FBC002D0C94F5F2F92C31039AD5F74D179F660C4
DD1A37CF63E0A012AB1059A4B94AD15D9D20872764C968D3941F834E31EC43C4
F74DA0684775270920E09CCB0DA9406CA23F0447CFF09895A53874CEFD2F5227
A0A576E48E4F65365AF04BE29A49E5F081BBAFD83E00FFA1B788D591B5F8D8E9
270F84C3A178796DD44C2DB64FE0234692E5167F82EE005225325340C598625C
DC95C3A4B89E5D79A84741AA3947D7578B0FC696723E8C52F30580D10FA8B2FE
DDC4ECC2F9A1632C60EB44F2898C73651A4AD689ABA4EEF62A61BB5B2FE7D2F0
C9D172B13E10EBFF55FA08C74EF14E169DB4030043B4AC92DCF088C4C2859334
70D67FD09717C6DF992584C499D5C2F47D96CF52A33FF44BDF6284C1280A05B1
E583B9389B20668E4CE7A420F38A9C82BD00BDD7441BBE1641F4FFE172691D63
34BE7D6658EB875508FF2C0A2F82A105754392B970C6405538BDE285C040F28E
A5744A3F9A4E5B832EB2E71075285D9F688B1F4E523BAE8589222A0584135F9F
38141B8B48F192AD4A8D20B3AF0FEB4C4C59CA016124E1C37E1CAFA81FB406F7
6CA4732F2D40A5B08AA4C3C799426DF7D957629295DA2E875435EBE667F6A500
49DD7BD01F6292FCEF3900FC92B8BF13EA2097E06A4B2E4116C45744EEC5A483
3F218E84FD7CB5968A384B5F8E76C7B0BE3D56DA9069A75568CC03DE57FD2B2A
511A96F0BFF12BD9AA37DA5DDEAD723E02689A186C9F3CC6B82649FD0C5EBB2D
BDA46150284E4E709F6900589DDDD56C5270718D62BE253102E19369D5B87FD6
30931313205B214BB42B6DD39C20CE46C98DDCB9F7B6EF8C41FE60543A50546B
12D01F5F50D219ADA4B1EC501B8FEE8D04803CDDA678F98F77E7664B448AB664
0CE04DC64EDA7AF34D2BF665965E7E978D66697171A4B77C1A79399593D71AEE
EEABC20A070EBE9381060816655B2F7052016A4C72A6A3AAB350AB82D47677C2
8C69BBE333A7D19AB1A0A0E2537E66BF00E5E2482A44888AD1EA3DD6A15B4D64
E5F683A676BD7CAD08F4CA7A0EB87DD9A66422C5E472D5998FCA824D2A74D213
6DC7A277FDB0D72E6375527B47624B30E4561B10DFF20AA1870924A2A8EC40B5
A3FD539727DECED3E87238BC76306545101322D6CE4C59D4B781ADB62601A5B0
34CFB64ADBC7489B47263A213680FA319AFBD53C5CDFB17014B7849AB14673D3
7113650ED0B6E40743F4EDCF7FD67F41027F58B2F92809B287FD559DE76210B9
3F60CB68ADEF434F585F218A1665C6320EFB421D9ADD7CC69D092185C58FCE5E
625DC4772601FEF46AF28A864F5223072B4CCCEAA8C531CA19B6A4CFF0819A84
545B85F11DB67DD180938C2556AF84F4CBC30F0BA674CBF94ED92F080CD8E986
1E5FEBBBC8675CE5754FB570C632A5CB74684948671E5A5F3E4920E3E67D7AC8
C5A90D47F7DA125579AC4CFEA77DCF965B3F63F6ECE5866A2A073252AED69B74
23E732584E8F50FD61EFD84E2944E9A8554A6C3A41B2866C97F7E10700031DAA
EE68CC87B7529181FEEBB743BEA31D6DD4DE622AAE00CFE404BC6687B7E22B38
338BC83FF8AE10EE5DF064498636F2E30BD6A93A0F6DC1120213DF599D3C625E
DA80E713E322FFA3082A2207ADADE56F84C54FF773679909F9AA65BF6C8CED3E
1145BF1281822E21D4251364A3D5D27E83C2F379BA6853F68F52CD8769089D57
A1AFC4C0016BB7E556C3AADD8ED8A443251DEE5EFECC8B115FD8D9A19C29C585
DA02AAFED53C1E1B082E7629A6B7DA50846C8F8D3DAD511EF5B3AFEC2E9FEDB3
E59DB2E6E02BA2398BF6E19CEAC8E15796CD5C73A66DA4099DE6951A92C198A8
7FDA29FB63B0F668D0E0A1DD9F4788B8A7AD9211AF3513E57614EFCABD231638
EF29C178C0A82E1EF5332C61623DC858EF876C67F7EA5B47910425E1C1A55379
A5DE0A293F6C4CA8C097227E90541B17B749B8019CE51DE790C43FC8DC613D03
5D68CF964703FC210C478AC9DB25A29C3EF1219E767DE987163CC6FE5D65A749
A4E94CB98B3C3CF12B8931166D457F08E4291D607260523DD5EB824AF1A35F8C
D2828FECE414DCFF07E09059F1AFF60A889592A77146805768F0570F59266719
A3B6F0BA4FB40EC8C11D9B35B26F33DF25E29AD01E64DCB6E3DA66D58D86E035
2A985C390BEE0518016496D7CA9316809A62AE51703FC1FDD1D014DD0A7B38EE
62296357FAB4755D4A72AD9C01725DFCFC05F53B4C42D3DF48731A202E0CAB8A
069A9EB514E0D3DE02A8E9C2F845BEADFF151E1B6BFBCF698BF003D9C3B46E57
D19F344791CBFB5F5FE459F96F2B6763760D77F9AD0E88F6356E5661D9CD302D
E4124248234CF92C09C7BAE81A9304DE30F9CA9CE42C87755141099BF7154D18
1024D781F120CB75EF11E395BF3DD71AACC595F4D6A30CB399BC8262CFD17245
52F09D49025027A3D2A0E209928F51CDAACF8A1DF50B569AAF367832CC8A9598
39A37675454BF1C1BACE357083C64A1E28D3A14F1CCA3F24143F345C34B55107
7510A0F76A5F8B067D9C73FF2FED1FB7B2F4CF70FC5720B0C53E84A0C26144A6
D953333690D5EA863C5113E097087C5E7953B691D3BBD3D5F0B587742A716083
BF5D808D3205BD9B92C55E0DDB42FC1D9049E4AB223FCEE8CF04F44409E7A796
C965BE407C85D3D606102014D43EF80209AD3B9EC212204E96DA60102B86A3CA
C7E3D207CC5728D65B848ED867B3D3312638879F4A10EBF89944E4E1B57D7533
402E6F664EC44831F8AF160300E60DC04BCCB712006572605F1472CA8388C903
969D22D25C9B9F53F8489BDE53DEBA17BC19E3E969993A8EC86C95BFC3E9BAE1
8E4C0DAEE8AE809B53F134FAB24DCA5E279FC9E3E445BE2DB9EF5D34E7F747AE
FAB32B93ED927EFB0E58249436A376E0D299C605C807571C66CBCFAA97BB1570
AD58E4DC8C32FE268EBEEB07385246B6E9DA84B8865557A1811C0009DB485377
08D9DCA34A5F88A007879DF5916AAF93A3A7FD94B0B4936B84F52B311FE4F146
274656620B937E255C0DE30E763D97503BEF43358685BC267700770DA4E413A9
E5A69C89209BC7192C9A422FF0BD0CA1A4BD9761E764FFA72EFB0A726540C411
88F416029A3A18F1EAE7CFA48145000CD669E611F6E765F21458005B9C2D80DD
5A9A084D2623610EA1CA35C66C722903CE5678F283728378CC62D0E41D12508E
56D9893071CA406BC7EA13E2B29FAE12614E94708617AA078CB13E18F4A07270
6F1A038A6D38763047D0180064377806909FE87F0EC7E1709AC7299196A7A874
B7AD663846F2B700C5D2DB7B00866D8E21292FF8108DA782D6F3695E5C189AC7
FE93539A4508EED7BA19EBB91844A379C61C3A679054951DE17269C6369C05CC
405D523BD800A331DA7CC86EDA8D75A982B8C958779281402CE4E5B52E0D792B
C068A954200D869B91B15DB9D3356E72AB2F031EB2508279617B69B72066E696
22F5FE701E68DA4F3985CB4039F1EA6386DAEA19A187F188EAD262A594BD2B05
CE9BFE0A84D66F07F63D81F2B8BF7CE7694DC63D8D09B4A69BA804B9A8B08468
EF48CAE68E37EF8928500D51ED261BF40A7523E6B1CB111CF9E46449525A4C38
D1A183E77F6E7D61FAA9D24452E0863CD498C7DF3A287059499FB3CF7232A908
FD14DFF121185423813A855DD1FAD30B15C07F946D3A28C908A12D6A90E78BD2
7F7402B89429D0C497BCBD3953159962E0B01C58F06E6CE78160EE1D6F71CA21
16ECCD472293B9612F4EB833F30CDFFDE0232AF3C4A10C894D381A62845642F3
BF4FE9CD4ACE1FA705D84A5B7B38C7D29E51B6A434E5A59265039DA2E012EC7C
9DE265454909CB0B513EAF0130D91B3CC919DAE3147E4C100FCF139EC4780279
E4D7349265FEF77CB10150A346D2617C371AD2532EEFE16D6B61184CAD5E82A6
E25960467011A1D594F9FDD3F358C8BECDBDF31A1587E5B84978C588F15ED113
CBFE80AF523BC0CDE2AC6DC0C39FC5C7BB9D6933E8D59133310184304ED2773C
2F214DFD5504756D309BD3D810926D8B575D233E148C006E8A876073DC378F9C
A52986CC1E50358753C897AC2A47FB4AC5E9B3A93918F6D3A8F8BED50C5A1E70
ACF40ABD86F0B2341193633F21DD822449B2B06CC2E8FE61BDD3E513AA01CE09
43FE5EECAA185E66DA55C71C9950167000EA6EFBBCE12D1C954846ABCFFB904C
99F034FB9699097480B9BBEC08EA9700B70A915837A3B800C3D72696FC7BF4D1
73B067BBB6C512D0140ACAC3C064AA3C01AE29CB56FA80FB695BD22E9F19F398
12EAFC0951F619BBCCF098E7B37027B7D57C1107FBDA95F26D0EB2999CF73CF2
A36CBBDCD33A4B8F34141B4B1E2E5911ABFD5A2DC80C0424FDECDB17E15F2FC1
5B0705DBE7DC22CE32AEB2F5631D37B8BDB9BFAB94328CF3E83FA537E3BF94DB
37B1E5082B8ABAECF15734F82BB03EED7CD703BC33E2D2396B25F47BF25B6428
940FB02F64C328A8336CE9E023CDF46742DC29BB4A1AD6C6CB41126994E649A7
8C27A3B3F82AB02B9EFE7F6091BF3A9084447B363877CC459B274ECA35EC41E8
D73EA320DD09E5B54CCC6EC4CC3F312DEC7C244F76C0158019A26381F593D010
36549F1D6B75D752E27E0F7943D56868567B1315D0F9FE44C80F31DAB3E47091
E3907BD068F41569DAEB27A3DCBBCF0388F71DDD5A78BB48F6307224FF8B9EE3
8F2B3E7C6B6D81D18E9C3289A697DEB53A02CA4D48B630961457A7B9AB9DFAF3
99667DC9970684C6AF78B8FF538B6B3A9A835DC86A920686C824DBABDEF79751
EBAF7B26EAE83DF4CD5E60CCA650EA7674F1AE16F66285778C3E2CD4BB631D9C
72C9D06C7F5BDA42B2B4228CFA829EB00947CEF22FAF1F86CA74594E8FA33401
965C9466E90E5341582702DCE4EFEF3A673DDC442F0C9AA1C4CCA7F5DF5015EA
3AD0C72E1EB5A1586E86D22213D30B5DC2178BCCABFC1BB435D18DD46E7FDBA2
88DFAA294C00718D077DD5D3B0A5A3FAB3255F89CAF1DABBA7570517227B6FDF
EE1EC32EC2C33127357F4503E35FF643E7BFE8302FF2BD47F24840FA6469B843
B4909554F893C96A6B7DB7CD8D30634FF1DFEE5C61FEEC33D547A179665C811D
EB215AA717555FCC0156DF5A5043F62735A0DF86D866E6BDA2C24F96CB696D26
B3AF787DAAF64ABDDD02942696B50AC13392E30D71DA4EFE6D0A5137283F3A63
DD1867357C82CFED2502C765BC46825B83A2D5C16E0A3EF50E40B9B58FAA70DF
55B9B255891195361D05DD7726AC8204E2C98C9896CF8D05A32D1DA61A2D6C65
7518624A1AD39734799559BC14EE930B1A098F840FEB4C9E8AFF49850CEA2119
8B7C28CEF5AEEBAF4A754256FC5F537264C0D006978CBDEA1D02D721CB05C4F9
3C4AFA1670A6E0C0B03AF50FFCA7B0944A031AD69CA18600157CEF56217A322D
EBAA660AA76761B22CE4DA9344791D339FF234F518BF12ACAA9B901E32D4EEF1
911CABF3F0AE82682B251DF56796E760E1237D3701239205283CE90F6427F974
5EDBAED37CD11608A5E06E4F7ADDABCC20F4F0FFEAAD16CF75E9C06B9D593027
C7112B0D4C38BD0C67A88D069043F4BD51EF25D5B3FF77D030F0DE78306BC193
F6DCB407D1FCEBEAB98AC97FEE43FBFB8DD3A637075C393797B336899FF5075B
4D37B782E20141AF22FB8A18A571B3F379C70C8E40061EE98539016F346C985A
92A278BCC9B33329FCD6E2114202B2CC0E61131FD16E43FB0D5D1339D57AE2E8
E54549F31D5077D180A08E1EFCD97D8EE69BE01B8A86A3508616F1B1DBC72B7D
2823894F3BCACB1FF8C7D55C14B3BA392999C0EB58677B103477A24064E3E37E
5BFC689B9104B00C6A7067BE12C40EF2F9A800CE8D379374859197831ECA5982
D81CE2A83171CF2BD29C2307454265DDB86CBA833176323D1EA2402B20E1C4E7
49D7462DA74326745D538D71CB310BBD2856F264C0EAAC3B72EF1FA79FE1E56B
1E08D310AFD1C614843B040A79E21A616C88CB2A90B814188BE648279F4302DF
9C9D4CF05B231E80DE83CBD658004E3C2722BB2BC7BBCC3DBE7843656FDF8F65
3DBA3BA2DBF151517FED084B76C9BB8BEF6EFE726C54C5DB7357C00C3BE72D93
9F8EF3A1DD23AEE836A2E01A6FDD6AA04E0FA65EC40C8FA42B1FFFA4D9986AE6
11A9A2B777CF374ECD383FD3DE6358BDBC1E00CF3107545E86D24994FEC73669
815B36AC99E924BD35B37F326B17429FA80959392DB9CD0398C35E52BA5D676B
3D5E37F6A1541B889936F823DD28E59FC4876E46195F82494D322DE377980580
403A3435B4728C96DA237EE2205F854C0A0CC8113FBD5B6AA2DDBC92833AEBC5
3744B9ADA93C4C8F6383235BC408C517DC9453BCD33BEFBBC5000D262F4A4332
E04D739F000C63139542BB68F83A3E0B767F619FEDCB55ABA4D28616307184EC
54E446A2FF419CD529B680F5CEDE85C3299C13270B8A8C12F32A2F5C12FB86AC
6CCF271460659E563D13D6B410F8EE60F889B407CFA869B4AC347D04A7EAD48B
2C0A60685070D6D1BEA4BD5F51D1BF88545B8884A9C99F97034922EA4456AFB0
49EC9F206314F75C6304C9002D5E4E718FC2C74D71B86C3109AFA8160B1E2AA0
8881703AFEB37649A8A41304967B026557181E4418834E13CBA49C02D6697459
3EF8AF91E71430702F73A1F6DF79EB18C1B16FF1652A633744ABFED58E96F1E9
58CBABEB283E7CA6A65A82B3C9EC9D848C010A43C3327E0CF3A8C3EE4B4788D7
67FE94FB652F208DB512D94E9AF742902E4093F29A41C0AD1FC4C4C8B8FD5144
9F12FAB6DC1D0A563FA108DC818DCDAD475784343C963B379EB1559F77B9DD07
2CD64C3B022CE4F9EE48CB671B6DBE5853A54E1F219C4D058905F26FB3BD6522
1227AE1BC097FCEDB4E46169F5A89E970A4B58083F708A77EACAA5466367A223
B751CB40832014D118E0CDFACCF80523FAD43B16E77CD65AE2922625336CE524
A07F2506193F1FFEBD0CEFD5BBC64B8372CBD0CC229E3B83EF806F9DF786F7AE
DA5044E0D7B7F1AFA9B3A1AA0EF28142A16968F0E3FFB5228198A1BC0A96DFD0
FFFA195AE6C3987AD991623645C9964A608E22A72A6CE073FCCEBF45A9DA7EF0
D1836C7C8F1CA5B72C00BF56956B7852735EF15A65CCD62642056654D56C22EE
022C4BD314689F534857643CC1D55D22DF7FE8494004DC3EECC382B721198B79
4C2EE6114BA59F0ABC1D326AEE2A6DD0BEE3147C46687F85B43B7DDDD33BCC90
71F4F96C3CA91EF38F68C8C278FE0D0B59F3857BFBB4F85AABCE91CF48261198
03072EA38F173D28220BC1EA7A3714968F2D3E002F30135A048AA12AC0240CD2
F63357A89609B9D0745FBF439A9E37DABEAFADA3596464160CC70F8CC177E179
8DF88646807A47ED6B99C6DE53DA1A7642E98F9246DEFDE0F026FC3AD698969F
A7DC25ACA8AC74BD93A6B19EDC48F38A55FF87F2389BAC44BBCBC8CED728F192
1DB13DFD841650FFF0D4489EDF6E2BA4BB2664C054592F4514CF98E3E29C51B8
58B5CC7FC8D3BBA23AECD64B49FD662131D573345CC90CA4F64874BFEE0E96B0
0E1F9484DB6989DB8CA2E6505611869FAB0C30EC578BB8ADAA01A26B89EDF3E3
6BEA6C0801F977F029DD64C0F7BBE3407BAEADEE68B0561250F692D69633E2F2
F9DB87946CC03D495FAEE9B1DA9006F075E27DC133ACE8E5281D8D7479364876
3AACFB3082AB0165E748B945FC664D752DA651B9ED215C9E3B5B2A79201C4BB0
531D4F530689167B7DCE22FBFA5D979268D5F8ABB6C4AF4A2907418FFB61B84E
34BE6B0C5BA9E28FF2CDEAA927E581969FBA58F8B07823FE0926718FD371332E
D90F69537AC59300F7627D9C246F4E409BF61D1C178F0DB338CE2EE3B71C15AD
DEF8B899D00348905F3C7CFDC0715172390E283D3517D2C735703DB2C4ED830D
1593282060B65F422B9179CD0F8C738370C48BAD0EAB449BE5CCF75860E73572
CA7C2A2E926F621BF39C1521E1644040D939A89C31E53F5632D473839A296DF3
1A11073D6795E2EA4351DB0127AF835DEE44582511812965F75A358A6D9B700D
894DA78FD0AA9591D8AC4B2AB42E0E557263DC24DFF733D399FD1D57B2A33BFE
7C3239DA92FB22F192D69963B723DFFC8AA99E777F5EA9394332C1ADCE3FB76B
E24CD6EDE37C8B985D783FD28F5F2943C052C94FFB34C9AB10A28CD21DC57378
82C3A6D4F8ABC4D491D27089923A18F8EB5BE82B36CC5546526918E11E7AAC56
14EAFECB964693884A2FB3B7F0FF5CFFB7B66D65AC678459E15019479E20CDDD
E3601216AA438839388A1FD12F97E36F3B49D57F69E8D3F2203FEC8577A7E164
B1EFEE347EC4B9E5460BD645C61BF45C869DD22BE02F9B657876DFF667E3F5B4
555EBD9C904B039ECABB76BDB5B1C6029FE6A9BCF821AC07AFB2ABA08A3FCC35
588C2AEE3157EAE96E4F5C784E1A2BE386A518E8357808EAF2FC47F56F6B3CB1
0EB6F7E806E51B2946805E643BAFFC5724C4BF2116006762D5151C5D9B2B0A97
5556A326E66C8E1A94F6DEE626D5E34FB564F13B17C43F24A890B95CB4995DDD
E68AE101E596B8ED2230C42F4B09515F38B4842D82FB04C02E57BB179CB192D8
5271423B6611D3879FD381D567701E32C3B2296290BD961310DDFA3A2CCFA0D3
CFD9C73251037165AA10A1EA48E055AE8A5A818563EAAFECE69A764BB9E25C7C
FA3EA2C9EEFF3CFE9A476228181EAB622A755C5B61FA11269542DDB5E0850489
ADD0914DFF5FF04A371B8BE52C137A8AF44E2EE4DBED695B901F2547C6A9ABE3
9577C010788C6EDE0BF37B56363ADE66CE8EE2BFE7B059B9025B0C49585B696E
0DB2231A78C2391ABA7C6E85049480E1F065DFC5EB66CBBA44B462C7D5B730B9
0FDCE842139A2B1635540CB55D416E2B9350AC22DCF007320965175744384DF3
D5DA224F674986E3F089B8367EC463CF1C1B040F16C8520EF47B85F21F39F4E3
F22060A5103330DD39F9308332B7A22114AFFB996B1FC03F4F8A240373750086
EC01E2C024A3F74A2746EDA8A6EAA86CBA4C327BE9E026FE643EAD5A1C67EE93
934684DBF164CDAE355714339BAB899EE5124E62DC8A219E96335A50C614A3CF
4339098F17D4775932947CA1B546B11FD740652FD77084EC1B33C8D2CB62F5AA
72B3B77F5173FE8B9FC97A9F7227F43C8A3C2565649B536A7FBE9BE1480D5034
C1AC4152B403D3329F1471D21760BBE69715B14ACCAC7D61190D98A54EC2DEBC
FB5113232FA7066C2E9457A5992B7C4EDAA62AC10A58661747B9653666B62D6A
0FE8DD998C610EA1CA35C669D471B811BB230691D2DEE071AC39F4869D599D42
D7EC159313F092D32F9658531A3FE4975B552D1DB0833E7F24F4EBF2D95DDA9C
EA6AFA285AF58641434528F9867BDE8CDC4F8A5B3229A323B7048692004E8D5B
1BF3ED2B1472241CEBE095D6B52B018842CA407E4194D3FDB1BB53B8636630F3
1E9066CCE2237EEC244189F8BBE3F05FE0BED4795D95CD1C3101CFB8F6AF64DD
7894AB604B793233CFBCEC9A2D13D426B95F0EF5022744390382F5910919AFE3
34F73683CED56B0B073FA446BBDBFB4A344F0A7750DE1349D832F786585F3C85
3E7E9393B0B1373AF10632ADA881F36A09BA294DDA667C3008DEAD34B1681045
3FB990F1E06217567E423002BCE88AF827DC4FCEFF5C3A5EFD2EAD695DD631F4
7790B0071FFA27C262D165E99D14C980D57035F83F161B14617CBEE762A17CA6
10179E7E9905CF6839FEC3D358A9A351F772ABCAF2D3196A44D71E8DF860C8E3
CF24CFD3C14B15CA9A2BCDA6CC6E5537446E34ACB2AECD7D75EE96B5930B70AF
8F87F07F074B7C51A713C4DED97F31E9F13B966E2C28A10291F01C46A403850A
481EB75F9234D0930547609A2CF40BCC511B0EE9FE03DDDA76880BF6DB5AD710
40ABA21FC0F8E6E9C3DEC832CD24AF945BBCA871A2411896CC940E8C198D67F9
DB7FEABAF8C2D22476A0B44B09EC17B4D064A132C976F94482ECA35B3EF74B76
F7AC3CB68CBEA43EF35305F8B896CA118CAC320B4DD8293CE15795068AB01352
2D7BF9EB2541F38ED4E2751FFB577DDD7D399AF35C6C026D29BDD2AEA155E7DC
5E33E20D6995D97B207AAADF1348E94F81E6C476A6425F257F4A154E2B040597
DBBF8D0E29997C508774069A906E35BA1EE7CF1771C0E04EA7347E8A840FE39F
BE5F51B42F144B001730443FE393541006517C2328A1F52517DCE8A204A24A2F
C36B069580856269A43F6F3AFE603F059B0018DF2A5CDF77063F6ACB3FDA289F
09A57296420B79A9CAADDD8CE0AA7ACB4B101230BA9FFD4334A753C8BD3AEA1D
E4E43D831CD8DCBFC4BF2490A0D62EAEFF156B58282342461FAE57304FD5004A
51F230ABC1DCD0BFC648A2896BD2B0CB7E7460D287E65B2DDEF8B1757C5CDF68
0FDC4F279E2442CCEB84061BF0B0E0B6439DC4A1F0EF3AD29C43D03707E5F822
0FBAD15A2237C670C7E0DB9E6BDBC26435A1074A23F687D2465A7BD8631FB314
FB26C03FEE0B929E052EFAB8E08836C630CCDDF976DA3E687460B37530686163
303F8364D089193205D007EBA107D3EBAA99866E14EF76B3D69AEBD42C9FF312
F1EEA3F9429DCF5324B234B7AD11899B24774D879D83D92FECD175FD8C849B57
A75801EF639AF895B26098EC91144EB2F5A7048BE25A749F893A7588589DB1E9
C8ACDB9F3D8ED4994FDF8F3F39C0A1E294D13E0E4FD48FA46C9779A2DF671C74
B269778B7044767539C40429CD663EF343EB5E748B77C91881793FB7745235DC
F9BEFB1040AD6CCE4299CE54103AD5165F61D72B0FD5A8C9303C4F67CEF123DC
01FD22182FAEFE3289750D1C3DFAA0719825CC6C6389300DC9562CCC20144096
DE56CF9EC35F0C8543DF8E4E2B8E6B7F7A4AD4E9426B304A226AE1F7AC503886
D9E6CA8306FA46FEF459314B406AD33743D79EFB2FB64FADE554E55C34E8210F
C2C61BCBDABB7F0F8D1306D814D93C72678BB307D2F8C77EE6E5274D2E530967
829B3566BB34B7E1312979EC47AE8198D8529212CD4473D051198E8259A2925D
4AF6B87A2BE3E3C859E0BC6BE69BF565E12DA071501004D48F243D34965F875C
8304DEA4F3432E34EA354418740C7ECEC14E5F2397387B731F40635AEF536E91
DC86782E3170FCC21D86638328E5DD0DD7342ACC2A25A85504074B80E63525A5
C019CF66425439029A4189E4FA29D4B4C22EE38950733524EF1ED2E41BD8B5DD
AA724ED77E5891BD1D6F2EE82417F02FC3B83AF3D62EF1C530875138D6E4ABAD
778F0134471CC301A8E72DAC5B13C3896A6A4634D827EBCBE11434B4A8D4937D
F8B470EEB98F96274540FF546B2218A35BCD848304232C6872ED0EB9A5780503
7D9212451EB550DB12FFC3DD9DBEB1811F3A0088BE989C16115A546B05FF24BF
5C3A0DF3CC3B320F8ACEDE7108DA070AC5F9A9A9955141D0789DDBDB9CB1C4B5
989A6A2DF1FBE19AC39B9803D73D02D85863468D175D44E71D75ABE1365A92C4
9C5575C3DF386E7DB94A0C79A1B3915B3B1E63065E17744839EAE24037E991A9
ECF17446F9C870D2748EF974E05FE70B5D0C5BA4A4C78E41A4025CC660A9C4D8
5B086758B4B44E6948AC3433A80436191038F5C17112CEDEE94AC41F1172EDE9
3181A29759091DF51C64C6AA318B96629AFDCBE75D76094D7889BFDEAFD08AC0
BA9A801B6E11B3127CBB17242398F6714D41A2D1CDFD0E6CF2CE86353043F2FA
7FF1BE25F8B79FF2AC63480D623DDD5BE09DE0EB684D4AEB0E0682F31A2596F0
A95B5EE60502B5D5899829ED568DF576FE661539DE63A0A4CC4E532BC98F41CF
25D45D2EA0A3F6507D13C9B0D1A4261EAFAAF74709CB82C7CC7363DF85134D1E
AB291645748307DE1610FF9204EAF186E9ABA57B9FE5C70012AA558846E806BC
1F2359AA02C33FAE1FD33EE749DFE376D4F9AE6441427E41D12D948114EEAF50
3BB2408D83251001E8437E7F6D9B01FF4C5E7499A52D6EB6C1B74A091CAEAC8D
1833BCBCC4D3B59376AC64AE71ED4545B079CFE31A0F953BEF6C8E2ADD810344
7074EC138AED939E56C4BFB07F9C15C6D1321FD2F69D53DE4AEBAB2402C71AE8
991338E5C81BDD438A9981B1148530F233D6EE10BE2C751E9E6AE4A29029AE51
4B1E3FCE3570B9C6DEF5691057A47424625CD8C4A36916BE2986C124C0DEA371
FE59A6323AAD6C18BA46F7CC9768F724E271A39ABBBEE36D477F64CC768BB8F1
3C18187C85B8C0CB5381E259D6C088333D5D1D5D77CBDE7204D3A5C78F6CC832
791E3D4BB87A6392ACFE0BBD623C99C74E1A0AB5BDF1E9D28D07FD6C20FDC719
94E911990FF6BFA26A7908C75BD90C00263C3C9F1B558F1019DA958D5DB66CE5
EB4619CDFEAC9212BB033DD76C47B48B19C8F7EAE8528E32E9CE34E9B2F653A5
81BCC625DE6BE8891F74F703C9AA0B53F8489BDE53DA7F1E986EF5DA75D04A4C
11EACADC3D74931A6B43088507A8A50F4CCDC4E776557BAB063E9E7850037241
F1B3A9B7025004216F63A85DA0EFEA0A20279816C67ACF82AAC702FC3DDC4FB2
6BAB69898D7E360511788E9BF090F780FBFB26927500D7E6362E528ACB316866
C055167F6F2601E9462DF4721B21237B70F75B85D5012A0BDE436726C96EFE34
76212EF960A9F1D789D9C8BDB55145AC841C5CD37626E99154D868153BC0CBD8
3DFB4E56D143A77DA93DFD5F7015B483B099417D410D1A7C631A0E82C30B0195
4565AF8C96A0C83BA907FB77A5F2836097272FBAC9A2DACFB2F29E6327986C22
A99E04D6576A35B3EC5A76246E0B84D78B5CBE3D295CA7B97B8CB0F80F5DC437
2AD9AB28A2037402565005345653A95F4A423E9E3863EEE6E33FC09C6408CCB7
C8F2AEF4DD99DD79DC7CD948A165A439409570DDF9A03CCD801E2EA69CD9E5A3
11B529C75D4C4A4D49D974B1260663D0959A407015E556EB8CD2CCF4316F21AE
7D66185FA05D85FB58AB983090B5A601CC6160138ED1EC4E762B7F6031109706
A9AEC4B1F29D4FBAC807C55AE3871521617C2821C839A5C4E59D5333B8666886
1EE4A3BE34C39A4DA2050F4CCC3C7439C38A046B392682E6CFAD86C7593A0FCA
7E178D63AB4FCBD8A02772E3017D59BAE248F8CAC595CF0BE206D61403CFE671
A8BB4EF91AE79C64143D9EC6B5679277548F1AB2814FA1B6FAA2464444F793E7
FC309DD963F1B332AAAD6022E3E361B4416AC230F0B77C272FD01BBB4A7F2BB3
89A35B4AD073DC378F9CA52ABAB45E67184F8390E05CFCD1ABDE0A9F6314FADB
D0CD5515EBEE3CC1F4470582E82C148E3C9DFE60338A73083C4108D9470B9A6C
8CB26208CF6AE0C27D99495A46507A852F15FB515F2F4CB498207D5782B7B40E
AF7469A404C09EBC603E3AED6E33EE942AB48599919A3974150BC76C025E5EEA
5E0ADD9E18FD238829AF1D01AC327E84D1966C9BB490B3126826DD7CB9C7085D
C4EA7AA5B753DCDC29987949E14679C8D20B5EA6C04F961E031CB1636B8E4CC1
591ED81C16A8E8B413836D20B963344998E91AC9C177168F047E593B04406098
9A6EF8743F0C053818508FB6E1EEB8EDEB451A50EE5B92A18449B15F6C05E04D
F4D17CC180C1967E401258E00E8391BC4EB1ABEBACE8B6F56199CC1460D6D0D8
72613704907783019F736B0BED44E5EDCB57EC4F1A7F1237163C9BB372A29812
E44E553E216B76BC3D29D021A5E906C70960DFAFE7AF4B325533C5AF117044D9
A85330B3C636161A6A36128FE1D8423800FAC9E39EE3B5A1DD90D2D15121D377
0B447E73399C23B63238252B3B7A69483B217BED036527D49AE2C5ACE69AB6C1
DA1DD8D16A12B9B218D9080909A80CCCE3EBB841BA635A371C541C67748FCB30
A352F141B9094E3EA9BF6443145BE70D29CB5478EB974991CAC15FAD97359934
656522496D357B6B40BCF00393CB486780FF1EE62ACC3C66034DE736BE67EC5E
DDB399DCA2F57D33E98585C4FD9339FC823A7BE04C9014E6BC506A9C3B0EFA23
7E333A6E3C6D3EFEA669B79CEBE41790F54FBF5A4F0F33BE8198FE1258A250D7
2EE2BEBB1A3B01EA708B701690B5C7F8A8CA9D478FE5A435B64AB5BD27888A0A
D826B6F69285A11DBCB030A14DCC7B9627BF3DD8EF7BD241314FA52F0A20F82E
8F07B3DC62E62B6D063BD0D469DFAAA9B397BFF72188008B4244E4E162363F0B
1BFC82279C8789A6687BF0880992DFA0C614F6ED457C5AD12936EEE946576A74
7F22DE993BD903AA4AAC333BBDE2D5E5E72D948BC6A8628BD00C08A276008E5C
EC51E5EA8F51CFDDDB8C73B21F863214AE5FE829BA151734B6D3B9B6DF0D0624
1C852D771E946E895E837A96E75454BB27F27382C6017FD23DD38A340A0397F7
3A0F6A1EB2E596A8259F217D019E9F254AA0490AEDFAC0D9CD8219B2BFD3852D
687267221C54B2F2278DC479DC3AFD69B176E7F243E138F5008143F1AF76222F
F59063B33114AC6202C77FB710D37F08636B473B5F02A2A36C6E3C068DB0E6B5
DEE8489901200FC4D031C1E4133EF645E0AB2FAFC85DEA0EFABD5E26063109BA
16438FB4068CA1EDC755EAD9D92A54E165B2108E24D2DB224E360B0FC43754B1
EF9480ADEBCD8A487579162F5F03CB44D0775BAEF808D2FEA2BEF33383A773FC
2D6143F71C9806AB120AB51C2D9CE33685AAB2FC9425FB2032D98BEDAA0E675F
C2D50C0306254F751D17CDCA5EC9CD3B65F916F277F0FE84157443F744EFCCF3
27110A41A97E69294B27555FC30C8CC88CC89017D24D966E0DC48A7EEF7E5C7C
9974C933B07380E69D375C57AACA10B2E7EA4351DB0127AF835DEE4458251181
278DE3209F9371206801F0CA5822616E072FC86947C4C503F5AD6807F29A6109
796D136D293F0FDCBEBD743B2F37BF34D10B1628C899B1D2CE99909C468AC98E
E0E7270BA9A21BEC62DA4B0D5A952A3CDE033F21F1E7FD4664866624C9D5ABBC
D7D9F72150DE2AF7BA8D5775E5EDDE948D19B6E47C18B50DBDFEC15103EA4759
7FCC2A7AD2D7F961277D77D6CA792F4AA59FFAFD897BC9C6E09FA68BC821AFAD
335BEFBC695F2746A01CFF0410686CF288BFC5053D7834AF91E01B06F60A4614
E64BCC96B578FEC20E7518C873536C53E9AAC46F7B59C61C69BE68899BA766AB
9B1A5DE804327AB1B760B4696B15BC40154D46A86FCBCBA89A66B4D6560B31CE
FAA64E20C3D0C2637FFF29F2B3FD9F8888ACEAAC2CEE1D6D1FCF229848D32BF2
E940120EF961667876DFF6CC81CDDACAA532C6859034A848D1CEC437E17CBD6E
50E9BE84F97CAFB952CC5DD7E30EF79069D498604784CDC350C553788E54BB5A
C76134EB4BEBD86676AF1999D1D00B0D3DF021B55031E2ECE16909A72B3909C4
57E98174C7CA36ECD6A1C35519C39E198E7F155F65A791488DA1E2FB3A096281
DE72C92D4F87E42AC18F29F582ED8A006AE3E1072D9307A31E8A0057B21E4A98
3C2B072954F4C9C3913E92C96B4FCA84DE1DCA244EC3509E7B2A8ADC462AA8FA
3A099543407E1F6C99EBCB38B495127AF92F2299DD00CC61B7402EF3A3946904
477A22CA8C11CF0FCA411345D2C72D57F5D62522854E474902417C4087B7DEEA
6582997E824C000CB9BFCC954A4C7DADC39EB6764B4F8D8B7A8E546E97A0B7F3
29370C4679B09631970E0D21D8E9A9EE0E24A9317CCF8666FB1A1307F4587C59
37A7FBFEDDEB88DE989106D85A13BF24D330D36449A1107E4E94E72D6E9F88A7
68B38E393A52BB7B3906065BDC43274C32E7D718DAD1FDE01CDF1AE4BADFF866
F2977E5709AE5A6D87A3921EDB846BE560980651C2FC1F05189175281D78F9D7
AFF6ED7A790BCE9FB5B6DC3C7606ADC6A97C51F236708C6951E2D2042AFB7CB1
206AA6667A9DC5DF7AB245A56DBA076D909BD6460F9B3359C345F2552DA7A34C
7D16A810E4D4887EA6953C48CBACB6740BC20538D8CFD17772DEB364587223CB
AA7FFA78B26E423A54A5CD4A2246A6EA1FB37AA15EA17953F849DBC03186951A
BD94BE77FAF74DEEDE067AC63E85397C69D8BBE0518FAAD0403AFADE42AEA003
CAE47966EE4B6A33DC92CC1AB1AA126236573D7A1C347F55648DEB1F6754BF04
8557984ECCFECAA5DAFD971181F4AF933548B7DD2CCBA487DD73C8F7319871FE
54236B7987E5FC7D19FE3A7CC3A47ADCE9708E4961288A13A6435CEC17F4DE0B
B6B8F2886D4EC7C937AD7DD73CF5EEA56D8EFD1C26E6273B5066030367F61287
BDDB7148D8A25DB8858C0204B4F74FD037431428929A3C2CB2897EC63692696B
62640A87F470FB01070951AE71E913DDF6431296A12379CBD4BA186A8085B1FB
E305A01C620CC4B17F4843DDF2A243911D7A06B3722A57FBBDFDE1C121222511
64E4969A133789B66335695CD33C31579C6853739AC708D3878706175EF1BB0A
CF1808507A37AE0523E5653EF8B285BD34CE9CE2B771BE069AE6CCF9BC669785
DA849333314C680490FEA4A94387ADE4745599F8041F4CC83A33049734AA7E34
07F97D94749F379E83EC049D3A6A062667D468620507F4715BB0B79E4B237C53
99C92B13BA49EAA38A165A5D7ADA8656D3464B48CD17F6277FFD9F761922690F
6069ADE35EAD172C3E68D48F14EC34884C13832466823DD8CCB8AC70529BFF92
CA1D69CC210E34B853353B32E9328CF12E5D8A118A10A24CE2CB80D5FF8959D5
E4F170757D17B8BE932B4AABCAA0AE8A42C530D36900A1C99268EC4658D82673
2C92B79B8A01FFAE6E490E28D89D9869FF35D8B3ABEBDC3FA0AA73CEF57A08E0
4B488F37DF1619EA30BE6248021C8130D6898DD736BB8E83347F7EF05FF8BCD6
31231B5562C97EEC370AA9E84358441B95AF8C257026083440B60867A3863367
13E6055B496FEF162E2A1DF4778EB123AFDEE715E86E1E048730B2023956268C
086B91D7C11A3A17769903B170DA0C55A9AE1CAD01310C1AB2F5D83ED0596695
2482A945161B429C1F47687FFB9A1EC328513418368E2099E14BCF76530FD861
E3A8381E415C6ADD8842A2B6700A0106006E84D21ED21E80905F5D1D36224430
5DA0D13042DBF5B62AC8B16A286196603BD818AEC10A09FBE3F729A6B401417E
E34CD6ACD7F664D7616EF966535A1FACCA845698B4C033E07E84288998BE0290
77963ADCA6FB5CE3F8E83242F65D979268D5F8ABB6C4AF4A2907418326655F9C
025870648DFBD5035EA3B088A61B69DEFC55F6456D266D470B4EF2F9A8A23085
08205A4623644611486B4A877F4C38B767F4ED48C4227144F9CFD841A9D8F9F5
E4C21078CD46A7F9C0EEB8FA7709C320CE8A2E434D7065787374B4B471B92705
101889554075E4CB3D1D7AD3C888A36A54D9D2F746446D2DAE060B5D6390F810
EBCC680580EEC54590D3C969B13C634E811A45DE24E3C5410293C807480F46C2
1989A09F9F97E0B540786B4C449A25B9F206B73EED893C9A9FF00851110BC423
D5F4B8569DAEAE6D5F1B5FADB0DF62F4062C91981243B22AFB17417C35502D7C
143E2876628091B272F8BFA0C5E55C30467B73D54ADB5BE20AB25BDF1E391ED3
28193D78C271F0350005FB02E3D0E3C1A311A16A458C1C4312DB9288A39AA9CE
DA887E60106AA5DC7B15AEC24BA433A8A814E53C5223266C47DE3DC6B596D3DC
87AB035DE6B73ADE89C316D3D9A637DD3F5351E6C8934ED9FB5C06E94A37D77B
A61F010A0D2858F25CB8E5A175788EE7CFA40536E83FC0F2F35A11EDFADBFB9C
2639835A0665FF224280ADF9426DD6B63D259A918CEA4AD8DA137071728CC231
836FAD378F7242F1A66354B2145D2612190636001F4F1FBE214A3BBC3EFD7632
D193CFEB16E29297F434F30C37F932145084347ED515EEE4987E42BF5DCD4592
0996CE1D9AE53BE70DC853E612917EF4F78AF3FEFBA6F34AFEEE25974031C73C
DE82BD9C88F1AAD05269412F996A5713480B68CF8F7AA3A9B624BC00D9937A6B
092648DBD1C3E83B7AF86F4EAD156EA75EB8A93867EDABC048370EAB4E103F4D
05678CA6E77741BACCCF768A37F87845EFE6AC3B8A68C5298F563EC6DA1F5C2A
00FF1A72861376537BA2848F6E1DEC663BBDAF45EAC426B659FDE76FF925F924
FC9EF0DA1E6510463AE4FFB43ED490A0EE6A857428B3D68933BA1D2D0E52AE24
2EFCE7A61BEBE398F015DCA2A94B5A8BCBD4A5C0993145C5694542FB657B1655
2F808A221747A978CCE8E854B9EF34374F8F04E5C5F772BA8972725A7335712B
4549B805C38248A8833E00CC40DE0D37A82F099E4CC640531F5E5B8F702D2775
7402E83B5645FE73948428EE2605EB377F7EBD25EFC1F774FFD2356EBF764172
7AFF8DF1AFC475C57E1A788665D99645B2E205A354FFD13E3739C2B7129C4919
F415BC8E43553D8B2208526756E6353371801F91FF781AEAB27543398C0478B4
2E778F947D6F5248169C3D4A8803BCAE80EC59434C7F4C0B854F7549E244FC67
51FFB768A672DC30D718561CD91CEC64128C90437685454A5525C6D236E5C749
88118B915BC96D176F925A272B763F7927BB9109CEEFD2232849FAB1495E04CD
47FEA25546D32BDF3FBB5282962120B161A049088143F1AFBC0E85D15EB6A459
AAF04A14EAF3B640E06799431295C15C74D6CA9B9351245322E98FD72EE4F49B
C039AA65950DA233826CB6615D5C324309569BB328F5243DA02E538E85122B86
43799883B48C5C559D5EB8777A6A9C840752EE78EBDCA152FFEE0D40A842EFA8
9FBDF79D274DE6E099EEA9FAD94926CCC301E0EFA0DC635BBB3BA76E01404DF0
23E5932D3AD907F2D9292210E53F01029A9B2BB94A7249E194F29351CEFE7889
9CE46B900DC93D792706DB511000C9FA3681C043CC0B55C941AA00D50A8137B4
0FE8ECE83B6D78E418C3F1573312E92AB46437205F8C2BC3A5CAAD6027DE3066
F33F338E0FEF907FDABC9B780F8A364B561FBE274C932F7D53DB080497081720
4C8E680C87734AD832D8B0E953DFA96873B3A04B4158613650E55D03BC679A21
9E5E15AD6CCA345FBE5AC52A4F911FFFA39DB14BFE4AFBD1DAA79807511D4E1F
41BCB2C690161E809E243059DBA18A004CA5905715353EBF18BC2AA680F52D8D
C54D43871907E8E5BED7DE71E6F0FDBEF52517DCE8A204A24A2FC36B01958047
F98C4A9BE6BDA7533667E0FC85ECA5110989A9F9E02DACFA57E13CB0CCB196A4
62A38EE71558FF7F67294023A9360A02C32457FBECB2F7A369DB7A316130A640
FF33932A8971294DCBC7E151D2DD37C5473B38FBE2DC3B45805311D32024E568
936163FD3FAFD44CD4F0DC97A1C31616BF3502D4CAB2BCDF18517FFD3DA32E6B
3271FC604D4F13695138F3AB715A4741E47748285E3A0FBE7F650228C5A190DD
26F9657959EF975012B4D5AB738930EB75A27A6C0019C7EFCB31A980B6A05B63
D75B8636B309E4B62823877D6AEB29959E694040B50228D8BDB2158CE07717E9
8215C37D3EB3C64DFD333E262EAF87F740D2E01478881F66DE3ACE0C7ABA6214
E0197EDE077B5C052AEA01FC0A268C130BA90BDECE41578C98ADDF186789948E
AEC12E33E4172B58E105F15786376E76489157CB2100ABF625BFB2F9B3AD38AF
0EC9389639FE933C9C752465BD8065F100485940CD14D51ED6693B0E9226FB6F
CBEEC037C664744D5FF04802A3458F6629C3A5CCB847F3FB30FDAEC9A6C932A0
7C448363D45D80F3C24BA985F22C1797FA12A9763477105175EF73682959FBA5
5DB8D7050D67EA83DAA0E0C00727D52167A4EAC0BBB5432B32EED6A0425C696A
6F7C02650A55FFB9EC3D2D61A5E37FDACD20FF980CF7372DE8CAF827186BE820
80C78765C5CA83B8F881F870EE9916C1AD45D28C644CEC92BBD7AB4C8E56B08E
FBA820D03FFBBF68D1CD25D9FF01292F4294CF66E1D0CBAEAED1D69159046013
97BAFF125835F9DE0709F5A49256ABB970889798B92A370CB1DBC3E3A79BF78F
1194B4FBA7884337FE0417DA2D04D5177480F83F5DED18D9BE931E819EB6177E
6B1759E5F2E39A335CCB98286CB50AEE34371889A6CB822B026F99EAAE55AFFF
21A6D13DEAF9E7D94418F03F2D9F06194229D2F9F2FC8B55FC4E4F145337C1C0
8C1914B0684FCB2D97D7B6B8F313FCBA2FEDCE2467F98B23BA5E8FCD95E38A1E
0B004534315E9D355618B8706E34E1249EC9B82748DCFDBE8CA71B8A651C00F8
4906FBB67F546C1D4B98BE2815F6DABBD02630FBD0A2F0CC9707138E8508377A
A57FA1A86793361E8DD812EF7B876FFABF7CABD168913E8CB3F590EB8F915AFE
F97670833F82D0F5F20AC41C45706E9BBC637266C882C0AAB4230ADB4A2AC26D
8F09F7658763641336AE15C8DD823B6F589D5613B3E7DA8EBF491EC597B27E0C
795F27B1ECEEB05117C60FB9D2AB75151AD6AB518D28F78E986C463E9958BFD2
29550C189B8121388E8C06C074C0EF082D34EF69206950B969BA5D11DFF126F5
CD890470AA5ADE32855606E5038BC8FD9604200678179E0FFDFD450C7F4CEC31
566DEA32218410359AFF83F336D46AFAF3B6AE9376E4B2B5C0EAC2FE85FFD946
2C432082905E2C7B46AF959F7E526FFB5CBA8A3852BBAC8DB4DA56D55EED5FB2
BFFE0DA5643091D574027B84BD1667C272D3C3C2B61578D0463EC34E04962C50
1FD7FDCBF1D31138EBA92FE0C8C865BF24C35C73E26F9D378559FE1ACBAD9DF3
5810519394220EF2D2D57386829C25C06C88F964140AAB4C9462CBDD98C0D065
9D1111864F399D4748C11B80C9906A89DAA84D6628BEC6803796A28C56E4953E
F1F4BDFCA90B774733794504BF7C70E64380EE6C874F1FC03F6F16F6FA29859A
B44361A75D712DE7D1D7223B45B1ADA04C0BBAD3396B2D15F2B70C4D246E297D
E8158DC15CE555B50AB90ED83B457E335FD53C0B24133A31575A01DFF8E1CCF5
A51046248DE14B83C0D55CB37E53A34DB9AC0F3AC42549B331F99F7FEE77FBD2
274998431706DEA70C000FC018C8DDB217E63509AE32CFCE248A321630BC1C7A
1E5F5539494B42176BBAC6D0078BFFD5CCEFA5499CA12B203CF3A06153C1683D
296A90D0FDB05E62C4A9208C21A104A218DA7B66FEF7C9E3E2EFB222307D9E63
244F68CA1024DC5736879EB33F7699F237A32F7E1003933BF330006D65487B4C
9C3D539E7B670228721A624AD694083972293092C92D8164F8D4B95A32940DA4
2B3838F886A23C87281744E40FB9CAD85D3293E427968F730F7C21BB8ABA0C94
590AB5B0AC6A9843EA1BF63EBDD354638EC48EAAD02ED5E1CAB2F1BF8D6EB6EE
EA11347882D34BD8DA77099F9A918D8847C86EA3DE3D093A5ACA2FA7E48157BE
421626157E9EFBC0B63F3A7114F9DBD135F73FCF408F1199E124CFC3956718BE
DC771808550311CD967D167E99037F9DFF8DBAFFF3C66C77DB2BECD582160DFF
D95A6B27831370A5C8593A2B7DBB1040A7BA826A166A62F7D7619C1B39400EAC
8A9956001BF55B11C374D8A030EA614F2B3F382C3E3A7D25151494DFF0DCB327
26CAA04C99BF3B3397E002E8622F51F9B81E979062310BE77728C717106AB37E
ACBF19B48738B5B3BDC9B4B5D5A029B59CA1F4C216ECE1DEEF5C791A3030C4FE
8EBC1ECD45DCF841F48BE7999D64A3273BF37C7533976302E94A0BFD7ABAFE5A
74A661D964D37980A0CD86090A283E54F1D230A82C4958358B7615AB23EE4AC9
12B6E18101581E8DC46317E5A5E680269D19302A9052A41C7E1C3BEB6C9D6AE9
B1D578D01878C314A6C4720803227006F260A9DFD2D9F568AF9875B7810AE280
5B3BA9B5191500D3701D39FFAD94525CE6FECD6D2ECE2FED6218913BBEFA7D82
09D92B4EB1AE2D1DA7246F68C306ABE144F8D7D31823FB0DB0688342A5AD4B03
09808E0091633F9BDC4D8C1F05B2016D2A9117340CA969A584B07FE68EB2735C
64C633E2CEF19D2D34350E5D00FF194EE62150B4689FC0FF8B5247F1052E144B
535EC56A0A2F82A10575400E73B9F1ACE7D70A2F140B565748C8AFB550E902C3
1E81F8733A39B75B1A1EAADB7574BBF634B9DC6AA39F702077251BBC5D810EBE
117B78B96D302CD96F26402570CCD74CFE6977C0F3347C32CD2F148D1A5237DC
7457501B428D2849E47748285E3A0FBE7F650228C5A190DC77477C1CB190F60B
4F3A5889CA429749CC6A0615F05320CEFD10D003E90D33727DAE54D422C809D9
B296B9201F559528B2F78DB6B38A8E7DC27E3694641AB1E03446BD8D4DDB4947
5B5AABB7EB802435E6AD93A096258B2278EB9F526DAF8928F2AD6B7D90F34708
FDB80ADB178F2785F543E067700D5DA5BE413542F7E6A4D015F32850E95B479F
070E8D47E0252B72C3A44D977794F88ECE6D6008630B4F764E985401DDCEE451
D0E504C5A23AAAC107F62A8117C45EFF27203F0679487090D88DF40E75306BB4
45E29AFD732A02B6F4849A7CE08100D9747631D6A47FD43AF28CC1198A84ECEC
E33D7DBDA87AC704FBECDC5B63BF8BEE6DB3D7EC7584D92CBB70AEA3C567AACB
6CD5BBDF876CAB51A7FCDCEAAAC7E09BE1703B8FE781EE6D020D6C1328C340A6
556729C317E60CD87443A82B7AE22DD1DF45CC5E67170675CB21F1F0E7043962
E4A2902952C4A46E3FDD7941DF74F2F1750764D49AECF0C1B9B9D8755ED035E6
31160B1CED4211FF196EE56E89E9C036EA2A6A8D2E3FAADA8C4F862175961827
750F08D24C420A1E25D5D129C0C0339487A7C4B3F95D7BD62BE3E6C1E4063D95
71C69D66B1ED908944A9249A5426308DE15F970CD6FEFCF89BA2812A0FBE6F15
BB8D38BA8CF7EBFDA5F8F5FD0D4994591A5FAEFB7D2B84012920F318C56522A3
CBCFCB361B2D349D98D2ADF82AEF3615166AA3554E9DB7010A2F93DAF2A51516
37465F054AA164401E502DD0CECA5DD42B637262128E22EE5FC992246BF7F4F1
9B865E66B243610A1080DAFABA017A1AB8B56EACA7043E25864FBE116AB895F8
07E23688932587B302F2BE252FAF1BB671E55A162D797B148B8946C6F25662B6
11BBE6BA06A6EB5592F50CBE10277671010D57CDD7D036990BB524171AAFC5FB
F0375710925D0597110D83A37A73A0FB84C00969820D6F5E2072D2FBC5D75A7F
C59B051C1B878232281A66C70343B23DF1F3A9B5826311D2A916DEEDF52D8DEE
D4497205D4BD589E66C3FC02FCDF8C522620013E0C3F20960FEE0CDF0CED0B37
2AF195EED1ADAA953698274164151B15C5A35F291256C8AD1F20E68CC90F7DDE
F2EB125A9020AD216D26ED6F9FFB5D6BB45BE6E077364AAED2B7A730CF4B9105
E68DDA57ACC2338B943718ACFFAF4410331B1991CD345FD6703BBC2F3C588C42
CC8FC0A8317A25E4D6B543B1CA63ACCBCF2673F7190956CC6BA95B38C362FDDF
541E5A2B076F4D900E9F59CDF43D68281086B9DDB21D604056A76EF596169E31
2BF499DA82EBC588A756A598A9B4484727A6B56A54FED1FD414D67EA0050A349
9E6B618E2D89C9F5A0D270669E792C0DF7F944D28F8183336B92D89842F7C16E
031984554676C41651CCBBC9CC27C650B07C5DA12B5D2DD69233C4903317D173
CDCC9750DBB358327265794894449A6A3F4B8CE14AB04AB9A0E46AB602507B75
E254B5CC1334FE0A4ECC959D3178D2C08E8FB1A81D6663AC4B028833926934E5
6E0279EF48C1367EE1021775651CD2495558BA6EF00D5CCA7C13187CA8EDC2BD
F4EA6AF96D40B26F1F09A31CC2BB74C92AC1A3C47FDCA52D8198DD33C4DB7ACA
9A6F6CBF285A64211FB4DC80CB99E7BB26F825F8A3708FAC57CD06C996E5CF58
6F2E88CBA4844C12A84D2901988D16515529AC5BB872A22295C9BF859081094E
B677EF96B3BF2C2DA8F7EEA4DA8D7C409361CFB07A6E8DA7A1A94773BC1AA35B
302141A92F5BC4CF7656A896DF74DE5F1023BC64A0201D628A92169B8B91A83E
9FCCEA8917AFCEACEDC0BA0C37D8018CA7A1B133A43B39D82E13BADCB015A043
D59A68AD7AAE841AA9AFE0DA581EE2E11CA391CDAFC20C8BE5E8F52A003CFFF2
2CB3EE03841E657F371630319B70A729B7887A6A965B1EC6DA4ACA73678D7909
1B1D7DAFBF5DEF6D5D125D110FA68985C3719C116EB39E30E38216CB5FA24E41
CD1DE62DEE0069F9F065902DE9BAF6F1D488A918EED503AFB4F758E91C11C1E0
67598E1B8FA0E527E7E37CDC22DE9BB7BE6685FF502BBEDAB017F72CC6D6D0BF
556FB0ADE032280F7C9BF306649DC650A35B6D9C4CE0E469761CE4BF3F83DE74
4ED480DAB8D447868F9AB139E7A3CD7296D275DC1F42D013F82FEB4CAAC79A89
63E7962CC023EBC7A9FD339CF1BEB798A8878378F1C62A8FBEE69B02FEFABC82
B6DD69A71DD2C818379AFFDB32CBB4B120DB634EDEFB84DDADCA40C35E11D1ED
A1D157C1E7187C64947108AE514D103AC55B5CDEC7EF7A16808A80B7AF6407D8
3855897085A81224FA4C49C49FEAEB30FC9497B445E4BB776FB5A5C1203FCC1E
D44C33D4A030D891E6C2A5CFF1F31625DC4A39F802E33208F53CCBD03E07E4C9
34E7077F199062C61B5F6377B43FE940CA59CB1A4D99BD009936ADDB258D9670
0ECB6404C81B993F95ED41585597256B49A9828EEDB4EBF6AB2B080EF7E610C8
A024DD64472F54F5A6FBE10EED9B1AF855398777950E619BBAE731BB77F16839
7D5E787F70CFE71C6495B4E0DDF178F20B06F250552FF2D2E36C832EBA5B2F1E
4170422A10D271134AAF0FD83A105791F88766C4424D960072F68F68B50DFAF5
369E8F5019B4BC05D06C471DE194DB09E34CDAEFFB5B3F759ED52B0C6732D9C1
331A9A4DD2F7242677C3B44DD4A3DFD5EC27E0DBFC296A87A678DADF2D722E83
6098641437F6C77CAE0DC9DF4432243E66A9837BBD9FD8B292A3B69956C31E1B
11DADB2DC08CCECEE847A96F647073AF9B3960F98A4F749DB312531CFCC47F6B
E71B86D35F23912234DA3B4403961286CC31D0752A8E212087231C485A1423AE
CAEE551B608C9BF18DD2428155925CF14457E537D91E0AEEE983AB45A6DEAD24
F9D808579B8C92B1B7E86DF3B55B140F6547BD6AE3C244B38BAE24917A4E831F
AFF4E98D20621C2244D970E59D776D76F017BB10A78896A0FF41D108073392E3
1D2450B7B9CBF2CC3C2F267051AD06FB20E02969AF99B1453DFBECD0FA5C5BC8
D9A5805C51FFE7167BEB8857F3414175716428D00EE57AE742531892BB3AAFAB
8129FF0D2A577843D88220BB8B9E59E1BDFECFCB87C1374E870138E929AA5387
CCE092A0FB46089B899D47030F6B2FBF9A1BCE4E4075671B35D898DCF84D5022
22535601831E82EEB511DB5FB5C98BDEB59F3EFECDEB0D9F00DFD2710F9537B4
5E6BE66DFCEFF42E239079A62DF1A1CAEAB6E7FDFB763FF212C34A0FA577957E
5A8A5DB3AD2E5A530C0BC95715F5A229D2663721D942A4E74FFC6254D56EB542
D23634C588C13255E334D43508BE7E64FE30F5AFBB6DBBC1BEAA348ACCD9FD9D
9BE39BC073D3961FBBD20589679FE58BAE7556E0129E75C3E464B5A7A996BA7E
5179B814CDADE253875C3BF3A82838277AEB6A71730EC842E51FFDFBF3AD7896
1F46C92940E4FCDC2E4E51F09EF30EA0C0AEC8AFDEC09CA8F59BB620E5873352
64527E18C126FCE40F7296ECE28819334E16A37603EEDCFCFBF903864B6BE711
F1765601083150BCCE93BFE2A29D15BA0A4A0C7AEA3D2C9446295B0989A9374F
6EA4280B885E182B389EF36E0848C51AED07B78A756C97E2303A711B1D66B378
7095F1FAABD7DE196197F5434C33FB9750D49DE01D4E92A5A6FD06E0BA4A7781
DA8F75631D019FB8144270C7FE8092BF95C28892D87140A3D76D7B34ADB34966
317A6AC88CCC5257DD1176C60094FE8D88394E1EE1DC9E3195CE7252F291E7F6
54AF6E9F264E3213D9E3302AEC47F40DBFDD46E11B15596B35F29CC3D70ED94D
64CE8E1DE0E0FB407070F3974B0C6E1596E122D343E6DDE6207FF38512AC6171
9EC1E147D97129831ED363FD7C3F81A5E0820CFEB5C447283E752F074C5CF939
88F35E6666218A765BB6904A6E697596691397E13BBF7119BB1D207A16166A54
2CC416267F6C285B9278BAC7941E955FD5AC9E1871FE400E5430A94FB4449102
6DBABF42E2DFA8B2C77FBFD18DF7791FDE94C9D23A2FD0B2B928446C470839A5
CCF71083F662FFC361589047DCDB4762CF2A35C087C468C23D4106BB11C23924
7B0F905271BA6B191994577A764BA4D5BED60EF4DED778E58EE1E1268D1337E2
44994E16E50ED105662A42D9FE70D0CF90EC811EC75232949AFF3D890FA77A32
B3150A898FB10C19C119FA1F6540A329958D59E0EC58F23741F0D426CAAA4678
40654538DD061E9B35A788D47811C3713B9D7483E05237023F37569A47E733B4
14E3544007C10A60BD344BB95F5F29232577FA8754CF820BE9322ED64CF4FDA3
E9C12E2788EB23ED634E32AE1010E37725B35CF79A34C26BC8F7496570C4ABC9
A21E1EA24491A1FD91978A9956F8D4BB3DBE4AB3C04306BABB61C72843444D86
99D7D79D448D6C6BE78BF3EEF4EDA7A57186AB6BCD6E12574F6E99D33B826D05
593EFE640B93114C3DBA85C750D9E1E62221A0F223D9B58857859F7A52E50D48
6064BADAC8597366B08484E90B4C83FC23A6F47634B9DEA168C7233AA9998B8E
63A6F7AA8A313EEB7A855D87DCB20F23F274AFD7862E23B97FD4C0317D4A0970
F6FABA7668D886B1CDA78DE7D9D2F0F8C3E6974D4E6A0DDDE8DD9B759A849C72
923A9B2644D459C00A5FA52E9FFD5CE9D9AF08C5734630D238B14FE5C739B63C
42C681EBE61DAD8036D3B60A595D0B6FC7C70F2CDE04F3E7FCF6FBF4D7956DD0
DF102F8C684AFD13F71858EA746635797B2DB9B4091F483138EBD9B9C54EB80A
B4BA7905DF7C4D38909754DB3E98B0815ED7197A2487369F2A4B1963ADAA3067
1890164074AF2CE3F9825FE1CE99312A7C9C3EAF1428567FA8ED74025BF3E5CC
ACA5D2D86EF7288312BA191E56BB61E030D18BE623FAB9AA5FE113ED9E0426EF
D09696741B7FECFB2543AF3539DB737AFCB2B7D9A271A5B837BC8CA91A8EF15B
F4174BF1B3293F23FC074DD6AD7E97759489F949354EB6073C2A92E40A57992B
376B2A09929DEBD7CE7C864F2E76DC317209F5705591B09C4B54888F4106A2D6
646D34C236294CCDB05CCF4EB5FC42241F7B57332DA3BDA6221A28A6A90E49E7
E59054C4B73485DE868D61E73FEAA3D2218B3D367E1562B293FD9E28E2F31051
46327379FC79DFD52F0C1223C373B8622F8A7D4A60E3E1D985A7EE841E0DE1DF
637E60834C4474C7A9CB5BD0EB5BBA14ED94D62FB57F6B8C89DA13DADEF0007F
954C4E4488018508EC46F5D6F0EE29E84C19058B037CB93BD853086DD8EE9D4F
B014129895FDFBBF89BC557CE7CB88FFEABDBCE3727E9E8AF603BAFE39B9F142
C226D5786EF0C1AE60538328A322425EA68F0712EC392CCC68C3D5728F7582F5
A3835B20FFC31F5C7F2C65235A8D1C044A5BD455B7A46DE1D35CCB8CCB6E8388
905377C89BF115A597DA70AE36468BDAA0B22B2C0A41C72FAC8DEA2E09A85C13
2823FC808CA8963EA3D8C3C0B188078A4CC6966A2184B576944AAAD12698588C
EAEA716D81A9523C84B0AD4136B883DEC3144D316ED4929B5729EAB5304D4640
33357BB0873D414A6DAD5A0C3374EDD63F0BC702769B7A2F15CEDFED3CB3354A
7432E7B28C6CCC607595B844B5053AEEEF7E89EF9C684019B86623A8A3086339
6A9D5E74A945AA818CFA7C59FDCBA699C197E94F243D430526376B740CE50BB6
265194989096C5BEAA2C4ED51C1AE2774D540AE1D84196776BE9A668A3651B7A
FBE750B0E249A9C1CC3BB6F32E01B8640E884CC97898D7D765511D73144852F1
0CD9689B142DB60C8C3E0B7EF84448517628D9D1AB811CCF8ED0620F88F3A5C8
5ED8487B967476CF2EDD4EF2C2B1300F33A0C79F60B4E1247E55C10068089657
68A58C8784591B8A6D70138269EA5D6F7CE28E9ADF7AAA8B38220DB86F3BAECE
8770D60E3CF0492CA153800EA4A154C5781BE1DF7EF95DDDEC750FBD0ECCE302
24B69C9C15689B5FB22F38D99D71274D1898074217578A5C9788AC299E3689E9
BD1302DFF2B7D16DC329F5A5385870764AEFF3E89E3E6404A5A07722B274F910
029C50CD045F595E0B0258A1F7F8083E72C8CD6C6C2A2CC0B768A600F02D08A5
8529DE05D4AB815CE2C25529621ACA732F401B45F379926B2D46329B99083073
306B927CB6CE504DF139791C648CAC0E21DCBB854D145823797362E81C419796
EB2FC3DBAAA97FB4DB53A4D775DC1F421F4F00070DC22C8295EFA4E2176B8601
2E2327F641E328B47CCA1EBAB9076D92BE3AA79F6D110650FD95E5D2ED062EB0
442C792093EE2C50D8CA8C9E3BB4F47F79601556639C09C9A6D13CBD811D04C2
0A181B67895E72ECF8E16BC34FED6FD436F7DEE89D6B1C25A8B1C12794355318
48D2B0FFA6AB012F5B3E6077A146A2FE32135AE103C1189C68C6CDC6473880EE
1E6B17A79A1A19CA290A06E492551EDE0ED2CF24530601B1DF0BF7EB644550BF
E6C266952558B30470F4213F7D1F30518E22285A882BC61BFA9C16489899F15A
78D18E07D489E76835646A5B1A28BFB652E744FC7DDBDDD51848166E5EE904F4
FAE69501400D910F5B1B5FC6788561FD873EE96761818D1EA574922E1CCD9E16
B5F605D2800F59977A17606F227395DD7780A1F5C515CCEDE4791DA5F1DEDC48
0F015FE32F8E6FC2BC00F3C615B5BA99BB72F847A79C2C91E4CC644AE1732625
2DFF2E4911081816F8FD2D332B29653CDD3AC20370F45691880458B0A2992BE5
4BA82CAB4C468C4566A2D80C517C0AB8AB3152E8A099DC6A9DD6A2331CA756D1
F88D52086640F43A5E93C05FB16FF4744AA5A5DB41DC25C03C4AE2881BF65AB9
9E0CFFC45323A0254A0304AC31D507454F90BA21DF0FCDBDD402CD512FC3A8E1
595EB27D2F937A4A6C576A5221197CC679A122ACB37FB87EE80DAF5FC8BE4873
B13AF65F7F39878F7E66177E982DA9F20B79BF112B3C78D6E08EEF593282B587
6FE6534E962DC1122F7FAC63EF7D3AC26176BB6441852BAF78CBD59CF43018F6
5B388E165669354EB897FEA188B05529FA818696B3557A38B4FAB8D389076EE9
D6DC96207291BCEF45E7C63842F796DCAA30B2AF802EBB48499DF304366102FD
CFB8205AE3E036A883E5DCB407BB99120962AB4546571EEBE062055619B2DC69
7414AE6E60C30344A13ECE2EB7A2684A3DA46728539F49CDC087C7EACEB47411
AD7FA1826C741ABCF8ACE5400A15578A286EF1556E4D9C7A218C4A2AE87D2B7D
A8CC0F2D3414C1A1B60B27F66604C599F79B1F14D6F82A790223BE9E95761570
3F7BBB923CAF77C2295963BBDB5B41B5590EF16BF3B6B0794E9904A9919938FF
1F5E2F7666BEA06F869BC63510824BB2BB57683EB31DA1F7DEC4407F124A5919
06C7C8A81FD36E66DA5A62EC21771FAAC789719A0D721625AA00CD19BBE903A1
EAD0FDDF86F01693B02F621F9F14100F51250385E68E116E818BF19EC9CB0333
99453DD500C1FC9617D840E88ED998DB6A1802D886B046B8623D158BA2DA811D
F9DACBC49611482E0FA75F2F6EC488DF50E08B784D77F2041AE72830B7840D7A
86D30796057164834B5C87000AF2182BFFB58FED5130A9FA21E97389907399C9
0819B33646ACEFBD2BD81BFC0B7C06738D88315C2949128DBA1D92AB96AC1E65
017513F6827A5D4C88D18E5D24D1F5F478B5FE33A18483C8AA2EB0C9863B53F7
3AC474C151070B1130490D4D7C4D64491A905D2EABDBC7D975EB1E82EEF7229B
FB7D4AD7DCCDB12F6F2D882043D938DC6FD9DBF0D6A1335D494278272122B6EB
88AED77DD127B94D30F2A1F647230CA884B0B977D58615A597258FEFDFE32F19
B9593ECC91599832BE9C634AE79D54EFBDFD179B3A36D1822C05E552382F2CE9
16E1F678F1F7468CA82671BB4D8306A8AC778787C3FDC8261F27DB0D19F0CAA6
060AF0FFF77942E45627519FC2FCCF57B9312847DDDF79378E0AE7814B84A1C9
C1E3061E4D5D30FBEFADD07AC945F187FC8ACD3B1C8B49D0D759C6DEE5919BD6
4957B69E54A19F93A35B18C0A71BC090ABEC7C49A5387A173EB298004118A0CF
BE9C74DC44BB54C9A91D7A1DB46C4BD317A25523C8D3B3C7DDDD15F962D66046
E772DD2D6AF481395E7D4A4AF756246D75F48187E4C53F12E497F77B5100FE82
831522DAB454854A8A83CAA6698B38C66C2C4A362F7DA676D86CDC4787C6F979
961E98B69EE74E7A7CB29E19377E9D9B6F3ADF0681C6A4FB0768E3588D36977D
BA9CA139F708F436CB355D5BFBC4F383765B1D4AF986E1D95BDA0D70024D9EA0
12F6D6B0DA7DA9CA3416768D2F924BDEE356C1CF675529DE6706A1538F0BFB9D
9B3F2EAC489821C05977994D17D236A62DCBE08BCD4792921CCF2F2E6EBE1540
D79BC2B9FF9DD351776A59166C37D6AA85A372751A906C3C916CA90FF17181ED
A9E22053454CC0AA82C63FC67FCFE62789EF0551591ED89DDDF8CEE0FD8A659A
0402E97859AF957D9268E34B5DED908C26D139224EB9C3371DB7C0D9266A591A
3A82F16EA91A0F7FF44394B136413404FE1FB573B3AF329128F865B660F5922F
BE26D44216205E1227D654909CFDFD0BE9D45C79C56AAEE6DD33078460C5EF91
4D96C83AF0B98C89CB89B61A2830D25D405E19DDAC90FC3901A536F8E161E6CB
20867CD4DE35CC3CB297A64B029C77A6D022829C8949C47B0C793816D0A1FF81
0BF41FE412033607AEB8692F94669BD8819DFCAC9B32F4F47C8A925066CC4862
D4C79DA51C95D2F9F92D2F529DD827F074DEBEDB5347F6EBF9FAF237473900EA
C14ECCC894687ED5C2EEA51FCD390F26D689C1B1E08F051BFDAF1F02538D2C68
B1BBDD61C56D99E9BD838F3227C2EB71BDD25F9618A73E853475659F9951533F
B5D49AD9FAD5477138632D10C44B2BACEF1C61E769BE3B6B276623F332DDB841
690D8EEB28883A474C0235D0D97725DF9FB7816C70D52660EE662CBF40EBB6C6
CEFDE9313C6CB762B50A5639C960BE4552F0A084792468E38D2EAC89834EDD18
5C06A4864A87D90033337428514188D07B7C2EDE151C45481CFF6F312B5E21FE
735D45F5E10D6B6990171B5A1EDEF60EC9EAD13278AFC5867B14EBFDAE3D5C58
05793EADF7580D27F2E904D3F5BF1CF9767EC57B64DE1AF1CAFB6BC02A10D506
C5D81682E4C7149DB60A8F81C988E36C9AE9102507FA1743B3AA9BD26CE72931
7E6718E02C03D632724DB303EADDE422D393C618055DB85F4A81019CCA476D06
85A75502DD3CF80E03069F232537AC3135CBA0A3FF9873713632891F720CADBF
374E1C376B91AAE738F969F68E7D96ED52762270F1AA9FB99045096C8917C73B
BAF2EB1BDAF064F6BFEC1D68445E640F2916DE2F46752C50A8E245CF4622D6F1
C18C3D0B2D2160F1561F6CE3E0B9D26C0891C47417CDC86B4CB9E5EA12052D6D
FD4967189F7563E0DC49C95749ABBFE35C9B90447EAAEFB2734045E85E8D3DD8
62876B9B8C812DB0BA5D84EEFFD930EEB18E401E62304F67DD3BB8CB8A023A36
3D4259D5524EBCF519ADE24DD6DC6DF0C566CFD5248D6BBCBEC7B44B910C123B
DB6204E0A3D271A0A60DBCDE27E0B03F2DAABE2FAC9A00CB787A04C11172637C
BE55AD2A44285BC716B2620BEC6951F1A22ACB3753EF7491E8EB627BF0BF8547
61BDEB65F64F00475A9B12C96D094A79887195B3131246F71287969F11A09550
97DA759100488608E372067308129B7E549D844DC0DF47AB01ADF90F108AF483
3D515D970690B647BD205EC89121D897EDF91BCDFC2B02CA0876A49DDAC2035C
46EDA1D5914445171E2AC8AD45C687B613006134D2896BD4EC118E50495CEDF2
8605305B7F5208F537F5079E4FD9D549CB1E949B1BA70C7433B5937DF9BD475E
EE5228A0D4C373E8280C60ABC41D1F219816C85F8D1AD705D7656C8F804C2384
1F2400608C5D3E249353A68647E79CFB41ACC7CEBB513076BCAC5216F3FBF8FE
58BBF9AE6B3C0D5CC4686A1DB0AC1FC866771055300AA35A3BDA38C381185989
58B6CCE89C9D7ACFE22A26D0152B226FCA7207173FC994A11BCDB0E91DCAB46B
7F82E801B4551AC390E8DD6CA11057509D69A6F5AAA58BE18DBA47669252A104
FB7FBC4E1CEEC0A68CDFC3083D11D5C658326D284E8047AC6E3F5E71A0685529
19062850A72D39C41C7C6D24DD618BDB16E3E7F5ABF6B3EDB3A31744F0786339
F35B53FB26CF38B1510679221BB1665F496CD9C70038EA7EA6E8CC81601E4BBE
73C42EA37A2179E609CCDD2076BAF808551ABDF0188DF373F1AC67149EE9751B
7C54AB1B1BD8EA2EACC1E4544EF2FB5968472C2F4B6EE93B36191DD21AF3AF6E
9945B1F15FBC4BCCF77A36E00AEEC4C09A6E67B8B96067EB73FEE1E4551696F4
47D3378DF18273947DEF6661A5D307EE7AD6772EEA19A396BDF557D9C2607055
2A93FF699AE8C11E183C000FA1F136301615A455504E4B6C5D4B6C192E13632C
F4BD0411E8ABA768ECB99BE3A3CF033456E96F724A033833EC1965DED041C6FD
62B58EB3CD9F13B969004B200D67356385BD504CDEED9EF44B24F9701ED8A6D6
0F61FBE2A84E641F78EC3462C5426D30663E7A8BAE4A94FC090D089C03B7A166
88D498D6A7909E909DF38A833DB5DBF28ED98704B03CD055DAE51FF551E4946A
B36CC11C49828EB6A3E4E547D12E35EB2153607B036AE873AC18669F2495735F
730BFF79B2159657D2061BF3648DCC032B61316A9B73F1F88245C7B9C4CD306B
A12371F50E3FDE4ACD5B1177984851599D0FC875C3357A2B9B54E9436A9433BF
45EABB15BBD7F4A65355FAE1E2969D38932D8253330179EC0B0AD50477945E19
5E2D51F497865599EF96C43B889E31FD0D8CCAF3D19BBD45DAE18ED3A67D1FE4
6EAB01A110004B700472C6C0764F7EAFB3A11521C519C00DFBA6CDDE1A48173C
0D0C5B8D7DF057A00EBB5BAB4E693D0CE8D30CE512B53F52A046E916C87A96CE
3DA0747FABCD25E419B4BDF67F50879F0DD2AE7CE0628B6B94648E47184D0547
A94008C1CAC9453E0B300C687E6F9E945F2BE2C8DA9BAC53287AFEF0A42F3C2F
CC5402254A6B8D4F95925C0801A12DAE59DE4F9B1E560F080355E638E5556CD0
FC9F5CD3665638872B99E31074AEFFFA9A280C8509514F830DF6768E339C2BE2
216730BB71CD621FE42D45CCCBD0B22AA4A6372071722D601FEF6F851E7C9449
7F685EDF9A0B9F20BA9159FC8F2167FF0A0B2ED637830E9D5D3E592A986CCD94
4B8BF4D86E140938620C3FB57116D9BAA1C979CF757DFFF0172E87DDA98B7AFF
D0E0742B0D033EC9704922FBF0654252FBE8D4CBB625BEB9D837A0630453D95F
F41194B9390243E4525B1F134FB5EF51823835EA3BED677CAFFB684D83B16880
1FCB115F92473C17D63B5741C2924B0C6CCF868D63F5E4CDE8E27D4E1BE7E957
E7914D4E85A72742571F288C2936C3C984D0D0C4AA3BCB59180BF24029C07392
149994C025777316B85CB16164625B2E54D31AB393613EF4B113736AE9AD8B2B
618FBEC4F699303E976F444E53B5F2D0BD18E55E7E054A0FD76F0ECC211A1EEB
FEDBF237F1D5CFDE3A5B0C2AB0246374BD27A5A19497A9145732BECED11F3C36
75C061734702E9933A27F7A5E14341B6E716A908712D920222C1756B5077FF59
A8B49C5F8AADD5CE72D4A001F199B26C84A32C5955EC7F4FBEA4A22B9D33D612
D1AC1B83C27BBCB88E2A3798E8640B933AE7D1A26483325EFC202E80C5468F46
28C56B1A7028014DF8B7E9AF303B603A85D1126684481631EABC7F2B310DF6A6
EA1A1841328BA9C2A94A8ABEC798325F5AAAB0F65525AA8D21433929432CB3B5
8701E0DCE337F5D6CD3221F97F9F80672092F20C08253D5F0C69F16C09A7D190
0B9CF0E764F5D69F30425A2B2D10ECEC7123EFCECFD9A9FB000209CEA5F42A33
7864D1C9D9EDA6ADE34E8039E0C28772587A2FD920F505E66DF13D1CF39DE65E
BAED1797F238B58F4984C40643FE9B0D633251CD4AEF8950CC3CBB213F3BB5EF
E000DDBE52994040BD029D5E0D32DB25DBB35D3BBADECBBCBE2CE489E0EB08AE
3404303B7D924E4B19218DE5689382F50309F0CEB2E48351278F681A27BE992C
895AAB79141D69DE0A85C3E0A38505DE6DD507B911A23CAE97B85B25D63D4F7A
0F15202E6AE71E2B262D3378786DBF010120C0BC469415576DE64CDDED3C7243
4FE5CA273D5D2C14614C9309D8621BA4F591E0FBC649CE51C30BAD6F2255EC75
BF08B876FECCC7C115F675353A77A69A9E48759B9E78ABBA5DB21738947B1BFD
02EC63742E53249F664F24009DBCE319D1E7E833900B826EDB7F9CE19813BCF8
6349F319226FD0152FC5FDA10DDC59B87BB2F4189C8B9D4964AC8DA3E92922C0
98DB1500744CB3DE517A50A6BA394DEB34711B37D30B2F83755FEF12C24C0675
F3C8EF65A98F79DE89201EC06457C72FC46210B526A829246C06622A96A9BD3F
845853EC8CA13F760EC5CF73FA034DEF517EAE8D5E9ADC98F9CE6969233B7C3B
4550222270269B60D59467CED9870EF8E7492E5CD62290CDF19138AB9D8F4978
23811B41C86EBF0F31551C42B5D4DD971EA7163C23A63B34076995A81678FF39
6BF424A17375F1E41DF2CDF6696A1544C8FD2D62F6D5E7C1B8C2FD89025D3B2F
76E7F30FBC665128ACB59858EE30F45C36C94C24640FAAADB57B0377E27AB9AB
836CD3470249827DDCB279878537477886032BA7D2EAB77DE8C4B59367BB34EE
1F9B80816B9C9D9734894DB4E4A44ECFC77FEED52048FF02A5971C8ED4104C7D
BA38A30E0E0B7D95B80AD790BE3665D9B681C3747A808A7F034AA60B4B038780
F1E1DCCB76F0137834E9EE82F7D81F40805C18574347496AD7463F945F9FDEEE
41BA41CAF32BEDEECCD21E57F627B7411EF5DECB36DF8783D4EAC3CAC49AB6E9
FA1FF6869C6E9BE78BD34F2A0579464FC77F35A62D8F965C9825B6C2E2BD1746
09920D3179FF71BE78A6CF1BE072399A07D26DA7C2D7AD0A931CDDD5204FD743
FA97D9F7778E27946A7F03E351302B2120797CF9E565E77ACFBEDF4F60B1B582
B011CE6D6A4EAF0B3B1858123BDF50B5D951C071B42F0581B4108026E8CA70E5
1826EC6D8AB1B1A090A05EEFC24EB8500E4A200692D0B3191128C235C58E0ADB
0DE50224DE8055442394F1856EC680866543427DE81B81DFA158675A599BC54B
808B46862A2FF9AFF004F107763EDEB1E7705CB8B46BFC66B1AE2A896FCA6082
B700C307E44E0CE31D336509BDE5D37C49DE7726528BA1FE04E93BC4B2F18888
5D011E16B560391047113A24056F9906DD9EBE1A99324941436AC8DDB207BEB4
F60D44C46D4F2560367E8B4DE7A2F75EEB7339415698D83F35A4F0FBD6A13F44
76120277BA8878E57300682F6A4563D5E885A17EF4A1AF9EC5836DD7A5AD7631
E49F41EEE6AFF4C67F6E813BFFFF0722A718EA7E75C1B9C75F5E352AF61F484D
FE53C9BA4BDD69960A8B0DE3EB5FD0CF80F4A3D9146A1F89BAB48050F531B169
39C7B42DCE23B6EAE8D8E93226C648515B76B6588BF013F0BF01961F9A3A071F
C5E9C301966B204945DB598C7B48BA1FB6F5966DA20993ECA42E3C53912BF63B
23C5AAAE60F58A3FA11E22DF06A045455E3CBBEAFC0EB233BA695E2D079DF717
58F8B37B5B50B54CC4EDD1EDF709EF851842456774AB53FA7A2B95CFECE10EB2
53B22C5C2876220B3188DA55AAAC3F10E855D018867DEFD7D93679E586180104
05D0B179D30D619E99AEEC6241812337B0405D4FE8B2783A7F4B3E2F3A471063
31B78797C898CC59F180AC5B51B30DDEF2096BB51344E9DC06D00B9C22B6B24D
5460586B65122A73CFE440760AE1D2F57CD4031D48EDC794CE58630FDBE48F24
810F23CC8E59D3ECAAAB242A0DEBB8BAFBE39FF2447C63A1BEF7638694B664D4
1C2CE802AAB7A77AE0338FAE472C5E66AB8A46C5D8589E1D4EB994188C2AA72A
96218DB08EE902A97840F4707985C8489DACDE234C322A9C00EB6667E710C73D
8CB4B2E30A8A91CEC1B37B512AF21ACF690AFF1115E60B40873941A2102F3E51
7BEB24BB99E63A25C4E79EC90A238184FACCBB331EB77D0B71036606B08B97DD
2F8CAC8E483D15AC178AFCAB2434E8D6FD4FD7F39B5293A4E7CCE94B6BB2CBE7
6E1D1C37725153F1E23144A337AFDA9DD75284C3C29A11193A8F06B9AFAEA8BB
DA975C35DFC815075D3621B351A4C08B8CF26BDEF0F526A72F1E488CE11D8825
994B80C3E78C2CE94CDA77825DE1B8E871C8B8061836043ECE308EC12FCE885B
DD582365B93808E4645C80CDBCBF3DDB0645CEFBE067637CAAC2917EA3A228F9
05DD4855787E5EA278EF56EBD613BE17CCE35542D8ABB17EE111C51864901958
EC856A0A294E2111AB7B3CBB16033C46E14BB7D3D0AE481B24250C855426A235
88FD448E8F9E7FCB2857E7D0497E51DC61D1246CDC24F855B065CAD48BF33B74
7BE25412D837FA5EC673BCEB84B91782AE9DC7413B0BDD7DFD3ABF4209EF03C6
AE73F9B1AD1E70AC2527AB1831FC033E989A5271C7360ED7B27D2409D4EFC4C8
3737BE98B81BA1DC5176B709B58FFFA1F51FC5B6F83C60AA7D5E0D42695BA917
6037B1A7F3FC007657FD0CC6E2A7A28E7FC65E7A37ACD430623A9A0D721634FD
5751278AB770D7144E48FD05A1B18F203DBD35F5395D2C186C30A6D9821EB776
266593680FEA2EA661F4BD1E20F293CE2FFE27BDA98596A820375C82B402DE8E
8535F91974B791FB4680C6B75D6C70F95C421EE1E5751BF4549EAA22856EDFF3
EDD24154E88F5346C392FB69596EDB27C458A7133670760D440E873DFB80C42D
C7FFC648DC8EB859B4A56063F9091D84D90D61F87582DE9FB278418E16173116
7AC819EA613A441F3CCEAD2D5468E3BE7D0D570DE8BB9AC125A572B3604ABE78
5E71351599E7B526147342DE8002676C0D2CD842475F22BFF6C56E67341B7BC0
B1882822A1E9FAB9F804767C3C30E4BD3A375694260DCFE9F1A36FE5CD33F218
611E65E0664DDD6CCAD2406B336E5526C23726F8D64B1F47A83BACFD7BD3A2AB
2EAAC8ACFFA64EA07299A2634F0369457D80F379B9F36F1A9535337ED2CD0C3E
9A2F43F4A26E5132928EF2131DDF9BE569FF8C5FF59B15B83D871019BC19AEF0
2D620D82017488BBA0F0BAA79596B557540DAD5EDC826326CAD87D6E3E5D8F69
1503935260598027A445BCFC64F6A777619E9B04E01B214AF9724D773C32DD80
ED63EDE13B99FC8C8E6558DB75437B6434A239F9835388CE64B85C9503E9E751
004859B1F203A6EC520824B6B2FB7A3DD8B6F7E6D2F906ABBF31B6BD29ED115F
21BDCF7D22A557558AB81163B21D96B448FA34353DC8B5346C7E4EE4BC61B063
884C2D37024C90A8B42669110FB795C84DA09CE211850CF747D6D1C26FFD8161
F49B844907AD16BD668DA813930CDA6F6691FF2D9F9AF877B1140A31C90EAD19
1EAFE7D61DBBF417BEA177490478D26DDCF3FEB75F3C98CECD7697EE1F2543E6
E612A1C8E9ABF0422449028AE4C6CAB819E4F29DD6E13438723B62AAA41107BA
FED3A2F4E53E03786B70D73F8BB5F8D28EEE485C06BBD7B9C356E6FB02FC9799
988699B4652A2D1F3BCA0BF8D6930F4C103EEB83F3754D7795366C496A0EC4D8
9457F63C3B4CC0B678D27358AA932BB25BA96E5EAE0B8F03FE9E234F1D3D3D11
88B9627C475E3A5E5413127C98F154C2DBD880919EEB32C1DF8CC7505DF8E850
9720445F21B3F4A7A96463672C7B952562E7AA97B34A8CD8739D2D32ED92C863
11EB8D9F8D988CA4EE5AD581406482C540471FCBBE7FA0CE0498BE04CB3375BC
B8B5128B6CDB496C35EA06E0916E5DE37704E68E117CE5DD155B3F2940FE7306
D74C541F7DC5B26973918CBF484202649ABA3AED4D34DA20A2124C996F1CD4E4
3AA743927717E62DDE9EF229128264B697C6786DCC15998C0DB2AEF98C2D513B
5485A15E787D4CFBB2ABD1A9C53670FD514C08D6A51A74D558C45246A28C98AB
3F1773E2F8A0B7C21D24EFAF9E1C031347E41F00C14CB2422D304EA2261E31DA
BD77C22D6B3F830B5FB83882F3B9213A91B90E6BBF01B443956945D45C4130DE
8BAD4D81B822C6F209DB829110224B93FCE82DBD26109005D7DAACE4CA2EA3F8
269159B5CECE430035D86FC2C03766E15C841F60AEA9C0CF4FE73ECAA7EE1389
F080C5D93D045858CB710681156D0A37BA6FC56062DBD025ADC503D7F63668E1
5C88E03484FEDD579C4CDA4245476BA4B87CD5AE6F8E10DEA5F50720E2C6CE9E
D2446FA6D8444EFBE4931F0AF9234C76C46F1FA393E9CAF38B0389A81A855EE1
8851AF9A9B3E32DA8B008D8B598CAC3529E87AAD0B756CE3CB520853EE6D566C
D01B8E4C25393223105AC6E250A36C7470D0D294FD45B04243018FDE483C7BD5
2D4A2AEC52D592F1776CCD3CA7B66C56CAFC29104279AF842AC20AD6291EC4CE
A260264EFA5CB3E59542C68BA19E3A2D4766B445AE58B194CB4F059AEB069F1D
B75552FACE542F292B4E55007727C336B0D5C5C3B48F9E3141D12ABE42D14D3E
F311760D16C79AF506485D69A784A6C61EAF2D1EFFF4CF94A4887CFF8094546C
400F7BC3F3C9F44C829B430E8AF97F4C8D1DD91333674C2059A876734A3248C9
E40EA48283932358BF97740F13C4F1EEF5C380B642654801646F7DC6DFEBAF8D
2F7C37CDAC233924ED730C855E6EDCF9357AE114D63BFFD9FE8635F824C84E26
A92FC579BAAF13645D43BC5564D5506BF7DC5540408695CF81D989FEA0D1CDAB
28A86C821EC863BBDB95ED9BFD3B1D5066E90C8CB617A94428AE12693E38CFEC
30CADA224D44D8D198A65B73ACACEB136CB2B62A2D0B301C2D1D70FDFAB0D292
79097D6A7EE2CFBD8CDC95C52ED86D6C23DF0C94DD730DF6DFCA88E0AE8AA18B
359C2134887237A0D85D1B9C52ED2EB0519CB6A4B94CD562324FB3AE55D0A57B
BA6FCA75F073BC261C5515A77150A523A2F9B0DF33C3D736425B7328FC538E08
DAE2D8156ED99C7506FE1EBB84C90AF8E5F0A624FB2800E5493EB8118DC51A59
0B78B78F18504FF4A143917BCF45B30151E4B7E4264A13066362955BBA456F46
31B32A183883C2FA37B29A0B17CDAEA75B84B744BE185AE0290962F91BB23AE7
550EC2A6FF04B2D6E5BE091FCBC44DEC0ECB91B0E6E06750BA554C46D2F7CD9C
60339DF6ABA573D361B7B23C22C2C6E1C063A1136902447DF3A6892063D17C25
B72C5AC903371B5CA83F8B39AC0F0433A5A20D10D24A285EDF07697C9D37756F
4B0C98C8D07B839D10FDC39671A107D89CF63BE6FBA76DF8DE1904CC685A035F
E9F6BAF9814A33B170FE97C9073E4CEEDDAA0962372EFB8F87E8F2997ACE7ACA
921F96936FF4FEF80DB90ED274C6E4760DB96C41027F20B9DDBF43FA565CA889
B866BCB7812FB057273888BC45882DE060A0F8B6E3DF234BE22134468F1FDFB4
C1B73826079F87448D6729E245B09251817E9CBCBFACE56938CBE56815FEE3F5
A0623D8EA899C8D650B181A16C36ECCA1E5F27C4A61B15E0F2A384FACAF030F8
D708E36D7F78D8E010071B832304D2AE4410FF0A52456F03DA1B61AC858AFF9B
24130987C30541909B22C7EA6768A0A3F8A1E6F341F885E16E5792DB24DC19F8
C5EF81B0B64153BC5543059891A6DB12B7E3C764ACB06D71D7EE1AA1FF0A3CD5
B23229CF046654482C5619B458B801D1595D2B82D05510081C60EFCE9E6EEF87
521F37927475D471123E9B6016F93145EFC151DC99F49B81C6F569A4DDC6B7AD
573CDB02274211F9F666AAFA9E62E17B5FA52E7311466F78BFFE55BF5806CFDA
6BA6C07BCB24F3875403E65E35F3F842CEF6162DE07567DE2AD82ED8E4B1F695
C6A6326F7D150B1AB6D30456246E45DBDD95C563EFD94EED96EFC138007832B8
A117986D77AD4A54B605BC6872E6044408DC79E88536F988BC7A692B1886C12C
23BB63C97FA3C1FFC5D561ADD83A073580C72838CC7A997E330AAAD5CC1381D8
EAA6FEA123A595A731345A2DD6C933362786ED8938C8E977617B40B6BB891DD4
EF882E2F555A3BA35B7C2A5FFBBA6C849DC50A9BEFD518C4FBED01533EE74321
C2C87293BEF2F1B39CEB679DCB0D6133CBC1F6B73EC3D7D8D0FF4ADF7E61D60D
3E53A896F4175308B456CDA5FB5987D33F728A2FA8EA94FA8C4DE5549CEE4D2B
0FA85B5F8FB31BAFF868C08CE3A9EA7005F805678369738DF1623454C4A9A4B5
C79C33AFA8216777230D79DCBC93948FB333384E3A487A393C111E82279DC13C
B1CE9D631257173305474D70D4DA8C5C21737A9D024213FE7BACBB74042599D1
6F02433B9DD263EB4CF5D5E312B211FDD63024D03ABDD43B0AA3E53539DE17CD
76EA77774C854C8399DD9108C642A9D49789B48804BCC0993ABD98580439B14D
B926BDDE770CF7012DAFFE5F316633B7AAFADA2E16AED867443D6B5CEA0E3B85
75996960F377F8AE88D8A0D096C0D5EA0A0DB1F431699D58E78A928CCD2FE97C
72B53E3588640E074D3415B6ED2AC5AA958F984EA3C732410D69011C65510D0C
FC3899112022B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8E3B73CD51770C28070FC7CE19270F71F6DC653B75064E2B26
689E007EF544F07060235145CD241843E18E2BE093228678586D274EC67FA6EC
A20C4F32E8C8FA66E8D4367454CA97DEC6FE4167AEA86695173D98B7F045A8E4
75159D341F0602E2CD7E80F2615580BF3F88571D558A48AA484A4DC0DF2987C7
14D11F6F8431D4F954DC327898AFDDA452041D8C1A0AF1FBEB07EAFEE4951735
7EEA58BA230869D5263C8514B7F2D3C52E56F379BEB0058C7135F2D3BCBBF763
F875D2F89511044FFCED24209ABB944E953CF1953E0251EE138C0213688E67AB
213E4B4E24654BEDBD69792383CD8DD40A2914B23518324D1FC4B15473101138
882D4CCFE9D57A1FBD19924662D16D4509F94D0FE8BBB7B66E0005BF53F5DCA4
6EDA28BF0C2AB7113EB95FB5054CA86D03051D77FBAF0B49785B14BFEF5DDFF4
007FFF20157DBAAF8174A0FE7F386C4F33708CCBE758EF138FE0E4EFDBAA3C4F
91B7040D2C6262FD83F97EF594C4322E4F59804FEFF5EC1D23A7B68F274A84D2
F111259E9A27B3F38D7808F2392FF8F648A3A9E33F38E7EE49622BDACBFD37B1
CDAD7F9E2C4532288924E4F3BEB8934F1F62426795D650358D824AA92CA51FF3
C576A8626A3427D68C47740F38365E301EC634402D13A5DEB1DA3B57B250158B
E8238E582C612B0423EEDD237344E592F6AB9EE34E53111AC744F0E723E66C92
DD90ACAC6479CB01764B11601067389C419BCC6182DF2FFD6AFCEECDB3BCB6BB
17F372442DC0F9CA5A45BF25ED832CECD8596886CFE09C62F127A9EF99E12B9C
C3D2B42872ABC63AC7F5EDC98490EDCDFEC95EC0038A29A03B1809BBCBDE7C7F
54ED02FD02BD6DD64935A0B20D18F8522B9D5C22AE570DBC57F4285724DC2BCD
742C9EAAB98E04C2FF037109DAEB96BB82026DC6A0B1CBD85A934BE5E6D78555
0D059F0D65DA715840140E8AD6E8370F3F71E5D73D1A645D070C8287C9C3FA8B
3495B9149CBADE7A7120EE6BB9603DA8259E113CE117EBAED663B22BCBFA9F33
BA11A75AF56618F4BA40C3145E0EE9838EAF1DFA80F0ED6FF1D4D7BAD2A0373B
DE414E415AA3C296F178B2AA5C30DE32088C49796AE786D5616DAE9A7F637AEF
F7A0373883394BA9DB899C7954CA39A466ADA1F147BEF1599A38B3E3913CBD0D
3D9368CED51C595D5C9C3E484CCE6E453733E97B7521A66CEEB26113DF32E5FF
E3C5B6A3B551A327C070925E3423F9BC866B5D6DBF430CA68E91B63E7BB88AED
BFB4B8853524C7CFD903DF37C25F5BC9DC0B32CBF3400DB1C8C3CF741664C6A4
744CE9FB1318844E3FB452F92DE7C6E4A5183AD800D91AA88BA761AC9A551DE5
D4DBB26C9D816102A3A6EAD983F6306EA20848A8E5E5E1D3187B1C219D1EFD68
EACDC102C010DCD2B820065E230905B36D2D069B0D126DC8C4126287BD22CC9C
10590C070A891928EF66527B59F013C89DAA11EFE1A57A0DC9F929A4FAF3A9A8
A4132F4D5741067D5B7274DB5D243FA4C520A7470B5B2BFD8EDF8D32DCFB75BD
BA9B91EA20BA656101700F2F9B7B8629B5E460834075ED64214EBB465499647A
9566051429933450F955E8915D13DB3966E83311914CD4D95BD3EE60BBEDDF22
2D90ED9FCFD3885F59B4395881CCBAFB1E93DD4119F0499484979543801C3F31
B8261270415B7673450759F8CFC38D6D6DE431823065E9EFB31F42934D9758FA
671859A001E4A60ACD1658564E43148083933342FFE48AD59C71961E626FA273
E3E52111915BDD95358919017F8EDC6CA9E2581F3BF0F5E57AA7490C080387BF
5F0F768ECD6F5477F1AEC19008E157FCDC9D4B8F1C75B4349887DC8A4A457D0A
A2BCC638BCB6E0A12CF4B24818A8938074EFF956CD7CDB878A409271EBC504A6
3A541D561288ECEE4BD8B0A29D7A199F37972816C174244539102E86347B10F8
0DFD461641C4F8F85671A7CBD30EE4EE2D1479C7B82C0ACF26F07FC13E8A8DE9
25CB490D5C07F168426A80EB40657D6431428A00834DF8ADB373A587DC9F82B6
BE0D8FFCF9B0B5C07B5F3EAA250887911E513EDC98CC7AE7763253B37B08E03D
B658D357882192F01A8D7E8FF4078ACFE00FACF6DC245D1D878FF064922470DC
D0C3AE6CE7BC006C2533CC6FE176FAAA3DD7D34F653412487090D88DF40E7C97
8622EFF8EC29605C6BA1A48A68B615DACDF1C68CE6F3A4FB356F6E36556CD068
DE313F1CD83CD8F941A2590E03884E53D81480DB186367B1F919BDEA41F32B1C
74A085DA4489DF9CBEE9EEC6BE1B24F2512648D6A2205CC5FED2141242589D0D
D884C2BE66ACD207123A5B05FC99A106F63E9DA3A6650FFF6D89CDB5AC5FEED5
FB5B629CAD8E55024306473F2D3D644840865AE2A6E40D31BAEBDBA379794E05
28CB5C3D8F5FD37B1D6570EC6078E5AAABCDB617F5B4C4EFE8A891B2A32BB647
7A053346473B972E2A992D46B8FCA50DF47189C1D1836F6062C4B06E5DDA2EA7
9D2C8F5786BC98772CD7C7A5EE8C24ABEE6D519A8E6E704DDE38783E9CB13DAB
EA2F05500B01C729DB9E22F46D55A3E56C4B5AB9C16C33B4D59EA56152914D7C
026DE9307561A0C0018E3808F4E26D4D3C67A1F5D63DEF4707F6B108352E4CA8
6C82B816434577E380E69972F10B1349498807F69FAF43A27D8C11967BC9B15B
0525D2D4AEC86E455DCC42F2AF2286420A35324AFA8E7B0E0BB2E1B88E88D2DA
C7CE9E40D87D54CFD05032D2F2515BF643E7BFE3B71B65667AD762ABFAFDD1A1
FB70289065BE54D658AB4AF27B1BE91A47A14141AEB0529786604BA6E1663FD0
2D1E1D46812D934D815A01C451E5BA0754F9E37940CDFD2C8EBB44B6BDCB3B2A
1739C239BBEDCEB1B55022BA9D407FE21B35001140D0CA9E8622D9A36E82BCB1
0E5E636FBB0AD7B96F62D4161A098747549D3DD9776FCEE183087C2DB81B7A1E
728F3905B76DAD70F1143917E91959C5DE98024607FE4DD7548E5F2EA19B8C27
2B58D057C0661FB2F4BF6A86E0D8BBD4FE7CC6AC4B334622545962DDAB159A06
B09A251841BE9D41C128CE27D9AF179FD6BB674F58532D02C583DC2539BF7547
79796CFFF55D089D0A6247F88ED28E279DC6706F601CD2C11C8B774C4091DBA2
904B25E8EAC56ADB58FB2A1C147FB5FC15F094DEAC86982D6D56EC5DA362135A
C89B41DBCF208A74C69A1E658B3F99BDF99BA0ECC9337359272C890E9C13FAA1
848B62AA3B778C47E865F44580845F0DD9A811D9E2C62A9EA1A66E87168E8D7B
D54BE09086250D11F9EC1D23A70E84115929BB3ADF55F4C8A7A3B03D39C6F140
9A68B0DDB25BD184CF1B2004F31E053578F5C7C8FD5D1DBA0CB230AB26BB9748
5FEE2F14620BBE80698742805F13CF0EB242BE5459B26B502AA328E27882CFED
250933CAFBC2CBF5655F2B2974614C22AE51FF8FA189AFC62E89408365411677
3DE95BFBC0124A2956AD3F3494CB99CB20AD491DC499382F39EF58EDE15A5D5B
F2A7957D95FF33E1FB1F743CA203C202BB1AFA48CCE76467E3A1F8E7641E5BC0
6A27C3FBDC20BB4EF817C88E478F892B2B9B06090CCF837588C558B98D42D40B
D7C35EBF67DBCCF0EA81487131205EE09F8B0CEB46F04E8ABC5F7FB2C6F34650
E52C0C600B58D71DAAAD8279BBC4FCE125421E29DFDDD80CC7F8123778603DCB
E9F9B6E914E42C9E9B2D3468A5776A59359BCC3D11A56D1CB965E650C23CB51E
E7336C579089EC0EE0544D5492C30DA85E70A009B4C2F95848CD54EF4DB6E969
8459E3407BAEADEE68B49B070353B67F7E1BACB2D43FB16DE56F6D3C578E8190
D2EA86B92407F0C9C39205BD0A604784CDC350CC3A6E138EC12FC09C5B497B45
B3EAA86B6EC144DE2F30D5A94CDF8FE8E5068ED5F42F21B44220443B8459EC39
A18F0B9E6AE763300876BB0701ECA6AE8458D102CBB58E23D5D361946012C986
D148F993B882B6156C608DCD568AF4BC573BFB381C8E39CC410AB3F3A2FE3EBF
5A95F45DCA76AFDBB19363E38FF1E99D5CDF7F3CAE508BE676D7BC71D6690915
13AF7100C965DD334233FBDF4A91E1DF811157B2CC32EACE14F17F4C2B0AD42E
819B26D8CD24D06745B8E7BE98428D5D83FEF34D36A0B1C787968918000FCCF6
36C70DEF6119A83286B1414924DB2147BF601E53D012DA2D13F4BA599113E737
818EAEBC41CCFCACF36F5ADE6E0E23B87C7608706A6529E8EC4075D24EB05A3E
95CFE230D222F327698E5C34170C5016A02608BAE3AAEC9294088C69430FC451
1EEC057B1883DCFC3B57802E694B74DB63C35C720BBACB1FE9185625173120E3
049E16BD72DC3FE967F5AAD576D161A36D88418C32671862B4CCEC149E2D66E1
8FE9E8ACEDDB345D50C1FBDB908C6129843D9525C9D6DCE02BC7B485FE9BA70A
D17970EC07C71449961E189C155E3D6F7722DA07278DA546A46C9766FC859031
D03FCB1124537C670FDC930ACBDFC6F6A621710F2457EA58E510BA998726FCFA
82AC807219AAC31E636E4123196031706E54611998B4C2F4E9BC549F55C8786E
979497CF2A01EA6D07BC9BBA52CD0C0C3FD897A056DD3F3F525D90A5A8231299
06078FC6BF141904FFBE4201AD746244094D1FA85361B45CDE1D4B8C21EE8D75
72AA6ABD7226EEF6C10AAC0B6332C87EA6AEC35277B5208AF533359B651D485B
91FBEBF34D9B376058929DFFD724F3FD42DE8E35B863CCA0C5CCA065627FA697
E110BC161869BE48305E5A589B2C8B9E40364FF72B116D0C60F55FE74E649612
A259EDE07608DB27879AF2191177381E04E1FBCBE200417B181955817009D661
81D66C6FE793DD7D964C3DF0991000959B5424312755C485C8FBCC63BCFDE214
64AAAECBFCE6C970F7D4EA4DB170DA0C55A9A68DD4F6D2FA78D3943AF05A6D7B
48BE079A91D02F4014E43F158907AD7827E12CCBFE3106681D124DE7E6A11E18
4BCC3D5CAEAFCD6AC05280B304EE0B1474CAFCE9EEF6816DFB021FDCB1048D62
9EE1B60C0D79EB3099D1722EBE15DCE50EAFB9333E261C0983B448D1BFDD0452
3410AEEDEC11B2330ABB87EA87FF6E818582C7B7756E79D79941A1871225865C
B5187331B37D7CFFAE7F701505D88426FB22EA878781BF9C9617CB7F0EFA5EFC
9CB5BCA356F21F711BEDCDC17BBF1B9D01562B9E7CA098E705AB881B94F00754
B156921AACA00DD054186D179B79EF66300B3FA6ACA1EECAE6A611DF18242FC2
CA292BEEF24F8864153E392FB6E0337996AC6B9B938EC8C04E68D15FD001D2CF
BA62ABF2C51EF5DCA5413350CC4676868409BC16E1AB71D7CE2D2152916819AD
247B1EC6571E5D275CEA5B78ED389255A5A2A30CA961F9098B70D161806B0A5F
7A74B6B2A2B8DCE9BBB459F8E6BC0A3D6A13BABB9017E6E09CAF95BF03043F0C
44375E9508D2B15A36C9B6C1511B1840EE4E042019BC85159520ADF4EBAB7377
6E794ABC15341E3DE6320592ADCBD738462F1374341661FE5E7217D08BFC799B
4807519B03B9141BBF4788FA4347398B83E5DBBE935702F8A3916E8A5F1EC101
661715504CD7550F2B4552D66D524D819B8AB909430F2163430E43AE8D2F29C4
A4A908674C65A36614A6834E2D5577F11BF2CC7B27D9618E04903146B824685D
4C410EAECF9B5F4D3973F49E0247AE255057A4BD4A3192B4E3A17AC29851F59C
63C60EA0CC31163198573931E8D15A24B88D636ADC7898439B0FB7E858AFB846
7C9AAE53B9B10CCAB4AFFB315994BD493853D06AC1AB355298E6C9197D8B120E
48C9B1A9ACC5F02B80D266E0B6F6EBD949554EB95268A192EE2639DF9418D511
C7F09BA2F1D793153E99C4B4CBF49BD6526B9DFABD33E60CFB779E890C18E8E4
AA792DD7293D1D39EFCD01444AB21BC49F3A52C4EDA1B9486474679F6D85A2B5
72BB92C660D71DAA0ED01551E3C42A87CFE9D89B03EB5B5BFAE7E0A6FDC0D15A
5BF38487881D75740CE1D32374D4E8D13DC653D59267268C58072240243A8B9F
9A40A1BCAF708E326D0739FB3102DB7A3B7CCEF513303B7BC3413F1F3A732DEA
C61B7606A35E820CFB03C03D09DEC7E8D9D51D818A72B233D05F45F71EC4E537
800DB5F384536C407852B34404BF8A0331E71C42D117F1A032767CA766CCBA26
14614373B33538257144666E8F636B5F41BBA9E044FF36163C87278B1F390A70
29F2E85043560FF3DF08B8792776E731213A8DF6AA7F38C9295BCA4C410919E3
1DB52063C196D641F1BED0EEA22F43C572870818DD31C081D50673E4D3941A29
4E444C1F097F6AC84C709CD5C31DFF072ED33B5F679F1FFEBC01C83C88179956
E369C7A979A7539554FAE697EA13C451BA05137300C8FCF5CC297D475195AD56
DBF5B92ED7D1F92EA5BB00F823CB8DF99C8B3D2C4BCF76960999097402C34791
4FE46E36325FDA0A131519F91EBF1E9423F5F6174EAA8D74C8FCA71BE3B2CE53
7280F5181F4C9507C707CDA4D3A512D1728E764DC8C14524E0A6B1EF4E84DD02
C7305162AE27504D4E812C8BB59EC52F354A9D2A562393083C78DB1ED616D11F
D33021610CA7D89ED2FC575D4243F644E6A6AF7AD28E2DD514095FE448725088
FCD300705888330E9F8341A6CD4357F104175B7CB28B1F7F8B448F69E3EEB5FB
FE59DC5377EDDC74C29F3EDB395466F928EAC244CAD6FA6992874D5BC7017EF7
1466AAFB1FA191072835A8689F003057C9DCEF9433DE426FBD7E9188375532CD
D63309002320E5929150B9AB5D97C8119F179DF8A2B723DBA60F515A418A2111
207C0B353DDB0209BF0DB781E21EC93BE5AEBF1BCD1B85D574CDEF40415A78FE
A0210EB2DEBE83D84AF8FF130B2952FA8609D2E3094FE07A5E82048ABD8CF192
33A306B38AE4570DA79C44BC628A530A9B935BDB72BAB7207DD30CE68093A16D
003EDBF77CD7727B9AEFDEF81DFA162A4DDAF92FF7215D12D739FDCF4B33E19D
1E288566E4BD1822253A667DE839E9091AEA00120B32EA5C7722C627AA8993EE
CE250FADC1714E8DFB3328094ABCCC208FB72C88315C4681A857054E4FCD9CC9
382AC7060C84E78A74899205681E7D2A92BB9CD1DE94CCCBB0CDA58D8C8C9B21
4EDFA4F756E3B44D61FD5F751098B89DA0F7158B8AFACE98F4B47ACE43BFD78E
BCEE63C425B1C65052FE1580954C3A90EEC264D4B737D0DB9A5EF31F3CC23772
4FEBF7BB068C9ACFD63A69F6F9AA123E4F09F57F1AA1FB010E66C05404864109
7090DDB8AB3B033545D0EBF9610EF61B3062DB1D363EB5DBCC1BFB7728A6BAA0
C2C32ADEA2AFD543DE0CAC3989BCBC157DE02912D665804AD9F47FD5E2593C8E
6A44DA2D6B747ECCF2A8FC84BF3FBCCA103933CBFCD354C630DA9FD058C5E403
565C0D960CA9A137EC370C4E80AB606A062A695D13553F3C55B11C3D4F57186F
32D75E105B5FA5BD6D0F4E85E9E583B53B8CE9C27B5342D62B683B2190989A83
18BEE0BA1B7FB6B77D1AC46A14CD1D055BF72CF51EC946A99E127AB8487502CD
F96CDB053BA48C51380CB777DA71744022A2E3B359ED85788161F5A838769B4E
FBF706C49533FF49D55D5EF8C7A811A381C48137D8788D578225654F51774AF8
50F4A1F9E81D72103A263673ED766EE66836FC6F89B980FBEFD55D2BA4FCBBAE
CCA6B1F7776ECF094A6E42CCDD294181F65899D3C6BF1395DDB55A14B4D75BCB
668AA813F81DE93C491A4BB88FF5B9B1D1BC2B47072D50A10F3821B540558DD1
03D8C07452C70CD51CA3060C2895EF326C5F4DC7885ED131B328F89D608AFE9F
42F4481F2DD840F84B00DA8328482A0B2B65C9DF3D258183274FA4B42AB1C0D4
999121778E5CB154AF85489E1FA9D96C65DCD60CB7B2344A6C8B2AF04B731C25
9E4B1010AC07FED1652493DAD2AE1AB6212C74A05CEA57E1842901EB414DFD0E
C08C9B5468DA3FCFFE5FA60F8F48E252DF4C9BC1D95C4C925CB64D6671DD8D96
1936D93A6977D6C20414EFF6CDBDEFE684B4D975154FABDB5B30178640667294
2B6EF59E65604BD7B9B68BE31E79030C2AF1E0370217E29D387276007C6A71C1
9464ECE521636D7FA9A4C21B389F426B87A28CC29EA2415EADF5DE6E55E7549F
70E49BD691C31551BF04A7373F882021F87558C1A61E85F8674D52F1A49810D6
68D7703F042CE2A9FAD827D8977B68BBEFB4BCF67F2B295D688820485FF6F9FE
072FAFF465FCE0506063D2D22007153B6FDEE53E25AE2C844CABB7BED4BB49A9
D0A5FE856DA95E6CA529AABA2DC5499F0469AE84AE95BAB044FECB472DE34A12
2055DBC4CB01598A87443AE41BFC18242EEBA697BEA0A9483EE8EAD95500294E
2DA6B6AF9510070241BB5C5C335F3772D50BF27D4CA3552645B83D67BA660D49
172E09894C6D44617CE7BFB73D560A8E6EE08C68977147461748468E4F3E6804
CC72BA1C6A8DEDABB89F31BF698066CB959D5D6421FC0B628514461EC1E8D7AC
C1F1ED74D09AAB3258BD376869A676906BA31C5E850F6FECB3E47AA6C623BB1E
B40E64E135A4F6E3A6224A74E9212979BE58946DC253839FC5D0BF9129E1AEA4
EA6AD7FE7E2BB151297A60E96B9741B4CBA45C4F7B3EDF4F96C82774AF2520D8
CB1D59CA262E14350D29ECD68E7622C4D9883B0A04B441D8F6D0BDCC2A72DE0E
9A94E1E3CA7F3E1E55CF7CAB6F318BD5F17711EEDE56B1E867D17E12E6C66A69
F8298105F4C0B8B0E341751A562211278637972318D19BE9C3C52D985F4E546D
2074A3AD1D00660F383E070FDB05E75C5ABD4F09CE071CFE27B0A4A51DBB3DA8
B2A18F7A0EEA1B9AD376B663AFA7E453D4AC94018EB02182207A7F9636F38A33
D59B7C9B59155855D9D0B110FF05F1EB40797449E228C8018526E106A3B401F6
D7955DAE29F46963AF645634CC60F017265E622F2651A665BE4E53014E71A159
4ED752B75C682033E447D2C9FFB1CDB6855F7ED8D30D2A0E549BBC639B455541
544495D9037DCE4BBDACA63568DA62775029F75868FAF02A03123AC89F9629E9
058CEE631F6D1A77DA7E4134717D332DC221B2C2B52406602D44476FFBC289CE
8BA47755ED945ABD5BEA9D831E442D016EF0C849B0748B8F72AD9012E629E761
4662D7AB477E459065FCF4C0F743ABC0977A6AC13B31C2DBC7EEA2EAC58D3846
417517E48663E47122B4C4DCA0EA3505DA85870532BDB6A50369F174F4DC1AE1
1DD1E9AEB936135DE40F3F102E3952921284B77F91D514DFD345225B77D7D7D7
983E8B82C7DA7258DF43B5D0068BFAA1795C50C939A66CB7E4AF42555E68551F
2628098213AE421F2C97B1AAD8FDA6677496191BE975E573677E7C832A793E05
D03BBD4BCCD4AC309C64502DE1772B8307D0F953F00B01DF3777ACC3623F38AA
5D0438288069D628E4EAA659E2FAEF766B11B25AD733F2C34F7D176246FEB9AE
77AE76EC6CB46B3B35D7FFF2B5C74716E7FD171DD38A57AB9AA6CEFBB04C34D5
012E747B6313276827386100D41B4B446D807DCC388FA89A5AC984F8733A393B
D95E128AB583649AFE39368320E2DC8798B93C798F5E0A8B93A5AE30FA18DDE6
87F868293BE2623114EDCEF3D5CD66D963EC60F64C11A6638F547B89117F12DF
2F3C86943698C345D8E1DB7B61ABFE9E2839AE335F67F1694F4371C6269E33E3
316D2B9D77184D6B47A5DE853E7CADD265CF3D70C5768C0AB3396D1686D25B0E
D070497A23620FE7C0F4CADB3E3F7F81EA8409332092488016DC834C3F170F93
5D7B9F86B170BD7CD38684C8DCBC80976D93299C2A83B08C68BDC6014741587A
6DD0DCAD42AA5A0CD0C1CD5C27A4E8B2482C05E9C76117D212F209D5E55D44E2
C349CD40E9828A54CBC6B40383FE046801C705A9448F052EADD055C97A18F73E
6C44F920532924E994559AC6FF88DD2B009EDF6E685148B5A11B07D36D024EDB
952D585CBE638D9A6B5A3FF937C6CB188166513BAF4423C676B83BDDB2CEF6D2
B765E13449109BC30063271144723EE00717A7F20D2EDA9DD4018509D77306DF
C074F26ED55090680CFC717CF57B99F7D22B1F99B73B37495EE26C7A9DA5A3C0
9E4553B37EFF3DA053D0148A1651EF96784ED2205F8C2BC3A5CAAE26DAA43425
C83DAAA93D787053C9AE0D77A6E1DC6A77A7A2865FFD2D7396CF63CBECDBBA82
D05205EEC1890A1CDD05FF686787BD4341B9244BAA56FADF3E60145CD32033F7
94D650C763E025530AF2A6759FDFCE24A6F382F0C24DBE868520F0D9A8568825
7A0ACAE85A65B15FFC1D1BD6B8D7F45B762E3B122A8FACE39796458F8C2BFB49
B366063CE605C9231B22E8D1926D97A192C5DD402695942FC40F0CCB6F102227
02F91404D87D54CFD05032D89294D93AE40977A86434DE032E532DE8C160B043
6B0C53CBDE3439FCF9785345DC3D7A6DA8AE9C4E28C7A206DD639DAD57A71580
0DA545E0AE58B0AB29DB8C3E38CCEED1FD910214BF572E61BC8EAFE46533DD1E
DB13B70583324C67C91483B3DF88797627B92C5EFAE26EEFC3AA7C3BFF4EB353
8E31CF061EAF62D2F2A0CDC41EF0104097B9B85A8654C377975188022C3760FE
201E2EF620ABFDCDA2DAECC40266DC26CF31FB004CD5D5C50739DC4283EE0F09
5477885075DF0297769D57AB294B7420ECE6B6EDCA2206AF0735FD937886D7ED
3F26160F86A6BD3E8DBB5E57C87652B4C83AF075158CC34ACC4B55FB01AAA967
926785A37A80A87B554D5B4AF62B28438244D93FB7A0D31C85A7A4026486714D
89C568B5C2CBAEA93B1932C7867A05BFF158869960793E0BD6C76561DF100588
A12178EFA6012290E7EC908E3CA862E30FBFCD235418A74BEA05B880A6F8E615
062E616F2A9BD4FEFE2F2427A629E09C45ABC5466AF065DB300F8F7F9A05ED40
CAF3D8B7EEA837CE0F104559B78FBF2896F50EDF4A229592488CCDA44DB60FBC
F1C07247B1CF44D96549B15994B2F46D5F9A7FA818A4D65314AD55984D21E083
49B88CF4DA3AAB2CBDFD1E311B6461DDD6D0C62F0ABC868C51D4BEB61D05DC1C
FD558D28F78E93FBB48896AB482B687E017903AE47903447AC162CD4FF98DC7F
79FB20200C8B457E65B49D67BC376CFD7559B1654FBAD164DD447B6D18605B31
BB1FCFAC56B210338500AF181730E81C678D7EE3E71E27CF1D1DB8AD2F3D7178
9894626FF3432963AAFFD537AC05CD0D0E856F4F894E7529B2D98F5F77F1414A
A87E16869988A793C6AF35DA2EB8C603092F16C02D35A08BAE170352D523C066
78F93161CE66B390E901374DCAC96C9561A91D07EA60C6A28F207434B2C4BEC4
87C5E3CF18CE421533291D78AB57854F4469634600D5F0AF6A12C42051EADD90
B0BAD977FC4E639C8A348EF6D74BB0030043B4A715E0EF917737C5A9037A4D13
11926E1228B0720C8332C0AB1116A1D6ED27DF905DD26482ED0FFCB15127A7C3
31821F9B3235ED28367D583E0F5396235F9A21203B8BB27939F7E868EB351917
2AE7E16B6DDC1CE055A756D73EC1E3A1DACCAEF7B26381AFFE453621BD976389
B2894F71B80852674D1F5C64C633E2CEF19F8B3E61CF0E5F5BB87923D523CFF8
4F49FFED241A5489AB282B9EA4B55F95990FBDA518AD634238079963699AE230
1488C18E48E01C750747EF628EA7022E1CABD5189ADAB69C08C81BEBB8F74B1D
310157BEBCCF128F345F3099863ADFFE52C28A3DA273EFEEFDD2C398A2780595
9E03EB5B5BFAE7E0A6FDC0D15A5BF38487881D74458EDF3F1D10281F4D74C8EE
41F15204D1028B33EF00C54D48C1EC30A313BE513792948BBDF2721951FCD94F
F35AB6A2D55BA3D41F41CBBB4C183F41E46F2C568EC48B856C1CECAC3C4BD1AA
690576AACCDB58079EF195742F2A2F19345B9C2B726F065826ACE90BEF7FE76C
CC336D8D742FDE629362C63691F54DF701B405A8733C6F3AB7550D5216A8F2BD
3614AF08702A1B16C54FC83CB1B2E300A641536468E8B56DB7709465A2ABF1C6
2611A4D8E80FA3A1C5FBB60604B5D4AB472DDD6DD5104E04DAFC705468B2FE70
BA2300ACBE3FDB36449D0F5968F83A3E0B767F67B7E4B0ED7C689289E7E7BFEA
338DE6282E7D79E1D260C63B47708EFC0D9B2454293B0C2A992EC455667369EB
CB3C06B436289CC9216E51BFCD2EFEA6AED96BC30D56A0B208E8448ADB78D43E
53EE14C8337F57FD709A15AB5222FDE22D2D46304247B24E541AA805EBCE0A79
6C985EB089042433B652F24ACCDB46F48D8D32A05C58B356C38067C9C0ED754C
7F3106475CE98607F4964B1C45774A80084230BBD88FD759BEF0D619ECC9ABD4
7C1DB3E74BBB420611774CFA6AC0B7AE264BE485E48F2B74A30F97657A826F8A
09DCDD56F5DEBCE76E0B539283FC00A645E5C56EBE661525B630C13D496BF052
FBEC8E15CFEE034E50C6085B906BE11F0E5E1C39476D6262D5694BA5D83BE6F6
B69FA145A53FF9B8B1BF0F548DDE3DF57D09F40EA34B55B2A474CC0ADCF9F95E
51700164E94FF685F79381F09638351C845189655B2B4099A0A5471E8639AEF7
6497F79ED14FFDD2DCC14E3F28D6885B8A88BFDB5D3E5953FA82EE51B770A537
C7EB6690C385F4EE8EEE50F3143E43AA0A0F660162CDDC5C0005CDA211125181
FECF535D80FEF94D15F386BD5462CD2E47CB6657A7E4CD3A6B682A7B20D883B2
7E9527746B53655FD58403BCE999053BAB06DC6F8B63003E79D95FE9A02212C9
BF8AB2F94834C2415A567BC0B736E55FE6BF317161EFD433E9C617FF92455038
F3ABE54CDEC3033C56D4F818DCE879F14F7A20D1A5A42715370456F699197F5C
488B7FF8032FE72594429DB09FCFAD9D3A202E4B685FB41EA0FD9A26549DBEF5
EDD02A1FE6DEC9F821E6A54D8EA6BEDAF25C3DE166EAC8C49236B7D43BCF80EE
C4A4FAC3EF83758E8FB94397EEF80A5AD261D5AB061411EF6C9F60998893BFFA
EDA20B429F4A8ED8D18E364EA8EBCD897081B06C40B39C7916F72F3683F8A8D2
32626E2CB4F66D088CE761D4FDD1127BA8E1123A86D2CEF4689A72CC8CB37FEA
4F23FE7EB60758CD38E5B0A40792BDC6A0D82E04E7CB9FE4160BC95BF24D1584
16AD50FA464B2BA19ECA493577954E7CC1443FF296739218EA5A8A537D1E1981
87E8C8EEDBE3DA94BBF3976A4439F7F005D7D06C7CB37C53C3D4B74EFBED91CC
6BA9CB3DC18F9DB9EF70B4F3F4FEDC13BD97C2FD98E4B388407B864799201CCD
E4BD679B0796826F3667D389F545F39C4F49A6EA803BED82D3F4F004588886EB
E37A8C3D6F98E48B7995A47AA64FB51A7EC79592149AB68155F9928911C409A6
DB98A20DA846EB607E9DECF132E627644D4AA6284FA0810EF3B17F92F73A42F6
EE1D0C9112510ADE87642E0A0B98BAB7A28ACDC26AE655208161B6C5001B515E
E1E0817714275C29018F52CC8416BA2394AEFCB55B29F1BDEE4FB8B91E83AAC0
EE0F3E1497105985592A01D6F7C3FC5C171CA443A92A50F431F569406BF4AF44
79233C3554148129B7BF1BA6F44EA8232AFACD9749ECE9CDA51CA331ACEDB7B1
1D494DC3E03D8D983A9859672A1AF9185F07E7D93B9F33013A7D34585DDC8147
144502D70E3C6FF0968DBF678B2A271AD86C19D41496F0DE8D6302B7EB16F9B0
7BED6E42609C0141D7961D8D3CA221039563BA4EC1C5BD1535F6B93D7160D11A
B80A70D105BABDCF325BA0CD3F6B4CE42794F42E4E5D4134321C6DA6F56E07A0
C0947390AF56D7450A8C7B6B2F7AF4D5579C21FAF23AC932C18B9F9FC4899ECD
6E0A1B84F977156E9E53921BE9457DA55F47039D378B10D8DBCF04E66B9664B5
50855D24EAA1D7CABE4C06352C9811D06EE5058C0B2101A5D57D599C3713B34D
1BDEDAD3CFD6DF89A7EE80ED13FD1C8C832EF74EFDA7C1A2FEBAE54AD7BA050B
C2361FFC5BDB7F4EE6CE7B35118A7B7F730F7111A41C35E9896C55FDC3829D44
CB94DD05255F786F897ACB3C3B446A9CC6134A22B98C3B51B6279AAB4C10886D
2693352DBDF6DFD254E9C902D4B7872C8979DCB9AAF41095822DE5CF54DF6E01
FD9E4BC3E1F0E0B8253613BE7CCA6A3CD3B88A82585D2EC23698CB1457A3B024
B230B7E31B8D0BAE8890114857CB43AFF6990CFC2521564DE29D32305604C083
AE1C2BBBEF1D124B0DFD569008D17561E00ED5D8DB88EB11516093CDB1106ACC
E4BFE3DF064F0BEE30968FB0C923CB055F13E345486470540058251785773D40
04A1A18FA753F3C16BEA4DF3543FCCEF18C9BA1231722BD4F831216D47419E93
4977482A2585EB2661AF2FA80E848EE0C7A306AAD210448AFFA61365AF02D88E
F358DBA80F98FF80A0A248DD144F75A3A72EC5E13BB39666A5BE98E5931B0111
B233D8A3727384A7D69A9507558EF7A93F0AC229F7BF14C3B7A4B3038372F44A
7A5F69C62228916B14EB2CF3137490BF20680FDC5FF38CDA1EEC4DA06778ED69
6CE183F47CF62A9402DBFE3D0A47F0D430D46311118BC5FD6D297EC9C677C128
35EEFA9A09F3391B476F5775D1E3FD64C517F3777A29E4199E715EA995376631
581D17A97458E816477B72D2EA872A4A8CD0C3791B01C07A7EDD599E55205588
FE01ADF5FB33D7B091838A2C7D8229ADFF055E287BCDF05FB60F71A53B2F30D8
F171228340A667BC5288A601ACA3588E314B5767912827B769B1E9602DDF916B
D8370E0F954E973D69E443D7BF080731C3E59845817F72EBF88D0D8D73B6A239
CEED8165B7D351DBA2827DB7284F845498EF0BFC6C519A1692058EFE7C70F5E9
3FFB182D57E59EF3DB625767736FF6F055DC086CEC6ACF4D33479B3276C1131D
9794CD36F1B6C7CB2D1E717213FE3CD9CA080352CFC3C05F9396E14A9279D25E
89E6B6D2F9D4C09C728B93231B532D01EE7C1ABB4B799161E7963AD0385CE906
96B1D6B840321288F0C9CDF3B20BB0DE7EFD17FBA752B8DFBFC7C45F628CB43E
924B2B244B23568CF637CBF4FAF0D4A480B079D8CFF3C2A023DE9A66DA89DD54
BD90EFDEF8B8908A05E884612C231FD1E98D17C80FC1D758EA7EB763360915A0
E4FD68B0447069BFA04B8565BCB3230EBD503486B9975EC60C79639B5ACE5175
4023D7C20C04A221239196407FC44C74A3D64FF50919402D4FF75F9A1E376AF1
E61057A0D40B8513BEE58460FB0F816F8192C321270A05BD0C2B076F67C80C7B
F83C665763AF1B4334BBBEE9C1A18F616C21B9D0C307878314EFBAFCF59C90DC
C1C39F9611FB05374243663321C7EF9961AAF8CBA8AF2E1127600BA81F00B0FE
2A7ACC6297D565D749DD39994AEFF9010230C9336D508275FC87EBF8D70E797A
862211C3EF26B301D7696E3B88A625E9B18397FED01BE43AC5D38C9272FBDB6B
47282374F48487607071ED1B70F3E266FF9B32A93898C49C1191780953B8D9AF
B05E59A5DB081C44147832977ACEB19F84668900333CDDF7A118C5BAD5A31B39
E5D93D5C853D9CC7B5716C5370DE360BC5B5399CD9BD346BB191F8C634A24A4A
F5186F645B6705D18EA4CA5EC8F01D24DF90A36DB51F2E2FBC97D017BA46CDC3
EEC5C70A885ACDC3AD0ABB2427FFC4E8BB5EB2A9F7D82309DD529EB0EC82A521
FE1B82440F8CBED93E953533D608A87E26AE9BEDC5DDFC4385CBF6AE856156C9
628178DA15AC596538EB61CB6E13816902AFA4D4E1D90C3377489D1AC81F5DAF
CF223A4930E5C9F12E2CB19B18C7D364D164270F478D380A3CCB8A0CCED1CDBE
C665D6FEC8650D33DE2DAF774085F20798237C18BFBA75D7A9D608C4ABFCEFDE
D5D1BE8D0A289F633B0001D79292223AC106AB8F052AFA656FCAE6E2B8BF80D2
D1E9C7100B08C7CB4E2D809355CA0CDA66A5EEC79385C1FA8F9772EEB1FB62A7
5B340605F04F60A37D1CB2D77BED86ADF955E9C6ED4B1087A11431BD3EE274E3
1E827DB162A302BAF44BAF6BD6FBA68C4CB3DF6EA14A666E80A2DF54EEA149C8
72C7204E730831EC151A78F28099F8A59CFCF895A82207FEB343B1CA63BCCF17
58C2CF2D199AE6B1E331212AFC6AEC6C3B6A3D42ECF985C729091F2194B02B55
C969A48BD5F2F9A2009DB5603C4AC58C1260A47A7D9867118D61047E66158667
B2682AA438C0853060CDD1ED679605C585EF6BFB4512289C36970D3CA57D7D7A
F46AF46CE4A45F5C71774B1DBA8848026B285BFA2197A878CA2CD37526CA3F9D
D175740770D4E491C225E8AAD69D387B71D7C4D7F9009B16F0195DBAF03EBA8D
434CFD846E1742A63CE9360A8828EE14F2658F86055F368D3509DD65A2FED724
23737C64D51008FACFE21E46C0D716B7A0EC68DF56BD6671C0EA531F226F0885
47EB5AB90CB782BC1BA2DC0674FCE4101E1FF90EEF801C2BE3ECC20CBE596F81
8B43E5E8F97A835C661CAB0048908D019BF76E3756978160AB91305A6865A036
9D766CAB88E1A0DB030838D5A7B3E3857C6D5A6D9774D2AB9E9A4F1F4A58C137
F5D9E495C7FDBF36C52A67BAE5CC36DA47EF526B030AA935A0BA9516C859E7FF
D99FF121BFEA141D390FE159D6306168BC6B91588F43BBC733EA8D27E3BCE6E2
C410B93A4BFCE87B9343E10B2B250C3B5C3A1C4DCDE6E7F72425CFE8B4A7F230
00A1033B507FBA2D9E49EE3F5BA6C2A0871C14CCF2943F8E06321915F2872835
5852C3A00C6F2B8FB5CE37225FC214A1DBEB0B5954B33E9E7489D171FB152D0A
4FD390E6300232D83CEAD254071A4FB6496CA2468405E377169E48C982441C52
5F6BCC8636593A46012BF21425342F98BFC490B5FA2FECD63240C7F00743E927
B4B31244763BDB8DB7A91F85B8A007C3D3F47E87753FA53A13C9FEADB6B42D6A
605A8CDCDB7408A9BD9FF865E058D583997FA45361C8232EBC73DE207A601B96
AAB67D6E5CBD68ECC9D472483E302AB3934141570316954645297D485AEE69C2
78966B135C69D7A1F4A55468DE8E0D230CBAB7CC20CD4E71077D1EC0DFB9BD0D
2CC9D00F1C559D0A6237DD154F7EA30012496FEB90634F328EA181A58ADE1926
67872224BBB350E282695427895355277AB378E98FCED229B5A8275426AFF90A
B23FA6021FD4B74BC26408ED240DA44A76F897F99F1CF9FD0E9CECF939FD46E5
469B53247BBEF942CAA0C5FDE004027ADF86956AD434294C477B9BA5E9723F1F
CB9204A4413DBA2E6F72B5BAC12D8BA6B9EC040A30EAE973B0C4B32551E669DC
F144B6192FDF165E9FCBE2865B6A528039D4C32D4CB6D01928898553381F4173
064215D775F2DE1C8BE0930610FB768F8DEFE63FC9F64CA0A588D0084C356E48
907438B265BB1DAFB630736161F5756944F9B86F3099FFFD11484C25454E9066
D3EED3A64A25946558B61D36FC7EF9BD2B4BAC2B945135DAB7CBFC163E1FAAD3
4EC3F01CD80888C5BAA19A7096468683D70D264FC523B6468C2B57D6B0C83CE6
6B4B91E98C564DD6B3147B7C8A3ED7CFB16C811F70ABEB99DFA57C4DBFF16F80
A67715A2FBBA3741254A57920BF7ED9597EC5F4DD3222836C7E480FE792EF4D8
F93C16D86AF3EEDD851D917AE2221BD31884B04BD981BF6E3B19E9F9B78D3ECB
48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B38A74E29B9E7D4BEF828A51B13E71DF2C
C78DC0518AD29137C8DC053AD6D86747DC82DFD3366CBFCD581044AE5B23B88A
25842ED0050BE19E7F538EDAF1128614873F52B8FE20E16DEF21E3D2FB51713F
DB39D6C3E8B60AC7B4A83F38D6C3283AA890E5C5D4462D0CDA1D49DEB5221D7D
759291FD43C594074033868359A9CB523210CF1A2479FCCC7401AC1BBBA29A0C
F8449C165FECC03856CB08DA710B6DE98A17CA615483CEDBDBD9C2F47D84B562
1745DBAEB9560610DAA89F9D6EE68F8DFD8D0E136CF2B9B44D86E9064DDBA73D
4AD2AECB1F576EE1254970C70643BAACDEE7682FACB396AF64E102AD05E9141A
2A2B04760E9C6C61639B9E43B6D719F2431580556CCDFEF253C0B613B9BCFAD5
ACE01883440C3C61D2BF098A3823E734AAC86926CEEBD235D1F3E05CA0A67A4F
22C2D72A793CE08FC5937B4D7FC5E77105598B3AB259EEE0DA4D7517CF10172A
9CF549FC86FE3C79A1FE96E5ECBD1897E78765DAB8AF93587203554CB8008AB9
1561F7B489D2FA6D444F54CAFFB3F32607B0397165B14A92BE18683BC31EF660
5F4FF9BA5338BFD5864400194937B828D9D86E7EE72A083EDF44B4052C7AEAE1
7734CD28601788EEBDAD2B623303ADD6029EB1D4D1250D769FBD461CE70F3DAE
FDF7FE421EEED9E501237FCD5F7DD882644EC037E53EA6A5216617F31BD2C5B1
5075E1A6F451A55A9862CA1C8FC3550BA661252DC26313FA7D4D37D0FC52CB93
8B81F1CA562A7F1F3A6AE580F7C4662A8D9F8B0FE80FE32B7AA829A4C185B878
B8000CFC63A7179906CB112441C4D31272D19165E0D774DE3F53F1CEA0DEF092
4FA99DCD8A91C01AE80B55FE8A4C3B71618CFE7B401161E375FDB205B8CEA526
18A1D6D534DDC6DCFF55167F6497C9C4BC36702B3F48124430CFD49B3B2CBE1C
7A2D6404EBFD2B3A23BD8323840C531605BD13EBB44A71F76248B694684125A3
85AB03B3E1D3BE1EB284C7F9FE20C0B73A3C9B5FBCF36B0E7AA6A9E3EE39CAAC
9A1926DAD7EDDAD3FE53F1DCF5517AC6E153CB0CEFD9F225AE1908F8610B178C
1932B5DA522113575399C29C1A74F86DC87B1655439E37B6CF7F75049FC2FE51
81F82BF521067CB078710FDB0B456E3EE60BAABD65B2295EB3BD00C5470AB869
9E2A1BD96049A2933AA067E594E96BE36F9BEECD283BA8BDFCFCF60920F0E89C
AE7D0F875573E4A2C4981948613D4F8EA2E4E5F0BD121ABB080EE572F655F657
3CAD91F6EFCD03474BCB4F4334D8B2A16A52F0911D24CC5DD0970CA4A4AE0CCA
D632C2B2BEE1C949EF6F504A9E7192D886B0533C7F1070E55549FA3A64A2B726
89F5B2EA20662D6620D68AE58394BD8310C8F0C72BF499DA6F93367BC9D1C206
83A4D824C9B2685604D2D80CF3E0E532DDDBE7DD6A6D28D37C139F9DE78E82FF
F43DCE5BE88023EF9471F7AA5A5FC9CED5FE2C4B6B8620E456E6641A3C1B3753
27F9F3167473D6B11D060E358AEE10E4988C85E4612103D410DC2208AB81C6B2
223DB154363B13C51D00ADF82F0FEFB817677D197BE4FAFC4A2AC6D184987B7F
69EC5459E4BFB8BEC4EC8F8600B2CB87FB69FB99A834F8CF943BF2862E7DA6BD
F28B5B290E9F23AAF09BD6BE7D0B452F63E95808979EC051B170D2F19E2AB9AA
33458005EF7E84513F51A1ECE7BE2A8E5E8A97FBAEDD652BBFF7E4C95F23AC99
E924BD35B37E08C6379E0E8A129946225CE44665B71497E6BDB737368CA08340
FDA6FABF3221A5D67F4508A53E0D26988E67D89B1383E2754BC2D85C91BE2D2D
B38A4043144E76821B000630A194F8DD609F0D09EFB60C19F5E76853F47F0BDC
D15EADBEDE0A0782BEF6721ED4CFB51332B780C395568C8DE9B25C6E7C9E45C5
D10B215C7E06ED9709A875B020A6E584333C38C766B9D459461FB87E698E318D
F4A79373A6C4EB1A1A53DCCBB989EF9208441FF2B81E8EDB34E681D5B685A0B1
A7FE7E33EA70013FE9F457ECD49FF04DE4F500795C3715CB06C800C0E9B11D97
9AEBFA5E5B77611AFA2417BF6CDD37089B0358EEE0ABD41A7B30B174A1B07D34
9BC173ADAD1E2838F57D7BA3D9653A7E19A94B58ECF5ED9F81B62361647331C3
651A44C7C5604B82B36D6DCCF1D50321133B5A452CC74B1981DF37D70EBB73A1
9EB312118BF8F24720B670DA4FDA15155B4788027FE2B8C234B810E14E521D5F
18D9950E35A1801F91FF781AEABD1ED2B80E5AACBF5EAAA6A48E2C556615B043
FEDDCB3DD7C4439F9FDCBE881ACE6FCE3BB17ADC85901770E2563C2BBF28D872
7915EFB48224777D04FC62FB56F9AE5E3FFA5EB82DFB0E92608A6482F2E96F91
0F7EB7D687ACB2BB006E804336F252C11C6D2C11583E48F383442648DAF5EC63
02E290B4F48BE13525F65A3F89350D681C01FA9C2B9E0A6EDFE8185281192A80
87110839B0AFF10102769004FCBDF8391E51CA029715A8A1D45E0661D0923122
7B1500BCAF4C0C589D604AE446612C37B6AD9F94DB1E6D064151887C282A85B7
EB92F6A69012CF9DB73DB333F568D6FF61144F6A9E631538416DE27E7221A008
72A70EAB2B56BBB89176FA4A01325BA00821AEFCEF702EC70CA6A0A4A150EE99
1160A5E6F2EB5C69BEA59886DBE5024CDAF468B1A6A62CA593F00F44B2C4722B
D5C566036CC84E721A361BEE149F3923216898160CC64490287541AD2293441F
11F4FA30B28F6DC472FDE853381865B3C1540A2EFFEB2D1A879E9B85F86AEC62
53E8B99C850C4A7D752B97939C1AF5B5B56F6D2EDDF342E184BCC24F7DAD62E2
972451E317A1C20944FA6446A858691FB60ABD3A1E50EEC9C3C172E6FE615B51
864B341127CEF1CAD9228F9C69F0AED07885347B262FC981803B840AB00ACB57
F2E95555F4D919FC9375333846F3FF692FA79C13AF26147A6FA6BDB446243B78
A5482BB9F595636946160DBF30B0E75D74A63FEC9B45B643B0496AFDA1D383F3
06DFC20A8E023AE4B9EE99124804D00D5017219264C61CF419CA94ED7FF0231F
AEF7A88B9599539A81ACBC6C811D4163C655D90CF3E0E5D468CE2FDA05F3A624
7D0DAE0AD5A88849B6634BE4AAB05AF4C9437C02C8ED0580907FB45D16A2872A
ACAEC7DABA8CF7EBFDA5F8FD7108DDED283D61A78DC01875693B20BC52584234
16807D063C21B955F0154DA46F5486F57773C20E3B6AEFB71B6134343FFF768A
9C4E2B6A369379954AB9CE4FD6FCF0C5008F19618E516B1B4021598560BD6602
2C0D7A892D84A875E7DC0EF8A7E879AA5642F9FD167C8EEEC36752787FB706EB
441302654CA68E87AB593FFAA3D65FFDAA819DC341467C2A0C67AED7CDAD1F09
F5CDA85FDDB099BE09D7BBDBB6317B50076FE765AC6CB4C0522B68A0635F4315
A630F977D155B85928907FDF4B928D2BC5F2734A2EAD9D7B11416F2ECCEC0DFA
A907B95E417BC586BABE5B6A3B082C9DD5873C969BD83090BF9A7077AB632D06
8B1F6A03E5FC2E4241BB747C37E956BBA773F09D5A76848E7F165A5069E57129
652E243D7F28ED966599E6307A1D27BC925D3ECC13992A9CADB9C6FE5306F81D
B2120408D14B66B5CE1ED0AD2CC71B77875CAB7D71396A9E7343841ADCE046C2
07AC346D913BACDBDAB576A0CC4AEF40B4CB6070A1787035F06D66404CE13504
28E4ACA0AB125CA202B0A0C444C6C3EAF7DAB0F7085A1BA49A6E829800CE4AAD
AA2069A157A032628A7E1537EE34DD4B8924E22816A8E8AE202EEC55E5409395
4B37BE646D0C41955DF600BF0561A7C18B53C571BB6CB49F5D4D5D0A7358BEFB
4D78150FA93D010CEF674601567CA427857946D2C125B94E589B80B10BC44C52
EE7432850236BB28D5CA0FA6E763176BF35B70AACC3EAA92B48547DC3D2CF9D6
770402B4F7D65CCAB51692E74655802BC32650222F4E4FB03607E9F6A7A9D6EE
A3B6DABACC4AA1361AFF1DEF5402DE67A64159D69FAAB0CD741F65658453E65B
F412ED4F6486736D5D0813DDAF81F41A56601462D5E4C2CF8ECBB004ADADE2E7
E1185BF04B4E524E03A42C91FF4F8253DC724CED2A7CD9600E7E910308362888
BEE48917C441D4B22069F34A07B29F0190A97FD06F208426D67F419352FA8F2B
6C3358D293ACDD699C5D277CF96D579CEDFDB41FCC46EEF80FA1A0683927443C
E0E6DAACBBB3CC260BF3D8831697F7A4CA30227E5F97C18D1E3AF71B2CBAA48C
2A1EA402400A25A680F3356FFB702D4D2AC446E5B2B016A4B47DF8829E6603AB
03A434C5B1EE63D79D1D01CE2755C485C8FBCC63BCFDE66E60949B0459DA43B1
A2A5CF912298968FBA2BFAAFD8ADD658A826C7C2C99EDC7BBDC80187EA775CC4
0FCCB47FDFBD753ED785EC7636350B382C234F843BCCE2DF50FBCBEBA215685A
828CC88920A0229625A097E160F887F2ED741EB51E3EBC6428F6F7703414FACC
23BF28CD7A43D68F0D6896FA97F3EA71460082A64635401639D5C4E711882EFE
BB8E155B29044005DCE3EDF07C2356A9482BCA30006B23E90E9529CCB012C312
EA2B28DD67BAE613B8F5874475B712B2AA3D7D2D44D264425C4CF2544EE405FE
D6EE737A810763CC9C4BA235A83B03E27CEEE5696F68A48E5D912DC57D250708
09CBA462D590B3989A7F343D96ECBFE6077279A433B5C636C40E4486D38A9F0D
59A1AB8C2DD0269A31B7AFADE01876226AB00041715CF070A47C44BD6E91AC6B
9B938EC8C04E68D15FD001D2CFBA62ABF2C95646B30C92939BE24C3AE4A566EA
80C49B5AFA3CF639C9C4A8413227F619ABC0E178E39A0430CB4BE25C9E13FE8A
A658501A13DF03B54DEF91EF756A588266BF5BB7758DA3D21B89E9ECA19F3F6E
A328E4412502468326D0FC4020F07118D9B5E2C1ECB83AEF8ACB34A44710846B
AD46289DEF41F69D431E0C959EBC01F41E5142CC0A798AB0460BFD9425AE6E57
B5C958A579200974950488F2ED1FF7CE9C5F9D9680B7C482A7AB40F922F120A8
598630AD14BC35763BF8BDD1FA6D002514671FBE46793F3142FC239A04A8F86C
A2DA811F901B8625E954619D9FA6D8B6DD2C9309AAFA56D66150CC20D94E286E
409D7953E1ECC026A95D677617F8DCE55956FA21D02390BB9D2A62F0A4793504
B22305E0FECFBF56C773071A3A1147BB504664F9F6AD7827FA91ED654B76466A
D97F3F624369204CF6A65762DD40B934EB585AF8663A16901AD838A491C9139A
2E3170FCC21D8665785E07EB59DFB3F565CFC6665360C5F7ABB5727BD6DC1E43
1232B40E85F804B0C6A98E6FE1879C37A1E4C1D3870C684BF41069527F86804D
90ABE51EBC2D7FCC2B470D7D008029B40EB8F22408BB0F79650251CB3306E71E
41DDF3BE3D271C3DD27C1A578CFFBE68A637FC1F5EDCDE0E39D091922F499455
C29225888F5D712AE80866F25E94E3DFCCDD4A5FAC0B6AF8B46A5E1C8D6AF3B5
74A75F24D03D05ED340B39006E78E1E72D22795969BCDD7F914969A1F2D0334C
2526B70DA573063C91F1893939BD2029D0E69C10D02931932BE2725E0DE748A7
CECEB331FA03DA5E4EB9B36B706896152AB3DC3A7815AFE55AD7817AA615AA26
973696EF0246C28114BBEB9A7166188DDB17CA7B902309CAED882236CE6A025B
0EC3129072AEA545832861BD92C6B6CE465D8B51D8142B0C866367FDA0F40103
4AA3CDD46C5EC6D14FB5F39F63343ADEA9EAFFEE039CDB815A1FA76B2B676376
060DE2F399E04C9014E6BC50633E32B13D89F980B32000D4F6A0D985C7D87D28
E288C5AB55596FA957CDA30F5723F7728304F8447E9EA64384A28B53644B2971
50A1BD25541599DD68E0DAE59B1D5A1146E148602F732DCCDAB72C2692041C4F
F7B964461F533A8FE6453B1672D45B43A0DEFAF2F9578D36A2E70CFAF612BF93
CF2703983093F0F9BDFE66FA562EAE186703F1E15EDCC29B77331228E2108035
378D5760A04E01750FF981F5C988607FAB4C37B6AAEB8DCF595958B38CA62805
09CD27A2EC80946CB3D71229AE3B0A220054E958D05EC0625909B43994020445
2FE107B0B331DBC3224E615E1A50C0959E57AA80847C5645902C883771F35000
FB9E97CA93CBF9681CBC5246B28B1E1C0E829C07F1B008E891CF1571EFA3A253
1FAE6A92DA04EE168BD3B46C0614D106F554978E1B93B36375356A56EA5B3E4C
B49FC7D60A379136263A2EEDD185388E7919F1710B913E9D74C011E17A9C3BEE
E6E21DCE5AE92A9089683DFC8FBB40B1153E82F8F18F60399C74C6BFA593D9D8
63852F6EC3B1A3D96835CC338FDC7107A17454A4B4119BDD6B39E62BB168CD40
83820504FB8AFB4228E776F34C21215E77396BDE170BA90BDEC5A0694421F7DA
2608909B7E4FEEC9C82B9F239D53ED1C167611B9B7C18FDFB2EB5B4AC9E8BD65
F6A61B48EDCB3ECE7AA6688C4F785967E7D9EBFBC480D22D593874859A611175
4111044E6BD788857A4E88DFCF73A0BE8499ABA5012D7881C8E347446A6DF05C
8053A74B2A172A7A118DE0362D76B664FE81DBE4433D3128E0AA631D4EAB4869
A86E3A565C55C29F591DE58DD4705FF1F1528420A630ACE9DE9C638D9228E94D
93248EAD1C7ADD6BF6BCB28B5B1DCEB01DFC41ACC7CE139E58A441524DE73D82
9B4B00452DAF4957B438BF6D9816FFA0795B495AA9C0A31BC29CBAFD74E0D944
7DF673F327C0316C45B3E65761592832C54D35F6BE6D979445443C04DC4763D0
4D6293A41E747933CD98F4E720FC9819D4181FA2DA8EB50150253DF79557DC29
D08D6CD71BAC9DF7903F6842D443FF35DA8D1CDBCF6E42D06B41BD4E17C88A93
14461471C47925EC6F2741B3A91D90005AEE42439A7382ECDC479C1EC69C5D91
EBD571DBECF865201B6D7F28939D6BEC495BCE0F9832AE6CF21859FF867D1515
5A8DA538E56CC638AF4673CC717256CBAA92E1751BEE085C6C7F4A6CC3EE8257
A7A35A4B10EA0724F6555949AD5E322EE6486DD72554B45302C613F965E02A11
C7ED9B97E74BC13B747461135C8C4CB4C3DD6BB36457FF66AD9E44A1690BC030
E6B9ABA911D19232028436C81FB91BB31F774F8CB1F07D66411593D10A7026BE
DB0AAD7619D5F92139BDF11DDEBC91AFF565EF2F34C76B0ECDED27418B5A668D
F056E38BDF0272127CAE85ACC48D755A6099CFD953538C93B769BB09BACF4BC1
71AFB1A69E977F58AD81F68073466CFDB837F23946E28085E97E0DB879A15B38
1D0029B32FE8439123B6AC04BA2E57001715CAF64EC306B50AF9B42E508C2505
1899AE03CAA5CC73952E64B759DDC5540CACBA4FF0116E276C5A3E68988FC39D
00924E0E67144581F7CD0BA277E671DBE5918D690C67BAF9B8BEB71C2A2D8C04
C7ED16FED6F14DFD98760FD06A70653656D9EA95728C934C7CB550977D21B633
83522A0A3CBFE0F29396FE0ABC2DF0C1F2F1B2A97D0EC4826E6C7F3FA0CA6A15
76073BF43CE3BFACC0501D37DEAC09091DF07467B37B8561F27D0E5BA82FE775
3C9BC57D259B39F679F3344DB2049069806F0D787D3CCB1F300ED7E5E14E4A58
41B413975C0D2C6B4884D351C23EBF6C9D6B4E9B4F81FEE3DAD53691D1B31C3B
06B12F95549FD91B3ADBB96061C2E7376DB5140D6E74BC5A46375EE8C1B2FFAB
009D9E8F3FFFDD306042435C92AE025B1C8AFC22ACF90949369D8800F72F3CC6
B7B18B68AD88804CADC932BBBE93F76250820D3A333809A4366F34513C5D022E
0D5A8E53CDFCD3B551A09349DF23BDDE71B0973191B2C6FE1BB597601B794E71
86404A814B36FEA1860073F84BEFD3F9B6FCBB312C627ED1234BCD4FF87D4ABB
756191E4740883A6DBD009912541D5610AD67F597EFF11145DC25AFCF25D1547
07E027E40DAB99D931527348E31E31546DA31CC1C39F0C59ECE8E530B30845D5
A283D7A2C7F804400B355B7A61C170F6E772175278714CEE716D2FB9E94241A3
30531F8765EBB2F5771022D1E6879E69008E8990705A01493C3B8DA150B0B15A
5FFB4EA60BF707C666AE2136F4FFFBE63426A07F54287A40951BDAA4D22C19FA
319E6BCDC187EE9884C8D7FC8070C5CD3B1A9340645948F88DD99F3323786E49
80B4D606139891F57AA4822EBAA56CC19E2DB36114DD27F05192240185D92ED0
349F8557AABD0BBD341EB5AB7403EE8F20742A415DAA0CD39461ADD964473F4C
2881BA09D427B7ED3E03770C117E1F335DD1121874A5BD6895E0066597C84995
A186366996A7BA11DA7FFC08D9B041E663329A7662E133AB9D9C6EA05D5EB9A9
2078CA0F4226D625426A4FE67D061A175075A837ED4C8BDB3C8DAF93923EB4FD
C3941AC7C765AED9F902EF8F5EE8015EB6F6A32375C95C6AA922E2C68EFEFFC9
0DB0389EFB9732BB96C23BF2A63B865F6E57225E1140A0E7644ECA0BD06CC111
29D413F36402B71C93F54E5005F1CBEE03E7461AD5BAB068DFDA6AF98026C440
F76AF912A7C41A6CDA280902D3F0D14C62BA4F03735DAFA70C389BA84BC911D2
94B4700501A788975E0547EAE72AF8A8481FD63B692151773DA5899D165DE141
7CC312E8D87F26890AAAB50C4895CFBECE3E469083CB2046E81CE32530B02636
A1109E53EF8175754F96C411DBC8B10231CFC736CCB26214D4D3BC836A5425D2
B92E27CB273462CA0BBA0FFB03B15E6143A6FEAA35AAA24548EFB6B6FB7E261B
B3CE203E168E9E92D443E09381E0B0E98D836493698F94DD5507E63D119B0A31
74D32B6AB0A05A8F919A481562035BB9A276C524C7D57F26452D41CC3AB5F67C
ACFB3082AB0165E0FD796E812364C58A37EFDA8A3CCF644DF92D8B8F58925ADB
B9708EA65CF2A8148DDD9C608A831785480C9CB2D874CF6FFB01E4432BE6C56F
0E86CE9CF8612D5A6DF3F6BE16EFDFBA480BACE78DE6FBAF6CD275B694476811
7587E77B06DD81FCC707B155D311D7B27DB612C33CCE37E58305DE0344DF200F
D544568AF2B64B818F7B6E9D68B2C092B1175F13AE2BF981212D178AA0606A02
81E13EE99C369A527EB9840A4B561421EDECFE82CD1524BAA10C0032E8E70A0A
1A82EDC3B30F8437C144AE8CD41487AD6A0A18BCCF09972B8FE919AB17D716CD
F0828C25C7DD412D8AF3AB7A8D39A07ED7575CA40762A53D6253DACDEA0179E5
7EEE781433C9C8FF81C316F9010C645A00CCFB57345A692A4AD9F03B3EC447D3
2B017C9C4F9E43EA9AD75946DBFB11206B67B02AC1A79FADA9891D47074B61C6
82AFFA0AD5B56AC7AF358DECFA4D3A5899D906B8CD728DD3ECC0E05159B15BEC
3CBD52289DDDCD725B48FCE522A983FB27CDFCBB490A437E086C4034CAA91578
E0CBDBC8FA12C31810C745024C1CB139EDD176F985E4370093A6BD4991082E92
FBA05A81CEB9178F2E9BFED6649BC8A986E197A5910E7D2DA34B7FF79F81FB58
AE2E850028D655F8A4A80E94FD2BCA42D6846EAE84173120E3049E16BE2E8442
A7284154657BE453A22AFB1A3DA1BA69C72BC993047BEAA8AF70AE23986F8CDC
2EDBB7AE3EA055CAB45F5ADFDB916366192D2748A51CFECA7420BC092195D532
70E0D46439D7AD0810B5727565AC5AF02348CFFA987C138EE1DC217E8A1FBDA9
16B95A3F4164C64D8E45112286DEA214E601BF0514543FCD7AFA14F587C71EDE
30A12F14765BEB7B9B0391D5CFBAB076D31AAF3B85DBC81517DB81CA5AAE8349
4E800D98D62BF444720CB824D06830AF06E7602683E8F0DF62ED1F77EA29B3BA
4317E8766999D14CA11E9F5F226AC64E0F312BA4A93179AA9EFAF1F1B903240E
F2A29FB5300C0254BD4B512C3580CCAD465610873C04482BF33789E3FAD7B3A2
D4057EC3592A31C0CCA60576BFDE5CF1A2BA4126C067EC4C03A2F8E60F6D53CA
B8A93AFEE201819397534CA528E5D88ECFB4F73F14B332FDC58289D293CE907C
FACB8177746CDD0AD143A78F36FAED7F2AFB2A463A86B1623BD5718C20994382
E9E8148C4910E255EECA5A1D957F45AE3BE831209AC88DAA5246019E8080C22C
E3AA46BC672C75C3643DE4C54F03E471DA5DA62C90E39B05B14205C98A2DD0A8
3A2201FED86BF55ACA0006476D89832B842A6A602A4A406CEC3E5945EF265D6D
D32E4DA1D76ECFB7111054172447AC6548A10FA9CA7F9B6D556B92068106E96E
4BE81DD65018363AB0018009BA7828A55685D26AF2D989559FED5BD54EB70432
763A527767E8D14523B3CD66FB3885B98B0675AAC86F871F7EF9D23EC5D6491A
FF48F1A84E6C116D035CF8CFD924CFD804CEBF3851EF697077B39BBE76D32933
8D9BEB72BCCD71430F851F0EFC75AAEAB310E536B7F7EBE4C9A81AC304289ADC
5FBC1EF6010B1050C5F53E41E301C7E13C6553558BAD1BC2B65335C67E0628A5
A2977E824D7613708E17BBEA8F7E80138BCE2F26160F7C6DDD120C7224C9343E
42C3D8A5D279899F037A1D36DCE13A6685C17F49804D1935AD47AC9926A4E2B8
DB1A7FABE2E049F5E1671B066C1874390660C14AE90BAB12E33C47B2929D3E12
A89641E9D176466B3B92C958ED706A67F0E0D081BBBA9CE2DEB9A6591F55F3D6
7D349FBD703CE95EB06CDAD2E2C796CA2F8ABE25282F82710942F032B99D8CCB
6A8C95F5BC442C3502E2679B4C7F93C4204D7D421355E5CDD45675686D567600
724981C4D09F4E9942A04998EBCCC8663BC5C2EB48D7CE99909CCE926691EA4F
E2C085ED8E0C554419A7C32CF3B245BD70DE2979ACB165BDF4EECEF94DA43E89
D6C65BA6C0F6EFAB306992888B10DC15E662E4D5B88C747FE8D3A727299A4301
B06BAB2CE6964A4CCDCB82B981238B13A59CB3139284ABFB378912CB82306E6F
83A0058CB9C073956DBC940264A25E0C75197139AFC3825EAAD1B0CB8B020171
9FDBB321D883C9919E23159B0B81793E9D328A9D926292B03E4948F97183A203
7B029C43A6B624E7C8F0C68962ABAAA5533F3FD5742AC29B9803C173E9EBEDAD
5A7ED359D9911D03A610E027E5711E172615A85645C637F556788436DF5B214B
3C8ED2DE08A7BF0BEBA099E507B02A693992C8D67E6997BF316BB012AE1773DC
80F66818C7BCC1532ED383A804AB2CFEF7BD716B2401FF59DF84DC27B11B312E
7C96BB4BED766BE4E1CE430372DB781E5E437C27515011EA84B4D975920C2EC7
B381695BB10DC043CE7B71234F4E54D5051DFE2F630BBE34918A8F495B962F25
E935B684F053F6861A57098B5987F2D7061F1BD3777D170AAA239CA7894113B5
E7FD0843D1751DD0FB5526200D0CD105E7CD8AA70243C88CBFE93404B296F2CF
38B5F687449A6716681FC603405D049314F14D5D1691D8C1ADE40FCA09AE603D
E4FBB8B36B101C97A45A994617FC339F2DF1E654428567CD0E79370BEDCE5393
D501AA2B02CAB913B4D7FB36AD95C08B5FD1170D1F792C21C1ABBEDEE6DB8BAF
1638BF6BD40FF1476A8BC5C06948225DF2893A3B8AA54A986DC0856A5AAC42EB
A1FC619435B2F48B611B7608C1AC7621009AA271D290F35E9B5A8B9AFAFB3E57
314D09B89C71E9B88167D892DA454AD15C563D4B127F9ED96F9F2221E85012F3
2CE21205CEBA88699CB263476E4730B1F9745D9BB5DA96D07E2B2A3212EA1B90
1596A25FDF59282422A28B30221F935458584DE258BB1F4DD428AC334942D3BB
8D5B4FA0E68AADD22B4A861A672280C619D64576DDED910E6D598AC79FD6AEAF
01E1A75DDDF81D8FB730E049941F38BCAC751E385ABF6CC82A01C3CCF947B560
4164DA0F1AE8BBB5B54879A04637888780DB4844F2C664F3632753236A1BD74D
1AFAC804FFDFC472576306FB799516B13DD1327E54958A52992D407177ABD602
7E27A760FBA707D5E3C045AE9913CA795B23AF56AD884BF6525EB784ADAC6842
BD464D25FB9AE65FC22382AECACF65E4BC8AD9357229EE505F477B5090583751
3F9543B53C94DFA8939FC291A47A69E9C5489C2FBC1FA4EA357A400856EEC5F4
5F05106CB4E5D21C81292D7EC8EE7FBCBF3B6076EF2FF1C79221311403AA3A46
43B5FECC36C056016FE4CB68305B2EC71E213FDB64F9DE6BA97087CA26335B21
329BA151AECA3BFC8C977DD0E0C3C88812D262CFBAA1B773807C7E93DBF1903F
7DC85C01A5EF4E9B69053BED7A9FB830B5262620ED47128F3C4A4A241A91FDA0
5AF2A55F76293C1449406A7F3C58F2B36A0E710A472072A80509FD0574288FC1
AF6835C85E23DE846ADFAB2DBE9ADC11F899856DAF8D713AF500FF9969FA0A9F
9AE9C5682E8D1EA94A091BFB970116C20CFC9A2CA6CD36549B25A78B763A5C5E
E599F54238A2F5345729CD23ECB37FAE66772E28B18FC9E40C95DDD8EECDED91
2CE568EF7028D0D2DF906D07385B5E621EAF8BDA77C9E0071790E421951497DA
A612FC2EA629301BE7DDB29BED76DC864AA18E6A41E0B172BC09CD119F4EFEAF
F62492C69F46E8AF12188135C1D1B52AA51DCFCE5F9EE14DE844DD29240D7B1F
266C2EF325F20A654DBBEFBB1CDADE1D66BCCA569D4A0CFC2A4FE38138650349
98091CF25E0EE02F0F67B49E9E4C2DB3B2ABD8DABDD36695122577A8D8C1A3AB
A1AAD7AA53C33127AD4A5643395145A901E9532A017A0B68774FC8313D7AE5F2
D1EDA9B5CA7744E86456FAAD468A756409AF4F45EA38CA5E6AF5C923B4C2B6B9
0305F0B5541D5452DEAB863C234F1D0A261000DC6E2AF7C6A281EF7ACC9A155B
0A1AD74AF09BE76D413214F0B3603382FD32CB55628EFEF7D1778520E8924D97
2007ED8E8DF87994ABD483171DE1D64552E3F59F571FFA86AB78643148EEC771
0B201F65016F513D25D8EB16133BA08E2120C69C398219B29CB9020882C199F3
0EF8EFFFC49628DC694D62A028F20A653E81D03DAC791FC620ADCB6BD433A1AC
7F605F44A3EB1BAAB5BA9BA430B2668E7D20830FA64AB5CF21FCC7B9DECBE33B
F3F49E153BAC1C0D999BC198CE965736F9A83CDC6E6EEEC287C13C4901EF8B85
A7B5B9BA23A77168E1C67E9BE47A24A37E35ECD476DFC4F906961E22842E6A00
168898F0A0FE53BD8499E9A064C49807BC69B5E7BCC06DE3A77F6D7B0B549704
FF5B1368276D8EC5DE47484E9E290436C167C71E5D42DB3C15A3FF0DB2CDEF8F
524BE192547145A9DD9D05E0A47BE6404659F5F8C9FEEE6AE77A0A134DA0A423
E6CF65783C2BFDF9275F750FFF481275DA3ECD4BD18AB59EE671B53BD845561E
E59F39B310D790B5CEB1DACF04626A4CF50A570C072F72544130BD3324025555
092227AB59C5186353CFD80FEE2A04A2FDD1C224287A86E9F2E0961C105D2A43
51F69F86F6E51EFBBDF67A1497EB907E7D7F9AF7B85E61B480EA91D08D07FD6C
3385603A3131B04B9944C88C58AFBC148D7F293D17D90CA9518888FCC257AB24
19EF1B7A41DE7ED4574B816A9F14E5C54E15D996AB66DE4D1DD6692B33B91888
2E6B39A0D809029F5F136C1B95ACF4DCCE008AFCA7B6038A069F0C1870C9F74B
C1C2793D4ACAAFC08ECE833DBE266BDC7F3EAE3B92442861479A3DDF09B4DD3B
7C5CF6F22D1AA5C2A264CFFC57454EABB11C0F569D2680BA51B4D74664A9DAC7
725442B04B31DB621C5D13E147AF8DF85CBFC5B77138AFC3020CA1A6290492F2
518651B5C421F37D5E7D831F159D91C189FC7DE12AB9E9C5CA48AEC773B0E75D
1FD282A12BD5AA28355F961708E0226E4A9B5BFDCE56125C822401E776D423BD
54B9FEBE64429B42A9F5AA5335319E8680C9A517485AAE89FE3F104C88E36E8E
9E986D3097AD47BA212545B602205DC0882440ABEC7469F7A8B253A3FDFA667A
4371DCD5E8FBCAF9423B4DC5972096D6982F0341017847B6B950507D69463770
E4ED377C6BDB388A8EDE8A9A9F59BFBC7808324F2ECCF1A867B1C20F383B769A
25A0ED1693A4AC817D3BCC7FF937C47D355EFFDF6A59D14EE9E9B2F00E38A819
F8E61E32029DE99CD5E685677D731D6AD7B7F52ADA5FD839D2A3D66D9B70F030
2F8C7241BDF36C5B77089C8A78F07FA4D81AF684162ECFDA7C3230104DD69807
C902D80DC06E87C8C0A5AB4B9A493169C0FA6B043EAC0E3A43144280855A520F
5984D857EF4DBF66C8583D8AA46A90130C4094454F4244DAE1AAA737618FFC14
E80CB441259DEB5B9096CAC892F6F7FDE379BC00CAE58874BA764C1A37130EC5
6D0B5030A9861382ADA8A567744B128D992625642E04FEDE5C1B8B0388524F75
041FDE6C5BE2CFB3A0DB2DE7E83AD98D1ED8F4F9A1D7F8BA828B562B3EA9FC29
140ECC8FD3A0599DBF88A07CCED488FCF574CD79C99475EDFCC90B6A4C9647B7
C9A25F1A5E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
503E912ABA4ACE8A95BCD78139D76D47338A12454E8EEF04C9C1D76EE6241223
CB549E4FB8EA5AF614080C521FA33ED6C5B3D01C6CB3A508CA54B9879760E3AB
70FBF4B6FBBD0D22303767870BBC148F162AEA0C7463D3E93301A1FE221A1097
75FC35F8A9EE809D91A3260DFED0D26D4820CEE6FCC32800B52FAA6ACA197C20
C86493E1CDFD279490276188EC0EB344E5D2C11E6053A3C9838538E8D490E67B
EA7A77D900709AC40652D0836E0A99B0CC21C1178718AF1AB3F843C5476E3F28
77F7E6509EFC968C1A61E3A5B412A7C21AB713BE68492F9316E816E4A1EBB873
A2BAC866DB19F0CF0362D32A57E5E911B5391C8D5513665633A36D20A9B9F3FE
B05E7F6A0CADC18E7635F141AB733A8599C94A0E2E15810AF7ED7C65A1323BA9
15C10F731D9B152E3217DB0EDF2A084E48162ABED4300CAE6B1D1503E232D5E8
EAF654E11E3ECA1B860FEC9D65A72254E20A8084D81A9A9BC7A19BAB5C24EFC8
C9A30593BEF14C816643443DE8E5A0ED740E2F54127E8A7797BF18900D500C4C
D18CB01EE268EB94F5F5BAACBB59F9CA0BC7FD7E452F1CE506264DE797E9568D
F576F5BBB786C196FEE1CB05A36BD543E555845FDD88F7F0CEA771794450CA54
3604E9C6B7DAB76C265EE3EC9771C14214146902336820F95B281A775C87B679
963A4CB614D511140375419BFADD9640A3005ED53136967509626BB2CB63542E
F1E7D545AF6ADBB674BC51830D3C63F9E69818D7AB8488D8C344654CD5B91CF4
1FA045451587F02FE4E5403E2EFA610E4B920460032FF71CD16FA03EE41D8E4F
23B71DE6C221F4BCACB39F4A584B933A0FBCB62B46EB851DBA2D895D9D351BF5
739DB03B6614FA4D477BB64332BA41E5B61A8115CF0DD55E9C0051138043054B
714A3AF816C5E0DF808A075EF3FBB29906CF1124A4E0DF06208281FEEDE8251D
FE4C56AD3BCA093B8670D02EF282C3AD477225866C7E44D4E1C72D6CD3ACA356
B4C9CDF8D31920899D52D5B75958E2843ADED5163BDB11717FE7446A0FCE728B
DEF3CCA5C368CB4049D69B9ABC11CC000962CF66987B20BF381D94A2DF316CBE
4C5F6434ADAB0958C607E7F42216440D949549315DD15D74761F38A615BC8007
72F15E98F91DF932DDED7BD32D33FA77D390ABD3FB4FE6BA8E8BC434AF4C9637
B2464CF8C3DB5FA0B27E7CE34A122055DBC4CDE04666356027644FE5B7CA424D
2450D625FE73C06054A38A5EB38EFD8067C4900E427295A254FEF9352A59A041
DCB1283ADC30DB82B18206BA8984959E1F80F904567EFCB1F3262D98E5397C79
645EE32785F06F68F45A87AD77420373BF14AA2F33B09F3627289EDECB023136
1D03BF91C5C213A951CE172A42579B4268F98A9D54B9F2AFB3B9D2B58A91DB55
ACAA88C5E5640AAB59DA1B39F06B94C76B462B0C1FB266DAA8559A5E2D642080
533686E07C885CA56EFE600C1725778C99A04E8283DC9CD1C81B97F52C029E80
80C2992CBBF2D3BE71C9771CB880E1C73D66DCB01FBDA0F71F4DF0A725C10A8C
4A87987FCF9508264937DDC1A13F7AD88FC8C73B78F1F05708A9F23F2C763735
96FD03E549F00F59BF602BB7E94DBFA07DFDECE92D3164A445804A23475AE5CC
6409D151712EC628DBE6D3D63A4208E827A9C0689A97BEAB0BDD7CE3D15A87D1
94E995D3321EFC589F4C9FAC50C40F772CFA2CD7977455CB374C463E05BC17AA
594BFFE78D628646F19EA66137C294A763353B56A1667E12B07C65D7A3AC11D7
6E7D13A6BA2BD79AE15C366B9580053E170CBDA9FF1FCDED21415DF29E5C800A
4BE346E55753145228592B9404CB511C1740E408D52ABC832CD22E6C0CEDB39B
CADCFDDEC74AA72AD9117A7251E4EF96AEFE87ED5F034EB3E50C086A48AD0AE9
89CAC7E93A298D8629B9DA09B7BDDDEC71DA87379ADB3697247465DAB3B3AD58
A64A7EDE97DB40ADF9BF6A01FCEF21C8A85807CD9FB7F4EA79A4FA7E464B288F
4E357567483BE56C115F78C66D154289775711FD6B227B4AD3899981FC284F21
B29864E25F128ED3E300019C29BB124DCD505B61D785C656BD916843FD101EAA
F1CF41F2542DD120123D8604E61479138E8CFF7896BB4BED766BE4E1CE430372
DB781E5E437C231EFEFC1C3505D4C8AC4C76553C62224E9E43CFAF2E0E407DB6
BE3D5402710A02CC45A2A57156568E8753AB02348C0474F6A4B93686BFEE84EF
32C0598F183653484E7E8A132763F63714B2A6BD6CF81BA692AD30BFE08ECE21
9BA650EEC816430F8B440669AA53D643214B6D997D9514EBE78691546B3167B5
2B1C14C88C1769B6AD448BB4CDD3A5BB29E5B96671ADC8F016D1E9C1C680AF5A
EFCD75D5D4A68AEF87B2D2992CF35B054907D049615C2B4326FFFB8F58B4434A
AAD4106791B5E8E9F4D23C846C383A1C9AC732FFB476C7768EBAC26CE3FE8DEC
23A633E51596B4D877885A643CFC1CFC7241A43CF5C5A738B3C3A1DAE7781B1F
EC04177712A79ADFF08FC9D727901BFA8B1573C59433FF2BC36B4D890AC29D29
07BF8E2CB98B02EBBCB3784407905214730B3AB63496F248E9409303DF8FE08B
4C8BDEA58D35DBACB954C3C2BFA4F2A138631B10B51FAF618321734432CFA9AD
FB566E55DC988E5148B85F7A9DC5C166ADCE734F5108B184AC34142F4E33BA53
4AE131D29754CDE11C0EFFBEFC64BD8C6B3DF9AFCD759798E03D0BBFE712E4D4
B37AB76656162E62C19A0D6311230549FCE2A9DA46E17A70D63B06F5D54EA413
DE440E4AEBC3C0ACA09D60E190C54825CDFD42FEB803CEE9C7A9F93958B853D0
5B605123F93EB424BE497AE6FC148CE152676CDC7856F17F745E24926C92506B
2D41BA552FE72FBCF8374EB170145F783D9537D5102EF21F284A783F001789B1
3DF2D7F68291156127D1C85EF6318E21C11AE85899D21F6CFD57C238F38701BA
665CDE023E71CEF701072CA100D46D3A38F9EFB1E4B2A7BBB5BFB2277B07967F
DB90C16C7C9F24D37820F5C743B943338D442F565DFD196AC2709C2ECC08DA22
6142BF82AF3E3DC9A576BE50D33C40B12BCE448740F8B647161E5C322C9A2CF7
1D52FB4AF346B5D6F84330EE9F92F76660471ECBE9E1B82208B2FFC8586A817D
B4EB6B7378DFBF04A7373F882022ABF22FB39666A5BE83B6B7836E42F0C3564A
45CCC7F07E7DBD57DB1A1E3F45BC7A8F8AC11F3B5D595DF7EF72C6557ADD9D9B
86DDE788CF4576D24A193B41979A7E7612959209176DB59F10537A75543C2C61
D512217E624A37CB28AA02B9A6E6EEEC35CF2559CA6713690049FD633DEAE9C0
85BBB0276E4F7A66EC82A85DD3898C691A394EB7BC14C0E3C034565E56B1C92D
C441A84B2E3BACDCBB24CA63C88C0A5180B4A7D80DA1B848B50A9B2518349DAD
A8B5E8BE2E55EAFBD3CB9959EB6A42BA4523B34107E71F1884E4061B05B22E8F
00D6D186DE680F692FC6772041BB412398C6351B16D9AD6EF9A54B3863FDCE90
E2ACA2E6854382AA5CA5684B990A4F4B90D328199ECE23C1C4B7CA8189774E9A
87C770FD4A4B2E2811C33A3468EBFB7EA2F8C7D4D8C62C7CE00BEEABF97193CD
ED0E05468E12CA245064CD3D35965B8A3654B08776938DCE5C60D6A103756722
67A369DEF6CA94A47892666BA489F2CC1668F67C10F057198522C43F3A71CB42
4C40A41C168548C01B47F04C3991EE9CF96073C3BB41D0B5653373DF47DD7ABF
1F5FD0E33CD1453C092943C844C0BD672102A23EB00928D89D98E52A920E733C
15DA6BE2D42186E910A84CDFC22697160B441CE68D9BDA8D57CCF2F86B3D9ABB
4916F9CF4EC54D29A0B9E93E14B766CA8ABD8938F52506BF9AD2FE472A3FEB65
F796BCDD859423F3279AD4B5921A57DC0E956ADC2B3E665CF3F6F761D1465513
9BF189BA3E13B958C0ED5E34F70561F69313BC10B9ABB43E4B86EFCFF1C0D38F
941042919E5910A9D01E7BA921D8EF4BCFCC80DEDDC6498E69F5AB492C29CFA2
329B73E2CE44EFFFF0A9387FCAB26A8701FF77CD9102C512E7F85E1A4F3CFE93
B8D5FE94283A7984B7FE21FD60F946A660DAFD305354BD3090109653D88C40FC
BB20052C5F3D12117ADB430557DA6A6EE6478EE4F8293B8F417DA7D5467AD4A3
9C3E3E50064C50D629A448289DC7F176747325C76E0550BE3CE9D00B4248ABB4
F664CD29CBEC7F8B9F4747E6F18337956D72E1A7DB452EFA0029232CF1254FBA
E5E72D07818AD65508938FF8642BD551ED82C1D459885E7A21C39BE14F1675D5
7D24147D28731D15AD5AF11C3F6C0FCB3CC9B0F80719C82B4167589C59F31421
7A266493DCF088B8FAFD1F33A85B615B30A01122D445382570E2C3128B52FBF4
56C188E0F62293A937038E3CD484C33FFA5157941F021E124D16B9F393754013
26BAAD471D93B6428C5E1888B32E39E39270C3A6F63CD6045F57120BB5819982
A34C4991B5DEEFFFF4DDBC19BE6FEC994BF8F6F99550EAB6A5BCD1D7FA7DC234
E110A656AAEEDBFECEDFEF976AD707C3DA6F036ADDE89873A45B9AD5D12922BC
61A1969114E73DDD3B411F3D57717146AFF2CFF58C61C04E8D702007937E3138
19D7148452A0A1132E7923DA914B5009190D12E5B34122601497BD94ED6A8A68
3D4F6A773D24526FD899DDFA538EF3A73FACC5D04142ECC98E953BFCCBE61DA7
544892D7A725879CCAD9B5672CC627C779A922FADBCF3131235C7BA4C53E71A5
36CC4627E104C275988AF9D713F8A421C180606587B3B6F81F2408C276BD0885
285CC01B43C52F5C88CA00CA1DAD558C1C90CB0C09C81B993F6DBEAFAF69B761
3C2666ABBD19393DF1424F08BACB4CFAAEB7BDD15589CE492D884C0E00BA7FDB
F9BFD666FE6E2B211C096A1A6F3303F0C05AD6875C1CB5E3B033E16BE48F637C
D4F1D95F15794D7DAD6B04DB2FC2649522985C154B3A544159893B78C7FE013C
1CE633F2433A5ED973B10252DC8E088B346ABCBC6B2B6D522889627824DF1983
E07927FB28DA6F992B39AFA5728B46BACA35EB9FEE265DBB5A02764550DBF17A
2940A8C36962BC2FC3A6A0FE09FD6EF14CA9CF98163A6BA5E1EEB4BDDA2BEDC9
F5ADF2CC07169D9BF52D21E14C3D3DD1796A0C71EDBC4D835810CCA936AFD567
D8077EC4429EAD831F25BF86F233ECE423C158E3B600935FD62F961D2A61C41E
33E1C76693DFF6BAD81B5A0A6F29AD6694ADEFBD2DFF966552AC916FBDAD5700
C92CB435D3FEAD0F1364600A426F15750D9292BFA9652CE7AF17B923B5B9B145
BE6A69CCC8D8477470DC9E98857AA36A628FFCB7CDA2E9E7E42DACF7BFD2A920
F3A7345EC1B938107043F4263212EE7BAE3F80EEA08AEC478667C4C42DDC9F72
446A08C4D54167E377C69B00374629C74BA977CBF9D98BE73450398E8C7AAFD6
A174B75C1C071BAF5F03D3AA5F4DF4CE63A53D2FADADA2871F43249D4A6D0DEF
61F7E54C6A04CB568EC4546F8679EAF42B6D05A2E608CA59E9438D9841D3CAA4
C16EDA521925BD4FD81558BB16F67BCB63A678B06400B5CBBA23D475D79EEAC0
8E6559917E2B9AADD9F877A3085527E79C94D7AB5C286D4592D16B9154CF9B9E
708CEE2596B6665447236470701601D1269CF59591E0A16BD31793309B9974DC
754E64FBEF779B6200A10449150316EB0D034B365D549B909049BDD896A9B2F6
C643672526783CD22F2FAE18D0F837F2FBC40DCC16DB66BE6275511D53433F85
7B0C0E0CA4382200124B4E50647F37A368ED0F417921D9C9BD66A511B0F671EA
3C09D85A4E0EA963D411B0D99569A9A97282E8DFAD491DC499382F320175319D
AF9A809CC5ED83A2DEB338D9366BC726770BBB5D4B76D3907EC3136954D49B32
6860AF2A36DB29732F6607CC6766E9766A8286CC7A4E70B37A6DA592C304ADD3
7C1E4D9840AF87F832DEA79F38C99D973ECA6FC41FE30BBB7D3F03768B9D58CC
D2D78FC0ED88D929B61766B8AFA03089FB649627965D2B38A9EDC4D9E24D3D85
04D4F6898BE610203FAA11C154881A0557B4A64742140C81DB516E547C662B89
8F6535E1A43BCE67A3EE894AE97057B7FCD74AC98BD8AEA1EFFBCFF048F2AB2C
81ED34B43A8AA8542E9A95EBE2933EF1424F08BACB4CFAAEB7BDD15589CE492D
884F937B982DC26ED6D630B3B78199AD6C9F66398463169EA0C4955C098DBE8C
22431014B577586E2C8AB303C66C51962426FDB52DB3BD947789D61F621B1C51
CC67CB6C53D97B1732136BC1076BDEF3F084D1C0E481D3177950BD82014D8D17
FD43129057455E4A937B03DBF661EE96227C6C732E191427FC517EA536BC8957
3B71419F8115F2BD02AD4126F724A58E8F37C0832C430D9B6FA5C760B3F69670
B72A5D7E94AF21AF58E4A6B2A7B17D691A272D3602677A196CDB0C5C25F7FD48
D61853809EEDD3D5EC77EE31A5CB5F7B296BCFBD25B19110842EB18B8C456B76
0EC8B1AE7A7C37172F4405E8C16E116CEEC2D12FBF6F0FC6068392E9EC13A658
954DB458F4F905D1B866D26F646167706041DB09016A0BF754402B8695C894A2
82F786D66629A994966D8E5A3051B80AE691524E1C6F80B4C9AC15C3F0E7FE8E
0E5BB1C3D028161A01E97B38EE62296357FB62F3FE6F19D78FE0724EBD5B2D76
CCA25EC6705995573E6B933B2B6DFC2CE634031B2D25595969EB32264E3F1B5F
ED06CAE6F7B8310230D17C9EE8624D9244881FBE69B1E23768AFE8EE32B30757
C374B0F3967FDB0808B81004DD6253EB0B71E488BFE9EE1C319498F0F362939B
F5E2BA0A344DC4E531AD97BCD6CD33D78536EF77655ED398224973CD08AED130
FD13579491553A30692EB2893130ACA9883058B000B48C2CF4EFAC3E7594E6A2
974126501FB9071E221F58307729300EE8C3DA8EDDDAC78D6DE2F606722BA650
3EB004348135145482163FA6EC2C658547484D4BFB94C297FA929006B6D6969A
31D482990CB64C12F6FF094944AD83D2601C765867500B2E3F12AB4EDF3A75C6
20A66B0EA9577BAF1696A084D203E197CD62C2FCB8F10C3D73E57D8DADFF4E0B
CF5D5152D45EA327F0CB185D0673A8F4AB64E7117233A013D7DEDB5C3C24A911
062B984CBBB4CC233DCEC98C42B1081E7EE99C741A3E0ABE4B5DB8D41DBF4A75
714FD324FDEAB3594E3B700571F3352C3FA618182D57FB18DEAE119F11323AB2
EF00BFC64FFD0527FECA4C326D9D8B02D2CEC60E1260D65AA412E7E3F0B61479
28A0CCDBB6DA55F1F20E74F9110BB707C78475583A7943ED881F42404EE1EDA2
D212229961FEE51A93770F48749685A5121F9FD0A4953709A230CDA5EF3EAEC6
D5B9A077F06D0F86AD7367093448ED1A21DEDE2EC73DE49F729E8C3F5912BFB5
67F62652882F560A9BB88DBD9174B2FB781757737CB19A6202D34EACF2CDF306
EEE9D5A5056D77888B6395E824B0C53E84AB7EDA08481BDB635E337E367F39B5
82953184055574AF08AE5A4FFA131076BA25EAB9AF5C123A3CCE562ECE87586E
03FB174B84787F6076DC25BA206ED379FA98C230E7ED6FA8ACC48FFFB1B0191B
2A24ACEA677F77D4430A60AFECE29E29F8A94523EFDAEA22C9B943CCC49F00E2
8795C4BDEF02D7FE76FFB966C8E09F9C85F4E2BAC9E707DEB53BF8FDB977AD91
9493833AF58800443F32CF65799B8C118B915BC217EBBF8028CDA775AFFBA5C8
C7A373AACAA35C48B0D94CBD7B81FB4F7A90529619C92CDDCC2A22040C736414
30D64DAF4D57F69EAF2A24C58164BB3315EF73D6BAEEC80FE7EFFCF06FE0F6A4
8CBD11EDEE538356A8740617775DCEA57FFDEEC91140E7AD3AA34EE1290D0B03
09D7D97069E9178CAAC03DE8071E4310E45A84B0FF35C5B7E8792EA8379AAE07
0D5658811DE15B198A54215C9FCE61FFA44D52408C42749FEF2F0E2417CD39A7
92574758249035E3EE34928D2553E19EDC1FAB7088A9D3C8E11C3503F32216CD
87A1DCB885BE334806070B6162FDB3B1963A955C43D0F9A58414A458F4849476
A3C322FB4BD50A42680B76A4E9DBCEE8170E3E5917A2FD8B73CE7081509D6EE0
8EB1B2D5A88A8B57805E8BD59300C44EF7D0D1B6FD767FE93964007E1320966D
1E6DF77D4A4C2FF3481AA6DC0FA3ABB4D9FD9F8C9ABF54DA82FFEA1145157D77
B83AF9BB120C091870147CAEF216A5A7942F7BC5A61B0AED9984DFAF5F7E69ED
691C6AC398E3C7BBC94561D803F3B3FBBF28860925A7658E1482CD6A3F9C101D
4F9935CB46463F45428F425A1943D1F7AB20C63668B6C9C577866D63ED41E6FF
549C179AAB71E8A6EFFE9CBBF8A310887E2755644061680255408D1A86E2F6E6
51C960F3081D1CB96D95789ABC52B966030108B6938404F5899F8147185130CE
5931F7F5AE0E6A628623A8903BDCED30C537FFC37FFC5B471C9D99D29E82F6E7
65F21458005AEF5800E06E15B475262EF6C5B60BEADB59314AE0F8A0ADAA1918
53D0E4A61F72B5637727FA27B0E3F70F7F67E7D5125EDFFF1F486B78D68E217D
E2197E5C96C4640A43387816D8FB6C594E1B6C227805DCF438CCD94D63CE8B83
D4AD3A540AC00C809463C27326AC7A97C0E50C20AD6620D821636CA7BF4BC713
FEA091BF63247ED63910B3809358856E4E9980872F1CA425B6B500D9719849B2
16C560DBC0D4942E63A76E5B77BD0AD3BEAA220E48249C242B5765DE4733894E
F46C08D09267F235E4DF768F9CA2AFCB81C3E6A4271F2B6A92F6024809EDE2B2
B2402C3AC9CB5701398298382D821866B356F102BB9028425F71EF66C3D262EF
F1951E1B5F7E53E0737A397FDD41932F18C80A39605C90B2DAEFBC52337A558A
BC90B623AFC398052AFA60874416A43A6A17337FAA363C8C06EC3D3E9D918049
6FCD18A6C73FF4429265B6B00FC75D6240611505FAEA4E4A1E0C594BE54DB225
95437E8DCB0C944B3B21C747A34E3AD38DCED8424C4DA14793CBBF7A16F17D74
E64DE28A8B124472729B9270289703956BA1A8B0EEF5F78A07A7262419ECC2E7
8F6BA5D54FB7236008E5ADA29CDC5D74AEF3FEB1422C06D08EF2D25C1BCBDAC2
0988FF1591E435A60B9C93D1A9E9D3AA4B388E5608646D76CC7E3972D0204028
6BDAAFC1FCBECD5736F7CC465393D8617AC3B18B05B7D243DC0167B40150C70E
677C5D51ED13D6973D7DC46869D7D5CB1E4FF5A7C261AB32E8D6ED884CA9321B
DC5C3F3AB779487AA6859CAA9A22CC60780114F9E0E0BB3EE4F7F6CB91E82CDD
724C5E1D23949B68137F6079042E52D5BFACAED69EA6D99A323F5DF0E393778A
BACBC9A34B2E05BDAC79D6492D71C594D33B30DE0A6B1A98DEEB675FF4FB2035
90AE747854C54411F14FDA0443A5976A17ECCD774C12C5A35F29CD637643E84F
81B01C51DA53E007FFEEFAEFD6148A1C850ACB749D0F782A82FBD771DC292FCD
92F5BE3C641A9E670098885BEC4D957B66B969354B52183462F00ABF0861B4F5
0E9926DA04B7D11568CC15B4AC1F1825858C366890910703EE422EFF10547CF0
C6B7AB680728EAFD88C8AF0BFDBC5BFF4FA2201481D93E7E4BF05FA8DB0F4BAC
81116D5C2C2D8E6A2481CB09448C465B3FC75AF60ADB33D581F6982995D895F3
164E2A29FBB53B6533B9E23AB6F9C5319E4159F1E7A8B1EA1471BDEAD9E7797F
3A9CC146ADDDBDC983347F7EF05FF28AC4D9EDB942220678BB2138B7FF375C57
AACA10B9454061239DF1E4EB16B34EE0E57E3EDBA2BEA04B182A73ABE0498E9E
2D48801769531EE503BA4B81D9E8F4A282CE3CCB7811AFBE3B5417B04F233454
A59AFCC19ABBA5AEA718194903FD4EFA0D7FFB8CC9D91F86CEF4EA35CFFB33D2
E128C04A03206E9C8751A1DCF6AE5B70D8D7D9C66E6EC301C67002BDDD3CA406
53D1FC32F2D5B1882439169D02359BF75051096681B773809A89375102F0998A
A0AD6282D8EE72D14060533CBF4FA57A98EFD998962F216A97E189CF1F78C470
3453420282857CD91B592680683F401B7D810BA7902C2F2D99F8F20E5E3FFB3A
1235FEC410FAFAC56DCBE1159C68D52B0F1E778C3D75097687580DE89761E99E
EBD027236DA48F6335451F570C39996D7AEE5FCC7B93781A5E6D6066D0E97D14
487C05CDB9D5293F54D5BAE96B71A09610ADAC6C38292458A49C41181A1A42E6
0ED739E2C2E2843D2BD5D5CD3A123C6E267745CBF35CEEADE84BD2D2720BD967
4E2ADF052007F9104A9367FAFA9FD538E3DAA62B3FF0C1B61C8FB7FD9395E1C1
E42AF8F0624D69E43D6DE84194A4D791F756E8DA82330C368289997AD2FE0801
172858409D442D2CBBBBCAB0DDE4E68945C1299AFF85666C75B51E4E99137AFD
2693F7B41B155F6B10E7432E09D016A62A2BF64B1CFA93F970793BE9A3058FBF
D21178FA6FEEEB3B453EF25FF319A8B472BAC3F6E6F0721E6A366A0774761EBD
69A115D34246F481B30B80EB23D784BBB2052C4D991DABAA52DD2AF21A082967
FA8C296C869592545B16FBB619AC0E2B3E83B0C84AF6C46784E38A32B0CBB26A
85AAD0FF2FA9D0937A804A8BD1544B2EEB2A10AA097913D6879F28A57C5F3DC7
03C9FD0CB90099EC152FB24AA81537A78D7D8108CA136B8F0253E915747B560D
FC0B05F98EBA9C2305D490B2BC17D9021CD17CADBB964C929DD0E3BD10CB440E
DA236D4E72A02BA83B3C6E3D27A794E52500716DC1D69ABDAC957710A76C18D6
6417DEC9428CDC5A76D1D9BC79FF555E7E9BBC4372EEDA8D3AA52CA205142DEE
81DE3F5DD5FE99ED5D90395FD9ECC2FF339981EEBDE24C315E9262CEB533A4C9
70703931BAD389630E1D730277EE4ADA9A5AE6411026592716DC667C29CBBE25
32C88C0C445B13DF8AECEF2D5719F5670428AE7D9871F46D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 163 /multiply put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707B7C7A86D35ACE
A864AC9AA953604860396833645595054D2718B0B6540E7E82CC9750FC4F6EFA
FC58E20F59BC85D3F90C1D80F116C0F8E8570C8DB65250B1B47B09F38FF51A5C
43656D0592C9CC272AB76E086832036A50D288B3C0685B6675CAE3A6F551B933
5F9ACC6B0B00C61C0E9BCC85539D051CDB09CA9134F73A7948D1CCC47C98E95B
171E4E4324EBC4B3E3B96F60110E9C921D4C233D5B3B225F83C46677A588E273
A4DA7D38052A4E987C9CBF4F5A6DEBF8C245D432088EA5DAA5DF1DB73B40E26D
4E4FCF390C051C9F93A1CB85F9B99CF36D23DFFB1BBCEE57
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB5ABA6647F9C52
A9177DF0A2C22BF2F77E5E771BE54B09E2D6EB78092B3F91CF634CB938677998
C8EADA678CE13E315FC78666A5E37666C66EA08990CB5F15D022A8472FA6AE0F
E86DF13E7C83439A1E79C678CF7C554C01361759D961ACC52E50F44E54C91348
4517D7C558C8EACF116C9C8810A52BC5F967CE6CF0299E45743985F0DFC1C267
798EB3FC282E9A80CFE218A4350761ACB1FAEA783479625796D4EBD109E5E69F
3FADF24D0514953B17072AFCABFB8A49B81F8D0303379B80399771B0B2117A0A
2FF8BE67751B687B07B20377BB9367AC291B55546F61B64AB7B618E8B1CED551
5C36F27668412FFB5B4CCA825DCC6DC5CBCE8553DB81EDD3AC2D20632BF67AB7
CAE2757DA556FB917097D9374B67848809EAEC105038F270FFFC42E478EF5042
1E039D83A60EFF4C3D6D4E157F3CD3D8E083617BCA410FEEB543099E3445DFE2
40F412B59BC47D8F2A94A578D51680C9169C1EC3D2F7A9F06911BB5A32ABB94E
9715556BC141C5E6E5BFCAF07F3D8B694EF741B54123475FF88DB1ABC9DB2D5D
8E6ADBEFD1D5E7DE642AD78CC6DFCBBA81234D04A0DF615D6D307D8F0C3D4F6B
3F6D395A9D9CE7952F0D67870368709A54C7F545B5A7376D231490C68369D7AA
11958CB98BCAC7C43A6586E3C44AD05EE7D0DB8FA5BEA6DF789662C3CD346E7C
0C519F68E411E47A248FFDD79D1D00AA769D739C161E40A8A8AD8074AABD6A06
EA11E40F1F4F49C6D52B4A8B1AA257C2DEB9689E200925D85FA2343A7F59F507
F74E231EFCBDD4AFB595E8C3F0E8CAE46EB65FF475692317C3E530C6D0D45E4C
2FDB684FC5A51E97771C1687BB8C208C8A4A69B76313CAC04F35C4264254223A
15094E872127FED1F5D38300AA6806CE4C8A8BF7CDBEBCD47EA609AC5BED8742
C4F6CB06BFE6AC14D6C89D60DBE2E17850FEEDA72C8A882CF26B3943467A1870
8A41B051F31A13C3EA3D583D1AA7F8BF437C16AD70B17B9AFE2E0C0729E5F104
61A8DDBD433B73858600C7D9DC544694E25F259B039558DA3665AB056C27A87C
E961E0DDABA61649AA1E4BA1237DCBF201DCB485D18FBD2E0FE571BD1EB145FE
7CDB55F87994E36E7F3CB0F128274D559A0304705FE55B6E06821C578198FEA3
B8C3CEBCE2E39DCC9D10E15DD12D2EB112537AAC2F5BB0BC9DC33B6CDC033CE8
F30271DBE38063F9326C3710CF8A8136ADBDE0D75B0C7FF9BF332D5EB49BE219
77146C8872ECAD4D82A933ADAD192D2810B26906E9E6BC229D511F324E329561
761B1750C8C86BC7604D84382347522297D1EF900E8BA256BD12E38A9FE90DFC
2E0E7E928AAD853268D73A68FF9238E0B18AF4114B94CDF5DADB44EAF5DB260F
6CD38CD0DB6335FC4A6B27E683A4B83116D297C76562ED1441166D7781D4D80C
42DF15FA0C223FEB058899E07311783290A0EA08384809CF652F1E602E7F2567
752F655D8C91CF08EB5B1222A0043B001FE5C898E9B2877B4D05F3AB9FE13C64
C2287FF3E9D5D12E3C861DEE273B2E7D2DF24878CAA34EAD81BDC76197D84DF6
2DC6AC474AC2F11808940D6E9AFAA51EF6C23B0F268B6A21389CCFDC5FC3AF1E
9DE106E3CC7AF6AF74C74C039D6C2D64ABED52F0A005B15A39141AAF75DAA602
C8687473C07F4671206794D6EAD1708AEE4F5BA297FF423AF24B9E1D2443EF39
7EE0AB134571CF150A52E231C267046C4EA27240E41504D3E851A060A4AD1509
1C9B89611F1678E6FA2F0747FA56525234941AE96EB4CC354B33828276F2264F
3155D4DD61B1B6BFA7CE1C797A817B3F07D7480D40F3482CAF92C73EB69A7F48
15CA118A1F48D2693A39A134FED3383AA3F2A179BF586B28D74A7635289B2281
21B43DA2B0989211DE8E3C682C963CC70AC0A353460B60AF299F7A6109C4C7F5
162567EF0BAAFA416C0AD756816DDD351E694226846BA43D09D499953DAF9340
ED908E5D3086C3501746487059C5159A00A91C7B8DE39FD0CB801881833ED23E
467C820EE0AA0CBC6BFE92E3B34F33F2254DA8C164DA15CF130B5C7DB54EED63
5EE8E98F0CB5FF65FF6DD7C9E13A39CF2EFFD0DC696282107B8DC92C1620641C
C75AF1F20897BD0FAB1B2FD020090C93443F0FB9FC74E637DF7A7C47091724D0
FDEF224A1ED054FAEB7C41A0858354B42706AECDD9AEA75EFA4EDD38DB5710EB
FE0078093EA47D0DA522E23E58C6F453ABAD7378A8CA6091F5EA7C1EA649164E
9AFD5787758D1EC8FEA77EA7A810F4851008FE54E686D0037832AC20085EDA09
54F8CE227028F10E36B8178FF88FCE03696933CD1FD08FFA998984A2DB27C566
399611F568608C6A8E353335EE276D9E9E059BC4505D421DAC67295BBC1A9A20
21B064295C22677DCCA50E7CF54F6C86A39390575D5ED4A59BF74D1818954E57
323C21D8208CF7F2854D681BBF176A08D3C975EDC64279208BCB741FCC90E115
F979056CAAB4BF0457368185132C796CC2F65308D29E01C7933A960D0892CA5B
187B18772218EE8244B5225E97FEA8CA8375AFBF1658415CF702346306E88069
A03FB214ED307DED98F55716550613A12A08727F3D9A8D93A300D23554B55E61
901AE90C61C7BB0BD60BAEB18A4E15591C0BD1542C638A9A32907BC6AB6E2B47
61FA8430E43AA7614F8B47476E4098ED693455F82F098F49FF487629DC29CC96
95A77009E865486E5EE1319968FC0D479D8791E16FF3F53DF9BD09735AF52FF8
77806442197E44EEC0E9A6CC520FF3C45B5D1F4889E4A1C039D6C9F6EB5F21AB
2882F63A17F2F388F9715F8A297A9251193FA2444334FB5421F839B7FE61A3E5
8CC805DEE0470AB990555BE6A705C38565CE02C0350F3C3908A24FC0491ED420
8F2A7E2311CD90DCDDDF2859681D723E0B4D2F92C01428AC9051C9F5AA344BCA
6CEC10BDD3E5EAF6B977FD1DCB5EFC2B60537995FDF06E846CC6FB2EB988DB62
54CFD706847009D7C0011294084DEFC182CBE1F42E739B6485473B414FCCA4D5
C10FF9A1A956BDAF4392A5C844DF9DFD50B9BEA18D947C731869162F1B7D6262
5512150439080FB47F44979B7DCE550B19A610AC87D4D4B0A80797BE2BC7CA32
B45F3A8AD84CADB08638040D27911D5CD1C2DC6575563C69E4BAB3301CA9B795
626F48588DD09D1AAF7BD67A5B1D56F322DF0BBEAA28E83B5C94175DFB9E11A2
C185E5F991DD3782849CD9E6D50ECC4420AD219033A38D5E5753843A42942A17
ADD7ED20E5A361F1507C31DFA2FCEAFCB4B635CC9D88D8EF06C084C8DEA328E1
7BB54AFC5B7A19E38845B4769E2125098176388453C433C0C5299769BF8A3C47
EA80A353B71E82D1A53CCED0C1DF4B83A1EB775861645239EC6EC6B59F471F08
256118B0867DA2ACFA39F9F6EF1D81C607DDC24A8C9100E693C1BC5904C3D731
1225F94FB7236008EF962E87A50DCA2EBEE2FB931973471B2FB642EBECEAC74F
CF60D33CF0386F6A52C8265C910AF297CDEE3DA9A7C495EA195FBA5376618933
5DECEA4B16D6EE1A03E0E9DC461B68B397F4E6BE8EA28AFB7387999BECED0AC8
C0D796F99D4B3778E50274F69BB81ABA1EEC1B49E55F4E37D26635220FB98495
B2E4CD4729AAF9B80ECC6F285120D4500F7D6E49783E9FC958D3954BB4737612
E8AD7621724A6E83151BBF93BDCC6AA2205EFF87FE0EC05A9AC0086F205415C8
3F3223178394A917C85BCF3DA38231EA5EA1DB1FAD71C69F5C5C9D103BC20518
57423F60ACBD3BA6BCFBFEBD5D3333E32FD2DC6FCFD5299FFAB32F02A35690F7
D4F3C059CECB78547DD0C8BEA8216B6B0304F3E95AA5B5D4FA8B0127ACC4AC17
4EC1B30B318967776FE765D7E1A4D9DD2286FE615CB44F6435D089AE6B094891
2543AA98663DA46206E724B87F6F579A3FA186BBB9242A41E7D69E159F8EE8C9
F376D815591A418E23AB5A20D6A65856C1B4D9DBE70E50D7C2847823A4DAEC63
F61C9FD1837465E647493FA70B901CD5D2C491C9F04672BCFC1105846FD00ECF
CC2A6C2A48318278AE50447D3BF3D824DC433DF9EAF5BEC259E629A5AE0554C1
42BE9DF43D486CEA1CF906DED98EBD884F907ECA890F7776F2170C9517A83FDA
3A56B9C9B9FFEBFF8E63215CBA513A66A805D4E8458DCB00BF5D396A625682CA
CA6E49D5A7080B97E6BF43572FE508B309F684DDF7AC124EF118141DDAB7C838
DA24DDF64CA864F850C735C2449CD974F92B8F57385C59F05208F6E34B4CFCE5
CF6A687785282AFAFE632A666964EF77572B7FB2D4365582E4B187B327560269
959F55E4C6C1C1C3851FECAF5B1A043142279C334AE906B7B19AC38E487304D7
DC5D72D3AE8CFF77C0C883A9E1C2E487324F98654398F592243DB22EC5558745
504B23DEDD6FF8AE2AEAEB775C36825A8DD934B2D7BC4756697C6B1C89C46163
7794E521E1447DF673F327C0031F415662B8F9B317BDC865179B3FAB830E1EAA
C293AE37EE0993D38EE8F733AA7E3F1CC44FC24152AFD8E79FBC36A016CF0C4C
3D36B1629F9EE5B00CDC1A77F816D94488534EED218D62596FB03D879D900E21
2698367D13499797B79D0F01DFD52117091EA58204F935EB454FC0099D03A9B6
B8CB585B558D69FB699E5EF78ECB6C3E02F2391C4FFAAD4336485241DB6573D0
A1958374CFE21C11D4C3E93796EFD5C5D185DA8A80553F052F97988D4B276110
BCA39FC495BAD4D66958AA329DDE6CAB90B3FE38E49F75EC083CE8BC21340E3C
283EF9BDDA9448283E6E547DFFAFA5F179EEC18FBB6E93044CBB83EF48BFB084
63FF8967E35851A220C17BD9B7A268F55CD5423525A001FB54EDD9521C172C6C
C2FCBD09F82ECF0716F5378A8C51C139D72BAA2267D27812497EF6A45BADB374
BD1C3CC6D8482BA9789619F0A24AC76F9D709E512323E167B6081364D2B046CD
25DFBDD6CE0B44841C58E8E054B9BC7419E45ECF2D5238C8EBDC21219F392DDB
EA93A5672600B56B86142774EA23C62ED0271C6BDC781D4BCD68D656301406B0
B2D2984FE939381463336FC6CAA328BF57F4FE79D1CD706B4979DACD3F5A953B
436D0BC4032140E62F60E5D6FEABD9E47620ADCF88E1A1673D6A55D10DA9CAE6
5C5B0C088AEC27DE0076EC2EC5F86F047E55595FAC6A81495BD6A549F2094AB7
D56D1D8502C0E0A1AFAABACD2B137E8FEC0D0FB54346D020735F10BC54D70E62
616DE49979C7740BD3F3154883CFE4EF0460ABD63DB61E3186ECA5E7186AA130
B0553B3249D6BA064FB42B71773A22CA4928DF56999D5E9FD505CB2D368D0F4B
CC5D71D81727DF2A91218F726809BA1644C7BFCB667D8A6123F3B3A1CF28F625
1BFF2E3952261C0205AF4A5CC395A6BBA01C70E7CB7B12C59F15DCC4D0383E7A
3FD940B5B7DAD0B39017BE7D93BC5B9D987B94B78E61A8D53AD72539F0B506AD
8AEF3AC3AFC3C03E6376AF36B25674AFE4A542C8641DFD43393DFE76B848FCB9
BE968198A0D0401AD315690BFB4053B569BA0DAB927E1D4289E7750FFE67285D
6125062F1F495C5D85F5543B1F1E057EABCAC82F068E794CB441C3EC42A4F9B8
BE78D72AB7D4DB5FCB432A0B248F50EC728917DD2BF7208B8C2529CE5E4111CB
B1B48A5C1C796626FB9122CFBEABFF7096E3F1B84E35304169685AD74643F4C9
3B993B79D1084CC4DA460F25024E6AF9EA3377F98B0FFFACFA28B5C8451E56F6
89BCB5E98747963B96C98D55E566246C5148979C67175352C8FBA28E3ED3B342
CF22FB18403155F5F45FE6A7D9DFC00D517D94E6C8FA765468FA03F2B930E942
A483AE39248331508FEC2322F21A0015387BE456119BDDDDEF868A85E2680221
EB9E3DD8225B9C352F9AD718154E0D187F6F25E20180E07A50F174DB4935A0CD
72D2269D74A4ABCBDDE3DD98EAB24D3703A988BC749C8609E85E4BCFE8321E79
626B68E1C08F0906C711E547A5ABCECCFB2D0BFF0E3CD23870B38E4100D67A32
BEA46CB24F99FFE52AE0A04937B072E3734EBCD479F29B8BFC5DA3EC006C9A00
EABBD70A7BC5EA99E6F5DFDCF11862DB81BCDFA04BF33A0F81944442A7EE5545
B995DC6E397AB0A09515D545F92EF1E5762191AB8E6F92F95061B072C3D30B91
AC907521ED5EC1F02D8CF8751BA554EF5D7138994B4F931C20D002682757152A
2BE256F305BAA5844F2B0399D7689ECC934028FF56868E7DE3C42A87CFEA838E
801C595958F6B8E22D80D1148B449CF1DF8E35E7D439266A453C68C647CE8EA1
2552AB0F918E093F5865DB9B3F88B9E7E3262FB036E1F51B26BFCAC3915932A9
CCDD82F5AAB27AA9B071B8493902802AF4206253C2DF5F8176CC5F6B3AA309D9
C79B9252299DA13DFE68404AACF7C7787592DB1B5DEA54A92603EF47888C851E
EDEA34F0D77551B8EFD72B485F950B8B4C0F5E25DA3D226C5CFA52BAC803F748
3407DC1F34EDDF404F81005759A41D4FE000D5FE70576EA42390C0C423C7FB95
D27536CFD072726D4A2071CDFD6C56BF5367448F93866D747E28E783BB13025B
7D4D432C7826931219834B218963F7F03C3E96CCECEBE6C72AAAF22A9F8CA384
90966FEF7537B25B0BFB3A2D301EFBE985781E52F77845B4EB6B73785CB32428
4F9E55A7844067F4B275911C5B90FA36190DE45692F0CB5C7C49D40D8F7C72D8
AC236FAFB95D0FEA6291CD3E8733A85F5D175329AF42B888C688F21F4F14EBBE
6A2A71546F85252324096E6F243EF17E23D9D3DF896FB2B71F3010495DE9D8E1
1EA7311610B23C2686B6FB9E88B3422064B553ACF61580D51504D12891980A88
00CEEA2D593874851972B071068FA3F62B7F22750D522C96810F4AF5584F6BCC
0D8240EC5D73A87CECE176E0CA07FBEFF9C1E5037E7FA51B7207FFAEE928681E
F627A2A8750D54EFF16EB5DBF0D3698FB728D6EF1C72582B4ED9B44A3DC5B0E4
6FDE1B9278849118304F28D0107DF8713123096F4C6EE1A2D9E37775CD0B2D57
CBB4848224D6CBC03BAAF2DCC72D67BEDE83892A6F2EC66E7EC0197F7C990025
EBFF4C640009A63D12B79F6901EC558E3C62F1E93FFC1303A2C3689689E12A0B
66CA1A70D3CFCB93F841AC3BF3BF8B0F637A82984E24FD8F78A049771D9AA841
C79D203FD521CE6C8CA6F0A1074249F8EEA02A4962724B044B845210813C7777
B9359B69AF30E4FE9E41A6C2348E4671358133833A505FF419414784374F4772
41551D4402084F766C475171289E0B452D6FE612CCAC808E59F69D1E2702ECB9
C9A702D8876E0E118DBC8E4E2AA3140C63EA9CE7C77662CC663DAB2EECD5C852
599B319FF9CD6C18887FBA955490C9BA87C3797A2557133C6BB60E204B16923A
2819747CEC01D9B10A106F17B39A5A1AFBA562AA96BAC6B9400B1B043A0929E7
77C5ED85D8B6502C2D4182A70747A224277A52C894A2762C9135D3229F5002DC
1BB292DE46D4004FB772D6975B58302598807724A24A007D82C75B811460BAEA
40F9A0BABBC12B43A330D02BF421825A10A7519E958390F72AB65858B8177232
1180A26B38792E11E7B3FE14DC6F0A515AB6BC94F582E2A9BB567F4CC70A3674
E986489CCF444231390013267D800BBDD12E36E27712B91C42359880230391F1
F9AC85E59570D609ED9D03D72D86F1FB8D1E50B468864C1DFCDEA488144706A1
B80D55BBAAEA2CB31B9099BF21AAB7980C2FE0ACB1C47014FA212AF2BFB06CA8
14AD93452DB10E4465C537520092CFB1826AE71E63D70CA13D96BD59C55A5775
3BE3585CFBDF46AC0962865840B1052D59B8F4DC7ED409278357375058F0D747
08866AE6FBDB25E1503790F453A9CB46CC9CD106FFC6F4FA2E915EBF45027FFF
668804EC16064ACC8AAABA88024AF20AC860400D6A027C9DDEB655504ACED573
4878524C7FC8000D85AEDC3B90EEB905D301B6453F400A1C792890D8FA0E198F
A27CECC7A2DE2DE9462DF4721D8427E5ADAF5278A704AA73742EABD6695D86B4
1795C84DB1746E33F5C0CDC9D166E7E6CDDBA5161B65206415EF145BDF7D933F
59D4B4D57A1E20701FF84A6C88345C9F392E7BC74BFB8C47E1EC301F61D2EE05
8343A765F04C1DAC23B887FEF90B0EDE16F7FFE5CDD04FE5635E5ABEF3B995B7
8FAA71F3545CDC72CBF13D266D599C1EBA14D78D8EB14FFB356307697FCE8688
FF5BE33B3D34102C9F418E78E3ADF09CBEEA70BD76B5AF1B248BDF58FDD07E7B
F84297D8C39E1C284CB0F363CF044F38542BBC5C8CF7AC258F901A0B50141288
3466F2FFFD9EC7E9444137B0E4F5E53CA2D340EA7192B42926CF2AC2CA766A12
7D25C7EB68DE604375D3A8A4D697FB6BA733CB6B100925FC6E1578ABFAC93AC9
39AC2CA46B3CDB54F46808DEEEFAA4A4E29ED940E9262CC67D8CB6E6112DC565
15F2507D75C0EE80E07EF247CC67C54757095A7F607224059584BAE9B81B733A
F5CDADC3EA6887BFC7E55209CE4E2942EE5E7E5C4A3B2DB0F98B3CDA756E047E
AFCF27D084543011A5789A3F57D16F0513EED8AF52340791658D737F8DA646DD
5A005214CC0FB15BD81E194EB0D4993CA31F05D44B1D878AA3D3CF00B4599C40
76D4B2CF376449A26F91C3AB80DB4844F2C48B329002FDA363411DE10FE5FB80
D9215252597367BF72B082EEED8AB079C635E17D3A221619CA03EBE2F1EEE520
1FD373A13288463F4B4E4BDFE02FE1DCE910570BF13865EA185B4740A9130D0E
02B96224A837B5CE7B3A601E0B20B3E649D5EBA65CD8781A5EBC518E9AADE871
71CB0BB916354A5BDA64C55C4341F5F28AA743D69BE9D139414D37929F94A0F9
587EAF3CDE000E787394236C548EBB2732A6E4589DB737C8E22380306FEDBA44
CEE66FCCD9EF8A96654DDD3454BD3B02A807DC0AD0C2DB94ECBB17ED74243FE5
1E6BAD891BC2CCACF0C9E1BC50344581B7B41CE33E468014DA1E2925C9442D6B
2E5E4470BDDF66FDAF3771EC118B6420ED41D724F6F33903DC902E682643914B
F569EA1F9CA8277788FADE52905B6914345AEB9DCC214E61E8D1E091AEEF1864
ADC733AE203D931CAF0336E38390D473C371FB1F39FC9A6EB3FCB5D95971F741
3A88828AC205C816FB7FED803064219D426111B098E5951AED115AE9D4C6DABB
42C2035536E8F7DDBE1B04E6A7CB6FBF65104B93E0C7573C702A48C722EE468B
FB696C84881BBECF840080C51CA6FD9C78AC2A3820F09323A756E7A67C5DA7C0
9EC09D104723BB02264F5BC316DCD5ED06EC4F5E8A91F925D6B528BC0F95702A
95985E3CEE76DF3204AEC1961F654E12385D1EC21D19E4D7698E18525BEA6332
0AFC3D76ED738BD5395DCD5668E2FA790C5036965090789D4F09309A68248594
8E77F4FFA832A28378D5955C2CE2C8F166B7D18498AEAB8114BBA5CD32D55AA3
E61DCAE5E57A9D3AD3DED4F1EB821AE4DE7B72A427EF5C938B1C0ADB86C0BA66
35D14FE55861AF3E979AD2F94F45ECD02BC1BAF0E033DFD0E11D1FE985D1AAEC
205BDEC342F802FE4A674B26A1BB85C116E1F1843D918BD94D7C2BB27937AFD9
641A2C56163AFF78DA98338CA7B9A3DA2ED52F6B94A39AFB47EEEFD2E06F8776
DAE4529DAFC1D266C3CD4D3B96238CFCC954725A92AEB557B610A26C944A4CB7
A3F007CB60DF53EB29BCF6DE73830FCE419E22848163FCD7BF8C5871C78DAAED
58E7D84095FA260EA13D49E20486BDF6B083DDE876B25F9F5865AAB3BF1B8F70
B47B49BC11A7D7613AA7C519BCE1182B6C30F93DD0D7DEABE9DD4EB7B1D37BA1
3752B6C966C7A1397D801606872F71D9A3D3B50E94D207123A5B05FCAB7FD90E
2A9A4EB7F7BFEB69D1D202871BC2B15EEE8E1AD13E7308928E75F3218CE7AF43
956360D95D5DAC9009FAF1D1CAEDF7DB84ADD59CEDCA3C0660DF163D854EF6C3
A694BFC4C5F0B66056FF059F996B83FBD1511275A29FB284F38140FB76AF6335
3B29D0275E10F95567168AA785FE3341FE4506412DBCC1F6C1B64632B2FDBEC9
FE7C7B0BD419C0E0CBEAE8E76815C389EB932443AB7C855B75672B3C0029C812
E041311583C14F86BF0CB18D048901F2F8E7F34CD5B1132800EECF73E62E6B46
F76D950132B8B91CC2359D6CABECB800DCF320C6AC224BAEBCBE2350536D39CE
A4CBA7CFB6D6CBAFB766754C0E8934F9AB738930EB76531AABFDD80EE0D2A55B
CA706D9B820D05B81C78F8E1555C561148031C0FEF01652789EEBB91F094E6D5
3F222F27541EBC87444676534794CEAB380B1E461C5432A91CA09D34E4295AF8
3BA1604D89E7D7C3A2511C0DDEB6EC8017D35E25BE199A9AB7892E680A23603F
22671739D04D5648CEC7CAEEBD3857D3716AFD38956234C19F727445F29AC540
33E2AEA70CE57180265F10B9458B6B796FDD65998C53F28426E5E4E2EF70665F
A751137683D06D2FACBE1FAC3CD9A004F3ADF4F2DE14E190F50D277428A523A0
07162F330F648A428C753F20205F80DE024608D28DEF261C3CE14538C0AF5D07
EEFCACD74368BDAA7FD23F480BA555064186D54221F9905123E9C78A275CE60D
E40C6E0B8CEAEC427757048ADC8E402F8A7548AB9474419099F0279F6755E232
669B65A7A46A6161F9AEF7C3774BD09EF6BB51FAA8F7A70066AE0198DB15A1E8
CBC106AE612BBF80F4BD0A76B801C53369EF2AEF1924EA617137DC8441EA7B8E
6A353FE001C63AD0C72E1EB3CD9D224B0BA4B135CC8709B34137EBE447A68F1A
9E8E34F73ADA4ED0FE8C4EB03A3CA3D46F77128C54749538DBD6DFF58FFF4C5A
60CCF5DD51CC3DCE518DD210DB1E8927CB1347610D835EFECA02E3020C4114F3
764154D3291108D5756D66B87C838592437274AAA30B1535E3FB5359AD58F6EE
355E59BB68DD231AA12C325917C9CCFFB372071EF2C7CC21A13A2996B39419C7
F33A734CA9DC0943D38999FE0F739A93A9708BAFEFB588BCE8A7472FE6E80B5F
05F98041C13A2A98357AF1CCE46D69A9E54D93181B15906BD42626C327C4040E
3EA1DCF804353D5A13715F67BEECF4995DC35D4691A78401D7453549879CE63F
1396B65C30054793B82E7449725260F4476B1FB2BA1E28A9EF2072B2957D98A1
2B7D4072EDD342E3811D561FE3F28B65CF383F4F4AE6DA18151C494368C0141F
E3045BB64883A4CC6C9D8520C55B4246EB86726B5036C8C278D5977B6B0F1AFB
9945D9215EEFBFA4451E0260FEF3C3130BB0B343CFC5807C5516518BE6A37426
7BB29E09CABDB2C6516DABD9A833DD510EA6B70B2A3E33CE2C906E7424CC62AA
9E10B40C19C54A3CE464FD2199359D887C2344393FAF7CCA496E1DE771B3FFD0
92BB48934353CA645CF41F7D8CCDD0C64D459276BF2D8F25F13137C7F1CC459C
B3B5410B9601D6A1D7AA6FEB987470CBEE6B16CBF7E8B1B82EAF6E4C628D450E
7E1B4025089EDF05D020C458C7F0B362D7214CE3CF8764FDEFC9ED5DF5588991
BE92E4F10CAF48FF5B4CCA825DCC6DC578B2D39D618F4F766175774400B0E355
DAA659FF0ADB3EA61C74732FA69645154845430AB092898A33CC5C8EB6100A15
BA2467633D124864AF6B9D3EA5F9A365966424B74C146E164A73A891B1D5EEAF
EF36B98DB6D4EFB80667E13089CF26D9A5438B5F9A328CB6405B493F070730D8
E44699F550A3A1BC869BCFDBDCFA0F02867B14231BBB965054BF71142E02F97C
5B97AE0BC57BB242CB02B60C8FD628814DA7F9A3B791BB408B9E8AD8C9239474
8A2266DB95782DA155F8AEC542E9824FB13A05B4BB7F5B0B954E70785D573A42
11394126D74C2B71C23DE4DD514429C9D2D48615CBDF4A86720E67492F5FD832
FD290AEE8F4A968DEE04A36B8C34A9B308AFC00A6FAED09691A6FCD3FA6A6E0D
4A95C36248BA8AD72B6701ED3474764A03F2F762FAEBA47B589F1A6E19F9A21D
E73CF123CCEE639C84C4B7DEE9DC974554DF975D029DD1BD6AE6477F001966C2
CA3EBEF9F84B7C1C08FAE5E36667600B6F934F53024260F7CCC8AF9624D0A77B
4108CE62D4DE962791BB9730EE40E7775E817AB16C3EAE5DEEFF85536BB42381
6FDECA10B9F0DB9ABE76FA7CEC6531D2F79622CAB32656F8FBE734AD038D31AF
54ADE5803272A4D0002A29B9B84CE64AA4646DB6B70266EBAFCB627FBE044FC1
29E67F16A087E93990294AD4CA6D47D335EBD09ABCAE0CEDC259B351677E46DD
9D434BECDF6F5E11B2443FD0715F3E7647B80849C0A77BED1C0B67A1125B7540
B782ED450CA71B229178DB4BC004DA8990E81D7EF84B8FD46B31FC9CCC794530
43F1BED5C798B9B953DF2B59A887DB06A242AD971B3D2999025FFCEB63648BF9
9578381B4B07046208C27730CCB78DC60B9F540FCCAA255C21FC75A7884B6A19
A3B748384DE19ED05D60D62A943FE16CCA18AA0E117F02EE5F9A132500101367
888501084DC0E08C247A03E88E6E0BA53674E7E8487B01C1E13779D75A890C62
5A106DBEBA5982BEFE5303CA39D3945F937186DB084D34DE882EED99A71C68B9
66ABA34836EFD1132C25D4BFDD651182E7291304746B516C314E07668FF731A4
3F7E854F74C219C4D41434ADB6CA0DDD78B8C63A869B5A82AEEAFAA4A4E29ED9
40E93F1E4B626C64FB8A8EA5DA285755CD55BC19D72E4E63AD2D63EBDFC06DE9
F5711D63FD2256084A5D3386EF0A47007D9DCE46C58CA5A2C4C39C65378F5B47
1FFEAA42041C0E4B7D064A772A9CD67DE461798179981141692DD09000C262DD
D7A32E74C5763D5E5939EFAD77B643B03A39CEE22696A9975D290CD1DCE2E1E3
492C534F64632BFD5B3DB8BA115CEDB5CBEBE7ECDA34AA7390165FC227162C71
EE3BE295FC1E1F887D3BE7A150FF00F7ACAA23C940EDE07CD5AB81A1BC1E418A
9156EA7FCF101A97E5B101395027BFF26B3E844A96DF667ED2B076619760D603
1457E93B470A61CB607103B94F7E9C3EFB224A73DC01182B2C10B2C735AD8644
7EA8A841CD18391E89D2A498698B6C9C1C8587C1C0556F04F620311126413D56
6C78A236CC0F397B5949A739800F92BC9E43FFA9790A7DBB022F80BD92116990
9D8D6F2C2D24F76AC1D4B9A64788063414F88CC02836434A0E9DC659BA2B23A8
9051AC10797E1EA0BCBFFA1973D6459EF137B5D99308962B0ACA679F4E928A2B
C2D49F892551E0E90296AB407C822AE458BB6B1548EF99F413C39A5B37EEDD4E
B78DD87325F9DAA98F6017FB513C93C7EB2528CC35EBFAFD3CAE9055BD36131B
05CBE046F28A60E1AEB7BF91394D91C7EC0AA56849DD4C1F43D9312431C029A8
9AF459678295D3A4366D9225F06FA41F7B4CAE3B0F4D1AD56D18E868A23FC3A1
F65C123AA41212FA67EF6364E8A27F94C7F41CFA742B39F1136853459F73D3D2
64BB460490060F28E18BE008CA18CDF295895F13B8047596F071599CC23B0C2B
3F45557E969D571FBD34A9EF03694ACCE16198D8BD645051CD6FCE5A3D30DF51
784F601107558604626F540245671B118D4253814D3F6B1C8AA0D625C2C318EA
95D248D2B8AD117442D802DFFA7DD1CB42CC8BAA896C45D4FF4C1EF45ACEA770
ABFE6987857E23CEF2A923C8DFBCC103D98D61E4876ACA3C987838E770803659
7779CA60DA716B6CAD1D2283E5A2CFD6A340B8C1DB07C760657E9DE906E1737A
27BAF43DE51D23F7DD0A9B43BBB774E688AE87016491AB1A14863DAACA187B21
DE0721215A9B8ED79867EE88DCAFBBD85A6251F22205E7A89271EBA43AE629B5
316724C12B8922AAC643ED198280C038B01D4A2EF6F7EA167E24B00BFEC2895A
F078302DE986020F5D2FC2073C4A7D3024795CCE17A227925EABCFCDFB84248D
95D5CB369697A9DEA8E3879C009AFCE02E14EFB110200F9D93BB42E16241176A
418C853D387427EC19B7789426CDE9020FE6A3FFD4E7286C013958E4E3146F02
FA9CE18F1700F5F26956BF2E6C82503278509588FD3DF235A96E4712436CF571
0C03ADE959A33ADA21A0A4417429388DA42199883E80FA05E2C40ABC7BE4A17F
74893F360FD2D611E0828C0228FBB3D9ECE309E84F99C713491C79A48C54A4B1
6FD9D2B913165B638E4DE518F92D9C8CB61E6E8E686B472F48B05C3D45D0DD2F
DA6EB29B9039FD8A8BDBD2A567F29369DC364308558F448E12C309341B523781
DEEF88E04BF6CF4A4973C774A018886983E93DD5943F46EAC61B93EB7F9BDFC9
37EB4373D12B6410435B185D183D016A427F1751ED063992835035C54BA63434
11AC729A9DBB16260153190E7A1D1CC047044C8AD7BCCFEE945212EE393D3698
90A89960DD7DF33CDF300B4CDF6D3ED6DBE753C71EF893ED83EB836F3E95D314
1EF2D24609137865AD613D79AC8D6898923E4936F0AEE0E409088416A00C1A75
2D909F472B5FF8C0831DF46E91633EDB612088487F6C42C4AA597D70D5D4B1ED
85C6E346774D535F19B2B27305F6277DADAFCFB6A5F6B1063472FBCE7DBD3675
AE900FCCA3750D993D003E3A81C62FAF151953A00A89786DA2B6DFDA66272CA7
5AC6BDC32C3DC765F434E1B9C52452998AAE2EA3898945C329B2C6544D0C64A8
0B64899A800BFD6E38AA2BEC29F9EB1C1CF50D724F985B12D28C94EABA89EDA7
8F91BFBD51C7F12C55F589B825209DA4D68ABD0AB9BF34EC8A8E2FD588E84A9C
EB7954D7168698DD8CD201704DF73DAC6D768B23ACA88084B32710451F72B84A
8FC0F8F0491150B023B3247B887503C72A56029295631C0E865CED746D253082
E5CB932B5680DB38A41E6A19106FCCA0845DDB6570FF72FCA8DEB439C206043F
BAB34B7D927D75C4FB7E608ED19CC51D9DF2942DAC0EF3963DB6C173A1134772
322F6573592EBDEFC4D7417246FF8D7CDEDA6C4B1E4AA1AA8046701B959FE92A
96D70AA3B2789BA8DD241DB39D9C1341AA632707897D72B63B9ECFD03DDE3C6C
94EE3A18C1635904E297CA8C99CC0B6F3EB2B4A98A63D46DB069C43417059B77
829AB312DA07D0741C6CE0720FF11D4F0D02AFC6995C395DD64F77D1B425F413
B6B954242206982BEBC1530A1BE5182B4F954814F4DCA3A621FAE2604C87FCE7
749F682312F5BBB1F70568627E13D6AC68AA610E9619E6625F32AF3B695655EE
42A8AC3A651694EC6AC2112B6F0CCF64AEF147C5883F84D935CA0839C15B2B9B
AB0ADBE87D512905249E9EB43323E3487C44823F4D9EF5014DFABCD024F4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (arbres_pstricks.dvi)
@start /Fa 22[51 51 106[51 1[51 51 51 51 51 51 51 51
51 51 51 51 51 51 51 51 51 1[51 51 51 51 51 51 51 51
51 3[51 51 51 6[51 51 51 1[51 10[51 2[51 51 51 2[51 4[51
51 51 51 51 51 51 51 51 1[51 51 51 2[51 51 51 1[51 51
51 35[{ T1Encoding ReEncodeFont }59 99.6264 /SFTT1200
rf /Fc 200[44 44 44 44 44 44 1[44 3[22 44[{
 TeXBase1Encoding ReEncodeFont }8 83.6363 /Utopia-Regular
rf /Fd 192[42 63[{ TeXBase1Encoding ReEncodeFont }1 91.6562
/Utopia-Bold rf /Fe 145[37 8[31 36 100[{ TeXBase1Encoding ReEncodeFont }
3 59.5759 /Utopia-Regular rf /Ff 142[51 54 112[{
 TeXBase1Encoding ReEncodeFont }2 91.6562 /Utopia-Italic
rf /Fg 22[47 81[92 33[56 32 40 36 1[56 53 57 85 26 1[26
4[47 55 45 55 48 12[57 1[59 3[71 1[52 4[67 53 56 1[63
59 58 2[52 3[24 1[49 49 49 49 49 49 49 49 49 42 1[36
24 44[{ TeXBase1Encoding ReEncodeFont }41 91.6562 /Utopia-Regular
rf /Fi 92[79 163[{}1 109.987 /Fourier-Math-Symbols rf
/Fj 204[58 58 50[{ TeXBase1Encoding ReEncodeFont }2 109.987
/Utopia-Regular rf /Fk 22[60 111[66 2[66 73 40 53 47
73 73 66 73 106 40 2[40 3[60 73 53 73 60 10[93 12[47
6[80 93 65[{ TeXBase1Encoding ReEncodeFont }23 119.552
/URWPalladioL-Bold rf /Fl 171[82 3[86 14[85 65[{
 TeXBase1Encoding ReEncodeFont }3 131.985 /Utopia-Bold
rf /Fm 54[66 114[68 1[66 59 72 1[69 81 2[62 75 1[41 3[66
82 73 72 68 65[{ TeXBase1Encoding ReEncodeFont }15 105.588
/Utopia-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray Black 0 TeXcolorgray -118 -189
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189
a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118 -189 a -118
-189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a 1919 -37 a


1919 -37 a 1919 -37 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 239.47311 18.26175 moveto

 -239.47311 18.26175 lineto

 -242.22429 18.26175 -244.4545 16.03154 -244.4545 13.28036 curveto

 -244.4545 -13.28036 lineto

 -244.4545 -16.03154 -242.22429 -18.26175 -239.47311 -18.26175 curveto

 239.47311 -18.26175 lineto

 242.22429 -18.26175 244.4545 -16.03154 244.4545 -13.28036 curveto

 244.4545 13.28036 lineto

 244.4545 16.03154 242.22429 18.26175 239.47311 18.26175 curveto

 closepath

 -244.4545 -18.26175 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -240.94797 -3.0964 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray 0 TeXcolorgray 1 1 1
TeXcolorrgb 2672 -15 a Fl(A)8 b Fm(R)g(B)g(R)g(E)g(S)32
b(D)8 b(E)34 b(P)8 b(R)f(O)h(B)g(A)g(B)g(I)f(L)g(I)g(T)g(\311)h(S)29
b(A)q(V)8 b(E)g(C)32 b Fl(P)8 b Fm(S)g Fl(T)g Fm(R)g(I)g(C)g(K)f(S)p
0 TeXcolorgray 1919 -37 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 136 a
SDict begin H.S end
 -118 136 a -118
136 a
SDict begin 17.39995 H.A end
 -118 136 a -118 136 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.1) cvn /DEST pdfmark
end
 -118 136 a 1 0.2 0.3 0.1
TeXcolorcmyk -218 415 a

 -218 415 a -218 415 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -218 415
a Fk(I)-218 415 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -3.78604 7.88034 moveto

 10.60582 7.88034 lineto

 11.70628 7.88034 12.47154 6.99686 12.3151 5.90703 curveto

 10.04698 -9.89214 lineto

 9.89053 -10.98196 8.87163 -11.86545 7.77115 -11.86545 curveto

 -6.62071 -11.86545 lineto

 -7.72118 -11.86545 -8.48643 -10.98196 -8.32999 -9.89214 curveto

 -6.06187 5.90703 lineto

 -5.90543 6.99686 -4.88652 7.88034 -3.78604 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -5.7786 9.8729 moveto

 8.61327 9.8729 lineto

 9.71373 9.8729 10.47899 8.98941 10.32254 7.89958 curveto

 8.05443 -7.89958 lineto

 7.89798 -8.98941 6.87907 -9.8729 5.7786 -9.8729 curveto

 -8.61327 -9.8729 lineto

 -9.71373 -9.8729 -10.47899 -8.98941 -10.32254 -7.89958 curveto

 -8.05443 7.89958 lineto

 -7.89798 8.98941 -6.87907 9.8729 -5.7786 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -2.79028 -4.72716 ] concat

 pgfs



 1 setgray

-218 415 a Fk(I)-218 415 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc



-34 466 a Fk(Arbre)29 b Fj(2)15 b Fi(\243)g Fj(2)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1168 1345
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 1168 1345 a 1846 913 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1846 913 a 2 w Fg(A)1876 882
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1876 882 a 1876 882 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1876 882 a 1810 913 a Fg(0,)10
b(6)1876 882 y
tx@Dict begin PutEnd  end
 1876 882 a 2559 690 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.408 3.204 3.69597 }
false /N@T-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2559 690 a Fg(F)2585
660 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 660 a 2585 660 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2585 660 a 2519 690 a Fg(0,)g(2)2585
660 y
tx@Dict begin PutEnd  end
 2585 660 a 2558 1135 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 6.408 3.204 3.69597
} false /N@T-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2558 1135 a 2558 1055 54
6 v Fg(F)2585 660 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 660 a 2585 660 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2585 660 a
2519 690 a Fg(0,)g(8)2585 660 y
tx@Dict begin PutEnd  end
 2585 660 a 1847 1776
a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1847 1776 a Fg(B)1876 1746 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1876 1746 a 1876 1746
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1876 1746 a 1810 1776 a Fg(0,)g(4)1876 1746 y
tx@Dict begin PutEnd  end
 1876
1746 a 2559 1554 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.408 3.204 3.69597 }
false /N@T-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2559 1554 a Fg(F)2585 1523 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585
1523 a 2585 1523 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2585 1523 a 2519 1554 a Fg(0,)g(4)2585
1523 y
tx@Dict begin PutEnd  end
 2585 1523 a 2558 1999 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 6.408 3.204 3.69597
} false /N@T-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2558 1999 a 2558 1919
54 6 v Fg(F)2585 1523 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 1523 a 2585 1523 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2585
1523 a 2519 1554 a Fg(0,)g(6)2585 1523 y
tx@Dict begin PutEnd  end
 2585 1523 a
-118 2107 a
SDict begin H.S end
 -118 2107 a -118 2107 a
SDict begin 17.39995 H.A end
 -118 2107 a -118
2107 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.2) cvn /DEST pdfmark
end
 -118 2107 a 1 0.2 0.3 0.1 TeXcolorcmyk -195 2240
a

 -195 2240 a -195 2240 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -5.5806 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -195 2240 a Fk(II)-195 2240
y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -6.57635 7.88034 moveto

 13.39613 7.88034 lineto

 14.4966 7.88034 15.26186 6.99686 15.10541 5.90703 curveto

 12.83728 -9.89214 lineto

 12.68085 -10.98196 11.66193 -11.86545 10.56146 -11.86545 curveto

 -9.41103 -11.86545 lineto

 -10.51149 -11.86545 -11.27675 -10.98196 -11.1203 -9.89214 curveto

 -8.85217 5.90703 lineto

 -8.69574 6.99686 -7.67682 7.88034 -6.57635 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -8.56891 9.8729 moveto

 11.40358 9.8729 lineto

 12.50404 9.8729 13.2693 8.98941 13.11285 7.89958 curveto

 10.84473 -7.89958 lineto

 10.6883 -8.98941 9.66937 -9.8729 8.56891 -9.8729 curveto

 -11.40358 -9.8729 lineto

 -12.50404 -9.8729 -13.2693 -8.98941 -13.11285 -7.89958 curveto

 -10.84473 7.89958 lineto

 -10.6883 8.98941 -9.66937 9.8729 -8.56891 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -5.5806 -4.72716 ] concat

 pgfs



 1 setgray
 -195 2240
a Fk(II)-195 2240 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 13 2290
a Fk(Arbre)28 b Fj(2)15 b Fi(\243)g Fj(3)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1165 3561 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 1165 3561 a
1840 2933 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.16199 8.09999 4.04999 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1840 2933 a Fg(G)1874 2902 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1874 2902 a
1874 2902 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1874 2902 a 1808 2933 a Fg(0,)10 b(3)1874
2902 y
tx@Dict begin PutEnd  end
 1874 2902 a 2552 2515 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2552 2515 a 2 w Fg(A)2582
2484 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2582 2484 a 2582 2484 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2582 2484 a 2516 2515
a Fg(0,)g(1)2582 2484 y
tx@Dict begin PutEnd  end
 2582 2484 a 2552 2933 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2552
2933 a Fg(B)2582 2484 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2582 2484 a 2582 2484 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2582
2484 a 2516 2515 a Fg(0,)g(3)2582 2484 y
tx@Dict begin PutEnd  end
 2582 2484 a
2550 3351 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.16199 7.788 3.894 3.69597
} false /N@T-0-0-2 16 {InitRnode } /NodeScale {} def NewNode end  end
 2550 3351 a Fg(C)2582 2484 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2582 2484 a
2582 2484 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2582 2484 a 2516 2515 a Fg(0,)g(6)2582 2484
y
tx@Dict begin PutEnd  end
 2582 2484 a 1840 4190 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.16199 8.09999 4.04999
3.69597 } false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode
end  end
 1840 4190 a 1840 4110 68 6
v Fg(G)1874 4159 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1874 4159 a 1874 4159 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1874 4159
a 1808 4190 a Fg(0,)g(7)1874 4159 y
tx@Dict begin PutEnd  end
 1874 4159 a 2552
3771 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2552 3771 a 2 w Fg(A)2582 3740 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2582 3740 a 2582
3740 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2582 3740 a 2516 3771 a Fg(0,)g(1)2582 3740 y
tx@Dict begin PutEnd  end

2582 3740 a 2552 4190 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2552 4190 a Fg(B)2582 3740 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end

2582 3740 a 2582 3740 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2582 3740 a 2516 3771 a Fg(0,)g(3)2582
3740 y
tx@Dict begin PutEnd  end
 2582 3740 a 2550 4608 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.16199 7.788 3.894 3.69597
} false /N@T-0-1-2 16 {InitRnode } /NodeScale {} def NewNode end  end
 2550 4608 a Fg(C)2582
3740 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-2 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2582 3740 a 2582 3740 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2582 3740 a 2516 3771
a Fg(0,)g(6)2582 3740 y
tx@Dict begin PutEnd  end
 2582 3740 a -118 4717 a
SDict begin H.S end
 -118
4717 a -118 4717 a
SDict begin 17.39995 H.A end
 -118 4717 a -118 4717 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.3) cvn /DEST pdfmark
end
 -118 4717
a 0 TeXcolorgray -118 5892 4016 2 v 1296 x Fg(2)-69 5984
y Fe(nde)1792 6013 y Fg(1/)21 b Fd(??)1198 b Fg(Ann\351e)21
b(2016-2017)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -8 -481 a
SDict begin H.S end
 -8
-481 a -8 -481 a
SDict begin H.R end
 -8 -481 a -8 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -481 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 0.2 0.3 0.1 TeXcolorcmyk
-172 -107 a

 -172 -107 a -172 -107 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -8.37088 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -172 -107 a Fk(III)-172
-107 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -9.36664 7.88034 moveto

 16.18642 7.88034 lineto

 17.2869 7.88034 18.05214 6.99686 17.8957 5.90703 curveto

 15.62758 -9.89214 lineto

 15.47113 -10.98196 14.45222 -11.86545 13.35175 -11.86545 curveto

 -12.20131 -11.86545 lineto

 -13.30179 -11.86545 -14.06703 -10.98196 -13.9106 -9.89214 curveto

 -11.64247 5.90703 lineto

 -11.48602 6.99686 -10.46712 7.88034 -9.36664 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -11.35919 9.8729 moveto

 14.19386 9.8729 lineto

 15.29434 9.8729 16.05959 8.98941 15.90315 7.89958 curveto

 13.63503 -7.89958 lineto

 13.47858 -8.98941 12.45967 -9.8729 11.35919 -9.8729 curveto

 -14.19386 -9.8729 lineto

 -15.29434 -9.8729 -16.05959 -8.98941 -15.90315 -7.89958 curveto

 -13.63503 7.89958 lineto

 -13.47858 8.98941 -12.45967 9.8729 -11.35919 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -8.37088 -4.72716 ] concat

 pgfs



 1 setgray
 -172
-107 a Fk(III)-172 -107 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc



59 -57 a Fk(Arbre)29 b Fj(3)15 b Fi(\243)g Fj(2)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1168 1254 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 1168 1254 a
1846 391 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1846 391 a 2 w Fg(A)1876 360 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1876 360 a
1876 360 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1876 360 a 1810 391 a Fg(0,)10 b(6)1876 360
y
tx@Dict begin PutEnd  end
 1876 360 a 2559 168 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.408 3.204 3.69597 }
false /N@T-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2559 168 a Fg(F)2585 138 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585
138 a 2585 138 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2585 138 a 2519 168 a Fg(0,)g(2)2585
138 y
tx@Dict begin PutEnd  end
 2585 138 a 2558 613 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 6.408 3.204 3.69597
} false /N@T-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2558 613 a 2558 533 54 6
v Fg(F)2585 138 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 138 a 2585 138 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2585 138 a 2519
168 a Fg(0,)g(8)2585 138 y
tx@Dict begin PutEnd  end
 2585 138 a 1847 1254 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1847
1254 a Fg(B)1876 1224 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1876 1224 a 1876 1224 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1876
1224 a 1810 1254 a Fg(0,)g(3)1876 1224 y
tx@Dict begin PutEnd  end
 1876 1224 a
2559 1032 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.408 3.204 3.69597 }
false /N@T-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2559 1032 a Fg(F)2585 1001 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 1001 a
2585 1001 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2585 1001 a 2519 1032 a Fg(0,)g(3)2585 1001
y
tx@Dict begin PutEnd  end
 2585 1001 a 2558 1477 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 6.408 3.204 3.69597
} false /N@T-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2558 1477 a 2558 1397 54 6
v Fg(F)2585 1001 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 1001 a 2585 1001 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2585 1001
a 2519 1032 a Fg(0,)g(7)2585 1001 y
tx@Dict begin PutEnd  end
 2585 1001 a 1844
2118 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.16199 7.788 3.894 3.69597
} false /N@T-0-2 16 {InitRnode } /NodeScale {} def NewNode end  end
 1844 2118 a Fg(C)1876 2087 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-2 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1876 2087 a 1876
2087 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1876 2087 a 1810 2118 a Fg(0,)g(1)1876 2087 y
tx@Dict begin PutEnd  end

1876 2087 a 2559 1895 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.408 3.204 3.69597 }
false /N@T-0-2-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2559 1895 a Fg(F)2585 1864 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end

2585 1864 a 2585 1864 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2585 1864 a 2519 1895 a Fg(0,)g(4)2585
1864 y
tx@Dict begin PutEnd  end
 2585 1864 a 2558 2340 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 6.408 3.204 3.69597
} false /N@T-0-2-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2558 2340 a 2558 2260
54 6 v Fg(F)2585 1864 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-2 /N@T-0-2-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2585 1864 a 2585 1864 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2585
1864 a 2519 1895 a Fg(0,)g(6)2585 1864 y
tx@Dict begin PutEnd  end
 2585 1864 a
-118 2448 a
SDict begin H.S end
 -118 2448 a -118 2448 a
SDict begin 17.39995 H.A end
 -118 2448 a -118
2448 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.4) cvn /DEST pdfmark
end
 -118 2448 a 1 0.2 0.3 0.1 TeXcolorcmyk -172 2581
a

 -172 2581 a -172 2581 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -8.37096 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -172 2581 a Fk(IV)-172 2581
y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -9.36671 7.88034 moveto

 16.1865 7.88034 lineto

 17.28697 7.88034 18.05222 6.99686 17.89578 5.90703 curveto

 15.62766 -9.89214 lineto

 15.4712 -10.98196 14.4523 -11.86545 13.35182 -11.86545 curveto

 -12.20139 -11.86545 lineto

 -13.30186 -11.86545 -14.06711 -10.98196 -13.91068 -9.89214 curveto

 -11.64255 5.90703 lineto

 -11.4861 6.99686 -10.4672 7.88034 -9.36671 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -11.35927 9.8729 moveto

 14.19394 9.8729 lineto

 15.29442 9.8729 16.05966 8.98941 15.90323 7.89958 curveto

 13.6351 -7.89958 lineto

 13.47865 -8.98941 12.45975 -9.8729 11.35927 -9.8729 curveto

 -14.19394 -9.8729 lineto

 -15.29442 -9.8729 -16.05966 -8.98941 -15.90323 -7.89958 curveto

 -13.6351 7.89958 lineto

 -13.47865 8.98941 -12.45975 9.8729 -11.35927 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray 1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -8.37096 -4.72716 ] concat

 pgfs



 1 setgray
 -172 2581
a Fk(IV)-172 2581 y


 pgfr

 restore
 1 0.2 0.3 0.1 TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 59 2631
a Fk(Arbres)29 b(non)h(sym\351triques)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1166 3302 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 1166 3302 a
1843 3078 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.16199 7.788 3.894 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1843 3078 a Fg(C)1875 3048 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1875 3048 a
1875 3048 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1875 3048 a 1809 3078 a Fg(0,)10 b(3)1875
3048 y
tx@Dict begin PutEnd  end
 1875 3048 a 2554 2856 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2554 2856 a Fg(B)2584
2825 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2584 2825 a 2584 2825 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2584 2825 a 2518 2856
a Fg(0,)g(2)2584 2825 y
tx@Dict begin PutEnd  end
 2584 2825 a 2554 3301 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 7.12799 3.564 3.69597
} false /N@T-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2554
3301 a 2554 3221 60 6 v Fg(B)2584 2825 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2584 2825 a
2584 2825 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2584 2825 a 2518 2856 a Fg(0,)g(8)2584 2825
y
tx@Dict begin PutEnd  end
 2584 2825 a 1843 3525 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.16199 7.788 3.894 3.69597
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1843 3525 a 1843 3445 65 6
v Fg(C)1875 3048 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1875 3048 a 1875 3048 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1875 3048
a 1809 3078 a Fg(0,)g(7)1875 3048 y
tx@Dict begin PutEnd  end
 1875 3048 a 0 TeXcolorgray
0 TeXcolorgray 812 3942 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 812 3942 a 1490 3733 a
tx@Dict begin  tx@NodeDict begin {10.92351 0.0 7.24799 3.624 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1490
3733 a 1490 3653 61 6 v 2 w Fg(A)1520 3702 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1520 3702
a 1520 3702 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1520 3702 a 1454 3733 a Fg(0,)g(7)1520
3702 y
tx@Dict begin PutEnd  end
 1520 3702 a 1490 4151 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1490 4151 a Fg(B)1520
4121 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1520 4121 a 1520 4121 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1520 4121 a 1454 4151
a Fg(0,)g(3)1520 4121 y
tx@Dict begin PutEnd  end
 1520 4121 a 2199 3942 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 2199
3942 a 2 w Fg(A)2229 3911 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2229 3911 a 2229 3911 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2229
3911 a 2163 3942 a Fg(0,)g(7)2229 3911 y
tx@Dict begin PutEnd  end
 2229 3911 a
2199 4361 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 2199 4361 a Fg(B)2229 4330 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2229 4330 a
2229 4330 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2229 4330 a 2163 4361 a Fg(0,)g(3)2229 4330
y
tx@Dict begin PutEnd  end
 2229 4330 a 2908 4151 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.24799 3.624 3.69597
} false /N@T-0-1-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2908 4151 a 2 w Fg(A)2938 4121
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2938 4121 a 2938 4121 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2938 4121 a 2872 4151 a Fg(0,)g(7)2938
4121 y
tx@Dict begin PutEnd  end
 2938 4121 a 2908 4570 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.12799 3.564 3.69597
} false /N@T-0-1-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2908 4570 a Fg(B)2938
4121 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 8.53581 8.53581 0 0 /N@T-0-1-1 /N@T-0-1-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2938 4121 a 2938 4121 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 7.90663 def /r 7.90663 def /h 3.69603 def /d 5.25597 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2938 4121 a 2872 4151
a Fg(0,)g(3)2938 4121 y
tx@Dict begin PutEnd  end
 2938 4121 a -118 4678 a
SDict begin H.S end
 -118
4678 a -118 4678 a
SDict begin 17.39995 H.A end
 -118 4678 a -118 4678 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.5) cvn /DEST pdfmark
end
 -118 4678
a 0 TeXcolorgray -118 5892 4016 2 v 1335 x Fg(2)-69 5984
y Fe(nde)1792 6013 y Fg(2/)21 b Fd(??)1198 b Fg(Ann\351e)21
b(2016-2017)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end

-126 -481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -126
-481 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1 0.2 0.3 0.1
TeXcolorcmyk -195 -107 a

 -195 -107 a -195 -107 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -5.58066 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -195
-107 a Fk(V)-195 -107 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -6.57642 7.88034 moveto

 13.3962 7.88034 lineto

 14.49666 7.88034 15.26192 6.99686 15.10547 5.90703 curveto

 12.83734 -9.89214 lineto

 12.68091 -10.98196 11.66199 -11.86545 10.56152 -11.86545 curveto

 -9.41109 -11.86545 lineto

 -10.51155 -11.86545 -11.27681 -10.98196 -11.12036 -9.89214 curveto

 -8.85223 5.90703 lineto

 -8.6958 6.99686 -7.67688 7.88034 -6.57642 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -8.56897 9.8729 moveto

 11.40364 9.8729 lineto

 12.5041 9.8729 13.26936 8.98941 13.11292 7.89958 curveto

 10.84479 -7.89958 lineto

 10.68835 -8.98941 9.66943 -9.8729 8.56897 -9.8729 curveto

 -11.40364 -9.8729 lineto

 -12.5041 -9.8729 -13.26936 -8.98941 -13.11292 -7.89958 curveto

 -10.84479 7.89958 lineto

 -10.68835 8.98941 -9.66943 9.8729 -8.56897 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray
1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -5.58066 -4.72716 ] concat

 pgfs



 1 setgray
 -195 -107 a Fk(V)-195 -107 y


 pgfr

 restore
 1 0.2 0.3 0.1
TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 13 -57 a Fk(Arbre)28 b(avec)i(des)g(points)p
0 TeXcolorgray -118 618 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0 14 { 0.0 0.0 /Y exch
def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos } def}
/NodeScale {} def NewNode end  end
 -118 618 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end


@endspecial 354 301 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-0 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end
 354 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end


@endspecial 319 216 a Fg(N)354 301 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 354 301 a 354 301
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 354 301 a 0 0 1 TeXcolorrgb 272 332 a Fc(0,)9 b(64)p
0 TeXcolorgray 354 301 a
tx@Dict begin PutEnd  end
 354 301 a 827 138 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-0-0 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end
 827 138
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial 868 168 a Fg(T)827
138 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 827 138 a 827 138 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 827 138 a 1 0 0 TeXcolorrgb
745 168 a Fc(0,)g(35)p 0 TeXcolorgray 827 138 a
tx@Dict begin PutEnd  end
 827 138
a 827 464 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-0-1 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end
 827 464 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial
868 415 60 6 v 868 495 a Fg(T)827 138 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 827 138 a 827
138 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 827 138 a 0 0 1 TeXcolorrgb 745 168 a Fc(0,)g(65)p
0 TeXcolorgray 827 138 a
tx@Dict begin PutEnd  end
 827 138 a 354 935 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-1 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end
 354 935
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial 319 770 72 6
v 319 850 a Fg(N)354 935 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 354 935 a 354 935 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 354 935
a 1 0 0 TeXcolorrgb 272 965 a Fc(0,)g(36)p 0 TeXcolorgray
354 935 a
tx@Dict begin PutEnd  end
 354 935 a 827 765 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-1-0 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end
 827 765 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial 868 795 a Fg(T)p 0 0 1 TeXcolorrgb
24 w(\227>)20 b(0,27)p 0 TeXcolorgray 827 765 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 827 765
a 827 765 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 827 765 a 1 0 0 TeXcolorrgb 745 795 a Fc(0,)9
b(75)p 0 TeXcolorgray 827 765 a
tx@Dict begin PutEnd  end
 827 765 a 827 1105 a
tx@Dict begin  tx@NodeDict begin {} false /N@T-0-1-1 14 { 0.0 0.0 /Y
exch def /X exch def /w 1.8 def /h 1.8 def /NodePos { OvalNodePos }
def} /NodeScale {} def NewNode end  end

827 1105 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial 868
1055 60 6 v 868 1135 a Fg(T)827 765 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 827 765 a 827 765
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 9.88661 def /r 9.88661 def /h 3.04922 def /d 5.11946 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 827 765 a 1 0 0 TeXcolorrgb 745 795 a Fc(0,)g(25)p
0 TeXcolorgray 827 765 a
tx@Dict begin PutEnd  end
 827 765 a -118 1135 a
SDict begin H.S end
 -118 1135
a -118 1135 a
SDict begin 17.39995 H.A end
 -118 1135 a -118 1135 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.6) cvn /DEST pdfmark
end
 -118 1135 a 1 0.2 0.3 0.1
TeXcolorcmyk -172 1376 a

 -172 1376 a -172 1376 a


 pgfo

 save

 1 0.2 0.3 0.1 setcmykcolor

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -8.37096 -4.72716 ] concat

 pgfs



 1 0.2 0.3 0.1 setcmykcolor
 -172
1376 a Fk(VI)-172 1376 y


 pgfr

 restore

 restore

 save

 /pgffc{0.07 0 0 0.49 setcmykcolor}def

 -9.36671 7.88034 moveto

 16.1865 7.88034 lineto

 17.28697 7.88034 18.05222 6.99686 17.89578 5.90703 curveto

 15.62766 -9.89214 lineto

 15.4712 -10.98196 14.4523 -11.86545 13.35182 -11.86545 curveto

 -12.20139 -11.86545 lineto

 -13.30186 -11.86545 -14.06711 -10.98196 -13.91068 -9.89214 curveto

 -11.64255 5.90703 lineto

 -11.4861 6.99686 -10.4672 7.88034 -9.36671 7.88034 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 0.2 0.3 0.1 setcmykcolor}def

 -11.35927 9.8729 moveto

 14.19394 9.8729 lineto

 15.29442 9.8729 16.05966 8.98941 15.90323 7.89958 curveto

 13.6351 -7.89958 lineto

 13.47865 -8.98941 12.45975 -9.8729 11.35927 -9.8729 curveto

 -14.19394 -9.8729 lineto

 -15.29442 -9.8729 -16.05966 -8.98941 -15.90323 -7.89958 curveto

 -13.6351 7.89958 lineto

 -13.47865 8.98941 -12.45975 9.8729 -11.35927 9.8729 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save
 1 TeXcolorgray
 save
 1 TeXcolorgray
1 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 -8.37096 -4.72716 ] concat

 pgfs



 1 setgray
 -172 1376 a Fk(VI)-172 1376 y


 pgfr

 restore
 1 0.2 0.3 0.1
TeXcolorcmyk
 restore

 restore

 newpath

 restore

 pgfc


 59 1426 a Fk(Arbre)29 b(de)h(Bernoulli)p
0 TeXcolorgray -118 1669 a Fg(Ajouter)19 b(dans)h(le)g(pr\351ambule)f
(:)p 0 TeXcolorgray 0 TeXcolorgray -118 1922 a Fa
(\045--------------------------)q(----)q(---)q(-d\351b)q(ut)57
b(de)52 b(la)g(fonction)h(Bernoutree)-118 2066 y(\\makeatletter)-118
2355 y(\\newcount\\@Bernoudepth)-118 2499 y
(\\newcount\\@Bernoumaxdepth)-118 2788 y(\\newcommand\\Bernoutree[8][t)
q(reem)q(ode)q(=R,n)q(odes)q(ep=1)q(ex,l)q(evel)q(sep=)q(12ex)q(]{\045)
-16 2933 y(\045)f(#2)g(=)f(profondeur)j(de)e(l'arbre)-16
3077 y(\045)g(#3)g(=)f(nom)h(de)g(l'\351v\350nement)i(r\351ussite)-16
3222 y(\045)e(#4)g(=)f(nom)h(de)g(l'\351v\350nement)i(\351chec)-16
3366 y(\045)e(#5)g(=)f(proba)i(de)e(l'\351v\351nement)j(r\351ussite)-16
3511 y(\045)e(#6)g(=)f(placement)j(de)d(#5)-16 3655 y(\045)h(#7)g(=)f
(proba)i(de)e(l'\351v\350nement)j(\351chec)-16 3800 y(\045)e(#8)g(=)f
(placement)j(de)d(#7)-16 3944 y(\\begingroup)-16 4088
y(\045)h(initialise)i(param\350tres)-16 4233 y
(\\psset{treemode=R,nodesep)q(=1ex)q(,le)q(vels)q(ep=1)q(2ex})q(\045)
-16 4377 y(\\psset{#1}\045)-16 4522 y(\\@Bernoumaxdepth)i(#2\\relax)-16
4666 y(\\def\\@Reussite{#3}\045)-16 4811 y(\\def\\@Echec{#4}\045)-16
4955 y(\\def\\@probareussite{#5}\045)-16 5100 y
(\\def\\@Argreussite{#6}\045)-16 5244 y(\045)c(Si)g(pas)g(de)f
(sp\351cification)k(de)d(placement,)-16 5389 y(\045)g(on)g(place)g(au)g
(centre)-16 5533 y(\\ifx\\empty\\@Argreussite)87 5677
y(\\def\\@Argreussite{0.5}\045)p 0 TeXcolorgray -118
5892 4016 2 v -118 6013 a Fg(2)-69 5984 y Fe(nde)1792
6013 y Fg(3/)21 b Fd(??)1198 b Fg(Ann\351e)21 b(2016-2017)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -8 -481 a
SDict begin H.S end
 -8
-481 a -8 -481 a
SDict begin H.R end
 -8 -481 a -8 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -8 -481 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -16 -89 a Fa(\\fi)-16 55
y(\\def\\@probaechec{#7}\045)-16 200 y(\\def\\@Argechec{#8})-16
344 y(\\ifx\\empty\\@Argechec)87 488 y(\\def\\@Argechec{0.5}\045)-16
633 y(\\fi)-16 777 y(\045)52 b(Premier)h(appel)f(\(racine)h(vide,)g
(niveau)g(1\))-16 922 y(\\pstree{\\TR{}}{\\@Bernoutr)q(ee{1)q(}})-16
1066 y(\\endgroup)-118 1211 y(})-118 1355 y
(\\newcommand\\@Bernoutree[1]{)q(\045)-16 1500 y(\045)f(#1)g(=)f
(profondeur)j(r\351cursive)-16 1644 y(\045)e(initialise)i(profondeur)f
(en)f(cours)-16 1789 y(\\@Bernoudepth)j(#1\\relax)-16
1933 y(\\ifnum\\@Bernoudepth=\\@Ber)q(noum)q(axd)q(epth)87
2078 y(\045)c(si)h(la)g(profondeur)i(max)e(est)g(atteinte)87
2222 y(\045)f(on)h(place)h(les)f(deux)g(noeuds)h(terminaux)87
2366 y(\\TR{\\@Reussite}\\taput[tpos=)q(\\@A)q(rgre)q(ussi)q(te]{)q
(\\@pr)q(obar)q(euss)q(ite})87 2511 y(\\TR{\\@Echec}\\tbput[tpos=\\@A)q
(rge)q(chec)q(]{\\@)q(prob)q(aech)q(ec})87 2655 y(\045)e(et)h(c'est)h
(tout)-16 2800 y(\\else)87 2944 y(\045)e(sinon)i(on)f(construit)h
(r\351cursivement)87 3089 y(\045)e(les)h(deux)h(sous-arbres)h(de)d
(niveau)i(sup\351rieur)87 3233 y(\\advance\\@Bernoudepth)j(\\@ne)87
3378 y(\\pstree{\\TR{\\@Reussite}\\tap)q(ut[)q(tpos)q(=\\@A)q(rgre)q
(ussi)q(te])446 3522 y({\\@probareussite}}{\\@Bernou)q(tree)q({\\th)q
(e\\@B)q(erno)q(udep)q(th}})87 3667 y(\\pstree{\\TR{\\@Echec}\\tbput[)q
(tpo)q(s=\\@)q(Arge)q(chec)q(])446 3811 y
({\\@probaechec}}{\\@Bernoutre)q(e{\\t)q(he\\@)q(Bern)q(oude)q(pth})q
(})-16 3955 y(\\fi)-118 4100 y(})-118 4244 y(\\makeatother)-118
4389 y(\045--------------------------)q(----)q(---)q(-fin)i(de)52
b(la)f(fonction)j(Bernoutree)-118 4641 y Fg(La)21 b(commande)e
(tap\351e)h(est)g(juste)g(:)p 0 TeXcolorgray 0 TeXcolorgray
-118 4869 a Fa(\\Bernoutree[levelsep=18ex,t)q(reen)q(ode)q(size)q(=0pt)
q(]{4})q({$R$)q(}{$E)q($}{$)q(p$}{)q(}{$q)q($}{})p 0
TeXcolorgray -118 5892 4016 2 v -118 6013 a Fg(2)-69
5984 y Fe(nde)1792 6013 y Fg(4/)h Fd(??)1198 b Fg(Ann\351e)21
b(2016-2017)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end

-126 -481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -126
-481 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118
1613 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 0.0 3.69597 } false /N@T-0
16 {InitRnode } /NodeScale {} def NewNode end  end
 -118 1613 a 641 668 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 641 668 a Fg(R)671 638 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0 /N@T-0-0 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end

671 638 a 671 638 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 671 638 a 641 668 a Ff(p)671 638
y
tx@Dict begin PutEnd  end
 671 638 a 1430 196 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1430 196 a Fg(R)1460 165 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1460
165 a 1460 165 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1460 165 a 1430 196 a Ff(p)1460 165
y
tx@Dict begin PutEnd  end
 1460 165 a 2220 -40 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 -40 a Fg(R)2249 -71 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249
-71 a 2249 -71 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2249 -71 a 2219 -40 a Ff(p)2249 -71
y
tx@Dict begin PutEnd  end
 2249 -71 a 3009 -158 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 -158 a Fg(R)3038 -189 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end

3038 -189 a 3038 -189 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 -189 a 3008 -158 a Ff(p)3038
-189 y
tx@Dict begin PutEnd  end
 3038 -189 a 3009 78 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 78 a Fg(E)3038 -189
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 -189 a 3038 -189 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 -189 a 3010 -158 a Ff(q)3038
-189 y
tx@Dict begin PutEnd  end
 3038 -189 a 2220 432 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 432 a Fg(E)2249 402
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 402 a 2249 402 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2249 402 a 2221 432 a Ff(q)2249
402 y
tx@Dict begin PutEnd  end
 2249 402 a 3009 314 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 314 a Fg(R)3038 283
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 283 a 3038 283 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 283 a 3008 314 a Ff(p)3038
283 y
tx@Dict begin PutEnd  end
 3038 283 a 3009 550 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 550 a Fg(E)3038 283
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 283 a 3038 283 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 283 a 3010 314 a Ff(q)3038
283 y
tx@Dict begin PutEnd  end
 3038 283 a 1431 1141 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1431 1141 a Fg(E)1460 1110
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1460 1110 a 1460 1110 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1460 1110 a 1432 1141 a Ff(q)1460
1110 y
tx@Dict begin PutEnd  end
 1460 1110 a 2220 905 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 905 a Fg(R)2249 874
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 874 a 2249 874 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2249 874 a 2219 905 a Ff(p)2249
874 y
tx@Dict begin PutEnd  end
 2249 874 a 3009 787 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-1-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 787 a Fg(R)3038 756
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 756 a 3038 756 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 756 a 3008 787 a Ff(p)3038
756 y
tx@Dict begin PutEnd  end
 3038 756 a 3009 1023 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-1-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 1023 a Fg(E)3038 756
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 756 a 3038 756 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 756 a 3010 787 a Ff(q)3038
756 y
tx@Dict begin PutEnd  end
 3038 756 a 2220 1377 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 1377 a Fg(E)2249 1346
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 1346 a 2249 1346 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2249 1346 a 2221 1377 a Ff(q)2249
1346 y
tx@Dict begin PutEnd  end
 2249 1346 a 3009 1259 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-0-1-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 1259 a Fg(R)3038
1228 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 1228 a 3038 1228 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 1228 a 3008 1259
a Ff(p)3038 1228 y
tx@Dict begin PutEnd  end
 3038 1228 a 3009 1495 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-0-1-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 1495
a Fg(E)3038 1228 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 1228 a 3038 1228 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 1228
a 3010 1259 a Ff(q)3038 1228 y
tx@Dict begin PutEnd  end
 3038 1228 a 642 2558 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1 16 {InitRnode } /NodeScale {} def NewNode end  end

642 2558 a Fg(E)671 2528 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0 /N@T-0-1 InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 671 2528 a 671 2528 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 671
2528 a 643 2558 a Ff(q)671 2528 y
tx@Dict begin PutEnd  end
 671 2528 a 1430 2086
a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end  end
 1430 2086 a Fg(R)1460 2055 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1460 2055 a 1460 2055
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 1460 2055 a 1430 2086 a Ff(p)1460 2055 y
tx@Dict begin PutEnd  end
 1460 2055
a 2220 1850 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 1850 a Fg(R)2249 1819 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 1819
a 2249 1819 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2249 1819 a 2219 1850 a Ff(p)2249 1819
y
tx@Dict begin PutEnd  end
 2249 1819 a 3009 1731 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-0-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 1731 a Fg(R)3038 1701
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 1701 a 3038 1701 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 1701 a 3008 1731 a Ff(p)3038
1701 y
tx@Dict begin PutEnd  end
 3038 1701 a 3009 1968 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-0-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 1968 a Fg(E)3038
1701 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 1701 a 3038 1701 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 1701 a 3010 1731
a Ff(q)3038 1701 y
tx@Dict begin PutEnd  end
 3038 1701 a 2220 2322 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 2322
a Fg(E)2249 2291 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0 /N@T-0-1-0-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 2291 a 2249 2291 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2249 2291
a 2221 2322 a Ff(q)2249 2291 y
tx@Dict begin PutEnd  end
 2249 2291 a 3009 2204
a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-0-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 2204 a Fg(R)3038 2173 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0-1 /N@T-0-1-0-1-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 2173 a 3038 2173
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 2173 a 3008 2204 a Ff(p)3038 2173 y
tx@Dict begin PutEnd  end
 3038 2173
a 3009 2440 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 2440 a Fg(E)3038 2173 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-0-1 /N@T-0-1-0-1-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 2173
a 3038 2173 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 2173 a 3010 2204 a Ff(q)3038 2173
y
tx@Dict begin PutEnd  end
 3038 2173 a 1431 3031 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-1 16 {InitRnode } /NodeScale {} def NewNode end  end
 1431 3031 a Fg(E)1460 3000
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 1460 3000 a 1460 3000 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 1460 3000 a 1432 3031 a Ff(q)1460
3000 y
tx@Dict begin PutEnd  end
 1460 3000 a 2220 2794 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 2794 a Fg(R)2249
2764 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 2764 a 2249 2764 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 2249 2764 a 2219 2794
a Ff(p)2249 2764 y
tx@Dict begin PutEnd  end
 2249 2764 a 3009 2676 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-1-0-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 2676
a Fg(R)3038 2646 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1-0 /N@T-0-1-1-0-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 2646 a 3038 2646 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 2646
a 3008 2676 a Ff(p)3038 2646 y
tx@Dict begin PutEnd  end
 3038 2646 a 3009 2913
a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-1-0-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 2913 a Fg(E)3038 2646 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1-0 /N@T-0-1-1-0-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 2646 a 3038 2646
a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 2646 a 3010 2676 a Ff(q)3038 2646 y
tx@Dict begin PutEnd  end
 3038 2646
a 2220 3267 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 2220 3267 a Fg(E)2249 3236 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1 /N@T-0-1-1-1 InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 2249 3236
a 2249 3236 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 2249 3236 a 2221 3267 a Ff(q)2249 3236
y
tx@Dict begin PutEnd  end
 2249 3236 a 3009 3149 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 7.10399 3.55199 3.69597
} false /N@T-0-1-1-1-0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 3149 a Fg(R)3038 3118
y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1-1 /N@T-0-1-1-1-0 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 3118 a 3038 3118 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.79799 def /r 3.79799 def /h 1.76402 def /d 6.39595 def /flag true
def VPutAdjust LPutCoor end PutBegin  end
 3038 3118 a 3008 3149 a Ff(p)3038
3118 y
tx@Dict begin PutEnd  end
 3038 3118 a 3009 3385 a
tx@Dict begin  tx@NodeDict begin {7.72198 0.0 6.93599 3.46799 3.69597
} false /N@T-0-1-1-1-1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 3009 3385 a Fg(E)3038
3118 y
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 5.27998 5.27998 0 0 /N@T-0-1-1-1 /N@T-0-1-1-1-1 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 3038 3118 a 3038 3118 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ VPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 3.66599 def /r 3.66599 def /h 2.10002 def /d 6.39595 def /flag false
def VPutAdjust LPutCoor end PutBegin  end
 3038 3118 a 3010 3149
a Ff(q)3038 3118 y
tx@Dict begin PutEnd  end
 3038 3118 a 0 TeXcolorgray -118 5892
4016 2 v -118 6013 a Fg(2)-69 5984 y Fe(nde)1792 6013
y Fg(5/)21 b Fd(??)1198 b Fg(Ann\351e)21 b(2016-2017)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
