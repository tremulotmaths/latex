%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: C:/Users/Non admin/Dropbox/Aide LaTeX/Liens utiles/Liens_utiles.dvi
%%CreationDate: Fri Jul 20 23:49:21 2012
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold LMMono12-Regular
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Non admin/Dropbox/Aide LaTeX/Liens utiles/Liens_utiles.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2012.07.20:2349
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 642 2012-02-09 15:00:52Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.10, 2012/02/09
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 5 moveto 0 -5 lineto stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 5 moveto 0 -5 lineto stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 5 moveto 0 -5 lineto stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
  curveticks 
   { gsave 
     x y translate rotAngle rotate 
     0 5 moveto 0 -5 lineto stroke grestore
   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: LMMono12-Regular
%!PS-AdobeFont-1.0: LMMono12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 778 222 0
%%EndComments
FontDirectory/LMMono12-Regular known{/LMMono12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMono12-Regular)readonly def
/FamilyName(LMMono12)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -200 def
/UnderlineThickness 78 def
end readonly def
/FontName /LMMono12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-444 -311 715 1019}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF3239124C8F9A7FA64EB7B367DE621A278
B1F6CC26E2CAD794DD6C5159F5C0FF10E10B5B469363BC4E1BAC78521837D5F7
61F2B9F91C9F2D8306BAF67F38556D03E30B02CC93974F0C9420EA890B77A60B
8B0CA6286649D25E71D2549858F1F70E997716FD8547281328CEA985EBE3651F
21DFD3BF7576EEF7C056FBD36AADDC5568556CABBF659F6A4EA3FEF19CC607F3
5ED157642747F6FEC6CE34CC6DF1418D3DC878914690BA9EF062EED8294C69F6
3095E74A5A4213F5C2006F6C7EC825F2B65CAD841CEEF3561D373A1F23EC96B8
A56C6CA36B9B5C915E4F46A4C84D417316CBF3DF5FF7BD16675BC43EB9F8513B
AF45CBCE28C27BE8F62517173F0AB432E546113EFD049E7D17BC33DB79BED453
664BA189E4E782FC320A7D64C140B51A9805779CF1EFE67CD74482756CB395A4
48A3702CB77DC29315E4318E692312774AFF367539CD6166672C81A6E7F0101D
52AB6818DE73AD36B9E5B49A2429AA9BDD4971853944423BB804ABEF6B90B9E4
3AE6FD15F46E4E05F410724951E57A7E83F48BAA40BC45B090C8DFAC63EC7AC0
E4C35646C6D097025F05CC93DE3C08416AB70DE054C3EF59D5AC62E6E959F338
C93CB0C5B19E50808E3801E5C70DC8EB22CE823F4AFE8CC66D9A10DF8837607D
699058E36339B1183BC194C671AAA4AE5E11D0B0927C5804FBFBBF76F424416C
D662614B7ADF8778AE74E83FC9628B66F72ADFC643F1B36FD03254D1E54D16A6
46628DE2D23CA0C330FD0E67B1A01E10C34C748E6A481BAB5CB198EFD2C69CBD
014ECCB520062381A36A97C0350A68FD618041964367C3780BA8F5693E0D6C40
928DE9FF2448D9766057E99135F1CF7B1BCABE4A68057E31859271566BEDA6BE
47C317FCC0EC767BAB9018E696E98C843D6AD114AA2B8D5F81B4C7DDB3ECE0E5
99991A1193857CC18AC2BA7593463A76F1AA5A5D266FD16D910968B353A47439
3F6AEA5C55885D165611A5D7F68636BE24A266F8D6703E2A5D5BCA7729143948
55FF53B4EE228468813E2DF0DB7DDB8098AFEEDB9891A772BEDF1E3AAF5C41EB
E356409AD81D065B8E2B2C8E7CE6983B3AD40CB5CB604F5B0B00B0EF9A6CF6D0
48E651A689822E55C42CCAA23DE753C7B05268ACB4D8529212CD478E4A5119F5
251850B773B9293E38E902E713AC8AAEEB135141C89D8217D08D88EFBCBE60B4
A80D1EA1956535F4C3ED8C840F1AB3790515971B4CE4375A9A034B8AB44E5A78
F827CB355CDCC2E710A2A8A57A14B7F25A1787BAE1411E71D92394F4C757E78B
BAA1A71A96F1A32E74D1DF235DE89D464EF44F2C9297ECBF2840EC6B81F6AE1E
45DCC7E785EB0D360B9CD0D9B84426F2456817B10C94D1EBF9CA1FBE120BD59E
708A364F2511E44A1BB6758AB06E34EF8E87528FE146C23041CA1B3E4B1257BF
F74B6EAD3917D7E87DEA2546A25390A23F8287DAB64850A522D33B09929C00B4
8C2CF4EC00ACA10EF2A46B53BE1C1A79DBAC9CB39A6BC253AC96448917C5B7C0
486172439C132B32E829D10EA96B0DC72E6384292A2E1CD06130A091F8AFB70C
0D2C2CC20FEB070F64ECB9A680818CC95EEEC0165C712FA507719DE1E109E5BE
FC2A4098E77020110C37A90B5BD2AECB1F2868B1AD53080831000B7B82E2B244
770E620C8526BEDF26F171C5F4C80871ACD7CD327CB210373E22F493A53C3C1B
37341F96F2F8FB4CD2BE21FFA0117747BF9CCB78F9F8A3F5D44459BF81997F9E
7BE8AE60AA436618C281E0A0E3B3A9303CC927663E40F84A23AA11BEB8E4DB8C
27EAFEC794409008A72838737A200DA1C6903F2996C9C95A57D76C2C39A36A16
4BC01FE340864F2D181B835CAD48520824E623530C41113A2D09D3DCA7C6C5B7
04B2733416AE489E6F8F6BF4D8B52C600E1202AA5E1D52D8F88DD49D31EBE129
12B39338A6BD32CEDD4E8A51C229D309169F903BFF8C8003F82A76F84AEC6703
D866CF9D143AF5C24D88653589B431FB84E4DDB650C2F783594DE4B63474D602
FB6D02F57F18066ED53549CF9E7C3EF5E1F82195E1E684CD9C7F7303D3D810D4
914B8AF9A1982C4C6B6317C9BD700703DA28C83F7846CF5C11F2ECC90571044E
7021EED6FA9138E7C6E4B118CC665F4B861D3766A2414005605B91D5043DF841
9DCF881E4A57135CE1EE3D8A6961DD8D3DB70C51870D9ADD147E7E9A41383D1E
637CDCDDDCC9DE88F4B9C6243A7B5C516026965CAAAC2C5F0D162A761DC91B24
70E13087AD73E4BA42888615A3439098D4CA52DEB18C0943A39B48A6A3F49999
3F123E480C41EB8241AB194C0896546D749C97906939E7A163C5CF1C65DA4E6C
2DE96F10CE5A5BD760D3ABA7D87D535A8D84FB1C177AEDDED90B09E0137406A2
EF0C1962808D5B529A4A00B371819B9196694068EE836036C4EA4064FF15E54B
E1059BD5D224B672335C72B31AB0E0721BF6B14C2F3295817E73A240269FF89A
B4678AB6609423412969FC1DECD51E5B3FAC3A75671CCD5E63C77F43B6311668
5ADCC03B77961030E69B29DFA844C6B2085D6A445D1F877635AD152142D1BD7B
EF204EEE7DE594518B78765EE60502B5D6B304713BB63FB1C3717A3F9E507D6D
8C32671862B1B700B2626E27CE9E77ADECFE7A35AC47B935BF6B039C4E2DE8DF
3B36DB44DA46BB19EA1EAF0425B8B8CD5D40C61989DC798351E5887C989E252F
50035966E60E0D25C567A69429EA3D1E7FCCF0E3330146F527C644531B462AD7
40B4CB6070A178427707797E0E880660E9503BC8C9410138B76CD997DBF24629
B486D4356757021F6B56DAEA3577DBB01E39FDA69C81621E5F48FE74C8B42C6E
A815E150DE0739F413482171527FAFAE0DE1BA31FB51411ED41D825CF153F8E2
57E4184C9D78D26D45BEE77B40CEE6E191449727385DBF12F6BD4B2B539E0EAC
0F22A3DFB0BCBDCA92D786D073C56BAED4DFD74B7FC3E50BB18E2BDC5212801C
D801A7086A3A8247773BF93CE143AB03DA13405FD339E7F05CB9094931CB58D7
62AA581B02F75DA5484396B395E2FE0FB9DD2FFEF8C6B373CC983244AD206901
0FD94834479279EE12CD1E53F40315901081B98FF32289A7CAC0EB305F1E0CC1
0EFA6258A7EC49B29EA2F4594B6DB363D2BF1952AEEEAB9AD39C857EBA17FEA2
16B3F83095FEA499DC328054BF07CD1CA1159872E9A329AA611F2EDC8E2F96EB
664D95D1958D422A58E668EE08EEBC53684706E5AA02982C49EA0FE82B5C3D0E
0E54059D8D3F20870038B6EA3C5E41A3E6E6EAE70E665F875BC46F1E7A5199DA
E7BC7EEB4C5C451EDAB35E16DB1455F0BD5FFC7BF4304713942BCE511A8D1D73
405F51A30DCB0AF7C988AB25F12A87D1E1512FF719DA8B61E413EDA36A71E7B6
110CAFAC612E3E67F97C7F136B67E2F9CBBF7CBBE4CCACDC779F68F2A2183DFB
BF3732B48869A480A92AD41E3E1C55BBA48E5A265381FA6EDB08674679A39EC0
A7F739BC533CF7684B9B29BA905766ADB2EF24EA02CF97B1D8E1021F51CBD5E7
F75433FB87932A162CCCA0114944A1AC1E57C7E5DB326C4323F499565020467A
2F2E305D6C518AC07B136B67E2F9CBBF7CBBE4CCACDC779F68F2A21832C118F7
D2E8FE4BC43AFC8D57D4D7F60F0329462D257D259B56DFFC008CCA4106A9AF77
D72A0D2ED22E3FE7BD4E6191E9765C4CB18671307933945F052757DEFD993D2D
EC74FD1F4669F2E3EA3B6454DE0DD8276217BE98BF1F3312B4ABDCB2CF777595
158CBABDB648E7A556CD20AAC23DBD644F0B3F94722F0A1B4D56FB031D364FA4
1B7577457D6C49DBBAE9E78432693205CC88986BD3673FFAD5EF6D07968BBB7C
C49699FB85FD19FC9090192F172D05BA3046172E87402DF3168459A2904FD702
766B36916DBA8F9C96141BBF4788F23607F4C015F22DE6C9243D2CAAA5ABF67A
BEE3A6FD4BCEAD5F98337B73527537B8FA58F86F01329F1C479C2BF18325E850
5EC0D97934FC9C7639F8910D086E64C8776DB8001F8685FC95EC7EDD60506506
EDE0A7CA465393A7DEB7DA08B3012A99FB2FC7F6FF7AE57AA8857C81448D5B0F
13DCD56D6897F315817CF8D7ED2FA456CEDC82C054F197229990E895ABB45C02
59485E1D25FBE6160CC2B113F5C974C0FB63580E40A75785A272839B9F96473C
15422838455D107C8CAB02B561FF49E6D94F58F45FC2D18FC8F3FABED83A7352
DBEF348F45CBE1BB1A6E0C33825E4CFC32B6D20E5C1E158DF07AB5936519A996
20B2750B7E0EAD6A8E30C4611B33767D2977D5EE49CA8BBCFD6301F3010D2D04
EE9526E6C38D5C2B0BD73183D4B9E0B441059B8A96B9A447C816E095BF09B657
1F1352773F543A040CB489A8D4CA9871293CE38DD26E0EC1C981E78CD78BB810
79EA48748A26B13BECC873A9C71796A479EF13A7D645ED0050BF55E6ACA05B02
54162EED9741D2D98C5BB3FF454B2C31CB7BA76413412F7046CE91024B3E0083
6D812092E92DA4D04D8819C7217583C105A535815D47FEF1D6AA91940B421578
CB5FBB61218034C721F5EF704DABF60091C4361F271CA53ECEB88F7A7E15CA63
8CE642522876168F088CB7C0B0BED28A8EFEE408340C3F96875DB71619059DD3
47A4B2422CD80F79734FD400375FBDCFA9BC37EAE676716DDE16DCA52D49E438
90022B9245B023385A6B9B21E65CD5073342C9FC75F522C4F672A67982922CA8
3E5D20ED25650637FF4CBBB66B213112955493A8ABF5E1A2260C9F243F71D436
C19F36D5557E8CDE671474954ED9E1F3016B516D32C63EA6BA61DA1E50699E9F
9EF7DA7BEE38806D7FEDDC4387DD42EB33308FF241FA5B78094D0EDF0E552EA1
2A403CAE2EFBAEFD9CDDB04C72B4F375F6E1027AC6FD3B3EE3A3C0572F13A5A6
8CC96F36E9033E6406E6904C934DDF1025D0C7DC125414233C09AD0E674C1D48
6D4F59FC3F155A19D63A97C9D83832D2B7C11EF06056690527A4EBD1F1355C3B
D6CD6E06540B1A42B6D057F6EC11DC7BD2F47472592808C08EF3FD741603D1E0
E18571D3DA62557A0376C2E71624D2A0D0107E6E2DC1FED5EDE8FC05C4A714EB
FEA809D73C89537FB7E6C9492C2FC9F5B3B18C4FA5BFE8A5C214DC59FF642949
FB1EE1DEFA6146BFE98336D9D7487F806800955C1F1B0F125261DA0D2F7312CE
5B3F3A1DF65E9C2173FF500114962E610D7BE1ECB505FC2988F0025069E355E3
37FB59EF89B24C28163F9270AA4C95CA0F5F96978C912521569844012BABB5AD
F93891FC191896A5F80FED2E1C8D1651E7DB7278DCC6E69F910C1D7EEC7E3EB7
88BB2F98BDC3B721DB34D4C6186E5CB2E597FE2052AE1311DE9106E91B8D869C
9EBCDFF01DC1A3FE08807E5A4C129FE982D4B29DF4C2488BD8767D1DCA5D48CC
68D492CD18DD0463267676866C07A8B34FDB0A6C52E355E33CC2F3502D8BA3E7
E4461907C8EF7DCF5B0EDA3DD00D1FBE03B7E6E5B77F4F96AA7029EBF6EF8848
58C9E066D9D22F009CC125AC401A0E0F6BBDE7DA88E2687090C0C95A7E20D8BB
1CC5A9F32DD6E7D37C7F601B0E36197BFA431548DC233902D54DA5001C20656B
80578308ADA3B73C7D92DFFA19F1A79AC9BA44943552DE78DFF769BBC6250E2C
B40C4375425CC28D5896E427C943B460063E42F1D76EB849F76658A687028907
2A95B752F47C88CED0B401728FB558E05C38205D16036E1BA360119F143835DE
CC51592268E393BFA04605EAF9BC3D8611E3607832D37C219220EFB97306A6B0
B1DF3BF3AF690E1AD2E1C89CC687933FB596832AA18D730A55B80EA224ABA4D3
76DCD4FABF332D5EB49BE21977146C8872ECAD4D82A933AF0D5DC59C9FC0E6CE
EBF7774FB05107D8EE462228AA21290F5BDFEA36924D015ADC134E03735263CA
0862E5C0AE05FCC7B68477A595DAC953D2D9A84688526A8006AA6182EDC3A224
9FE4068D529E201B45DD4739C514452C5EC235EDBFFDEE3E46DD584F04936B53
C3C81CD9E7694658B78BEB3E44B78C50316C61B6FE484CE582EB7FB48781CE91
51EF2A4AFE4FA32112954C5B86EF7AE3D015F91240EFCF71EBDD6930043AC0DB
343F36F8E4D8E1575501120C3B6B1BE15CB055823E59A706B3E0260FFE709B00
0D20DAF926714CDAA4F27033991B1F87394EFCAC47ACF4AC63E36C288D37E6AC
05331D22A0AEE3CC6E0191E8BC8AD94AB806E96E4BE81DD662C6717E289BAA73
DAE4AEC07CF4E8A2006B7CF373EB13B68B91B9057A787ACC992D0E2576D9850B
C6F08AC6F1709071BF6A73488D7F5ED237569345F676ECF81AC3D3C4CBF9F6CD
7D335868E6F21C48216AEEE4D31209BD7AD01EB17C5D14F33EB7AEE8B1A68DE6
E3D2647E8BCBD9FE74114B520BB512D14BB3FBC97F1F26859BC5615820A12F39
8B914A5B93E379AAB9E3DBB196942DAFFF669F444AAF97BCA6FEB6793D2D2161
6E454FAFB8D45CC84833870E3626DA55D1765F663D97F370141456A5DA72442B
DC46D862F6CD6AE4E123C3FEBF42BD06F669C0CA2187337E87C6ED736F3BEFC5
22CF56EDA6F3147B3861904FBF8BEE6DB3D7EB4548521096B1240EDC18A069CE
A1467700403A1963CA5F0AE491DE4908C94E372BEF64BB6CA5F0E38B4A1572D0
84730B650D73C9ECAFD53217BDC48F8E503BD8B01380703C9C47AA9D6753E1FB
20ECC1C9369A36F8951F3C90546A121CC80F1E1B7F5A0488144889677B31D3CF
AFF60E84A37A7B2C720348F83ACEFFA78929F4CFB5C8843CD9D5639E3D24E6C4
1BE139B761890E3FF013C7033DE613D0E82FC861C0D9ED98E873821095C6BE6C
A909BD99E8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74B26E89E6BA8CD
E849B5131E19307559490FD9016D95EAA7CD3268D06EDC9C961F361257D41DFA
162A4DD9CAAF585BA475D84C286D85B6CDF0F348A9853F0BE3BB71ED0E39F00B
A99FBF0F58790DB69856591230B56C976C9613E737FEF91B42E09200D95D57CD
747F029DE976AF7238A7CEBFE998249291D97CD034935C3A0DF3CC3DA6C936C1
2B21616E454FAFB8D4ACF8B7AF8E350126DD9AC11A9FCF4C56D78178AF84E16A
5EEC8E9AB1D2784B60F6343B92F1B67E0B8B99DCD7EBB4E08F06C6C50C9FFD9A
209A618687FE1AA258B1DB611AB03FB140C319958307A4B3B963C3E0FBA162AA
15E6BCFDDC80F39F89FD0A9130039EF89383C06A6EFED621464EE765F2778C34
894E1FC8A7D014AE7AAEC5E3965146110C4B6B631564250AABD98699CD7EAFDF
ADA9448F18A359E89E4E3A5BC82120DE0FB8FFCC0E7A44FDEC2A1324ED7816D6
7C1997E6DC26B83665DB71ADF03DB565CB3278F5B049782D1F6C9752E7356EEA
8FB8E036E4E671E52588E1192B6AD3AA17B1FD8F15F9063C39C8540DB2BD058A
8F282D2D20D6BDE27B65F9176558D8B65362F61FD87D9AD045681764F342047F
ABD1B30CD997DD370BE73E380F74EB0B2D8BE6DCD49E7B623D69370F66DEDE87
35D67F9ABC31AA5F2A0A5156B81553747E436F523BE782F9D4B4BD50AC03D73F
4DFBF1005237BD3132973E3F84D6B621467A7E2E1627BC84CBC737D30E9EA0D4
849962B1841F3FFD99AE1170DBDA9AC3B3B72801E011B0E9D84CD202E533A95A
BD38C513CC756CFBD978A0F7B87BAC9C3015F1554C4668704CD5663007202487
8B76E3B775E9FD8C55ADE0CC1C4CAED2E38EE1DB9B710212B0A7E21254D461B2
681AAC169A02A18498361EF7A8F3675257AC32605F71C4D6B7A331AF7237DCDC
2483E367DD892F6347E5FC2128A9AF67D919685FEB7556FCDC9D79CC6D608816
93C758EC6A4F6A047A230D44CE6210E275C4AAC7931329F16689FA7599D096FC
928471D2FE294C8173E82B508A74C62FA7806045871AF6D7D534C89BE5845CDD
DA0862D2C158FED023089B73198CB56F38BACF5044D989BCAECB8D04333CB496
C9CCDDD789D38CEA7EB43216C42E53165B130B505070A9C4DE98D41583797CAA
35C737F3DF938004CA4E9EFFF243628AAE82CFE72EADA68F6A0DDC1BF80268E5
088BDBE5E056BBD3F361E85A09301C445C3D82FD3B3916108E22E96B1A268824
54B0E292178FA07A6772E96B5D7284B8EC3835419906B5D21D7E2DDE51A0EADD
BBF0BCE98AE75735DEF511EBBF5AC7571B0778C0E9D25358DA06B20DDF35F2AA
009B6A21E21F6FA83A84FB5EE72FB3F03AD3967C5F44D4FEF623639FD3511FD8
D5CB490E7DD748B8F839254BA9139D345103CB03226F4FD32FC1121A5493374B
3357EF1E884D9AE0CA20D592749518CBE5E5D74E6D3B251A6567FBEA785D838A
9506C23CF47E4CBD5557261D99ED0CE8A59E362AD022FB8EE2AC255FC75181A4
2E65C3E1CF5269B00E31FB47B4F77CB3362E16ED575CF97D126E1669D170BCCF
BF11AE421FCD412ECC23CF91243760D452B459D8461C14F4A9915064E7EE6935
3131437822B20B5E3964A4F2E15BBE25B9455CF0E2126D0B4E6B3597E8AE55B6
39CE71BEEF45014EE987DEDDF0724CBAC3C084F337D1C46EE1A99350025F131D
697CC0ACDE8CCD15659B544A8CA3560D9987FC1B454037C7BB317932882AE822
92FC98FEEACE5FB811DC8CB1CB94F4EE9A978F9D8C023B77A06567841E1A7490
84C0602F13B2F4140A0A7DE0827FA310504D0B158B2BD84388130FAF36F4C1E2
471E19371B4DC01E4A64DF3F74F36E773AE887DDE805528C272D9D2ADE56381B
A275FE5987D36507BC80085920AB9C3172CD4013B6B4E693A1D158ED9866DC5B
CACA8616749E235CEF6A8492F020E67407CF321E01EE8F2811A9C0AC4343EE91
9B881181642CB1F6C34FF817FA8E8118AA593F2064C3DC2A325932A4EABB89DC
EDFF4E028F3583AF13D105E61977C2F8EB810574F71D1EEC0AFD83A8D8859E49
E9FD460B957D4B1952198B7F6F1309B1DA0F7074B2E084DED97E6C129E8DEA51
17B3C82C11A247582DF33AA5B41DBC85B9F5C5D0AA1EF139BE26FD7B9F79EC92
3C068CE0F1E7226536AA7589E6118B332B7B3B42882EE392C916BF9A6BDAA24D
E24D6CD65831B8E50C195D01DFCFBECCC7305AF0A4793504B223376B60F8D136
DB175603B9070C1A92470E3AD7F1CD944E91ADBD1EFF555C60B33F3EC2B79CD0
50513FA46B02F2263CD374C017DE4DDB402D4C33567EF3C4E04F3775A8D9D46A
50C126D9277DF71665EEB52FFB958D70206769D0BD38632F5A0676A05C1FEB68
3C95C33EE38356E67716A643DBB780E72D0CD6C6490988311A5C70DB60B784FC
038F6DAAC43E4673BDC0981C25E3C081E278A3AB9359A878A64E913E8532373A
CF4D973B036EA5FF4472E812B4BDF5FDC0D79095F117C9767B7B363871162270
1EC88E6252EE0010BC0D07FBAE852C0E40A45E861AC8EB9E6A94AC62BB8D3E85
006332DC7EA4CBCF5EB4E9EEF114F60F85935BDBDDA3362A11E0BF7854BF4828
0FE9253210B45BC180AF3C74E1E2E27C86275428DE5232ED3FBC4DE9E8AEABC4
6E892F5C3E5A85F1CA9C7FADC6E331AAAFEA5C905FC0D12C6ECB60F72D16E676
70405F841174502F8DBA3FA0FC5B49CF998EBB33BAAB8936FB2D9659D413E08A
3ECFB587B95AFC6AD4127429901D68DEA2DAE3313811A76C5B5D57F356EC2525
93ED81BEB3F685B182706FADDF5B1D7F26E7CAE40F5B6EE04E45B561E998980B
6D3A86FB04163ED36491F24D7C3D634B25C2CC16F390F212398D1FA9D5FF8CBD
DFAFCA66543CFB72E8DB070634501E63D83817806E2D051595F90F6B15A89EB8
83943D8D811986966947E55576D0F5393DAF1D8A790FFF331CA9E4C9DEC139CE
6F32E4252662C6190E20F3B931E14289E29F2410B51F593FF7E557D1098CEEAC
50EAB6A0858F98FA558CD2AA16F0A3D3A6EB0F7FBC3BEE47C4336E84B4597EDF
CF2C94CD52B8B3CEAF5CEA7C3AE566DA6FC9118B7A2C3D2C849DA765FFDCAAD8
6026AE6BF312CDF423D6EDA89FFC8D10D441ABFA40086967CF3CEDE338D37645
0FAAFA893F2E233A15FCB9CB7FBAE4C75855AE4E6168C755F584C9484A18CBF2
78813319FAAF6C66177F200389C3C8A2D65314D2BB69D35F3F089F755BA04D5D
03A83FE05051C10AF3EE307E159C82A4E76C543EBA4ACF3EEAB7DBE3B170469C
3378D351024653D623663F0C3CE8A597F358C3175252997B2568FB7D2841619B
BF4D267B014C86DE012374B67D02E99FBA47C206FAB3AE433B5CA20561D4EFB8
9B829BEDB5E3DD60F5433EE1E6728C071FC068845F48BBD28B37BD51EAC7264D
45CD2BB8B613752A62946CA897EF92C1ABC25B8F3D000926B1E11B361B14C657
49E2CBE414A9EAB291D61FF851067307FAB0ADB29DDA9ED79D9EB46E2F96864F
ED2642FEF3038B305DE2B57DA332F3AF83E8680C4298BB02E8DF6E257FC4720C
989A99677C4A5A97860D9D1615587D68A4AC7A720443A26B921FF8DA47CF97D4
BBA0064B7339877DE9B4D3E6FB6DDB4B5C3DDA2A8BF0D9878CB87C82F9B12636
14F82D303D9B5F73A28458F167602207E3F017531D8DAF14FB5B21CD1C797A81
7B3F07D7CBC20755BEA87379F2D21D47D35E118F1F73F5EBF9C16A1A9AC60C8A
3205F2538A50B42CD9DF0629D03971CA5998C47A82E39690B59C40881F242B61
927CB24DF77B64567D69C0F861E429B4B11CD15B8FB58275287714443015F369
4580C475723709CF280F51BC2300C56A6A6FA7700D6F6C131841B0AC9118F4F9
7AEC0242D5A0CC311F98BD3C1E18BEC7A472B3CFC15B7408E257EBA3C53D956C
7FDB710963CAD0BA076D0659A729266042B1D090B06DD6AFF8A9A814589EFDE8
CCB514DA6DE060318DA4875AA4D5D876DC1E45FB7D316AEFC575FAEE1B5EC42C
DDC027C7AAC514A42B45A19DD40C7F31F7B91923F0511EA1FC0941BADF67DC1C
833FE1E28EC8FB46BBC06BFFE286C366E1F387AE1ADF75D2A94CDFF088FE4860
F33482293044719077552FC8F6DB88349947B448513C7E832EB9F35B28EF86C2
3131882069280A39586639D8E1C418E04748B104D2FD8D5588D655D19501FEBA
C3C44768AEAFA6146BED5C7A82F79965EAB6A39A337C6F4B3E72DD4BBE6CF595
DE4DC41E32753EB2B16202B2F1B9B785E55D27267A083AB75D97FA19F994BC1D
8766A4FEFD11336E9464742FB509981646E491081DE21AF12C1240C57540E733
62D1F9A090427F5FD1EB4BD5A463DCC84E2ED7D3EAB46E6243AE85857D759CB5
032F44D11D72BA01798903DFFA60F6AC177E704AB5BA14B6722F4521E7C552BC
B2882C53BDE88CC55840B753309D8BFF61DF17BFBDBE2FB8BF4BA63A363A5034
4EB9EDC15EC6ECBB7011BCBE5D5C08C85264A5B2747605713A9B31042BB5A1A3
B74395F8AD7A723EC1071F078B8E7A364F21989024421059D0F608E8471A5D01
AC02D1F8B1CB9CF8D2467147DB637922AECE879A80BAF27D2EA4AAD3D5A9753B
FEF2BF2C41938C4F0D045A0C6077A2BA08E242A05D015A9A32809DD51DF932DD
ED7BDBB8CEA62AA27DA04D2DC9F3EB1838B3E3E37097799AAF25C8B5A461462F
841C697C15231814EA2F97D671F5ED7040EA969285AD222A233EC61899AD2210
2AE68684F939FF05318CC3F90635CEE5E03D4910567FB7EF2CE1EE0A3F76F9FE
0B6D85C50D9B2C4875701BA03B7B042D2BCD8E7938A0A43221BD62CB3E991916
6E4C5685DB230A1BD6719AC9C2257EFE8025A77EE3FD66EDA1201BB6DAE6EA6F
0EB0525FE1A4F802F0B55F44A7564C18D44EDED7EFEE1980413950EE4337ADCC
E3606B1AB98B58BDA80CA50680F1872B0C648C191F49B0445E4D9172E11412D4
7FACE8349123EFE3513D141C31DD7109BCA7E9DC762D112FB1E3B5437964E243
1F7B614CD62017182ABDFDF59BBAC7C1663075E687A185645A2A6D34FB459433
CF6D1C796EE0F1E0B755D519B3F91479510A09A9177C0CDDADA7496A1D611D5D
428A63460826B6BEAA35BDCBFFA41AE479CD96B4F9C3CF1D39123EF1C1ECA9B8
3CE4410736869186AA71F0C1ADF3AA8290123A8B67E6AE0A905BC6F70B3279B4
A748A64AC0801C8A2BFC379A48A06CB311A29E4F5378B00283F43C55605847EC
C0FD7782CFA4370B34755A331814556FF227356698EAEB075F272B8F5483BFA8
684A253F442DE07FE2C0A459FA2AEDE310F83C1C822EFA66A75E01A68758FD97
C5928BB2B1DD8D3F3399BCFCD4EEBBF072C05BB0528537EDB6EC99C67C2DC5D5
CAA800BA496173C4A7A05EF150A8E7026A6F969EF949B0E4980653F01704F896
3B8BF87DC9CA5CEDEE7B66BF85A2222275102ECA648F08DF489647FAFF34D661
3DF69770905D11D3022EEEE058F0316E770CE496502E008B72B95440914969A1
F2D001A5D7C9A8DD908E90A42859A2F650ADE86CF4EC93FEA60A7F5A9873AA78
7CD7886064E24F38960B7FF5F735AA82D722934E2A18C21E8437E175131C8CC4
87F7EF853BD1E0232AF3C4A67238F2D085E30DEBE15A07B6A046946D1BAEC088
EEFA7197D3FA34087DBD5DC869DA7E06851A91F7E0336CFD6FEFE2BB3674F0F3
273808282A91703702D7D06B9B67C0ADC47B7D6479116DE48D61EF0B96D34BD6
3D94048A8434F068007B7E87BD9D405F2E29BF660674457A70F82F8BD00DC330
64E82B283AA46D876F0DD9AE8C10E286B3C042CB0B4E8D09C7061B705F415428
D5B4E246EA4F8BF28707F6AD871143714300F6AAE7286BFCDAB3C4316D5E4AC4
41B7F6830D6771F150299030DC7F996D7AE0451A3333A9B31EC7C2C99EDC7BBD
FA0CE085C7CFD4C0A175F6333A5C0F5514AEA4CC65C257EC4A6C0F3441CB39C7
550BA61E177A84043B797AAFB22C9FB5EFE995BB79ABCC23650C429AF024EF5E
C2592A32E90CF70EF4A01A86290893C0B359EA0DFDAF09E423761E70ACF40ABA
7F60A66234B04B0310308C22902DAE8CD6EE1B33BBF08DA09F0F77B9485D1ED2
6C48BD4E096F1C03C3AE5EFA4B2A50FED5E82F60EF74D2DC69A76032DF5CFADB
42D687B1D565B443C53CACE9535303D71F3EB7F12E7377183B8B7E2A999F4ADD
8CB19C27CA6B1929BCF6F52BAD524F3F82F2A80550E3A89AA8A18E4A00E72032
EAF44C1CE2C0DAC4C28FD713683DEC1DA106227D7A36B5AA4F7530F8EC012083
5CF0A83D7BC91AD4E67CCE7B5DCCEE3E82546ACB030A0FAE31E830C857AAC89E
C0A90CF147940B9D00089C771A6CC556491A618D5CAF173FF8AB5A6EB77C786A
0B6D846B9DA0C07F947D7524D37DC63A400DFC7C99058C8B8EFBA9F66BBECEA1
3733037B3072C48E85147BAAB8C78E9ECFDDDE7F42128EAE3004F4689474D804
A5B3C378E9541ABA5A75104641BA7E32CCDC0E9B8A3E05BD4B9621A6A1E57DFC
E7C5DFEAEDFD98057DDB09201CD7C570A39F1135C4E9D0CFA54B5C45CD1CA9CC
CF1ED06344F73CA4963E8ACEC1D74254D65FAB990CD38E7B35AA5C7691B72AD4
42BDDAD18F30DB190E4D0041A26EF015B3B6E2DD6E0BDF7A1C606780C8580ABD
A2F5C8F2C8F586487194107C63BF5C6AF68FC04C371C2F50A5651BB4E92AF0B9
183F250A60A7950B3939DD770976184E3ABCAB6E38DD0C8EA24C39F3AC38F48E
25EBF479DACF9C8FC97FAD356E02CC507E81CADD7262FA3D6C491D56B6969602
161C8FA3B0A8335A4D3AE1C38CDB5F11430EF1E31DC3AD15631556A6C760A496
79FEF8377A061D7C8B23AC8EF731112120855861698126AA71F351342E12EA28
6FE90C2E836AC107BC883A33507560FEC3EB9CA3A6F1ECD10284A8D126A68FC8
E8810CCF5AFC45FD5BF33B39579CC1D94AD59B64A54DA9FE4C01E4EBADFE7E3A
F78D98C0B0F8D853A6AB8D32FEDF1A11073D6790F3B8031C70D046059DD207EB
35B030B8B165E060B5F37A9676D8D365CDD8FF305059C2E913B7978671AC30CF
3DC0AA94F414ABCA46ECF689BA685F1BD831B4271EE0813B60B819EED0051D63
1CC75E597DBAD011C449044D445504D404E9A2F1002341AC27750FA1CF1A994E
99B77DD38A0D5A826235FDAE0F2269E6CCA5E6E543778DA375E01169316CD9FE
E8F22111CC5C1BDD1347412F127A684916247EB6DC26F3B9B5CE810F4D01E330
DA29486B65027533D40EB0EB6973E8BA5BB736538520EC2DEDB5FBA52A950F35
54A99D33F5C5AB146659B0FF64BB5D962427DC0536502358BACF8910AF58012C
56EEE0E6467CD76B5C5E989B17A3A72248A138A3CA8622749CD74813EDFD9E18
E64198B841D7824E03DE11101493975ECB199701EF66C5F23DD00C6C48AEF676
230A41BA29DF7C0977D65501AA0E604200A17BE95970E062EFACBBE9576537F3
D943262E9ACD8CDA7E9E78715DA56768569FA88F44461BA24A0313720ACE3287
858A257253A7069222755AF1FE9E68B059FB6E40586E157D5BCEE30EC3FE52FA
90352E1C66D456E4C5DD727AA41FA5B369D5E10CD71D3BE4EA68DB9DA7641615
5347AB06CA5CE504191E333AE8261506ED97CD8B3F5F5AA8760142C4F236CC27
A09F64AE01BA79627519A353B89C1C49B3B6753D85FA91BB432007EC990FA73A
2001579B0486921D95700BE3A1FA1FB5A05A6FF02334BDE693EA7D3AFFB585A1
3C3BFBA07B0D1EDD43BBACA45B46796349B3CE13869DD6EB99ADCE65BA555A58
5DB7A89E751C0B39FF607F8C37293E56B611648936B26A3395DD705466DF6949
852B16E2BA5BB720A6DED407DCA42C29BAC20A476A80199EEDB5321E1CFA1838
8EFB09382FD79729426B902E6812216BD5B6A942430A8B4B4675E598639F1E9D
877F10F7C8C0EC1FEE19C4E537FF9D6CEEE5278FF99CF84193B36278E44246DF
12107D7C44AB0472007D1FC5179F89BB25E28DA579326D26E1436F855A41F829
F8C6EE116935E4AEC622819D567AF7B0B1A7B1897D04D62C6B76FF91CF428289
9B98564320B8F8EB35D64AFA35D9B59B26E7DD16908DB016279E568E8E39523B
DAF9B80DF85AF82E43D5473876F564D494BC874B2F287EF8FB7B4FC4AE6342FF
D9637BAACE3BFC3AF042E5F654728290C10CC9B62B8552E0E20BC21F65C707AE
B30F46784FAA3CEFC4E75EF02F7E3F51D6E7D60A9C421889066A22AB044C34FD
993FBDC1A7E9468FC101C5595A904B6F061EEE5D323CFBA10EE7859DC842401C
52E42B65D019711FC981722D77370CC414C95FCF72C295B681773C49596923D7
B6C5B73C3F1283D9F78BD8E674711D900B67B76BE54D3979BCC6DBB03A4C1B97
954D8FF4616F0EFB6C3AAF3D476CC431D47757C62B2954DF3CCC6A97A4A4CEC4
D95250E66F8C502DE95DC34C2099BCC78531F464104E9504136873DFC6B8FC60
7D92DA9CC623153D5428700207BD48FE8067160CD88F042F912B61D712C94943
F131ED5E1A0C0FE689B739C1CA0E2A684154460513971220F272B8E8C09B169F
0EECB020EE0AF45369A0CDAC8D033B015CD5C5B648DCC1C4185E1F49EBD1F80B
6D162B7E514DE54E0659BE0A89954168E43B1D4ACABFEEE14113610F3F8E3C36
A3E70406B3280232865D7ACE219BEBDCA7DCA83BB3E1FF6F690A708FAAD8D28F
A0ABFE6593AEE59662497B7E1272D6209DA616F6D521685BF23D51E83CBB5E53
124F7FC666808CB7AE472BB8936D7390D56A981603FC13BCEDE0259EC6468CBD
8626030780E6BB15A6EDB50E7E3661B14FAB05077E2125EBA92E3CECE65A31D8
524552660D91195501344D6C0C9150EEB52B4BD6D33129C9624EEB41B6E8DD73
A6CABA424B47779C619022A657EA01A1B9A27F3635DA51CD118FA03F4EAB58F9
B0D5E1365FCDAF3A5120C0D277AD7C8912BABCE7FD007DBAE4262AF0C3F2092D
049A0B31B313D35010B87C93AEFD7C21D4C6D8087016FCB998B95F194BC9B6E9
5BA14850E75FD7B0B22DB7A96366192D2748A52E28F0B34C85250E96A49A879F
6DB6228C0105AE5F8C1D033F0ABCA75BFCFC37F6DBA549ACBF1B3D209FD686A8
00CD5E1F43E984FAC44CCE2E2EC8AFB8FDDCA425029BF91E5C3F4E0A5AAD6583
93FDDB8A7BC9BE20664BF14FB258C36D52E68149A9E528E3BB76CABBBF03C6D4
6DD55F2128B8DEA13E1224E00A8C0D4F70C87275F0AFFF6838C17D91B26CD263
FD7E344C9DB219C1EFC8FC99325DD8BF93A1D2FC68462D8060D8E4EF66094970
E2404F6494A9B408CEB9E849DCD7D53AB345CA5F0DA088D9BD820E35F4BAB7A8
A19678E27B1211116AB978C374F93AD47818AE19AF5F909B8DBA51655025FA16
C5D4D857CBBC9A49408580D7A5BFC889CDA4EA23EDE165CB6C5703029975EEB7
C73978C115C3C206B48D7356A737F742A6516BB76FB09B72B376A29B3F592927
84D5D9E472CBAC60F7430230E539316F8947F09699236C2B199D9808C3F31FD8
8C320A4BA9A4B0D98AEE24235BD78472B090B4EC34D08DF3295D34221368B715
57D7A94370BA95F31652ADCF29CA752FF80B35CCDB5D8E13419B055B69D1E2CB
E2C65525E3972E42EC3BA3A127B890A26BB91D1FBB0F52F8513906B9843D1271
83A66E25BD20C3E280575B31D54BAEA967DA20F606B0F02274421D69721E0CB5
78B469C8756A66A3EBC3A4816F7F18E29FA143561A07F50943B98D7DBD96860F
50DAD4927B94D050E12ADDA9CBF5A3A5FF34C9F228843458E105C45906462DD1
B2EB929E166536B8EEC999DA93F9BDDEBFEA75316BF648C3D465E12CD3611BDD
489D925CA48F5B1BB837B31D95FCFEEE32F1893155F33BFCEF69728DEBFECA4D
DDF55D5BE4976875110C8F28B52C1481657118DE649379683BCA65A322CA8463
F47913388092DCBCEE33F21CD74592DE5D323E1AEA97EB6959448D92E8B09E80
52BB066E1EE1463681F7E08E40779696DBCA74EF31F5115FFE565FB431A19C1C
8ED26207588BCA4EE8FB43AD7CEBAA1E8AC903FB1EF52F939E9170E3ABD95649
8BE8B1F3350DE3A8E689C1DBE949D58AFB4F8C7E1537910E6174F0EAA9A09F84
40838DCF959C9B99ABD6271A0CCE7A4975433D1ACF5727D1CD01893DE325836D
EDF93324177A7758B3B3BF4DE8D07BEA4DECCBD93B801B72ACB8B8B584BCE817
86D68E72A89F8561D9891F71D0945B06E8530857826DB35D490E68C0F8DB8799
6AD63C1F5C16E487DCFD61D3AAE8F2133222E0C9D6F8BD005B52298469DE7AD7
134E93013C35939AD54517B65DD0C1451610AA956E22BCD5AB67777E28EEF2F0
22F6D17A1861AE0DEBBC21E58DD7358A8F6299B5F779FC5E247C321C91DA2EF7
558D272A4646327AFCA6D3D5D5B51F7C61527B547B77F81BAD98DC7C85409868
2D8521A531654D15EBF7E0ACA8CD299C6A20B590FA104B180184E4879838664E
1C92280DEAB742E863B9AB52AD24807E39A1891FABE19DCC3484A71A59033EB2
8AFA8B690ABD8EA42EBA1258CBD61C2A0689BBCA44DEF70841D60E7F0CFAA805
9844DCEEC6FCDD4B4EA038FC31BEC350358D62B7B015A019679B0B8E742902AA
FE5688974D25BAC582AD3F7DD4F4AC8AC3DBFB8535D309AE81AC2B97D1D6C28A
1E74673ABB79FBD3FE05E2FF03F2D391D40091D16E43C87B522802EFB0CCEBBA
CF615D15C46B46D48998D1F72F3EE2742367CB4B205BC587A6F7B096574A7A70
B2E02BB46F483469E3B70D654CBA4A65F19ADB02D40576568262B2289BD805DF
76CDB22E1F984DD478D44377FA2A33C0EB41B10B64C1425ADF4234D75EA0CF2B
1EEC07707515C98EBDC2768107C74AB503E554E1EDDDE87DEACF756B352E24F6
F16B58AA7B006877B7E1044AA55E527E64B9FA87B6CBB9AD96CF0DEC60B30F77
51B3329D4B12067CA525859B7315F0FA3D2276F98A825ACE2CA6531091467E74
06022F3A481308D94983F3E50619D4FDA9922D33C034105298DCE033578DD93A
B22FB3ED51966ED16792E9095EFBD56ADA26F19B04C76A676F897E137A1DE63A
8D2C2A5564FA5451ED95064268DDE8CACA7CE15AFFB2E3D8168EFFF7462ABF70
F4C05D8FDD7480FA2A14FCEE4706AA003DAE9F92D5C5523E78F4B60F3312FFE8
26D8ACAF741FB1F4063CEC6272BCAC67580B8FC1E0ACEF9AEAE22E2B0C5ACC28
2885BA221042C7AF86B50DA3AA3720E9F4AC1F0BA048901A9A827C58BBC49434
6C2E2D454326B10BC0E5234E8F908F928CD4F4B5E9C60A8E9E0B6945AC2F3577
9924BFCC1F4C5CE53A406B8B0AB0EFA27F560E0D9FF7FB81C77AB0D19E3228D5
2884CBF4443BFDE6A6825A724FE6E1911B3F9B2DC962B25F38F307F9D7860592
710144F7DE95A4B84027DD9CC23388D465E53466FDEF6E4C9D13DD90B90DA35A
18C332D39E16F9F5AB7D81B729A1C4F44CA84EEE10ED317BB7A7A45CF75B2F7C
16F5392DAB999BB3D1C77BF9ECE6A91142D95593EF9FD51E984ECE8083F4732D
2EC98BF1E4ED4C5F8270D81136C465741D4C36769C30FF6B778FF55423C4B191
2C8AF0FB1BB0872E9EFFA4AAF6F49F557EB1E9870FF041DF1F4E1C24D0C1C4DF
DCDAE8DCE5BADFAC5DE4BD6CAD53000115BD3E281216246D99C18A0A61F0A103
677C5D2E1CB0131081D3174A8651D858AFD0906B8A66E1AA973C7B5548E26597
DB0D49B84BE1362D29F340BADC6D0C5D332212CD062A6B968FB696A4142BBABA
A533072D97095B5DA96A82F2B5A1339C2030016F78D390B33454BC1CE86C9196
511F6F790AA11BB9A1EA80BAAF310C35E5F756F3FA77187F30B0A49213443740
3AFC048D2F1E5BEFFBC4E622EDC8A217BC7A2BF98D8F3CE0BE643939460A513D
63C9D255FBECA07BE36BB46D6172499CDDCC90EA538A5526FD5AFF81D04BF88A
1048609220AC8CF5ACABBA90B42E79EB6E7975D4F120AE64D1AE251C6C723ABD
EB2F5822735DD8E20F6A6B2E898B672EA2106264FE098E3741B06ED181F944A8
9BEEEA2C106BF1A73866A06DAC5BCAA7C62CC8C2A76BE7A069A77703ECCFEC44
C1D84EC88CD4A6DBC918DEB7B775CF4837E0C6349D91334A38D635C0C70C895E
DF6B06A3C5B1CA29F06FDFCA1636023C3B45D99837E560B8544289FF2247D8C7
EBBE4E95D9CF6F8D4D204CC6D61EDD1285602C15D792F53349D73B72ABA08A0B
DE73DFB8C4109B657516347353760B35CDE2026E9AB77BC332F24FCB92ED5A7D
989C33BF2320BA59C77F00DC856E0EA5D7037598D8F9D24C8EDC2BDBBA940DD8
57B0444472E902CE4F0CDD1F099D8F72A91D4AC462973BC72DDA829B4C0F8235
86C4E67BEB77B4E6CB8006740B0AB54A7784D3EDD40001AABB2CE99ED07FD255
0CE2A96156EB5EE9F9A9A9955142860A851E253C6F5D2619D655C3D3A367F7E5
9B94F64BF3271B78426CF40EA0E51D7F27ADFA56709D2F5B5C043398357C4C4F
E61AB235F1C91BE73F81372A79E561513B5DA5EDB90BCB19CDC246F8E458FB02
E74A6506D121675A45C9C58403594D8E401646F45EA63BA74EBBC62EB7903268
006A9EFEF8657327D41340F9D2987CF9462B74259F19F9A26F56C3B869C2FEB8
2AD03AF067FC6D600734F59939234F07BAE88B6A4D1E6AB325FBC17947A98EC8
AACD2E170BC6413B77E4D0BEF55832BFAC5EB143A054DCABD447583041F0D8A7
11CD08605C94FBF391AED6DAA836C379CABBB320526DA0674321F0AA7201FE93
ABECE79EB06E5E9561E98727F98C4064BEF9FA631EB21CEF8593C27CD0861664
80CFFE79F58F29A11B27B44792BFCC5B88D2579130A132E47F1F4EE7941C14A4
FA4FD0335331FA1EB4009CFF972364B188468DE9AA876ABAC554699F29E9E325
027DE1F386E88280B7659B534A6E00A3CDFD2FACA0D18B9D74EC9E7E6A8BAA2E
3C7AD4AB4FD554B5D5F10203E0FC7930DC816A612CCF7E60F561BB7740C09AB9
BAEDCCD9DF6ED040F1A2BABBD2AAEFA8E3B346950C96B3A99446E31CE9A42A60
08FC5C914821F86875911E88DFFA74A188A5D432CF35BE6D80103C46164C8681
4EF043B41AB4E9ED641886B2481AE9B6D3697E9223895E775DB24846F7A4BBB6
E825D2E237C0D520FEB0214531E1E0E926D6615307D402D14F972D7E215A6942
623456E577D8AC3A9D072DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A3531F7
8F9D12E6298288601F1EC2134C63CC7C4BDF7752B14661F00F9E298B3BB482BB
A0365633ED40BE32D14CBA9BA266988C0424762597BA4269C7D8DEE2D2C1F756
86F18E477E50E02D368A79B39CCE9F3E634E54AEA7DBD87EE39E13F88FCFFF2E
F8ECFD141AC9355C19B4990DDDB0CA93D576324499CB548F21ADF5C7501EFDBF
2E89698AAD658DC6E0B6B9C4D612355A7DDA8190D772C15D794AB11EE10C5E9B
6EC3F097106065F2F956E07B310CA014C8C8BF8CDB3C51AF9228D578E0D95C63
6364E430629FADBB1C5F349F2BB94A10C76F2C98699897F7DEC914CFDF1FA0C1
469996B737C0E134670C58C7C4FD71244BEF6115D2AEE6A1DECFB669AC6DC51C
86FEBB15424BC30C585CBA947A7D83F6D3B41B9F85F8B188ADB3987F7EFEAA4C
D5611699F11722AD650F569FEFB1D97247406329A997BC863C63A0C33E9FC9E8
FD8F90A17A1089F79045E7136B2F85AC72E524ACA3C7787DB16730051EDAFC10
D2A983B5A2CE0505CD251AF39D000A60B8A3DF7F12B1FE9D0800C9DA440F8F4D
F52EF58010B75004203E9C274FC1F0F59D7A86D619FE0228C561AFE9D26BFF84
2E08752064C9D149D5AB137C122FC7F9A5DC0B4586C3992FC53F1ED102E969CC
E27E88830B9B3F637DECE05A34BCFB971FB63CCEE8039BB28E8E050FAC979285
1F1CC40481634C777018C2E5F8ECF3801CBDDA669AFF1099E3D76D55067C5913
28E391BA0C688B663F18FFC776DD40D3CDFD05EE570817CC8F3C752BAE428794
1A1CB11C339893964CD89EE44502DAB89FBF0CC87558DF9EE6AD8072E2B0EAD6
8B9FD3CF487E14FA94A43AEF2EF878C93170B01F5D4BC42422BFBB321D531936
1C767DB4FC8E4B8175703FEC53549A80FA0B8B14AD07A99F6BD958051BB0A04F
A4A80796D12DAB81A8B67DE79D80BD107916B1CD154D0C8D57DC82C737CA5E6F
DE4080C090D86172AB2E682B06CAB9811DE442635056D0DBC2BB11B3B0CEF50B
50F1A329FAB54F5316E1667D039985F2625EA0B5B6DB576B177A69483B21779B
9B4DC972F44474CB35738074BCB9FEE4077CC0C49C4A977753771F4B609B835A
6293782B98DF6D611220052DE1D3D567DAC691669A4AAC7360F8B87013B37DF4
200716BE6BF8B0D304F9ECE6A911BED893E5E3C9E7466630DBAC7CD22E7368A2
6BE186F7F10E7116E923B7A02BE876BD1B3418FF0C4E804379A27E6452954F98
7081541F3197C4E64E81EB2D210E0397A6524E0D2ED49E31D611F993A4676961
DCEBA9BE734CFB6D44EBF0F8535ACBEF0CE92612D8FA3294E9F0E8CCBAC9291B
2485069A74873F10114BCBE46E4DF6F23D2406F68AD4AE02E5474D3559A802CC
BC4D813D1F285C913F7DF877E55AAA8C1AA3AA233603EBE59A52DBFFD4E50B41
D633A26DC306506E1518354B32BB81BC90F938B17E973E4F5E1DF9CC6799AD9E
7AEAC23DFEC572C50F8A4695F67A192CB34D3074FAFB80801ADA931C653006BF
DC4499451AF56DE59320876C67E43463AEA1BD0DC11D563C00C11C303CE15D4D
BE06F537BBEA0E71A00C2561EEE8F9525F3D137108E0BF9FBF432EF46FECEB4C
32697251BB8D3A8FD9FA7E9B599DB26D57F66BCC2460CBD39EEB88235393F3CB
0636E626797684A3BB586154D5812197BDE461170C96064C0268FEFF5B139A68
DBF710E8109F0CA0E6E114DD647EA0AAB1BE480EEE679C2524FA0A01FFA3F2EE
255BB40CB61CCB1B68ECB21287644A4B90515C1608B543176B07E779A4A2C8F4
D06A3B458B4EC827E37AF639C3C9E3859EEA2D9BFA50441289DC092CD180132E
DCAD5792C59220331D0922B192FC2B351212FCB66B4CE90406085978F8EAEEA9
3AC9C08D016980245EFFDAF624B52685C42B4BD48C112450311370C2C0042B48
79347556BB85F85A2E13415B0C2C76BC06DC21CD22A2A053CCC6F80A99B4748B
DE32501CA6C6839E4DE11D4B23B06D9D790AD4033B3588DB4F295C2234F3CC68
54EC7386B5C8A276C074A1F51A8FAEF46319AB90126937F23546165779866825
EA89C3A02906ABC54E3B4FF2364E8AF1D3E3D2947353648C62BCFD951918E3C3
8FC1840CA96A6B59CC5631C2A4D2D9DF6A1C45DD0AE3299C87A209013C9070F9
6241E324DBE45F66E1F2593276B50E84078E8B7182D08C0D5622CDEE56212D57
F9F2F1D127CC861A9558A8C4151CB0BAAA224DE582594D9086BFA19C6037EFDA
641358D3FC010FE9367343C4E6B1FF468B46F534C0AB0C6AAB1F3D44AF6C285E
B1BE44817E454BCCA6F0E094FE4FFD5115B3A652E991DEEACC8DE45F8F70D60A
EE97C6E04CC1FC6577880BEFBFF5820772B44C171B4AF5A4F96521979A92FBEB
7B5DD5CBB13A886B8BDEAAFFD177C8B9EF2F4F529AE4D6E393827B269768307A
4F6635EAAFEE5695DD82B9077118A042EB52EB7800276E7502DEE625ACE934EA
61838AAA3CF084DCB1FFBD0AD41ADC92E33FC7897B9EC592F01F97697A17967D
344A4BC9A56FF6F51F8B76F4B9E4DAA7AADBF42FBFB59DFA497020F449DBE5BE
DD97447886FE244EE436E7ADC2866D5CE1BC2727E66E8F8981AF7707EEC32DFC
80408D750304E9FB01891B92AC5D74D10EB5BBDEAA240D78E39521E10289FE34
86043F15602A346C1667DC625491A42A8BF5D938731CAA9B6CCE4ACC8208F22F
9FBB6713BB8306E5B5A0952CF5BE97E0CBAD108C6E39ACC6009F42791C2F643F
FE6107672C14A88EAD15FE1E6C4B5612B5E2BCAC0792A1295C0609F24B079B8E
8070762A993EE0958198AE0AE0E053DDD6B4F4759D6C9C458980A3698183119D
F743B60BCEA2607C65FAFBE78109CAB35AC2730A761CAAED96AFDADFC2A93226
0E95199F6B19286AE258DC9E2206D9705E4AE011FA24CB75FEA6380742E8106B
BFF2B4E2F28C0A80FD418273E90EEA68DEAD0613A6DFD8DDB9E895E8EB64DD6F
2C60D3197D3AA74C44DDDCCCEE0C2BCE01C54A11D6E1CB3A89A57EA9AB0257AA
77AA8FF41518378D188B2CCB0F6BB2348778F35851637503A6265C8BF798CC14
2B8F3DE9FE43B77F8DFF382F376307DF1B81E4929F46AF6D22EF7745A8F3111B
2CAC4472BE4E513D327296AC33310EE34EB7FAF576DE0878E74F0239E05BF6E9
8C9D06D72A57657BE4BADBA11C52E735C2C981DD1A51008F3AD77BEAE4C848E4
1EFDCB5AA157C47D83DF4B4CF82760786FF2C66052C28EDB98EE089D290B9952
3C7B85745F48623FBB84FDE8712318AFBBCC78F7206577618231EC8F1051D317
6F8AECD23EDFF11182E78A6FE01B9E9AE8E9D60E06A3E169A1A02B17E1E5A321
FCC5AE22E36F01DF05AB58428703B5F8FCF7156859F14E64AED1DA16BD11D492
2C16189C9CFF4944BE3C67AF18632F66EAD39B163C9FC49744E3B4871CAC9E24
68FAEB0305DBE0E007A4D7C678998D6B3EBDDE693D0EA80372D62E44F114E6BE
16CC3FF0A4FCB3B2F24D796BC57AFBDCFE76E6FEB489213AB54F670B84052E92
1F4E5883BD24D106382A82EF4900A17829C8A8DDDD4C4EBB8FA8F9731E745F2B
A8ED8B00CFD8A93B2BB05DC38FC5FE8E49CE8378C8581DE74B89104356DE0C04
E64EC692AAECB93C7FFF2F16174606AB2770299A4EAE74104B1580C10DB3F2F7
75CFFA46A7CCA532081920A488B01C8DDCFE5B213747E5CCC8D54FD790C707D6
BCDC226BAB91E8C10F84C2A6E0764EE4F182641F0519819F8DF55BD6E354CFF3
438ED3B36992D22944354AE32B39458FD6A70EF3B88CD94B16BD09AE4482A827
5503A632A487614FBE5DF70A31C1C0F577954E4E4920A20270A228C4D0A5EC83
CBF516672D73C22382AECAC94E8339199BFCD1C4FF3CE4851D494EF97D357057
B13845A02D765F00D47B7AF675CAA98CC1B3FB81DC7D3C751015E2C303A527A4
6B56355930F7B3AFCE68ECEEADFE9886B4075D21CF191A2A9F42EE8C9E9A2200
C8EE611C605FF5608562153DD6A09E462ADBE677E6F550F93922ED67E6F21C48
216AEEE4D31209BD7AD01EB17C5D14F777D02BE55B48962C844CABB7BED489A1
90D1E8539854F3A5E46F12CC16254F52A26FE47FE41504D3E851A061549C46C4
9074A51C312F0F091823E5BE042533CD81A743ABCC20ADAAC3C0C63CFC3B7ADA
39C0AA97CA287AA51471BA9D1B2A73FC722BD5C56671C0B7824837389FE9980B
EF16A3639D400DDFB9D4C619D4514E4F9BDC083396A1DC40E54AFC53C75EEF39
19EB6C56385F1277043DA66DA2890FB3B6006DC5E04D41C801DF8438DBBB9E28
F75CF5C46763BC59C9753452E44CA467114E91252F82040A75732331D3183629
9F302E2A78783162D280559164C0DDF9DB23EA91C4C9ACFA21C32D2570AF3355
568CF245EFDCB85EFA458DB7B8EFC9989FEF2798345EDF47A4086C5527CADAC5
77EF13BA0603CF018E38088BB76CA846A545497019795749ACFC81B4ADD3BEC5
838B58331978769574D066CF54ED5E3235C61704B6A43063CC0EE57C97BDCAE5
BAFB5AF89F94923453A4C7A5865A52C5F4D31C49B716E117FFA6428294A1E9CE
9B95474217BDB214742B280AEF95FB492D5FEF900F8CF7C7C6CAC5831D08DC20
BA9F3DDB936595259DA3F4755F36FB252F0335FB50B3370C94D0AAFC1CEE5C10
D48FEF1D2C0B1960B286C97EB43BDF9710A69FE60AD63D38462708DA8F5C29F6
0512FC389917ACF73444EF979F40BFA51FFFCEAE9E1A97661A47326B6308D41B
37EE6346446B6F594FEA136F2ED0C80C9AA2FD3F5025D9868BF5A03E28714C22
350508CE061BD635CAC72AD86415448BFC2EF4E8B5E0D5B6140272D81CC5A142
15E0CD9446E4A43E85BEA75A6A1945B6CB083FA60911C921CB16CDC0377E55BE
D371A2F693E3853FF45B79BAEC4934360F1E2E5F683273B78D048EA34BFAE899
9557EE3725AFAF3D28A11B5646999717D017EBE3363DCB6AEEB8584D6AC888FD
35AC20C9ECEE7E629CF370ADCFBE0AA9F10AAD7FB3C9356A7CBDB6EC92521B6A
ADCB3D56D4F0232AA0AFCB7D36842E751568F2568900ADFC43DF9A0143E2ECED
58D83420F4B02BD746BCDF1DD900F951767AF33F88BA6963957F3DBE73F5B144
4B50A48CA9E1CB491AD7475792BDEECEC4D91D676C690C99E64B8EBA80F2759D
1E9A9979CFB0A877B1055B86514F2930E596BD6CB249A05F229CDC2C7B3F4693
D6E5D94267B9B5FF1454AC7D54F59C5D94588BB2746018A682442D495C241BF0
CB3F2CD4CFA7805F434DFBD7B110F1D53E5F146FFAAF35B8BF4B489AF91F3065
4219A3D4EC9AF972C6029233FD26B26081901277A14D6C7706B546A74DA16147
589A2D3DADDE9BB1A63A4047EA20DA5FB65ADC207A7ACB3C766C747CBE222E08
8F620CC81360B063C02BA92216FC62D62C9FEF63528D608D534448654ABFB35B
F1C386EEDB9F5EFD60E0221273F285C68918DBDBC3DA0C169D9B8A4E33ED8CE8
EC3AD987CE15528ADEA1C6D6BA031BBF74C3D3095B2DB5108BEC9C46CB95FEF4
D8F750DB1995E9233092F528D6A704AA7EB260B129531C5C0883C676E7AB960B
128A6F37BEA6F0D11C026236C8623D72878250A8C0BAFFDE7DCE1CD6F5E09E41
8B68C241613A10E2F8C3EA53645E2E7FB17FA52F6950C20211C80525C2E0322A
D914573DD12540F02C2D847365CB105B0D8E883C2A3E8826B5A2A74206C0A2FD
237CDA518C2102C715CBD1BA0B0C2EF1860C2894497D79F8509C598E2AB3D383
7EF582125213E7FFFE5B26A1F268AC3841BE8C8049A5CD77E5E436FAB31345BD
F79F8143589E646A7DFAF2B50A51B1A4E64F58210DECF59C716CCB290E8A3A1B
5FA03C76B92004AD4FF5E2A0B60B0152DDE9EC631499FCA923AF2346E469D4BE
600409713AABEDFB9203DE5CDAB0611B3248836DD9E54650EE2D2F3EB9248BCE
39F6AE59D579D8C717B8A44255CC7FBBB882B2C3D159A36C73968C2409AAC3DD
643E0EFE1857807BFA0B97FF3CB5271AFCF83EA09EC1FED6A31E8789F3A05B1B
290680E6D211546E24F0D8870B6957EA599F304384CB59805F4076652020775E
C86682E5ED5A50C4FD908EF3669DE666589C64259AB1F7B4D89A563B3E7BBEB3
0BBE14AD6404D1CE34CCCF4CFC655DB5818840D39D041B26E6AB213368F8CA93
6A6B93DE729493EDC6FFEE039CDB86445F2DE91ABF81C8AC2B28B098DB90E754
F6CB19C6F3165F8A252DEBD64356E2CB8AD8EE622F4D0B4AD4AC686118327963
293B5FBF0A37830601E4FBC08279522CAFFADD8AC957FCA915DE667A165FD424
17BDDCAAC37CCDD9529393C60B58B94A90398240DF656D5E8EA1872BC169F92A
89067FD7F11D02EF0130AFB075715457789E55361BBA8D8DD273559455DC1A80
619F155C66DC637B24236DAFE0AF90282DCCC59A84DDE5D5FF995DEB550BA053
D6247D7A1DF72FFA81193C5C8E44E09048574455C2B8BA0F91B473B24A6A6EA7
73D06645E292CED6B53805D9798A83E2D18179C029ADA68F6A0DDC1BF80268E5
088BDBE5E056BF2E11527A7F3FDF0C07D30FB6436D58753F6AE969F7256734E3
3A9768290A90A5FC5E18CB58532AF7191B77CA25B8CEC7D015551B07AAD8C85C
6196DC28076CF4C4A28D83254A8860DD18EEBD72E9B9F46ACD230977EE7D7AE0
4FF17763694941FB4E2282F97FEA50082B956F145005AB3833A612643316CB42
0AF3DB29F008BA36A2EF05D911EB09E5F39A73ACDC8B4A14C260D8D7498A3EC6
3A05E468C6101A90C235679195FB197996371F4CF2448E3982F0A7F4CFBA1357
D8E49F885C8A0FEF4C3CADC2E4D780B65EE0DCF0830C02BEA2CAE21DFAAFB537
D8D9F7047051AF41D8C45888D4A0CF8A15963492FFEF8075452448B7EEF54856
0AC19060632D81D6802E9437F90E5C3335C40B44C197CF024A0C7B838BF2BC33
77511CFA885DAA68993A4094F490EF2DA767DA69B10DAE3B890A796CBD511C38
8D8E5A168A1371D2418B286AFA06FD41DC02120945F71FBB18A3747D9D6CD3CE
D2E108A4ED19CF7AABFC7D4591E13D410E44CC26D3A3E0F450318BD182CB6F86
A94273404BD63FA836832BB25487385C47E9E321BA4A0C65344A4147DEBA8131
381064310B39444BB87F38A7549801825D973C8A6C3E0FF338FB71E7ABE6EFEB
2A6172CBB0FB50132566DE6020D9BBF6760D67B53706A450EF53FBB966763DE8
78D86604D180892D9E1AD5D37BACDBCEE97B97156C9B6538235F913B6E145EEF
8AC9C176DEB763888FB3540ADDC901AF1D0452045C801D13B5CC6CA7A96DF09D
B47C9634D586565A9DB688E75195839A638DE4912B1AA30BAE49D70B44C00E54
470692BC97F797292ABDA4499C2BD08AE61E233FE6FEB0CB7EEFD06CA3E4D0D6
CC2B904C38F4106AE01E2CF412DB5FA4283F9CE523D03C847131EEF1D6A8C20B
B05CED82013C8ABDCA62FA6E2F80DE35A2338CD8D5C4A23D00D8D2FC86DBA063
C52E8210D6D8CBDE1DD71A6FFA22447AE8CB67CF2A2EBF262FCB23701E54B8E6
CE9EF489282191932D1F99D4960686A56757B4AF5E637CFF015308E4A9041E14
697729C7E129EEF1CFEEE7D14B5CF1B9094E95AC763D90BA0719EE71BFC7A16D
9C3FECCDEDF261F9F41922C3ABECD7731F5B678CCD2C1315DF52A4D87F16F206
4FF8FCCE81D63F54FC400D52B8657F5E20C2807B3CE00CC05F6CA1D87A1C8353
0D8C7D42F0EC948B805403A784DE9193BDEDA3D741907D5CFE95DBC3C288FD26
89A4650B964238A8E854B65861CA398FED97D7896893276E071E1016C1E67003
A22251C1F57E41630F1CC9B82B395BDCE1885A1D5F3441B03AC4D3263A8DF6D5
EB3D2751503D159D3782053293E9ED0B547C81F072CA0B626D0A5CB1B8254A4E
F588149C84C1E51745CB09CADBA91F8B83C1C576806B25604B266B887D1E1A31
96210E0C1363B06E0C4CB49A374F2A0C163950B2E4679B46C25E44BE0A77A52F
49B360BDC5FD87459D4001AC7AAE77183C14FA5B76B08C3D154265A22CD7B36D
783F60DE4D8AAC6484D2085D85FF86E8771548D864BB39BA01C8F227BE0DF6DA
E3F013B3EA4C39D7A98A8D8862ACEC2E273AD241637B5D7E52A2BB7371584DD8
D68EB5B249CEDDEB3ADB5B9A52934AC46E268F829042B52ECC6CAD9D6A335B2B
97722DE936DAF24BDEC6982CBC3F35A297E1760D21382A38D32ADDD4F13836B1
3A5802AB247E9FD612C7762E866A6E4C83D0AD28B264D0B7D61223474D93C05C
07B8C7DA89668FA5327B86BD9E3E611A89E21C8722B89571AB31058AC27B6BF8
1BDD825B24792111F4B06818ABDFEE40B352EF509720861D2B8D5DA98FDC1A70
6A9BCD08654562411E6DD4A7A7C2596DCA5DF89F901B1FF3201D2A494F82D379
992D74C1AB219251F6AA17086CF6338E0405727338588518C681531C6586096B
DDBC1EA792A211B473C0606C887106DD67593CC09B3350E40689A5BA6F5AABF3
E7053DF4437F14B549B1E8C80D263159FB18C27A41CE503CAC9D2858D249E236
CF43DD5D5F237F0E6494BF36A317D80B2E19A5006A049FD3B35074D85BDA9A61
5D5C3243063397A70D335D41F59317F44A60ED73DAB72A2F1AC1DBD34C872DF4
21458EEDDF98DFDC51AC170E4C758D505523E5FF2B32BE0179DEBACAC5A6DFD5
1F6B5047857685781D6F2347D9DB0CD7293EADDD2502C915E2823AEAE2114035
362B8538FD37ADF93656AC4468414C1DD16FA4748DA6454D85B55E7E81A66D84
F3E07931B517C77550A553688D6848C474E0CCDD0279DA8F7BF19BB1DF75F985
EB1DA6E9D8868CE29857AC764A19824E49578AEBD9108BF9E8AFE0DADA17371D
616CC087DBA8854E4A1372610EFF472A1FE05B555A41FA4A0C8ABE5C93B4F406
07C715FEAFEB81845872C259B26EF663B57CCCA4201D058DEA4F847FE19CDCFD
3A0CDA24B5206F1B0F8056243730CE0CCF46163218C8BEBA30BBE7A38EA4D0EE
2852A13CE4376F05D89A5CED0FA22BAEA0B27AF43855E93D5E06120FBCB1A21D
497D8121807DA620C0DC6DF0333D290F6B6E8A095B96BCD3D47E4C92B1743E57
5FF9F92F8184A81E5455D0083AD4E692728D188C2A7C21ACEF079D67C9061A53
5955327C49436A1B380F2B7E20F31F462AD740B4CB607014BEEA8A7E9D4B8614
BA8B6993871DEDB19F3182BECB8ABA9759F0968E320D79842480D0C9E9B1ECF8
7D65A03B7682A15629A5419CE437ECD575227B7C49BCE39D9E949BE7E93EAA71
9FD96312839E43D8327995C3BCACE9B87794DA751A22D3C0EE967A7775110CA1
B967C0DB3E30287343EDD171164110F3599D8E6CB9787BA19745B8CD74250127
88ECD786BDF0B4AED916AEFF4EEC8A4F98E8FB8E1BA48E883134CF3398CDB33F
B436628501A27317FAB98FE7961ABA86D185A393D020BD8C389D704EEC38CA4C
CB5F26D11CF5E58C2B322A33F22226B8AB33E5275D88B2F916CDE19ACFE67672
AD9B18EAD301D93092FA9DDC9746E672342B66747F3FB151164A88A77C55876C
88D5F5AE29619C268D692AC0F4CB9ED36D1E1DF057EF1162E0DC70802C93E92D
2DDC403A4E03CF7AB7EE06EACBC4C9C1ACF201C368B29AF9EC9E02E82990AA4C
A8C3F7D97DC5E94868A77D7E43685F7AFF691286E6391BEAD0307B08BDEDCFB6
BC43F7D1E0C7D83128C3F8382BF3F46A8B83DC0CDC3FB4F37E95EB45B85B39E0
CEA630052BD50CB1DB89498E3E2A20AF99D7B7B94D2A8C48412EEB885A05FD0E
43A207F54492CCD84BAFB808BFD02BD29D31F3448215FFDDC28EA3AD0B9C91A4
D4B051E35C685315C072CC3F3557EF5603F8C7447AFF352A3EFF9E93534A6EAC
2572DFC428DF531061B6370488E3550163EC59CC37DB63914E55441F9F935C70
F9E107DA96222C6861BDBCCBF579ECFAEE9FA23AD7DC0AA8F442478DFE6A2BFB
8900F015BF2C0AE5A9D3B2C5B57E22EA44732A4ED4E4AAE8C457BAC41DAD061A
8C29E5E5B6AED318FEFEB5E4338AC4EBB107A96EC8C29FF969D62A5CBC0DC730
AAAB245BA1EA6B64D9FDAC4DD8E99A93D168A1BACA354436618CA857329D26C7
474753A387E4FFD00204A96014321D8C56F22678E9E619A080659DDCBDF32874
F265B0D3F82DF72CB90ECEF8FE1E509B4900A39E88896F7519CEA1288CF05D5A
EB6A4FFB1B9CC3CEA6788B6CF3DC926115CA067704D8DF85FDADE94EBACF44AB
A15AB7938450E67276A311A414DD40BEF70CE90B1EDFD372F188A13ECFD29FBC
E3515E6BF16E945B0BD2B9F8DE7EA6F6D97217C6293D5FF94943EF2862418F4D
396E2FC9CC1EF3888CAAE2EB11044F927D6B069D3F44082972F96EEDE9720201
F05FC884BF082B35D5A958F740B86985A74D0CB2F80E4CE6DCCE0A278FB08F22
3FCCDCBEC0F86FFFD3716B105A7011CAF92BF6FBF558C053DC5C15326F90EF60
2C92CF4781C5405B3C78C292C8100AB9EABCF0EE98294013F8377EEBADE35AA7
FF6ADE5D6F0787C187D5370B60791655F3991BE7CC38C5346983593F27F48357
F1510FBE03EAF585E2A733F84B7FA249AC8FE4B9492BDB89CD081F4AF2A84BDF
A31F722B274B8C5C87A9ACF002F2BD9E4815D65E36C2B7ED34CA4748DEF225B5
7D63E49104E5C624ABEEB4B23D1F6C7B3BB3CEC4430DCFB2CD64CD1132E28E73
5421E3A99130F75EEB99A6AC209062FDC3862C4C8CCFDBEAC387366A39009CC2
60799005D963B77E592654E23426AC01C7D26BFE3F129C55A5A02BD2A0C97502
377A05532D269B709A075C69B17C27CC63FE88B8E31882533C838018AF624978
34AF0A9F0B96C1A1C79D398240DF656D5E8E0AA70A406E7F87E31D854768AB48
7041A4C0086C5EB38A4C1052D0EBF84B624C1504588D4C700A27F2882648FF87
2C3380C6C36C7F5FD2AB5429BF76E1A7119EFB049EF9AE23705FE1A6B0432B0B
65D41141428AD6E2BB997196CD7EE8F94315F953B9E1B6546937C944F0228151
181DB67A725CA9A0CA384B4D2DF20483FBBE3487232C45EA1CF073D24C200247
6C67A033ECD6D0CA544386D20936DDF9DDD326A656B4F32ACF4D8F6EAFF464AB
A23E3FCFCFDB6C84A32807C02D93C63D3C5B4DB01AD6CBF882EAF84664880A18
FE18D203A0E3C14C59016498430297A47CFED82F367E7C9FE8F77032B4A0537D
0FF930B9A585330D2002BE68EEF32BFFFA42CE165A5BEE2870798531808CC2B5
212780CE71588CFEB2931FBE956BB8E21C8E0100691655F4BAFDF85AF1F8B35D
7CCB2ED5EC0D923DE8F1C7574402332FD5CA3537AC09BEB8914B3F4B6244C5A0
109C41976600727ACD590E82BA2562EC8CA17BE9118D1705837B9FB0730F8BA2
062F804BBFFD1F77C3B57FE339FED25214A3CF3EEBE5D5F0C964D825FC2D18CB
70D571D49416E6EF7764E72E604A597764FDCA2AD4D1DB34AA3AF069848FCAB2
7BABB3BB16DF1176143C55C6104B8CB8D027EA79F4A885F217741CA321B950C8
CB719FE14B864F38DD0582BB02BB9B5C5747BB1774258E54760E650388639A4C
63195E38ADF516051C98D56AD0553BE74DC4AE2995C5A413E92D8253CFCBB70E
29B707C52360178DE67E0EC5A84CD0F253C761DDE93881EADAD4858DF84E9CB4
21F16FFF98213B3EFD1CAEE93E563096475FC7F520924E790AD6F251FB67B8B8
B8928E15D6D75B691CB23AAC2DDE3E5F3DFBF8FA0EDF3E3F6BF7AF9BED4C4C4D
B640E280ECC71A40C4A2C978D6D5B4FBF1376EA4ED4A4D375B2DEE7BCFFE9570
690E959EBC26A913D35E59E41F135003F49E621DB4AEBA91881EFB4EA76C1345
2B93CAFD3B4793AF8D366582E212A7F6251C01E07B19AF263BDD717BD2BB5A27
F5FD943CFFF716CCAD615990FDA0C7EFEFF1B8A0C09E3AB2FED1905A16D8D4A6
E29707C31DCF17075673920245B37EA34C0422B4F1D6171282D0684EE11D0449
7AFA210F60598AE91D9675E87B3425FAA05BBE92D963FA336E01E76C3EE38299
117C0C7E7CB214C33098B1FCE27FAB4362237D818455A276579FAB8B1154E030
EAB3DA1BBB4A0D1D112BAE9C8CE80499159F3A03BAC398439BE05C3FBD744998
C8A93D310D4DB44EA12FA7F906E0F63440BC9FCE235C411AA76AF3DBD83F73A4
841CAADB845595EC19D31933B72319922357729C09DA0FFE30C38A87D97C1A7C
A4026BC129CF34F1E159E2B1A410EA7E9789E1242B9B6B809A9767D04CD2AF0B
94D218B689213E183FEEAB425BB5FAFFD31BAA752FB0E190ACA3618CFF00FE86
38F2AA4929AE522B4A9E23174C8BDACB59639A43B51926EB136379140DE5FC98
F3F28E453F67529A3C99BAEDDED9AEB4A53661D8F4472932E1AD2221EB9D851D
76861706A221E5EE0DB73D8725E5274F2F201154AA46C6C7700DC3A61CD11E28
C475D9C88497B212E96BB964DBD6366E3D7C30AB2B69F969BD96C8D7A47A3521
DBF9A7D55378A99B6C230EC6DA67BEF05EB058DFF8A5ED3A172CA9A4D145C4E6
2E6388BCA0200865815D568EEAA579C3D1B8B860FCD2F0045169129B2D3A5586
C33CA4939F1DD35FFB610C526CB9C8BEDEA6DFBAD9392458D22E122E1761F7DD
DE0EFC08154C486D0DE2131283FDD957A07C8511503E6A6D4B3F9B654FD1DDAD
660B7B19F7A0BF8D16689D122678D01865371EB2478663AF7DBE70C573D2C7B6
80D264A301D2AF5FF95CD2E5F0BF6A78983756243679BEE3DEF965B10BA7525A
0AE711D7319845C1A120A10483B09CA310AD1861C762BB9D5C390BF6521A632F
F24D522BFCE4A61C88A1BF98E111C0DACB66996862DA5CBE51E28CEF5792840B
F993F1A7D66EFED5B42E876F063EAA60385E679F05D815AA46B3DC9A7EB6ED9F
9213D8E0FC90B2199FEB17357FE7A11CC6F2F2D29ADBAFEA4EE7ECF42A81BD8C
1C6A94280803738675D62FF37AA482F0BC6D0AC55A3FFC6F0408F28CE4A2EA48
B48F307B5CFAF78F356C271C7B6572497A6859BB8B8DDE4F6828689FE91EB567
1FF8AA57A50DE3D2F6C329A14C8EC7B38AA22D3F437B70D805D1460BD0F38226
10A5AB3BC683083A4C2876F092EA54B81BB4043FD3F2F9F1DA8203C5745CBB87
F9ACF5808140F21692FEB0E94AF38FEDC95B1562BEA2D9F13B1AA2BDC2A7A719
5F7937FF7A27F211431EECEAA082EECF69F02E744A282605CA038BD68C7BE799
D37CE8C798A870C13DBCE5206CEF6CD384240912493606BC90D9D897CA32B85D
A365A27AFC361DAE2FFE5D95D3706C6E197F31051A37CE08292B5DC987E2C769
535B936C83BDCBF231E098CBA8E9F25F901B2FF9E53E75C569FB21190DA004AE
00934FD022439C0B24282783AC36FBCA8CBB3BB93CFAAB3D78E035EC29884AD9
777666B14EB7C80C7F73F6F443B728EC71266060CEA15123D26ECCCEBCBB99DE
43C99378F3730D674772B38AF074A9B7A27770BBDA89B170DF02AF831AA84166
CF3F566E60457118B84B48DFD2EE07F5D02E4A91ACBB61F10E96943A26905357
B46FE3A661080F597B54C834E05C08BBB1A8C58A6513959B251050BC9FB0799A
15349C3B9FC4EFAD5273B27F473123B602E876BC4D6A1586662CBFC43A1E5D0D
EE00B96795696763E2F50E3B74A4B01329168F54A62F0E3ADD0D6A4D8CBBAF1B
79B81BA1ED2D484E3089AB8D215B129200CA0CAB735F9122300D5C0E77A72A78
0237B9A62503466E926448C7A49A425CAA465C3DD4156589716F522ADC21CFFF
AF3A7EA9F608AC6D47350EF754ED2EF42A988D720946E182B68A33155D6F1456
1AFE9FDBD959897D3971DB39B4A5A4E1627BAA967504FAA8102EEA5B55101F6A
6B382F12F26AA43586CFBBF68E29C2C3876112CA45301C5E93C038B101C6DE3A
7733B52E80C919937ECE1CDBC1909A7CD7CA21908A63D346ADC08C6691D34456
C1382CE87C86FC10710F32E4F3E7865E52A0DAABE6F943401AA4E48C058552B7
6F9875DB7286AB0FA859ADD1B2CFCDA356D69FA27A2CB833FBE14504B2372FB0
E68CD497BDE538A9ACB31EC2DA13BF5D27D237A493E9356B6AFB36B2867E0B88
169AF980B4885881BBFEA896505183E1EC04936FC662646211C74EBB3A9ECA02
48738922ABB63C500ACCD16BD786AFA8582F8B3E1756FEF405C0B62D7FC22FCA
A194285352A28B587CBD9538AAE9641EF2303C8ACBBD389FFE1E3AEA0155187E
7D3B4AF9FEE4CEACEB7D442E29CE476730E26B02D521EDB92079CE22B7B290A3
F2A289251A1C86659EC42D9FF2B761F86D834732D281391231D2A27BCF8BD9D8
1E66294EE4811CD8C27BCE1FDD6A51629FF73950E475DFEFBC5D9FB88968760C
C78C3068555188E402C2379564891840C66E1659A2D05E375A212339
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5F566B08C61297428E693CA782852123FB6D
43B43612AB8ADC11DCC24D6A68CF94E0D051A0C33C791B051650479AFED9CE9E
201F2CB3B6EA55F15724834C48C199E97BA7FFDDAF2E866C09406BCEF66C1DDB
123D5EEDBE11EBC9FC06369E709293F36A2FC3EAF97B87CB0EB1B01BA59345F4
25B1EB25606859242B91180D7E0956A616E97D36491462285C2D1ACBFC2D1CEF
2289BD5495A5A98EAF69C48B2F81E2830239F397B154FD31061251A825439219
DCF2D2F5B4D6D5A9396A0881303EBF2CFC703CBC33869A00CF375B6766327E4D
755C6DAACE671A23900A5A4D8EA593F6A5BCEC484D30F12DC9B37367F792B82D
8B94C7F7A9FDE0E88913F662FC750BBD19F3DDC54F3D9A8ABD7295F452FB641E
AA820DB3BB2DF00419F5AC7D67178C57421F9869B8070A4F35E3F41F7FCBDEE5
45EC866315A6EC1343553D9D2D02A0F91EBE8CA71B8A651C00FDA4AF146F8E9F
BCB0E5DDA96ED30F700841CB1B6A1101003E9998E3AF8A8273B75D7569ECED52
1BD298C68E8CBB5DB493AECF63897B6973FAD7D4DB30819BE70B4027DBD9575F
532D2F65F54B9FA550F2634288FE9C5D5EEECD729B3E94B1B68CF0F522A7C3AF
42EA604C5DBB3EFA0FD5560B7E81F35D9784DBDF889A2247B80BB6BAABEA288D
2DB7033442D49B7CDEC9976448C77E50EE55C277D66C685CA7DB62C1D2F5F772
11629B81B3B63F7AE4FE487145C2356F9388614A27A49A87062DE808E6F05386
DBED6A4A5FD43580044889E081B3667ADEFE5936CE43FE1A797B303258A77198
A11A888A9364D401019B6C4065F8063617A15DD1E815AF82742C86F76C967DCE
CD63FDE9D467B96C6AF8030AC966522C589A49F9EAA5C2C8F3F3FB52CAEB8749
1AFC83D847154AFBDDC5159461E9410E836D1DFC3C4570FE8962E79C81961A5D
2DF5DDFDE71208AFC0250BD9021DAA9861C2DDBB3629D59C7F0559DDB2F430DC
EF2409E11146C6E7C1BD6A0E93794D7F2FED6D37762D4A1F2B35DBBDFFD56F6F
6E79A3C1F3258C487D295941E940B45EC45A9E731920A367EB7A298CAD29A784
9AACEB2159982C4B3614BC5BF0F2BB5166F679068613D4FF41676F85A94D6211
35CB4ADC411AF327A4BD637D23C100CC8DA5B50045A9274AB36EC242490B1EC8
8B88F4912AD08CC15DC1861E8C04B535D73282D4F1F993C8962C812056CEC20F
9E8644F31E8E07AE5C861DCF2ECA6CFE2C4E945D548C76B5D4796E42FB7061C4
369115AF77F35CB8D561A4A261835523E983F38D5CB26E31B0211E5D6771F270
B1C7D8A94FF1CDE71BCC60DCB3C750824E5BA00D8FCCE723751E9DD853251462
B4D7904B450994D230B1E0CE76E2BBEF9D69415C6B735924E980DBC5746415B1
D1F4B2BE684B749A1CA459B3A566B441DF71AAE2A07793E070030340916DE474
C1A757BCC5415159C5A2EEF428FAC68C9AD636AE146C454D2261EF3B27F4CA08
528C5E62F305AA69A5C5981A8BDE36275E76E150AA6359038E0BF338FB0EB3C6
F4D49FBFEEAB0D27A3D2DB4B4C9E31303F1EA73AE99A6380CCDF449244CE539D
0D15DF181210AB114E59B3A0A8A2E0AA351D75182E449C0185574DBA5DC715D0
339BF15211ACD684EF9011784FEFF0CB4191E950DBCCE1810D5C249C1A8600DB
BF9497E3453AC21512E0C9D1AB2DCE3795E1E423C158E3B600935FD62F961D2A
61C41E33E4628E8A73286B896D6CAAFF7F81F9CA41BAF982AB047941D3EDA25D
BE640CA98585E8CE8B3101389091F5569556776BB6EB3FD64AA43F95C4339049
7A834A3EDA61F4090E752DCD752DE89ED911D3F649A118A88C8822C67791D0E6
8426A174ECB3172F5309D335735FF11FECC6BF999DBB04BAE94FE49CAFC6D6B2
FF273321E3955B49456E4C142ABF564B97E0E068E524A07F2ED81971E9FC4073
3FC7489A0B95F837A3DD3835E2A57BEBDC39D572DB969DB7763D7E0C0F64B134
4C16EE7AC5EBEF8A778BB8A47BD49FC8B7C6882C86C8408451746BB578ADC22A
916F6901097471875CB811177A209A70A220DE657666C5651963063E559A5B4C
A4703833FEA5650A3C910A75A26F74CCF3418C6E9D8A1FF01B63640A3D8C4208
54A15DF3143D534721A8CEE5186292AE67997752035877BC0FDEEF002570171C
AC58B04CDD5EA338E67048E127C526F1BC748A6BDBAF071B013787DAD2E39336
866911279BC49CFEB0423C4EC3F31538DDB01EA1CCB9E7F56C309E87F5743B65
16E5870F6E7588FAEF474C709515E44AC54B45CD24A8E1696557BD6CB8687704
4E10F0B2118915B8E09EA1C6CE22C34CFC0784FB2B6145150065FDEA08EE1ADE
0A77B9FE4C24396BD034B337BFA6A270892141AFA05239944BA2D55B6E017E21
EEF18618898E6E1A5FD7734D0DA750DFF2A8080473BF69CA8E19B7C813B8EE77
BDE57E3231401A04093C37D11F6BBBFCF20BE3A06CB803B0E54F83CD410B347F
38CC923E3435B472871152671BBA44733A950B86C9CF08B5D22F6BD99DE77FB5
00ED1C511F48686A027B199665B890259D0976FBAA6FB570A4A337540F6F595E
9A2D5D6F7BB8E67379FC74104AADCF797D138762EA1FE463A2B3887CF7CA260D
FECA93149198E9E9F0D75FF6B33A8D57D28AD89E7C5BFEBE159614DBD8EC2677
B2FC8CF73D874F38BA2148B7638C0A72A094481460B561C27A38835B1A043142
2E65C595E90232B8DECD862802164BBA45AADEEACD729E60BB319869196BAE8D
B7E66AD90692B49F745C9CB0CAAA72F52095EBD8222993DE36956CC11C22C9D8
06B0BA4433934B7C586BAAB5078DB3DE98D7F9D2AB4D0F22D2E3950782EB7D41
7FC07D596A34E9C864C03CEF1076D4422E27C650B07C5DA123C978AE721BC929
2CD25EAE9A175E7DAD1E967D5F82602C15A88C85003762E0F1A030D08127A538
FC4B808AD7B92B3792FA609E86209486B3CFFA9391054EAB0594BD994BA52B3E
141B182E15F75B08A9794009D79156B0E0B34512888B551164E8F856E2FE5673
39724E8F673007735DFB2F3C34089EC1FDDBFE3819CE3C02E5DB75B16831317D
4F69FEB1E7398241790030358F08112221AFBD5CC97D8C70184BD74968FDEDD8
8CAE47E65674BA413AB8B3C9E036F5D7E665024AEC64377457822E051A73839E
A18C34DA65B15D6CFD48923639440789EF683AD4C7DAECC1045130FC7806E446
612825DA902F04027970FD402C4348B5A0DEEB754F8E89B0757324E31AB358FE
14A69332C5A5D8B2426A09D38C004D2DA38C110B0F69B3EE79EE6FAEEA4BCB09
F019120892EBC0F85F5F5C391E8EADAEDD95260BB70C631E42D9A2BF21D72596
F0BC806A3E34E5EF1EED2985EC60D18A44A4D912F14009249353F4A67539FC8C
6A256567A5326577B46111F14E7064FE4C20E497DF8C5DA218EC31EF128B1A08
C2AD012CC32F383414084419670B422DF1DF7E2DA320C63668B6C9C577866D63
ED41E6FF549C1799FF582D18AE4797DBA137D3B30AE2E6F1C3215B363439D9E4
44D7E65E7CAA346973A0F5345CE61BE5B9355065EC8341580547BC256016819A
D6659502F90DE95F1ABB5E4FEA2FFECFA7C2E70A40B4B329FB463D8E68A503ED
DC5EE9EFD43C45FFDB981D66DB4D1DECF18285E2185645D04DBF237C074120DB
A1971E39FD551F73371CD385892B3DD933BDA035800A3728D93B3508B9F312FD
824A2C120367FF9292F5695902258145A5668E5A3051B80AE691524E1C6F80B4
C9AC15C3F372757A02A6B392C92B25E543603F198CDEA9FBA4EF16BC99AC1C2A
391BCAD9B86BFB674042DBA78FC2B63F5AEB9DCC5E46B981694068A3C6151AA7
2FE8C0033CB574577E86BB09C86A3CB60F8FC70A83FC660BE94252B14EC4C574
582927E6F48151D5E7E10B17D5AB4A1783DC55CF4C6F0524DF72974B75B2FA84
A4AC41B296582E58BFC5E355DB3C39956FAD01FFAC7B89E2E43D8C46531D9601
0536B0D6D72D0C96FF799BE364B69A6964F9249BB0957C1905348AFC03B2B28C
B7AF3D85A612E7AD277322697C44D4ABB53DFCEFAA29DE7D6859281BEE87B1BC
100B05D19D49478C5A8B6C5701A5D3F674337D31DBF480716F1FD520C8FEAE3B
22678A55E4EA711962978DD1B835843DDBA26D56A15D00F2CDD6BB7FCEC260FC
9C1536A6FCA9D574718B9BB3189D067F9895AF0BF7CCD4D9AB62FE26D2A5AFF3
4F25DB220020E4FC01DC4E23EE35ED1F2F85E0B964112EEC7C25D2848D252111
E8DB45CD2AA8A1CBCDD62EE910C50449E197605E246B7E8458022C86E54E3F9E
7ADB1261D04C763370EECC9E1E52F523C2D6CF25CA4EA0FE237E333A656582CB
C1D93F10886EFF8D547BB3CE712D577EBF02AF43AB380F611333DBA8FDA882B2
1D2D258CF7AD6209703B06B5190A470C355ED963314F9C65BCD81F163796FFCB
ACE8B6F56199CC1DA7A720C6E9D808FB52A523A63E52A661F00CB29BEE57043A
449C1983776B37107CD588108BAF3BC9C0D646D65142DEF8433E985855FE5218
2490B00376917CFA0D4252A1F59CB6D9562B4D49DEE8E1D8CAE8DF97BDEA5E22
D77A9782D00B6895632E26646B007A9AEC18177F82331B3BF12241E2EB52B5DC
FE7EA3CBCCFAD065E007FE5BDBF8A19E93F3B6ED5861CA5BCE218FE19D48E2CC
FF29BA10B7B6B0263BB929EF8743BE8BC2C4468C99D7652E919084C7D490EA53
5A4650B52AC3AB0AA12D6FF10DC6F1E8D3FD25EA1409D144821633D2EFEE19FF
11DF559EE4F73496CF618681CAA89D654E0BCC3E410319705A33842506EC5E35
EB78B9B081F08BDB036754AFC6D0AA517B3967414731F0AA42B164C27885AFA1
D3CC6FC472E5FB030F6793A4C18DD364BE88E08FA542E7E92E35F3CD81BDE0D7
5B0C7D18C4FE5C75EBB1CF698C61B861F1868E8A1B13FE0BE1EFC822E708F4E4
5FE0C34367B3C3483531E3DF9BCEA5A316A07E0AF270788C2E659EB14BA8FFB8
7507A40A1B4E00033A28B1E05A090D428360BB09D4DB799B74D4FDE85A6037D5
B87A7E3F9319B2A0F95CD037380B6B33B53E1C57831A92A9B47A98BD182D3535
C054E5AC47D1A7FAF21881EE4A59FF6E9927D4775BE835B51E02A157025AFB46
92EEC3583544B2968689F68BB9EAC4A49C285C1DED1E18B1756CDC37D8533389
D854001050EA2EE21B897C273B7E676C74D1B1215E265407D4F5E2C917F9B54A
53FBD50587100AFC0EC3469ED93AE40977A86434DE032E532DE8C160B04369A8
CDCA867025E9211EFAB8C3A4E9B9569477046CEEA06BC57B2F737BDDFECF131E
27A81D07B81FB1640041453988CB4FB13CC31F7949ADAF9523E06AC9A1AE01E7
DCF7A24AB83FD753A9E426991C09E938354A0C6B3F4C31E6D07A9FA89752322D
7FED243B45A3FE347E54DAF7A4B38C8D97F2A30513BC15FD103B8659CA0584A1
9184F07395A6FBA4BC89DBFBB3F037498547FF0AC324B83FEEA0C183E57E6099
8B975A24E2614F17526B22C8A970802F50EAC63D9925D13990FFCDB7DA9BC7D9
89E3A95ABE620A2430CC558D7D98EC3B96F93E84CCB59BD3F6CA2CAEE117310E
146343ADA94C0C2639784602527635B85ECF70EF65A786679CFB5C1E2C69FD1F
974FAC8473A2197ADF335F66E7F073A95DB5EA71793105D244C32A9E4618CDB5
998A9FF51AEAE01795634D70CDBF7D3D9E9D6B6704310B269840587F1E1C77F3
817B28C87C6082D9D22EB3E9292F382EEA96F442C25324CC94A37ED7FE053CD1
BC4E24093A68387E821D80270FC13B3D8EB3264EC6220EE0D94D57C7E82660CE
133FF1AAC877B5E6E235A58C64DFB4D2D6B9811E7D3BD784988C26AAE4B2B7A6
A708FA6D179EAA98FA27E9041575AD1FB8CC1EFD748994A16448446C778F76B4
B84EC4C71E91EAAC3F669435FE8FF20A73216B564453B5C1488F2A9665C8D2D4
7CEECBFDC6D091BA434323F17D9178D3168225CBD20F291B59F68920892B9FDC
1F7C049CBF4F8EC88A57C2DA14AAA566EC9482310ABAF71573348D9B26F2E26E
FC043FED3CB6007B1924B9A869DFD995F34006745CC915FCCE6BFD42B435D817
1F1114674FC839A896ACFBCC41811DD9C51C35BBD4C1D7EF7B8FE9F8697B41DD
349056A47A62D2C9DE382AEA0E3ACE295613268FECFE99DD48561DE0ACA1B60F
D474A3BE1E974E0F0250991E0C7C564357C31462CE7D1996BC95ADBBE87B2A61
6EEF333E3A5348EC63B4AA06EAC1C1EADCE7ADE2D87C0871EB6C1516A6D52C69
496B4EAE59456EC1E4573144EBC7846A3BC287BAFD0D4C87C4F995455BDFCF02
33250B048DBBEC2150F5E35B9AAF26E79DF067AA2CD5E55133C5B6073730B912
C0D7FA6E43AB242508BA088760371D61AB5288777DB5476308D41B37E97CAE05
8B6F67F5B376F36CBFA924386460DE396ACA08B137A64E229AF6F710C775974A
DCEA0B18F47C1B7179363F960FE1B9A10B8123D128E14E69A92200F9E9CE7EBC
D56321279F86AE6C8C6B09B6BF8E81FB5886CBF3954FA556A2289639219FD1A3
A02E734151BCE12A397E82CE6C2C40771F1475B92B1E413DDEC857F4FBA3D5E9
B1A93D8D5F9B31D94AAB9BEC6B48A9C3784A323AA0D7275EE288F248EC04B63E
1BA1D49D6CABA3E16F14FBC50E16918EC3924564C832F41C5C2478D1CE50EEBA
8AEC56C542596CCB82DE98D51E9848142654B27550D0E41302E597B15C1DBAE7
8B35812BB9EAC1898D5526ABCD71C983ED1C9F5288A3D9669E81E9B1C3338E10
A438B9DFA0D9BFB654FA0B1F4C1623044F325A92C49C5E29D5D432173D0E483C
AB7EE4A2A1FEAC82D7BF89A8A267C1EEA6E6866A64E553D7EB0DD66738C3EB10
C58FC911D294DCA19C372A9734D7399615F968716E54A4BE3367CE37F529DF94
657C7F2D401B2D5D46BAEAD88FD6648452DA35B2569AD6EA155689B1124DFE3A
0DEF48E5C932253AB322365847895909925AB9B6D316CCB74F5647B87FF3DF51
5AD90CC351845D61A53E463FF0848F3FBEE331237AA6144AF89783EF318F215E
6A0DADD9352CD15484C1411F36DCE13A6685C17F49804D1935AD47AC9926A4E3
64F80E9BFABB5F963AF1AE578BD372A950EB7286B7B63316D0E6D543F2B08A80
874CF0EA57C8EEC26EE3A58B8FCAE104A8A620DD863BD536789AE4DD1FA1B432
530E7512BA64A56FE842051FE84C427176D702F4CC524071AA9AB337EB1309FD
D7258456647C3240A3B159C0FB1CE5F4BF8AA7BB7B19259E25EB90EFE18B22AE
6FD0A19EA6F7B504550A98C058CFE9E43CC2630ADF5752F94D40230EDB999021
32F829B64C360D5D6510925E5877A75E0824AFB010DCB2121729E403E4E6130A
52E24E948DCA5CD34748A18E26E068F161436616D2B84F519B2D175EC93CF872
297E16C73092144C76BBF733B8A0C41A6F6798C53623C7BF20C853AB66E45F03
9B760BBBC1FCFE66BF1E048160160A42E76A33CE5C907EF404564F39E3BB8A87
31AF46279B232CE0CDDBFCAACDF4B1F0A6DF35BC18996DDCB190274115759E55
0A850DB4DB4CBD29086161D6DEF2B38AD76C38AEC597C3D51FBDAFE1177E53DA
34DE10D995BF2C5D891F22FAD6A9EF2F678184B4295F324F6902F7AB43739F5F
278A146D9401C3457BF26AAA2482EFBA7E234D7E984BF7DACE0B76B84E348CD0
0372D5F5338FA3E68A0236702874DEAF5C866F3442616A4C5242966D3E623F60
D716D29E8FD7A2499AF5C78794A372AD7D792354E12E479DCB4C2758ABE4A399
27BFE522587C1538F3EC19AA6862290FC2A70F11669B5117E9764ECFAE7450A0
EF3B9E26314B02140158EF0915F557B1FE8AACA868553725ABA9420DC03FB2A2
D227D57EDBE0C7D18C3FCB760375D262B40826700ED99EA9639CE9066E68E5FF
72B40F17240C36FF9C5C4239712A0B1D5F612252AD8A869A1A259DCC36438603
996B151421098F8BB323E0DD7E5B22A82BF8FE45235D7688EDC6267B6A751020
EFAED66B25047497982E10197D7F8FE3694B7A9DC43C2287828E258EDAF9CC89
88F58D1155B26F62D02DFA0029232CF1254FBAE5E4989F251401F888228A39EA
E9DB37089B0358EEE0AC8CF33242AD4A1395362C5B790AFDDD209B70104DD639
A8B66B47DFBEC0571E75403D112E98F0AB2D166A3A3656619532930B6342F1B4
A300048C778F0F49D260A6347F063DED4689812279C95F85A86A1DEAE13B5C6B
A0502235C73EA182ACE501CFA7BAC909E4FABD3EF558FB3F0BCA37B5C9AA6C81
747A88BE542A21AC444B07089844EA1E9E2F8F27B94AF2A738C2C03D0501853C
49DC2DF086489F9E467C54DAB452A9C57BE3C3ABFE7DC115879F492E4D13C329
6EFC860D2A57D68C4F35845B3BA9B5122F0BCE995DAFA83F169F626BE49EBCC9
441CBC3742144C463B88E12AA417331E49211D89BCE0BE2E93FAF103AAC05C79
C1CC6A1C88EBB5F4CDA03C39067F0DD106694E2A2A7C0BEBB0C91BF3CF3D64E4
A2451599B367D46C34E1E540B3E4D268DA785EDE671EF1A4CE8482AD4BE5B252
850A292A006B3E066689C06E1D5ED025A2448EE8291E60DC73CB385CACAA88C5
E5640AAB59DA1B39F06B94C76B462DEA45ACCBAE27F49E64F40A500F0468CB13
95A056C7C14D3B972E2A992D46B8FCA50DF47189C1D1836F6B08C0BE799CE00A
8F852377C833317776F96F8A051E19BB1A11D9C66AA6F8BC86AA385D89A31601
10CD4770A0FD1B15F0EC1AC562AEDA5BC186D59148324E7ACFC3DDA0578C7B95
188629BD49121EB8A905FABBEFAB3D527D3347731984ECB3208C2DF756810D7B
A76BD78726A3FD03A73D899B52E1872F13F9D164A307CD613B151C8ADED0D157
F6BED3C1D0CC831CC5C99411EF80A6FC5A2E1611CECAEAFB7D4C532738E49E19
1E15BFF28330BA1EF2455E3ED9FCA0314994D871C6C6625115D9526D54104735
8896DFCA6A8D6933DDEDA73304854821282D355F9825C843D0F40995284AE922
9F6DD66F620507F4848C380C8B980BCA1870F943798A9ADAEE6E19FCAF5B2A59
F3688314368A21E37A3280DA92556B47B2C5D90D8ABF8C14A0C8FD4F4FCBB5D5
C7E4FC15906BAF6BF8905F11DCB33E4AAA7AA9EFBEBD2AA1766916BDBB815DB9
9556A9B2EB1E06743B60D6847D0393BFCD85E84C54E47C76215C21DC2E801D13
71DA5BFCAF3A5BD735736D9A1FA8B971AF90FECCD2F6DE9C733CBAB903A27ED4
067661C2716FC80290BF9392973197C59257053072FF7B29CDC48A75744E3429
97473D814CB7CD358CABBC45EAFAD7F08E177BA06148C00673EC5E4D82B404A9
4F71CFDF258F1F447DD9A8D1C1D18C10DD9482CBDACCE23852708838EFCED0C0
5E0D26E8E9E19ED316C947248D320852F7A82CFBE781B10D1A0F3247039946F5
46213FEC611886C8926B0169D6D514882C7925112734EA50A82A3FC20A305B94
938B6CA6CB9A4F91140370CC7E73AF11E70FC2C0F421C8AB41B429CBF34751F3
EBA27244EC6162BCBDC46810411F6F62DA212465B60CA4A27114930123474B97
E9CAF25B3F58A361C3C3EBB3655EE4A2FCAABB2ADEB3F44923B85A42CCB08CEF
668572CB5758522C6522FE8EC698ADCF1394488ECF22AE7B07683A93B4D58C53
1BDFD5E9ADEEC71BF48EEB999FCC8856359FAAA4D3E26D3157EE874CFC91C43D
A89EBA4AC4D49ABA584B4BEC65B610BCBF53364BDDD7DC51F599DF61A8F6382B
E5E4044BCAB393AC7999BE4A22B1A65155FF885C9F1C1EB753577997AA034E8C
32043BD4BF396D04DA8603642142C01F4B57ED0C66F035889850AC9008254D3E
B89568D3C77C5AF42E16AB794E9BB7F5C7B825558AF488D410EA4554B6B7E982
BCC5350CF110EE0ECC75DF47663847EA456AB6C998673E8B1A7F9119649A69BD
A41BC89569BA82B0EABC04F4E40A423135642453CD3673FA892DA6B7DA508F95
949634072CA4B5D7338A9E13EA41EC161E4EBB788E9B26324F968558C89D12E2
F044110D6FEFA9EF21286FD15A93CDE3133136F8BC0985BAE715470BD76A43C1
AB10952D47C6C269FE122CD7DCFA549275117E1C942F56B52C71D5E802D5766D
C1DDD09A07500191367ED29A5A4D900B71104E33D366FA17E561BB982B360214
C51F492FA38CDFCDB93FFFD0D7ED7AF5D067444272BD8E14E22689D398BB33D3
2BE55B37612E21EDA4064F901614682E0D743091D46C6B6F0AEFD3D3A48714EA
2149B2D60169538F8595BEB45E92A5E89E8C27A321B5DDEAB5E277BCF69B5DEF
1175F2E7AECE08C189C3A296C1D25000D85B25077D1B99780E092DAB7273C987
E032280F2FF718B32ACBFA504613B4FFE847365EF922C8A8F697584FB9A99194
3BFBD0CD1863F359C1D59725333F1D0AB08560D9E9556796C49A59DBA6085531
64861C004ADF1434E83CC63A61DF524F9255F5F22585811A4B34A6A2ABD80BA7
1700EB72422B8F759F934BA0C9F6C2A70089810162C259ACAF5657AD780C9801
F57B68D688FBA5750E1C01A08B1B7F1D21F691ADDA3EB06704916A146FB14E75
0F07050D58758D4BB1295CC1F68B4A0CE861A58675424BB46C0601CAEF98C59F
60FD0DC96E1B011217B647AA4AAB54CBD3EB8984E3BC984969854DB0BE0CE721
0A69165380C0B17F820E8756080AC1193379E59E2EDD05FE0EDC5D793D03FF32
42D5630E5879DA5CFAC2E91DAEF828EB7358CAE50D98A509E4CE694BD331931E
20AD66CE300D2EDDFCB639184740DAE75F2E3F34D7453D398EAE5050A5E88915
2545B46A7BB31D494C930DBEDD02811085AFB1460500417D4E30A49B868B6CB1
DD445EE4F6BF5D1878C62799A50D1C07AE06F8741A8C80B0EA54EE08F57F6A0D
BB9C1110F884A7A53DC720E0F1882CD153775D294C573A41C9319234EFEB9D12
938815076D7BE4FB19A0B9C055FA305DB498EDBCC63EBAF64F29F76B3DD3BEF6
DEF4ACC7B4A4C5845E55EDC1CA7FDAB5267EF3458303FD11CA9650D19E81C312
23FC9314B6E0A5F3C53EB565A8CF7E7D0696D573588482D16C7E6C26A91C6E03
AB3E383E4A1244769E3C13EFF13913EF535E81F82F690BC6216D0047A2A8C34B
9927658F714E726BB6F80F7529530458E9CD3395223328059FB1BC7820713833
70B1527DB286F72D7277754F4E0C40F9DB17EFB6DC38A346F1C153B9C2D0BC74
2464BC21031A9D6D4BCEF479ED3E32C52F035CBF095823979C5C03F52576BEE0
4074F62C0BE3EA449346B67E6F6D01846E0ACDA3316DE17FC0AF9350DFED497D
C63879810F1D70323EBEF994A4EB2A26BFA1F08AA50921AD602CB51A418BD5DF
34B47DF62D2F825F7313FA63964774BCF01DF25D239649F9C96D9FC6F8E793A7
D0F6E654D7168A652B143E4476EF43140E59D2345829880FE12CB1F29F3B6F99
1363600189467FFC8592FEF263249EBEF18A4ABA611B5D30D4F3E9D87D95FDA2
7AA9A5C080417D51E4DE48CBCE5FB26FE95DEC0FB9C328CB54A1F79717E9B9EA
171A30085E1B7CF5FCD4CB20A82545B940D22B9CEC27D3207451FB0D683AE30C
4B7595314F88945BB98001FDCC5CB1C2F4F7DA56C1FF0B8A5DA943208EAC8783
CA06A0617092543FC923DFF87FFB4F8C53A5740FC0851611C4878EE48E6AE911
A1B548601D46D2DE7B00D05EDAD54F3B3A21A4F96C358D0D87804385A4AB0D62
70237B2527DCC8B82347C937D1DF33D9B0DD7135B52EBA81AED053E7F57DD1CD
670EA994A2EE7C14886F741A7783C4DC40F59C775FB49C9CE1C870B5D8A06229
A5A04FE0BED1F79A3A0D7A4CA3E2D5F64843E803E4DA3C109B37F757F34696AA
4C52D1FB07B07C0428EFDC16BFD96863772630ABAE96E989363BB2B1C8141995
8A73E7569754CD99D3CC14CCE6B3D0CDA91AF67EEBD624A95C0AD87087D90AF4
528B4FC4F5B288F0D4D32055994D95F6F5C509B3D0F7C847086429ABD9682A1C
5557EF9B3C345F25A1BA52EFA057A30F6F650B30BAD6FA43C1ABF8C79E1A524C
ED55506EE3450E6921F9C992FEACF0B0DB624BF50FDEE391E0291A7122807826
3849EB694C8245E8A54EA1088D86A0CD529D2D3FFC8F71E5D4BAA986E0B8B959
22C52D478958A05D2F56
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F6000BF098AE401F14F4BB6F5D1DAF0A3F095107D502476C
356175D567B8BE8693B835B72F954CD3441DABE19A98E24A387E512ECA045018
B639B7303812DA28297D223CC2C4B14CBC8C49FC0FCBC639572DC1693BB954BA
67A114E800820A1DFE9A82AEB47BF13330040298C4B93AD8D6B9811E7D3BD784
988C26AAE4B2B7A6A708F9B2104EE2433F680225415A4A7B63F4B43B193A4E30
80A49D289A577874822FA068600F85CC0EC174831F55EF9B11D9424C1E354BC3
F0AB750843035453387DBF00C97CFCE2B470E0CC41FA5A63D8B714487308EBBE
8163C22330524564FD59C45B1228692AA21E4D8737035327CA7392D1CA4C063A
93A0BE8F89924FFF6F6F70BD2D1AC26594DA1C5D76F38257D96E4088B222C0F2
6DAB13FA2AF9D4759E5B655AE6054D3351BE46BAA9D6F0E1660432E97BB6887E
8CA0068369FD738712D5DD52CE892C8B139B17C45EE958B2BF0F32A160076864
F435CA0D9FA5DA0D98C2F0B97DD9A664915B673A19FB9F76078E7622ED39A4FA
210E224B5752B7BF8F03165034BE9BE04D7304D47107E93F75BB259430541BE0
3A0C3E2FE1477773E3A2C138664DBC71ED2CAF2A02A509AEDF46169951A878D6
33FCA712707EC71F1AFCC33E2B668FA4414EF3394C29E17B38BF3528FBF43017
F7EFD79F566284319976401A7A19E9913A4EECD3B71A453F6EC598625CDC265C
A35BA2CD19786D9D82E95864650A7F1E8DE79C34A1862B3448AC79A392BFDE43
7A926176859B21D1B4C9700C1367B3DE35081EF265A0EDB80F8AA0E9EB4E770E
9DED1AB44FD264425C4CF2544EE405FED6EE737A810763C90E0BBFBE50B9B217
D6579AE5F2907E31E870020FF16FCD73E936146B6AAA318E166E5DF4AD5D5040
4EFEA5D9959CC05B1532C6D15616A4EF021B951DA999C2452DA12CEE971613DF
C7711FE39E2BA8EF0B1C42169287DF4F1F958BE2F583C416B7291D278087FEDD
355527269BEABACE29995D5C6F5D38C816C1FC8D05D72D18EFAE8000C63BB7E4
497F239CEC6C55447BB2DC70BC3E35C62F5FA085F3158E19B6B949BD352CD605
651E62F07D667A3C1310502F35E54944C0DB98D1C1788B9E62CC54509476AABB
1869A47537FB356B80683DD546ED7365375E4EABBE38838E6E37D565F95DE040
BF06E52779CC358546BDD026CE39C8A5D98B0367913F69BE11F8EEC6A2DD410D
D289DF78C307606D8DEC5A97062BD86C0C8678E170323A7F1FA0F93EEAE6443C
7AB16110329DDF2702FDFD44D5743884D475CEB2F5CE4A1A51196809CF470160
21DD9DB9D8BB2A96FB511FFF9EC7BA77F888E53B9E326F82035C78F67AFBADEF
50E38ED46B824F843030B2ABB9102FE3B76F5D2F9E3DBC1C729ACB0297E6C99E
607DCC6C3A84D3D32BF5EA11269EFE7132D0CAD6B78725F328B5826FF3515A75
5860383E94966CDA9A9949B69AC94FEB767523A381CCA5EEBAF3F896674AC54A
6636870557A8DD5F30A2F55881B9BC5D6203F72A533948C1D855D5831114E107
CB9546B3032696B5D82B42234432E2750030ED98A98358C4BBA7591C33F145D0
1BE5D8442D0D5BE9348FCCFE3E21B254D0EB5353BE47E7FBAE8B109F4F1F3AF4
A245759BEAA2F089BE249905D4C102DFC21FD6729E251E7051934E366F7C4921
FE539E4BD4EF59701A976FB42291C6FF5FD9929178AA0438AA6E29951D007F8F
DB9C86802E168507938756914DF26C96B27C30E9C3CE7FC015B042678092E452
92A3DA3F50E34ED2A64BFF21B7E31AD5366B555929F69F7CA119733991777273
F1153D5F808936C58D29B8A7FC330BF78DCC6F9A9AAC2294A0AEF7BB75868A07
FFF109E79C668723C36758C9F9C9CA92C1305974C21269D6AF1468636CABA978
D37C63D6D447E75DAE16FBF716DA07812BEC43CF8574A2584EA7DD0415997107
49A59363BB36E301540DFE303F03AF490D92519B6F7F1A841E3AC159FDA3F55F
A9CE7DB79BD29AC3AA9BE07F1640FC8BDC4504172EBB0CEBE66BE894C844A02A
C10E9254AAF11D0A1A8588EFCEE56696D2F3A00E04ABC1C4B7CA81897748E640
230867D4EBFB5E50F40D40035D6F69A583742E43FA7873278B6C391F9759A886
18331CF8D25179875F217C0D55F9289601D57195F3E95CBE949EF4B833D951CE
840F1F0F037DDD42AFAD212FC215504DA897264687CB8F2BE9B2B97726473465
89BAEFFB312828BB457D5BFDA26E93B35836A426DB7710FBA126E21C9816B59C
618E1F5F12C6B6CC9FE97D51ED95835F155262786E3FD2572F032766702B24F1
6CC2DCC483953F359219DBE1079604C9B31D2FDC350894BCBCC597AB4D89ABC9
8588505E499993DF1C0DEB0D8CB2A424D3510902745F8970DA5CCB47AEBDA30B
7E95F6368706B9851849FB81DE44FF86DCDE91C16ABD2196F5347397E1BA482E
4E139B86B586B0172832EA2CED8DF559DAA53634E08F72A7E57B3E4C7F37E33F
24B2E4544E93FE87E3B4D7A858A74850F0335693902BA497EA239FB932B32915
309FE4416F1717FD5BCE18ED5802AEF4A5529A61E9B593CA786F5B00DCD4776F
0C6830137176E61865B0457914021EF466D62CD2F16FCF271460682EFFBAFDC0
D9CD82AA43CCE91F2E4BD283CE43154B34584267090112ABD68103C54AF57A1D
26F1002FD0E517EF29CACF03076B8BBEE339F63E6D3E7C00F3B953CC8E772521
7AFA967F33EC846392260F9E8040DEB852369FA7EF0B1C42169287D3F2515C95
F1893939057C3F13792B699C56FF3CF5682AD98F2137FA409FA9BEC99FEB3435
CBBEB351731D805FE0DC3082F9633FFFD8893897C156588FED95CDD904A582E8
CF3C022BC1A881BED27A872A6F40D68F02A824A87A1BCB098E8222B189A4B3B0
C9C3E03F1337F95D939F53DC1472DC7D79386BCA5FDDEE47A0AD791BE5B34C35
BBA1CED5292DBC6C09891EBF0A27FF5D72B6F5B55A62E3753CA93FC28852CE64
046883A77CEE817CC70EC57F21BF8D1EC068D667651E11ECF25ADCCE61876517
0874BDEF2F4F2D75BD2C212D2C708EAE408AC4144438E0116B683429962AD08A
130D77B3FF2CEF63C50ACA91959A234DEC41C9E6F20D2EB2784860E5049A4CCA
18FA93D523FBC0F7AC5819693EF3794BEF6951D357CEA233F7C3888F92E015F8
2E1773E48CC9BB91484CDC7DE0B00FBBC7B9C635898148687C5C949D67133F4E
A48A029F4CDAF8B95A0154B072450D2557F35DC022B7FE130DE52A490DD5627C
D4A7D383F0FF8C862EAB5D69D4A88908E1E57D5A2F7A5A783A3D8156217EB9C6
8F4493C7D5EF38E02E1E111AC732FCFE7B259AD52C2002BED714B48343939F28
CABDCE6C6E227AEC1B26F2A9A414AEEA78ABF374DA038B9470A992352105CA4C
DF99F477807237ED1E8644590A27DE66F5CDFAD06D5CB217F8857FE0E9930487
6FAEF1C8F1EB2D1A879E9B85F86AEC6253E8B99C850C4A7B81B330B65786795D
34891F27F44CD4DB07C5036CDD47EA464EB18EF0DA3AF3F33A59C2AC13FE411D
777011BEDA4C71110CBE2B11D0376AC69E72D1A5A4E3CF3A551783CD211FB78E
91E4D7009DBF8B1A844FCEAA9362E8A8C69E26AC8899CD0DD973524184651265
59BFF85288F1BED90F03DC4316C7BDEEA161412B509BBE293616A617595D8D82
1CD7FF4E14B9BC45FD36FE6FA7E1EE63D22A667786F6967AC8DE1B818971D38F
42657D15542C52E4EEB24124BF5F2222651F6D1A775DB1D43ED534FCD3A034E3
2070553AE1EF314BB448CDD889C389D36C6DE515EFCB9BDC9CCB6CFEF6743B38
558C6287C8288336BD21D97D2E819D3C1B470F8ED83686DF36BE9B7EC2113DCB
D5290FDE223E09FC14984EC3C46F0823D0958CB514C054612DE3DA10B61C088F
279AFE032E3F0B911BA2946E745A1E6B71F0EC67F7132885ED4482551FF6C31B
9D27FB2AC1F8469AFF9E6C1EB4ACE75D72BD92E6CA7A4EEAD0D76B01BDA71BBA
7E79A893F17AB9A8B582AD4E79E8F1389C73AB452018BAE8DE316D9271847F18
F2E3976BFBBEFAFF6850867C9A74125599564D174B2848CD7B1654A10E80597C
6D46EBA329460CF59E2FD4DC48E489E77FC21D7643EC0716928756FC9BE0CA3C
0D8525FD5B9C0A32F749D69F1448EAA347734E98305E4B742FFA6CFB2671B72D
1515D2FB653AA5BE20013C9329CD5740978896B8F7A086019A4616E1CB29C9D2
4CEF938185AA1BB8A7F7098FD9C9446A52633B651BB1B39B81D75F9EFF928D2E
88CBA4844C12A84F98CB3284D37626BD2C0F0881E7E94D1CE78A7041F091636E
F8B7634C1FC380622AB57860EB209E5D38A6CEF73BB128F9C1E4306F83CA58E7
F49D51AB8BC9BF10532DE5C06469DC9941DEB2E18F08C0C5BC5674A99A805A46
1F0B1887186061BE2D042712E60AE006EB1170E10DDC83CC26CBB47A3174B2D1
BC64F8850E64EEB554311673077E49CE66A19084920206002F22C30B6162D7EE
ED6E0B63BB3E403B1C2FB8B5DCFC2D23960A0ACD9248C4900E12D720F2B3DB98
850AC56302B81FC89E11F2BAAF6F0F96059F24646BB6027B57BAE03AC82CDBE4
A5B54A71495EBEFFF494E59E191D6999BC99025BB9B7CF0FF955A8DA1B5D31E2
7DE2906E983D0238CAAE75F371970948CD408D17AFDDDF80DDD59BC68C444448
4CD1C05461646755AAB3A04EFA88BFBD511BF3848AF2C8B806A072B7BA365964
A123C0D65E427C52ED124D75B84C98049EEC86A50DEF8D0A1107FC7740C01DC7
AD838B897AE5C84A1760A739F66D921FF8A53A5C731C764200BAF2B4493D2BEE
DAE13E91CE58A3DFC6928B4A4802EE064E3D180A2E955459B11C3D4F57186F32
D75E105B5FA5BD6D0F4E869C6A6062407DB73F893A03BF323DEA5A62F82C2ACA
9D58C80339AAA4C254E91D121EE344F9AF3809DB2754D4975BBD161B4F8868FE
130EC01154D102CE5B05427E6D300B7374815937CB04889C1F33CA80207D8321
A0A21D2243757696C3F1315165C7B6A8C020E90331A61AB63364F6B34D06B112
C678135504CE94A698BB223B6648062F803A30B124654ED877D519C1C81FE8C4
F9F1F29CE209E3E7A0FF332D8F2B21CFC855C3AAFA37312FA9ECE0C669C03B8A
A2064D324C057B7109D7E2882963E0178E51D2EF92D0D857CBC3FF33379FAFE5
0E3D2E8D183288214D189D2DAE194B50FE6AFE6D28C37D5782B7B40EAF7DAC3F
1F13C045076165335C2E2D4594A13B2D30D14B781583DC55CF4C6F0524DF7297
4B75B2FA84A4AC41B6E20A35337D8FA4BF4D13E49C837A417C604CC5A7571672
5D8049BA86D947413E48F73EF65E0C3E7EAEF882E21B0EE256CA04DF85390E26
29572529A19B0AA9F7B3177C2A878E5FB7ACA43E546ECF5073AAF79428B6B42A
E69A426BA5E64FABE65A0569868C1976D38436A43F155AE0D49C8005730B90A5
B42297868AD2C10907FAF6F3AB2DBC998B0E1820760C0D2608EF3DAF147340E2
9263F1DFF31F9D04CC443592085CC2AB5B67D8053978168A4FC6CD4741B3BABD
A1DDA80E3BB2A9B1B22CE489E071372B6BCF392C58434E3250B1E5A9F532B9E2
854A63D583CE7227DEFC72D04C393149E4DC4517E0DC93A2689450EB384853B4
B7F685714946CB72327DDB532F63C155FB86F9B7FA9B5BD67740AB6FD1221280
43D8CD8A652A666C27C158296374B218A20D448D4CC4C04BE75CF00DCE7727E2
C39A2B137AFAF1B1C1F6AAC2BB1DEC703A4E999D20CD6BBE6D312A58DF680FDC
4496F0D49D11537A60DFBA63F35CF82D7827196B29BB006DF06A09B51F6EE897
A83CC41152C8EE54F27684B4B2C51F14262B16D5EBC94415C32C7CE00BEEABF9
7193CDED0E05468E12CA24506E3643176BD0F36839DAE21B8C33B748CA6D6D9C
5F1057A38B520028865CB7AE7BC12E44FE2E6A8B1E51AFCE858C06F114686832
DA19007A63F58FCCAD408FC115E7FA93E9C6CF7D711DAC380E7D662BDADADD4D
089B9CC67E01005AFCAAB7EE78A892D52EB2086B422E75B2D504247CBDCCB32D
592B00D8C8BEFB1D63614837DF4395F8A5041E4669A05B6766481372B3870225
2FA781E13DC26F8742178B15887C70A9C4DE98D7A9D661A143DAF0D9181CE590
15CF01D3A2B352DF1DD43D961731AC8FB5AAF66866359A0CDC1269D70A0F63C5
7AFAC6C9C21B41FCC7461412AD0CCF5AFC45FFC607F294CE641CA5894AA474C9
F0BCADBEF2B23763CAB0F6FDE38DDCBFE0D7A1352D7D7031418FFC78FF65CEA7
98B6978AA0E257CEC9333093C53E2E360FC03435378F892671B116F1096AD998
CCC0AC600486302C9D3D0D6486BC61CEA108F8AFFC242C3A6CA52CA0DC7B7776
B80F9A108EEA1D138B90838A8596254E90D1D51AA88BA761AC9A551DE5D4DBB2
6C9D816102A7E0CF35EC3E98B6955CDB8AC8BC34F46001319CBEAD5E63850581
ECEA211D96979CF5DCFD325D6FAAC3C2926E5AB3A40299516607B892A03F846E
75B44ABB24CFD19C6AB969A988B9D91BF76B2C5428275184B22B4B826B047EB7
3EAD48DAD5E377C2C1DE2684115E936A212B019B71760B6B9844980A08ADAD50
3BF9EA733FA8355DC4A30DFDD857AD224A2D852C8994B9C763D9C5067FA09A5F
4C1D486D4F59FC0DFE6CDAFEE3D025AF2374BCF29AE4D13A42A534EC4C4F3F84
1AE34F6D572BCF4DE8AC3CC2883C98DA8B23F459222FC65496118DA111DE48D2
2734B027285ACD20C3C1B5385845B04AC341CC101F57AD4FB0CA49BBB48F381A
17E3BCCB7405ACCE79BB44B933DA3A830454B3D276E1E52813DD63E1C066EE21
5A9235D7BE76EE9F2180151380DC2698DEE9F0D416A4810C684591E913642A36
D8A4AEE7ADDAE4D1345BD72EECAFA560FE1DE6153588B3B4BABBB74D8AB76C2D
AAE0C18088CDDF4F17CF754EEE3F1456DD604E3E1A7713C969112868E87BC3EA
52A82A123EC45BED5446CE4006D23E6A2FFC1B9A1B52EA343111BF6AF35797F6
34B3A85ED8FAF19EF7CE2C6C297C263F542ABBCC4B8AEB2FD1CA8CD756A0897B
0AF5ACDBC6686FA63961D5CF11A1749474DB9308E7C1F316284E7B612CDEC1CE
E1B563C2DD82B12FFF94EC99BDADB917B2A8C158535DB53363CC8D00571A3765
B3A7D42EDDBCE520A345FE7CD0A5AA1533B4945BD6E5BFB06CE7538AAA3CF72C
2BA8B28910F350A119BCF0331B46DAE6C548613B189D5AC7853F4D98C3356453
A7FE165068452CC390155B8DF6FA6739C3CDEE79BE00B197645C1651B47B4401
DEC72AA27B5EC1569E75B0D54DE2FDD90504E659E4082EF13C1728B640699905
785E55366AC7DC89EC37A63403A77BE8475CB3DAA959532B457CF9117C03EBC6
6258F3B54E40D013512FD46D247673B56D687B027B12724A3A00A9C04E3EBEB8
1321AA80F9C484A16CD8B25E1CD4DC6F5196C128623278ABA397D73583AA16B2
AC817BE79575B04B706B3C64F1AFBA96BF9E44B925014D59B52CC5AC686F8D72
449D6D75189CAA025CC7696E4BC8323E3B52F06B6BBB5B47DB254C8990B3D25E
4D05A81421EC664C3F3D6501D8056187A1184B37EE95C72FD597438056B23A4E
F7869B65C965D69118D586ABC99397335E4F053851F9A74D8C4E03442422F1C1
F265637A9E1086AB792949B7C77B644514B3D40D66E66214691C940E2CC80AAF
97F511BA4A7DA5DF270CDD82240C6929388FD7F8F95FC796B081E9C62A656510
41747503EF0839175A139BB2034DF56714FF0318D6807FF715ABDBCD9CA63672
38F0BF93FF23EBC751E3FD6AA8BB6245B8572E9CE88E34C1F816FBCB4AAA57C2
F64F2AD8BD6BA920C96F29285D5FCBC4FEDB83C3B9D700E8F5B0A60C52167F23
7FE3417241D55C1843D7B72FE7914E10A00DFE7332CF8703C0A738AEAA43C22E
85334BEB7DA70D4D69357809C5087D2EA068B469220FC892CAB1191997625DF6
D7E31FDC40860CAD94842831E2CAD272A15E2D7321215E36AA8AF073CDC98B57
5F01FE5A4D9B57C7D0082639D8BF3824461F3C73849560A3E865BBEDEF8E29ED
1E2CB6E07DA11378C96884FAF78212D6C1B3D3219ED5D06C044AC56C040092FE
89DEF4D270208EE78AE7ED70AFE90B27EFCC900D9777A5E035BDC6A4B0510448
6D17EA5032E83DBA371F4CF2448AE2AF36E03E687B4833C87CEAA217111C3705
F1F1FF25D0D66A18A4678C019961F92D3E65386284E6A5A847C49A74438B027D
050C909E9252D34E588D675C0AA9BCBECCFA292AD7AAC870EA80465751B693C9
DB9025ABBCABD5622A04347D337EE15293E60E94B3AA4CD398E8FBE91765700B
097A72413CD7FAE0F67EFF9A98D4F223E66B078E02843A0703FBDF2980B36C1D
6C89C5A2B0AED3BE4F0FF0B3F560C5391914B58D82095037158632C17F4212BC
1C5B90FA361A3D159C29E22A2782F9D49BC0B79BF9E39DD398DC0775FA52CE3F
1E9138AAB41F3B808510E0600D1F2C244EF9CF70AED954521264B723C4672A16
1C2A9E6E9E5F4318CD0552BB141ADACC7695CA4C0D4BAD380A3729C9FF29E681
CF19262AF6A41D9EF4714B615E83E4D94389941682C289EB2816F6F37D422009
A7474138F3E012AF4D68F36BC4ADF8132B3D4596ABAD535876D62F4C407BE260
252AA2E7CD068AE5CA7FF7B9496B3A2201163CD587B284AAB814F710DDBBDB94
D10BCE83F847DAFC5DF91D94D69CD21B3316C90EAB500F6F11194A61F012B660
1447DB231A293BB4A1D1D91610A62A8AA656EDF753D90178E162E2C5703185E6
9346045302E4FEB89851780903DF9B81969AE3736F0217EFFC32996A7DB2105B
F68109423D74B5227BD27EC19C8D31C9300C8E0B55CF67F0962EB5498826D3BB
FD9B47CAE2CF6A274D0BA926EF4F9CDE56BFDE91F837A3DD3835E2A57BEBDC39
D572DB969DB771C85B88BFE78CB32E0AEBE6BD0EFD2DBB20744511E2439620A9
01D2CE3CDD9131A694717442D5FB7A55AADCFF74F892DADD5E4AFE699A8B18E6
7CBD2F9F687F299FBD285BE6E05E7A14B19CE5056590ECBFC6C86FDD6AC21016
B7FDF16CE4981E666095E598B649B8D6440A282859E97409B25DE986D21C7E09
D8F571A1078F5584B2FC863AB1B6C5736B18C39E770E58661747C7B00E6AAC76
3870D303C7FB03497CC826FFFBC0DD247511E3642BC14F890AEEB37F81D4375C
FB9A00A72326298CE6101B9C10B6C05C0AB9D460355880DD2609DEC49D1328B3
BB5FCB8686EA2EF7DB422443EB3A0CD7A465025C2ACEEAB5E059B2545EC497B4
599F155D679A838F5B478E98F186E44422A0D2AA22DEA84CE8D1375BFF3CB3B7
24AA5DB7C42DF6268990B02F211C90C59173B67341A48F4CABAFA33A79AFEE0C
B6C672D43FEDED9B00EC94C38745A8306FCB0F9AA1F07B70870A93E447C64F4C
D90D36273655E3175AF386E4AB95E771CEC296027B84BD1667C271235865E232
380B74C667995B49F048AD9893A14C5804432E91C7ADB46985BBDC7C29408F1C
EC73E413D22206F740AD01C706BBA6E8E5843DA6DD24853D7A9AA925E883AB79
80B1B1B4712D269120B0F070A8C31B2733874CB08F2CD31FC68116C879D09B84
772F33244A45C1B7B09FD0DA223858B9B5B9DC4AE884AA66329F8B253BD5ED7C
B97B7F327A67D3062FBFCB671296A7987B0A09B5FC9089FFC8841CEAB7F11FA2
8F9B49FC91E7164770E2AAEC5F1A816A365351063AA1F8627118EFD202E1412C
2BC6BC681EC96EDD53F6ED590A8F159C374B5BDF45443A224E82E691E7E32DFE
58A31040E56AE4BF5A507EA4D59E068A3DD11BFCCEFB7632A071D4A8B5425F76
A9752EEDBD0F067312EDE9C6AF11A1D594F9FDD3F53F31601ADE486E0303E9EF
C19095747B10A12E742B61C4097E250C2AC58CB4C7E9110E26C36C67125A7A0F
C9BBB19AE5527C46A4E03983CA44AE375C0B08F4E7ACC8EC0C70F404CC603C9F
708BB748EC8460D05841C8D8A150C8EAD132F6F346BAC84C0F8C9BFF3D5E7AC3
BA11E8951A3ABF8B580DD78ADB9335E36B968A881B9F5C428CBB06947AEAA928
496DD8A4F0AB05DEA7D18056EDF3AB68AA573E11832589A3E222390A3A0173B9
5A050C771341C3D07C6619BACB414215AF38E693330C77AD9513B9DAF45FA801
D711650BAF7640AE8EA99AB61BC65512CD258785578186954DD45A319ACDCE2B
750A8CF5213A781B09E268481869E5DEC364B11507E481246FC0C8D903EC386B
B249CF5A65EC88B98638CDD01770790D006C78231AF3672B0FB043939F28CABD
CE6FF2677135575D75485945A5459ADBA009D2A3EB8966F57309871F4E6E4A6B
5DC3297FB4AD7EFFDD05D4E9AFF7433B73B80D1D1DF31E6C3640915890BF31BD
3F014C84903783DC4C00A731EC5199D736F85D789B5547CDFA2BBB4DB219BF6D
3F83E3681CB23915707034684A1B8EB8323E19384B30DB79762D9E45DF91D376
A0529B437D54973817DECA24BDA090EC41766D175CF9FBBF9DAFF99CACEC15C3
74D8A03B16FF19B8625C94B45EDA06B2BF16492866175E2F399D949CEFBE647B
6232A9A065E2BF148F543DFE265646F6E4A71E7A1A6E7A8B596F0E6AB5CC9A07
D4D27F66E30BAD25350F1D9A945ABFF267499DA09EB711493DCE5F82199F6E5B
7A3D52DA94FFBBF73010A643D27874C63A5F41A1519D2FF8AF2491C6DD2790F9
5ED62BBB82596724DADEC7199D0D8B1B55DA23D3E67A9FFD06ADC74164DB120E
A26FDC5A87B3AEF078F150E07A82F9E3F40C15C5E1F2986CEE821624A14774A8
445B37E8385EE0D7CF9FB27D908378CC62D0E41D14C4496421A448F0593B446A
F4B63924E8C4C56CA2EE498EBD46FDAAA1047491A93DEB6A17CFED6188F736C0
4844A429016CD03108B57987FBD2D63A7FAE9AC0680BAB60006B275D5C1AB46E
89F6A2F6675A4AE36F0771C18AA092C687D5DB2D469ECBDD7F98A82465238BF3
A225FF7A20740C87F694ED2937D104B04AB3469BF30219756BCEF39C66FB79C3
7A9FE3ED14A1E4EF203311C3BC0AF38B219ACBEBAB2D765F7F84531628CD9FDA
872A5FCBF8EF6BE4E1B006E22DCA97C074E73CD07978D5C51013AA93242A2259
8627FD2288FF0D4BA19D8F4B225616FC555CDF0A8D91BA7A8836EA435795B033
B67A43C69E99D27DE60D428930281D98B8C176ABD5262013DE205CC358E25A37
891254103FD535E946B84FEF0DD44EFF12088E4FEA94F930201DB7C7995E07CC
D3172AF785309A8689B42857AD100D89DE965E56FB5838CBA5719C17A47DE99D
688D5665E7AFDAB378DD8196DE93EA911E6769EF8D5FFC59DCD040EFD522966F
008BB3FBFD7CE6F1695D5E351276A3B8AD25A7BDCD92F5BE3C641A9E66532AEE
A9A1C31B8C7102644E9CA16D166C3143B5D79B3A244A46B199B47B4BAE79BDDF
87825EF9AEF06581664A98035079DEF7342F8151681B1C4613EDE4E551BA671E
5285F423B334AB73E79B1E5312848E306FC39E5A1B3BDA157D238D06AB5A77ED
EA0B3C00BDACA87A5E2AFBCB6A6B137FF5AC45489A1BD512A0FCBB72AC1520E8
E59864DE85B2F3E98E0B84E26FC911AB34CFFB9BA0FAE433F22E1DC38346699F
D6B53A9DD8EC0D8673C06576375F977A309BB4B214DDC4ABBE3AA47D72CDD154
810310CB0EE0E02200C77978AA3E2FA0FFE2C2DFB8C5B5BD8DCA5AD25199CDDC
180B58EB6CD79E9BC5B181DF979787CE7D7C37C603E82A0A14C08E3075A3B7E1
38416F47A88567E199031EFB84E4EDFFF8849436E9EA49DE6043336848D359EF
7012CC7EEC1FA8D793B1DE3136998E6350666EB6184CE235D436D34F4074EBEC
25F6782A341167DF704C13F7C5DEDB4EEEAFADBF3F6076476DC57D77CD9710FB
037B640EA107EBEF4AA2367E54DB4ED98DA7E3C9B2B5E3462B8C46CCC5E71CF3
842F5335DC2EF956C51961E9B593CA786F5066AE98EE101273F77609D225975F
1A186B257078A5712EBCFAFDEE4B2130B4CC9D2F21CF0604F442F7366BF59837
E560B8539795B4B2BA50C5F0BDF734839A6EE9C2FB6DFB2D93F5B4ED92729AD8
2237F47FD9653FD18133C53AD836EA31839397EBF0F60A4145CA6739FFA7271D
F32F35114862EC06BC9103DC6AEED0798099C98E864F72BBFF06C2C103BE9366
B3243D734BE9FE49DA47AB368FF1A3A623AE053293E9ED0EFE00C4FBCC089183
CA3BCD930955ED32F1F0507C885C895E22F12388A9EACD0ADEE2CDB4F43D7719
D757F05BB675F10EF3448F81A28C72C2DF900ACDB9D6ECAD81157A55593DBA26
3284B62C00A48E583ED36DB126F3F585ABD1D928CD50288A8A324AADAEB2413D
1DC2AC884DCD6C55A64B406807FCFCD72FE88EFDF6B50DDDCD51A29EBBD8ADAD
D37F15E7914A1C5C81392DD5AD9C130B7BA3AE7CFBF00DDABBB20B2585751F92
69FE71D31D139563D44C73F58038A5DE0868A6810B43A25CB8EC9D5F50FD125C
5AD628F117C6226B5637B53CCEBBAD37F460665A3B09E8A4FD707F05598823F5
D4E4CEFF5107FCBC7BB2FB2F403BEA03F5FD72C69BB69A7B7531E144F36C5170
40AB518811A05BFC11C878E78E9EAE89D6CE25DBE033376F249BCAAC5AC172AC
DACB92FEB8CCE39A462CA0400CA380F054C599C9E1199245A87DC2AE013FCF86
8CF21AEDE1638BC9DEA953892219E8487C566180E0B11C8B5B0DD8DDAD33982B
76F5158DADCBD30EE4D10AC145F2DEBB27C90617E4D55D3B061E2A2BF2932437
51CF2CE4631278F4D94FFA70E5D761D3F13E7F7E8DFC8AFF116C3B501DB2C5E6
C0147D14EB933A960D0897361D3AF2B24612B3CCB3245651E7E0283FD72AED67
D1FC2E13778D502589B0A65396B8156983FA9D95A67ED004EC3DF25242A77C0E
BF3A190D4A08F43F70FBD9AC7D8389C5C72B6B090AEDF4DAF5FBB050674B5307
1DF5A0DA68A11043DBCE9B305E2B980F44C08A629F3E391CE8AE81E7427B0674
278AA29A6142982EDDF3AFB9DE738B898664FAAC7952CB5EA4C4C2966372E87B
8C98AFEAACCA41FF99022D437D52D1125A245A618C5D7FA272D6B0920FC239F9
7E12B40D51C650000E45484BEC47720C47AA724470B9BBAB2897D5607B83EF5B
4E4105E7A667D35D0BEF08CA19F4A3779EC28F960137A3A01B95D9FF2A0A9681
BBB55301C5C3D5B5BBD8541D72B9E16B45D33AE8CDC21EB4009CFF19FB6C5463
D6A09A13D98032FAECCC47131335C212B30B9BF23C4C6B1B45694CCB717C430D
07CD4475810C2C358A9E10E11014942E625D9B6671F34C4D5EC8BAEBA01C3A1E
63F4B6682595D01742EC750CBF5C624C740C0EEF4E11B78D5C69C5926BE65F74
6B630002971F13E0EC293180072FC752FF76BB8C1BDB66A81181A67E40834C67
E9E2B7049E6BD56EFB65470501E5D2C470ED95BC37982E71275C1659E9D0E698
D870E005262632004072C7F201DD04A84875BC40C78E8D34B691409AE71AD1EC
2C2AE69FD319AC238771E0E545C9E7AFEFDEC416C7C204BBCD807EB3935A2BDA
EB9BC8A723F0B5206CC3A4CFFD157CA3725019B26E64BF99E0961F3D6AAFFD5D
D4AD6EC53DCF03099C025DF600A6287906FF08B884C92E1A61188FA87299A7A8
5D1A3800682AF091F07F4EF49F175602CEBC156EF9C47778914BD966A46F6246
B30C5C5F609EEE5BCBE4C5A6158A097E26A4EA629BB16E09658D52940D421029
4EA7888DD5847174C83CBA801F3891C2F5637D104C08397DD3B04787DD781978
EACEBBECBAD70F0262DAAC430EB61FBE12B3AD55914FB29677BADA5BF6CEE17A
CA0E2404EDEB02030EBD19F6F20660F31391BEDF57F69DECE02DE43F9453BB73
E3C9532489F4CB40AD4954E97AE3704610E4591FC478DCF72C4A5D94E37A45B4
FE7E58BC9D2BE3EA4762EF0FC7E76F2214F9D7D3DAC4FAD9CDAB06348A892A3E
BB75663DE71AB668C53136C0F66FB1381346B1533A0E7C7EEE54362A7210FFA8
9FC5D8CE72191CDFC15E499D1C80DD8F122BF5BC367FB7C5BA26B8BFFFC4CBF8
8867810ABF5339A3D859946266D96B1F4978CF90437D1FE3F5E0E00C60760736
A7965C220DD5DCBCACD039A9D58CAFB612FFAAA4ED98D0F00353FD8AF1CD349A
134EA642AC01F4A0218E5977EFB5A4934B7BE238334F73A3420E7CA6E6F7335B
CFB1B2822DC4CFAAECD9834C12B7844A500D6A80222B9EB0927821F319FEC09C
C329BD29553239470926A9D2490EFF65AB9B6AD431DD0D37160083E4887B4C34
D90AB1C12C554814FFD965BF3AF2094782769A573CD0061F8E30EAD85F16CB4B
E15F4BAADA4A080DA34A2B009848E9083F6F9B2129B055610B1DA1FA6160AA27
F19D9F3C35BFD9D5BCB33C2B6628873DB962A159027AC5F3618C89FA6A4A0E6D
7D2D576E27EC4500001E3DA4BF7D88A90C9AB1ACEF2A7BC874A23B1ACE04D942
77D1E23F7848A96311170593967B8103FDFAA383500CEA78ECEF3E907A8A1978
D44A9C20B4BBC3F02FEC510EE31D1E917C7F784C2178A9855F270C6A6F876331
9C12268314ACE64DD25AB8D78D270AE4CF75BAB5C3D901CD9B8F6B232E64C8AB
F5E24E946DC0A5D0A3814D467FFDEDBF54B01B30276EAF89ECEA682F91565CD0
DE742432D0DD30BF0F9C840D65564B346B3554079A7297842053A2E8C6710F0C
0C8D3CC8DA609DE8F64B118818E0584272603A16FD6E2CC6A72958C0DF3B5CC0
86FBE0703B5DB68D469CA87CDCAA21D984FCD2D8B0D1171B6D6332C899C86F2A
CA3F5609B1693ADCCFD1CCE7801DFCE5EC56473A8075E712811F346089D0EC55
A046BEC65418BF327632B0B76F77C6CFAC2D3103A905FA5B195304C4BA71D6DB
A2DB1A00DEFDE0B0F4191F5FF872A945881A055972F2D993E33132CBF0D3176F
D9CE9DDEF5D64A4D53AD1A75063CB4A306D6D62B7B270CAD0AE393959F0BE584
73A4367325DBF455C4B4BDA657624E7B926C7D949BFF66F83BC68612789920EC
154BB4F729947E64B4DED703DB6E02663210EE370269CBBC10E95A96B6985909
C2F44F494BD0E35E879E29DE55ABD4255DEDD23D9DA723141C17CD68B6F28FB8
B10F72FFA4E08181ED27D397553B69C9D0B1483DA7F9394F801A88873845198F
6D9BD6C364BACE448EEA2B5E42C0B65ED9E11B17F160E9BE5468CACE82438568
58CCA5E88524B953025E1F107454DA047E044AF986A1CA1E9D1EC5807333F43E
63CACCD4B5805D3E5B0170112075FCDBFAE9A2942E29455AC57D1F84EAC78C26
3E517A2B1F7BB70182D7AD49F7852D23A1E69753BA23704AF298CA16A14F54F7
214E181E4F76F548E5481FDA5A254056A00E1C4BA4FA6E0B19BC6C4D45CC2C91
1D17272AA10AAFBDC17BA099C28BB7364F9B4CD10421F02E2D2C56A484D23537
CA3581310DF05425DA2187D47B0A6B9F09DCBB37E1258D4D5EA089F912188555
919E04BFDD8761136AEFB451579D849E539A3A6FC49B188113453C70FBB8FA51
34D946D189B57AB72AC403374EDCA4DB66C23C751B18DCA0E5AA27B512858134
3269EAD037D06D07640171D7A89FB95156C4D1FC4B9B942837B7B3C0BB144317
B9359B6D2D7F3B5CF94B24C1B0F61ED400D36933B986988880C2AB3290BEF1D1
C2B6E33CA5FF4FFAE7CAD9A2B0238DF32050BAB62A7707FE33B26BD355BC41EB
6ECFD7A6D2C8207517FD000812B1679CD2B82ADF28A320180EC38E24E2994B9B
9D9CA7F6AD43B975052B29611CBA6C0966845B818696A4AE17799422A47DE0F4
C31AD964476D6CD3BBA6D8F5784CF14C7F9CE493B46822FC0554E51094BC6F14
6AA8B2027EA01E893F57CD54DC0C67BE817AB2F14A00CF8D13841659FE092F61
22F1B8CF7B2E23EB49E9B3618B0F1029AB5B6E4FA097D977ADE842BD0A73CF8E
E041D539963AE458302EECE33F5E278D08D00630F24BEC55AD0D188EFFD15871
517D3AC20FBB3F11A5785C99B33FEFE0F7FDFE2E428A97F1766F616BAA313104
ED939ADCC16F6CBCFFE578606FA01FB7B68B96543304AC2A27D66545095F6F01
53BB1E07B85D8F468736C32A27880DAB84BC03EA8702AB0F56633F2E09961186
A29F88AD559F157D7F36D032101F2F8BDF21827E8D5C5D875FD0E56E98381A88
0F5288669ECCE776D33D6578E94F39DC529C0D0B25CEE2076EF78B6B1835D8DF
2F2BC2506B4469B3E1A06197F88315D401F67ED39DF653012E05E5FED4C2BFAD
52B62841B1A5BACDF658A838B3CC244EDA3F918FF3FADD9B2D0EAB93D3975556
3005433C7E76FC9326F1156361AB277F8BEF5AA0B18BA980363288402283A9B8
0E1143DA78DF238B39893B753C83B42A51329918DF22A202DF713DA0C5CF09B6
51C61886C9DE9481DC72433EB8F462300A0486661AFB2A1E7CF8DA40AC9BABF7
AE3B396BA326D0E3A67DFC9782519831F78DEA2C94682C153073F27FB7F9E84A
24D3E0DFFC146AF7D3CDCAC7ED5A71C93A0478ADFAC53742E825F3CC6A233237
265B9B9743B53CAA6E3A1BEA6049B1DA265414CD71B941773B000FB5C3A7E074
331B2557BF15004030E1B1DBCCC52259AF6E94AB5886F035635C2E550CCB8204
D71BA9ABC181E011810DDD32E1C6C4F8AB398E287DBEA50F5B6D20C98C3A0171
B6A795026060C73142ABAEAEE0BC072B25AED722EEFA69879E919F1C9CE75017
34D6B283415B03C50A8AD6733885F1FAB84920F81443FD7CF3C1D341BC4E4C6B
8F630EE6E680A6C3BAF547A689AE1C35AD5E1EA44174D3D76EC604D813C4C9A3
65BED07905F75339FE0D443CEDD07100C9DFABD53DE2ACC15E4D1F682E380A9D
0C2735C0D547BA6074B9DA23A37B3153CDD9590F69F84393ED4BF983244EDD6D
06A88D774C00DECE4DDE69087355280BC7921093B3379508C4B5EC8C8EB34503
0CB3620581B4447A697221A11F2083E937EFCC4DC8B1A06FDE2697B84191BE7E
80112F65EA5999E4E9D9B9BB891D11ECC698D49A37991AD4E01A800ECA0BC735
E171F629643357480EBBE7234AA3E53B1E87AFEEE55C23B0606A53151981CD02
7FF8872FA1D874EADFED02F3109A3BD6F5BB99E068E7ABB50F3A3B3BE393658A
3A7FA4F209D527B8BF91EA0B5D8727EBE8DC07B81BF58A390FC609F14F712DA6
4782224CAEC39764B6900E0CEDD8633766FD8D8AB7CFB57D215FB308732784CC
E769FE84A79AB6BEBD9BA10C4173133E2A9A760E7C22F77A59BCD2462558828F
F691A67CBA58A043898C250C9E2B12282DEA4D91A45D7951B61C9C3C6B3E93EF
A507C9B87023EDFF3BBF8152C73F16834F460E3275146439043DF5ED499CDA1E
B0CB223600FA366953FA9F79860B2C197E15C2D42116D734B577924ADA8A3082
0573201494A48C88EF383A58F1740EB8945CB8C13A11C4AB750229786DD4FBF0
C28785B008A6D82B5D561E56BF3F1671472F3C42431C34B8B819FC3C58967EFB
4B1E0DBF132DA539B17965EF08E316CB11660AF0C6E8A5BBDCD40F3397E2E50F
A83E6B6486C4C6942BEBD561A5BB5B589C012CC27E2AAC50DA594AAF5B034DF0
586A05A596DA547D794800283871B563D787579B74A181116899F2EE1017915A
366791B88C0634EEDC1CB954B9EA220C404861A0ACFF0BE9B37DEF288482E2DA
07FFF2861E23208369A88FC2C03D4E8A1EA41E5666D798603EFFDC611E020B3E
4E06783FF32D2678928A4E6E9E5EDAC734DB4D1E216902263F161094F7C1B70C
B0A99739082F99B952D2FB7BF500D9B522A3AFC15DEC6B497DB86D8C7AE5220A
22D24081B9238D48C03E5E7DD62EDEB1038BAF31EF019597C92D35EB52CC43D5
4713E3B2762E1929BF0E093D91A7FAF4FBF1C392BEFCC65A473B5CA077D99768
5FB45A78976D8263206B305CF4FBFB6690751DD97ADF50DAB3EF711C8907809B
09FFE3A4121EE943E3E0D13CEBF6C8EB0C8296782B24CBBC6BAC14C6EBCE441A
AF187E8A5047267CFA69F0AD31923B289E1E67C3BB03207E57A5B5B5AC9686F1
A37555EB236BF3FCE75076BAB9C25A0F336D4DC533CB65F5A96F6E86533F343E
9DC91319ACD5D8ED0CEE9E4C6824886250635DEE1B4E8ADA3C8E5250B342E838
76A7AF770D10A9C34846300FFD0B4AAE750C5568DFBE04CCE4BF485093C90BA5
60F28358D736F4EDD1311BE1EB8AC713F417D4C72FC7421488757F157F2590F4
603D9CE3EB7A28A34600AC335A23C6E6F77727B8138AAED4DC600746CB82C753
BC3E232C3F9C690BB66F1ADA56C444674E8BE697BFD9154B25B7DB601EEC3B07
790B15E6DA300EF0913AF1CA70033B8E65EEDFBA0367AAD081BB6E487C7C0C0B
569B1FD7360695E7FF8B32C4076E06461BEC3B62F27877E769576529C94B0A9E
0FC40407F0F2814C04659D3112CFBBC322BAB46A00846A4D6B7704D63DB81813
4222E88234A6393BD5EC730F00BC87DBCAB29A277D4FD56C0C2D108F1F763C60
C68263446733F069255D06C95336813A35F6F41FBCE5FABD9B0F3F725A2E3BAC
DCBBCE92128E8D1C7881905AF258D1D0AC90DA566857AF0C0C63453FFF5A1D6F
2BEADFBCC76183EADF8496B145644E80C3C6ACD0F51C8912CAC92053E1B02690
37315177834F2A30CBEA1F256B374DC4BD0BFF807E04AAE4B1A808B89F9E3F43
480B3EF59D0FE328777D11E4E109210F1E1A1D689FEB23C68DA2C78F960137CE
A875E1B26652AD1CA94DF3E4EB336C67F2D285F8403C5D4087D51383198B65A1
13B289BBCBBEB3A8202EFF8B139C3F70AB0FC0201639E4D759E4C846F7DD7156
8C58AF012A8840B7B6BA2A50F03F6EAE0CA2B3E076B2ECD0F9B87D01A73E75F7
33E2835756F0A07EFCACA573CFF130A2E3CC0ED201E8994CBE2A16B8B6E71479
4F5D376447A773B5E290577D75B16C6B8C2C0A84F16040C64940C96CC81610C7
CA8B7DBA076B474279091C23314F559451E527A97BE74DEA08F26D0FB0B6BF53
B5B379A7C04F45AD98AC9103D210282B95CC80C72932B319D602143555E39B85
1179A4092BC70A8D0AEBC7753693EB10E53EFB3DB38D0EEDCE21F5CF682D2426
4051F0A38FCE28E68908F1DED37B2C9F1F7CDC57D57339C3A0457CA47C49AAEA
AC3107107D463E21CB0DD10D222AFB444F1216AF09F6ED9DE1A0E98AACC30DB9
26CA3F53918857F53911B52C410BCC3E8474C15DBC6595B32BFE96FB0D30200B
D0B0D71FC2AED8629E40ABD3D963618512C29AF284AF8407102E68DCFBEA7794
2C0A2CD63F20F47CD9543871E16C5ADE2399D5EECC73EF9E5148D2F4E10C1A27
C68F82AC926419A279CBBC90EC87A81412CB13C8656756A33DF5B457AED9B9C8
2FFB9DF19F950B79EBEB4E5E60D77E43D0411CD4ECE0E8864242D068A53116A1
51B35E87C5B6CAB561DAD4C437EB819671042F15469A0F9ACFFCE94C68A04879
F4CD0A8884702976C1DB45755BA9D1632BEE3C253EE681104FF22A241445F0C3
21122A84CC8F011B733CE510AB43B40765C1D8C37F5D48CED6F40907D61B037E
3435F52431274353F8CC2AC149853DA4ED4E88F41C80C1860DA640EE9E48B695
499C7994AD1771C36524A062A1BB1C8DB0159EF7BD21AE10B61B7CD44E8CE833
8128BC5C8CD8BDBB09076A40C7DA08BF785DBB9BFF6BE3752456F3386C88A524
BAC9DA94E0C85D881C7BBBB49EABAEE2014B32D45D6BBFE48631FDA1DE15387A
7E36133DD30E9BCFC4BAA61F49D632972CC2791AE22DB1552297A1E7FC3E46EB
DEC81B5BA618ED0592D29CC19354A996E9E274E18324A0A7BF19820D0D3441F0
E3C7445149D267F294F56E8E2D89D586E810F0EFCA699337E489549F4E6B5797
43BB50BF984BE83D324414E53A0DC8A90A81C613605BB7BAE30D3328AFD59260
4566610818B285986D194AB7DAFF5050673D4650696C7C68E0EE1971FAB18219
E54040A5C0C5DB8E2444752C881ADE6ECEEC2BBF35B51612B85C2E3A8C76BA18
2BDF9C3E4CED330657B91B9A76593138FBF50AF2F487C2D097975A902537BBF2
B18AFC6CC5D9329E6DBDE15AD55661CD38E8A90662EA4D82C05C40C24D1FDDB4
AD5A19CABC31909D1F49D80C8D0BA1A675C9C03A09C66A73C903F87D87230CF3
FBEC1BC39FE0B70D4DDB5A6393CA893C0FA123BF556EF1AEB1FE6057298E8837
58B6C7B96DCA0BAB35B1F5BFCEB8920DC5D8A77EC3F7645A2A5501773B567244
07E5AB6C37962E498AD8FE9ECC7BDB5195CA937DA38C576AC92F4448FBF8CD71
58EAB94EB12BFBCCAEB2C913F1CBD707AFCEB3080240A105AFBE0D3235F9117E
D3948DF82D69C0216ACBFCCE734E2D8EC309B5FF5AE5D36FA181B98F4ECA150C
60C49FEF49096EC376D0CFA9F59EE323C51F8998E8ABAB31C3364BB0C67F779C
F50B3E4EEBDB4F06FE52BEF305B5B33E9325FFC1D7EFDAF9C3B958F98C66B9F7
AA765CDD5C1EDBC8F31D5A9CE50B5341F394928B87F9FB4C7C733A813A6FC64D
2189B5F51CAC5D0EA7B8EB1FDC9FE68962B468A19D2FB793897EE9A6701CA21F
1E01C23F62CF18E17EF49D8D075CBB085A4630FB2ECD40CB97BD85F6C392EB93
0DA609A17535CF69489B863BBB291E0DB8E36BC422B9F75DBC81048E3CC84DD0
E25A75A7E26ECB216E51D28B9F59B9292F8174D9BCDE9848C23E407452D83230
57E75F29C6A2132502D683B215EB0FB27B9FF0980E171B375DA899AEE3A15BD6
F1207890499FEE5C30641306A53F0E27B6A2421489CD14FD23C5597C6F9C76EB
B5FD326ADF91BB6B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 8000 8000
(C:/Users/Non admin/Dropbox/Aide LaTeX/Liens utiles/Liens_utiles.dvi)
@start /Fa 133[684 684 684 684 684 684 684 684 684 684
684 684 684 684 684 684 1[684 684 684 684 684 684 684
684 684 1[684 6[684 3[684 2[684 684 684 684 1[684 5[684
684 1[684 684 684 1[684 1[684 2[684 1[684 684 683 1[684
684 1[684 1[684 684 684 684 8[684 35[{ enclmec ReEncodeFont }52
1328.35 /LMMono12-Regular rf /Fb 199[684 684 684 684
684 684 684 684 2[342 46[{ TeXBase1Encoding ReEncodeFont }9
1222.08 /Utopia-Bold rf /Fc 190[582 65[{ TeXBase1Encoding ReEncodeFont }
1 916.563 /Utopia-Regular rf /Fd 17[356 4[628 8[639 73[611
28[618 594 939 616 741 420 533 475 722 743 705 756 1128
341 640 1[356 742 635 390 628 731 606 731 639 8[763 1[775
967 759 2[931 733 2[1154 694 2[427 3[741 1[836 1[776
6[324 3[648 4[648 1[562 324 479 324 2[428 428 340 36[745
2[{ TeXBase1Encoding ReEncodeFont }51 1222.08 /Utopia-Regular
rf /Fe 190[537 65[{ TeXBase1Encoding ReEncodeFont }1
845.275 /Utopia-Regular rf /Ff 138[676 384 486 434 1[678
643 690 1[311 2[325 3[573 12[696 3[693 7[633 6[676 11[591
1[591 4[591 591 591 513 47[{ TeXBase1Encoding ReEncodeFont }20
1115.15 /Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-237 -9057 a
SDict begin H.S end
 -237 -9057 a -237 -9057 a
SDict begin H.R end
 -237 -9057 a -237
-9057 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -237 -9057 a Black 0 TeXcolorgray 20487 -7823
a Ff(Liens)251 b(utiles)g(pour)h(L)29383 -8014 y Fe(A)29760
-7823 y Ff(T)30275 -7556 y(E)30818 -7823 y(X)16037 b(19/07/12)p
-126 -7297 52252 45 v Black -126 -4850 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -126 -4850 a
-126 -4850 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -126 -4850 a 0 TeXcolorgray -126 -4850 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end

-126 -4850 a -126 -4850 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -126 -4850 a -126 -4850 a
SDict begin H.S end
 -126
-4850 a -126 -4850 a
SDict begin 14.5 H.A end
 -126 -4850 a -126 -4850 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -126 -4850
a 1328 x Fd(V)-85 b(oici)274 b(quelques)k(liens)d(utiles)g(pour)h(cer)9
b(taines)275 b(fonctionnalit\351es)f(de)h(L)33819 -3738
y Fc(A)34226 -3522 y Fd(T)34790 -3230 y(E)35385 -3522
y(X)g(:)-126 -2762 y
SDict begin H.S end
 -126 -2762 a -126 -2762 a
SDict begin 14.5 H.A end
 -126 -2762
a -126 -2762 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -126 -2762 a 0 TeXcolorgray 1449 -1216
a Fb(1.)p 0 TeXcolorgray 651 w Fd(U)-49 b(n)274 b(site)h(\340)g
(conna\356tr)-24 b(e)275 b(:)p 0 0 1 TeXcolorrgb 14391
-920 a
SDict begin H.S end
 14391 -920 a 0 0 1 TeXcolorrgb -296 x Fa
(http://fr.wikibooks.org/wiki/LaTeX)p 0 0 1 TeXcolorrgb
37632 -2129 a
SDict begin H.R end
 37632 -2129 a 37632 -1216 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://fr.wikibooks.org/wiki/LaTeX)>>/Subtype /Link
H.B /ANN pdfmark end
 37632 -1216
a 0 TeXcolorgray -126 -687 a
SDict begin H.S end
 -126 -687 a -126 -687 a
SDict begin 14.5 H.A end

-126 -687 a -126 -687 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -126 -687 a 0 TeXcolorgray 1449
857 a Fb(2.)p 0 TeXcolorgray 651 w Fd(P)-37 b(our)243
b(ins\351r)-24 b(er)243 b(des)f(\002gur)-24 b(es)243
b(\(ou)f(images\),)g(av)-7 b(ec)242 b(ou)h(sans)e(bor)-24
b(d,)242 b(av)-7 b(ec)243 b(ou)g(sans)e(l\351gende)-24
b(,)243 b(av)-7 b(ec)242 b(le)h(texte)3126 2462 y(entour)-12
b(ant,)275 b(etc)-12 b(...)276 b(:)p 0 0 1 TeXcolorrgb
3126 4596 a
SDict begin H.S end
 3126 4596 a 0 0 1 TeXcolorrgb -295 x Fa
(http://en.wikibooks.org/wiki/LaTeX/Floats,)55 b(_Figures_and_Capt)o
(io)o(ns)p 0 0 1 TeXcolorrgb 46245 3388 a
SDict begin H.R end
 46245 3388
a 46245 4301 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://en.wikibooks.org/wiki/LaTeX/Floats,_Figures_and_Captions)>>/Subtype
/Link H.B /ANN pdfmark end
 46245 4301 a 0 TeXcolorgray 3126 6140
a Fd(et)p 0 0 1 TeXcolorrgb 4449 6435 a
SDict begin H.S end
 4449 6435 a 0 0 1
TeXcolorrgb -295 x Fa(http://www.grappa.univ-)g(lille3.fr/FAQ-)g
(LaTeX/8.17.html)p 0 0 1 TeXcolorrgb 40104 5226 a
SDict begin H.R end
 40104
5226 a 40104 6140 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://www.grappa.univ-lille3.fr/FAQ-LaTeX/8.17.html)>>/Subtype
/Link H.B /ANN pdfmark end
 40104 6140 a 0 TeXcolorgray Fd(.)-126
6669 y
SDict begin H.S end
 -126 6669 a -126 6669 a
SDict begin 14.5 H.A end
 -126 6669 a -126 6669
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -126 6669 a 0 TeXcolorgray 1449 8213 a Fb(3.)p 0 TeXcolorgray
651 w Fd(P)-44 b(ackage)275 b(hyperr)-24 b(ef)276 b(:)p
0 0 1 TeXcolorrgb 13427 8486 a
SDict begin H.S end
 13427 8486 a 0 0 1 TeXcolorrgb
-273 x Fd(http)d(://www-ir)-24 b(em.univ-fcomte)g(.fr/...)p
0 0 1 TeXcolorrgb 33182 7301 a
SDict begin H.R end
 33182 7301 a 33182 8213
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://www-irem.univ-fcomte.fr/download/irem/document/stages/hyperref-intro.pdf)>>/Subtype
/Link H.B /ANN pdfmark end
 33182 8213 a 0 TeXcolorgray -126 8747 a
SDict begin H.S end
 -126 8747 a
-126 8747 a
SDict begin 14.5 H.A end
 -126 8747 a -126 8747 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -126 8747 a 0 TeXcolorgray
1449 10285 a Fb(4.)p 0 TeXcolorgray 651 w Fd(E)-8 b(cr)9
b(ir)-24 b(e)267 b(des)d(QCM)g(av)-7 b(ec)266 b(Alter)-8
b(qcm)266 b(:)p 0 0 1 TeXcolorrgb 20684 10580 a
SDict begin H.S end
 20684
10580 a 0 0 1 TeXcolorrgb -295 x Fa
(http://mathsp.tuxfamily.org/spip.php?article64)p 0 0 1
TeXcolorrgb 52126 9372 a
SDict begin H.R end
 52126 9372 a 52126 10285 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://mathsp.tuxfamily.org/spip.php?article64)>>/Subtype
/Link H.B /ANN pdfmark end
 52126
10285 a 0 TeXcolorgray -126 10814 a
SDict begin H.S end
 -126 10814 a -126
10814 a
SDict begin 14.5 H.A end
 -126 10814 a -126 10814 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -126 10814 a 0 TeXcolorgray
1449 12358 a Fb(5.)p 0 TeXcolorgray 651 w Fd(I)-23 b(nstallation)209
b(manuelle)g(d)-29 b('un)209 b(package)g(sous)g(M)-15
b(ikT)-122 b(eX)208 b(:)p 0 0 1 TeXcolorrgb 30168 12632
a
SDict begin H.S end
 30168 12632 a 0 0 1 TeXcolorrgb -274 x Fd(http)269
b(://for)9 b(um.mathematex.net/latex-f6/...)p 0 0 1 TeXcolorrgb
53311 11447 a
SDict begin H.R end
 53311 11447 a 53311 12358 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://forum.mathematex.net/latex-f6/installation-manuelle-d-un-package-sous-miktex-t2121.html)>>/Subtype
/Link H.B /ANN pdfmark end
 53311 12358
a 0 TeXcolorgray -126 12893 a
SDict begin H.S end
 -126 12893 a -126 12893
a
SDict begin 14.5 H.A end
 -126 12893 a -126 12893 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -126 12893 a 0 TeXcolorgray
1449 14431 a Fb(6.)p 0 TeXcolorgray 651 w Fd(A)-31 b(utour)276
b(des)e(tableaux)p 0 TeXcolorgray 3126 16269 a(\226)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 4387 16565 a
SDict begin H.S end
 4387 16565
a 0 0 1 TeXcolorrgb -296 x Fa
(http://latex.developpez.com/faq/?page=LATEX_TABLE#LATEX_TAB)o(LE)o
(_FO)o(NT)p 0 0 1 TeXcolorrgb 49501 15356 a
SDict begin H.R end
 49501 15356
a 49501 16269 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://latex.developpez.com/faq/?page=LATEX_TABLE#LATEX_TABLE_FONT)>>/Subtype
/Link H.B /ANN pdfmark end
 49501 16269 a 0 TeXcolorgray 0 TeXcolorgray
3126 17875 a Fd(\226)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
4387 18170 a
SDict begin H.S end
 4387 18170 a 0 0 1 TeXcolorrgb -295 x Fa
(http://fr.wikibooks.org/wiki/LaTeX/Faire_des_tableaux)p
0 0 1 TeXcolorrgb 40615 16961 a
SDict begin H.R end
 40615 16961 a 40615 17875
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://fr.wikibooks.org/wiki/LaTeX/Faire_des_tableaux)>>/Subtype
/Link H.B /ANN pdfmark end
 40615 17875 a 0 TeXcolorgray 0 TeXcolorgray 3126 19480
a Fd(\226)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 4387 19775
a
SDict begin H.S end
 4387 19775 a 0 0 1 TeXcolorrgb -295 x Fa
(http://fr.wikibooks.org/wiki/Programmation_LaTeX/Tableaux)p
0 0 1 TeXcolorrgb 43349 18566 a
SDict begin H.R end
 43349 18566 a 43349 19480
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://fr.wikibooks.org/wiki/Programmation_LaTeX/Tableaux)>>/Subtype
/Link H.B /ANN pdfmark end
 43349 19480 a 0 TeXcolorgray -126 20009 a
SDict begin H.S end
 -126 20009
a -126 20009 a
SDict begin 14.5 H.A end
 -126 20009 a -126 20009 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -126 20009 a
0 TeXcolorgray 1449 21552 a Fb(7.)p 0 TeXcolorgray 651
w Fd(P)-37 b(our)231 b(les)f(tableaux)g(de)g(signes)g(et)g(de)g(v)-8
b(ar)9 b(iations)-12 b(,)231 b(utiliser)g(le)g(logiciel)p
0 0 1 TeXcolorrgb 36315 21559 a
SDict begin H.S end
 36315 21559 a 0 0 1 TeXcolorrgb
-7 x Fd(P)-29 b(stP)-8 b(lus)p 0 0 1 TeXcolorrgb 40312
20641 a
SDict begin H.R end
 40312 20641 a 40312 21552 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://www.xm1math.net/pstplus/index.html)>>/Subtype
/Link H.B /ANN pdfmark end
 40312 21552 a 0 TeXcolorgray
230 w Fd(et)230 b(expor)9 b(ter)232 b(le)e(r\351sultat)3126
23157 y(sous)275 b(for)9 b(me)275 b(d)-29 b('image)-24
b(.)-126 23692 y
SDict begin H.S end
 -126 23692 a -126 23692 a
SDict begin 14.5 H.A end
 -126 23692
a -126 23692 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -126 23692 a 0 TeXcolorgray 1449 25230
a Fb(8.)p 0 TeXcolorgray 651 w Fd(P)-44 b(ar)-12 b(am\351tr)g(ages)276
b(du)f(style)h(de)f(pages)f(av)-7 b(ec)p 0 0 1 TeXcolorrgb
23313 25531 a
SDict begin H.S end
 23313 25531 a 0 0 1 TeXcolorrgb -301 x
Fd(fancyhdr)p 0 0 1 TeXcolorrgb 28269 24319 a
SDict begin H.R end
 28269 24319
a 28269 25230 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://pfercour.free.fr/stock/fancyhdr_fr.pdf)>>/Subtype
/Link H.B /ANN pdfmark end
 28269 25230 a 0 TeXcolorgray 0 TeXcolorgray
-126 72267 52252 23 v 25676 73872 a Fd(1)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
