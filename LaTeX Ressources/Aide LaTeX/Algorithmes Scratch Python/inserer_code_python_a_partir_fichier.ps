%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: inserer_code_python_a_partir_fichier.dvi
%%CreationDate: Sat May 25 15:55:54 2019
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold SFTT1200 Utopia-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o inserer_code_python_a_partir_fichier.ps
%+ inserer_code_python_a_partir_fichier.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.05.25:1755
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: cm-super-ts1.enc 0 0
% This file is generated from `TS1uni.map' and `glyphlist.txt', `gl-other.txt'
/TS1Encoding [
% 0x00
/Grave
/Acute
/Circumflex % ?
/Tilde % ?
/Dieresis
/Hungarumlaut
/Ring % ?
/Caron
/Breve % ?
/Macron
/Dotaccent % ?
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
% 0x10
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash % ?
/threequartersemdash
/afii61664.cap % ?
/arrowleft
/arrowright
/tieaccentlowercase % ?
/tieaccentcapital % ?
/tieaccentlowercase.new % ?
/tieaccentcapital.new % ?
/.notdef
/afii61664.asc % ?
% 0x20
/uni2422
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl % ?
/period
/fraction
% 0x30
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
% 0x40
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/uni2127
/.notdef
/circle
% 0x50
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Omega
/.notdef
/.notdef
/.notdef
/uni301A
/.notdef
/uni301B
/arrowup
/arrowdown
% 0x60
/grave.ts1
/.notdef
/born % ?
/divorced % ?
/died % ?
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf % ?
/married % ?
/musicalnote
/.notdef
% 0x70
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow % ?
/hyphendbl.alt % ?
% 0x80
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/uni2016
/perthousand
/bullet
/uni2103
/dollaroldstyle
/centoldstyle
/florin
/colonmonetary
/uni20A9
/uni20A6
% 0x90
/guarani % ?
/peso % ?
/lira
/recipe % ?
/uni203D
/gnaborretni % ?
/dong
/trademark
/uni2031
/paragraph.alt % ?
/uni0E3F
/afii61352
/discount % ?
/estimated
/openbullet
/uni2120
% 0xA0
/uni2045
/uni2046
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft % ?
/logicalnot
/uni2117
/registered
/macron.ts1
% 0xB0
/degree
/plusminus
/twosuperior
/threesuperior
/acute.ts1
/mu
/paragraph
/periodcentered
/uni203B
/onesuperior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro % or /Euro.alt
% 0xC0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xD0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xE0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xF0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F6000BF098AE401F14F4BB6F5D1DAF0A3F095107D502476C
356175D567B8BE8693B835B72F954CD3441DABE19A98E24A387E512ECA045018
B639B7303812DA28297D223CC2C4B14CBC8C49FC0FCBC63957299DF52CB8DDE8
0D46AEB4C348603F4053F4F57A3D616A8893212A2FD6CB9500E8DD5E585A8F3B
095808E9BB2BBA93BDF696FEE1CB05A36BD547DFC13DC6B2EC5FB4BD7314F824
BE5AF333CCD0746C97FD18AB59457BE96CFC340F276BBFB65D46976E731F177F
646530E00D4BEEFFBDF432F8A3CD858E8B6CCEF4B08C859857BCD19DBBE5372C
3DBDDB74CEF4A3CEA6EF11F10BF7D2658B0A72CFB5A4CE79A45FE1410F4D901B
9CD23456AC3D4C879EECECA1515886B34DCB00C7AA946C3C2935181303F9FB06
7188824821FE060E59E36EB1FC9A5F085D95B87F50593D33D4882F69B7502074
8BCE485A83A4E6A527FFA28FD1A07FF0F73B02B1A5707353F509B875494DB3E5
59C5F5A07C0EB7935DB8F608C04810DCB96FAA52EBFA1BABC1CA2D63E24C8FFA
00BAA962732AF49A368B44E8ADEF488F87FAA82124770E8B5D34112F79685838
150CF55BB315C6B061ED2BE68D7D7EBE23B68519D11ACB684554E52BC8DECAB4
7E5EBA53AF26F0F97242A8D07A4862BCB566375F71619B968A28324F9ADCC1AD
34DFA827D69B8948E116A95F7DC5FB7D45B0327D6C6D3DD8874E90D2303A7151
BB7B6E75FE0CCA2F98F740D8BBD60BA42D3FA1D62FC01C25913BC47F800907EF
65D0E6472A46315814055D10434972F2AED491A64636B60958966EE99D124BD7
3D3B9230E1C6E0EFD920A9E7CF22BBFBB9B81E57DA1D71486EA9D2299BF6CEF2
031379D9CCD2BBE06270B5971AFFFDF087FDC8FE528A4CD5B211C93EA990B381
49BEC1A5CCE0C6ED8739011DBB6A68D73736EE1AD0FBB705DB03DCF858CE17A0
50BDDDEE9EFBC68FBFE943C25C05040A5B9B3463651BE40E47DAE1A04FF28BEF
E905373664369A280B84152CF6E0E14C93EA39091D583E0D9A79C77BEE35C0B4
1847C42EC23DE44D0A14E7D2F33F55A4B60CE0D32F928102266DFE7348AE9E58
F3871F9F8CD1C3D6EF4602B3EDC0DCD19B1C4B0AEFC195AB879C977E425ED137
BA1D0821C1D03455DEBAC9DB85E6E8DD109CB4677ED06EBFC5FD5AC316D08B4F
1345EEFB470C540EF82E55D7088CC9726225715FD9FC51A77E2745E92F8E77B5
0E840E7D1B7C48A7FD88F15A1BAE76F4DFF8B5821ACDC2C51FBAB2048D4C3559
55D7C8F097D8DCDA6E15C09F98751D9AACDAE6B930FB8D9D5ACE59F9353B836C
79D6D1302485DFE88C095D74A0C9B8A990E7C0B25D9E26190D6311CC070987E9
9A654615785F0B9FFD9A5FD7517BD0FD04C73F8DE58E8097DE65428C74056A21
7934573ED4D4760E30B8BEAA3ACF4E21611A4AD689A019EB6E90DD6C19D08C25
E59F10B13B08F563F95668E682BA6D95B4C56C828F8BB0A4D7DFED47EB8439EE
2547AB819CEF1B325F6577CFAC2A29715C85C611CAE35D01FFC40318A3C30EAA
E9AC62AAC18BA11431F001286CB6B478EFCD765440A11BBAB38A2A314552E63C
120DEF4D59AF262CBA4F4F91685DBA230120D3745599B7A549D388189F3EB6FC
72E4B1EB8780395E4C66432B7EF4B50BD83509A156F4D660BB45EBDE3AADB1C3
199AA669D832ADA7436FB16103FA08B26C706B70D6D7CDFD62AF6243C9B98897
9FAAE782B22828CBFBB01B4C467F7FB3B36FBECCDC99A4654DA95F01E47D3B39
C0A1E29F709C9ACF283A5FC611ED44F75A15ADC76DDFF02C11C1B52C95849FC8
2FFEDFCD127AB4A05AC886AC64AB0039C2B1FFF3242324740DE230297CBA6CB5
889D4C31445E812426652267E53E5238D4F9A3D7B320B1368BE707FD277A2658
4CA35D43BBD69BC66EF49BA3F2DB41C31FC2ABA70FF574A8AC103CA1349A39B3
F5907B66ED0334D12638B5B674A64370442D6CA86D3AB54B0A1F4B31A55889AF
2A76948DAFC6D574A3097173ED0D30E1771EFDC1738FC0B5D6C66A4D989F3955
864E4704A87C049826CA2F6BD199FD55D13BBF378D181BB60CAD9EA1D87119F3
AA17749D824479739F7E8494FFDE7AC346530E91590635EADD3009E6DC9C9EAC
52E6FA933C9C752F9BDE24042BA7632D0B88E1432F55766F43BA728875776801
E712B72CAEBA74F44991FFB57AB664CE7047AEEB7F836634FE1B2DE68606E8E1
5961A2CB5645DE05935A91480D037E3F7CC02DB2E06F8234BDC461D8F7BC5ED4
68E6CDBB96D8C00B42A3F17241D483F1CF495408807DC69980DB96F65179EB96
569E0644A8D7706D26251A20ECEE27654CF5BC56D765E2C7F620CA11DF380F9D
EE82815AD554E8F8D14472BA880A43FD7A9F5D3194B71C398B98EF9C658D9B02
96BA66F53907984D289860CDE5BCD9DA998FF73ACE82D859368591797B6A7FC7
0743C30049BF62E61941B0CF628339A9C5F3C888F909690AADA4364CC2036F6C
061296402C8A61BD918AE2DDEDFBCEC126CD721870C49542080F99FB40506C1B
C5710F29B4CF6AB7B24C7FCDCD4BE001FBBA48742E7972433CC652E9B263B405
B4722D3E3A34AE3C09692B6F691BE1541AE3D49D4B6E892997D93D3EFD0B2252
BF63C7B805C4389FAE433B5CA20614500AB11922A4E68CBF1557B048CA88A192
942115179A30DFDB9CB1C4BE460469FF24571E74ABF75AA9FABDE22F32C21B8C
883492A1DA82034D0B4AD4AC6FC53F5E4EABBE38838E6E37D565F95DE040BF06
E5232319F8BC3F242CD7D81C56574A8A052D4BE8EAEF42DFAFA56131BC9E930E
F0F1FA9BD31A4AF6733B624EAF8B8A125A58FD44168426B788EB29959E694040
B503DBFCEC32AE56F286D4D709E401AB727B64D2D567AA2D56688B330BC03F37
3B89565558FC58F85457159049A4B64775804B2F90CD6EE7457D26847769D6DD
0FDACE21E035338A48A155EBD50A6F1E63A25EAD31CBBF850A3673C8BECF1431
8F0C96B6BF4E1AEF672DD78903BB19962DDBC0F5D3771EE684AB4936EA7B264C
8EE5FFCD6E2938FC4DEFD4E596075D04F2E7058CE2C9ACE0497B96A7B3CF3B80
E235F2E290F439144A0B286DB283965CE946226627968F9AB9DBD5C10FF061B2
C866CD3A620BC3435596988D2EB1B53941ADCFF5559F1D912E56D9F7A8E5D9BE
CF8CCB74BF1B5AEEC5F2203694C23E72D1B72B841C16A319C717FB2DA43FF000
73821E7C20D1FDC40E678BF6DAA0E1A671E9E7EE94B894EFD4B852105B7F1F88
78C902A1EC331EC9A040600A5A42B10734FA0475D498923EEE9B65CD1A39C84C
029ECAB917A8E8E67A327029C2E8B76655CD2DE7419FA98A52FCD82555908CEB
CF6DCC924A2DA9BD94F73B216144F7593815BAE9771E69BE9B771380B70F6A35
D574F3EC150BB5173F56B8A5C5A2BB74CCBD4F1B49347709528EC9648A39BCCB
D5737257108189938F1B8F7F4C46943A761BAD9405CAC99BDB80DF46B368913D
1F3975069C907199E171AC8A5ED11123DEE72532BD69D7485862C4401A45B5E0
3A6D5C3193D0C24AD346ABB03A24C941319847177CC07FDE86198602474F585F
21814B598402436AB8D187E6ABA8C36F7E78A1FCB3F11769DABF2A0A2EEE0728
75ADAC6E0D0E48F4BE2151B2F5FEB44F59F25CF9C116B9C30B9E80F8EA81A60A
108282ACB06F61C50ADFEA0C2917FFB4DEBEB20ABCFEBFDB16A0641C82F13883
F9D53A2D7C3C39DD096717EE859D7C2D9A2FD553359826DBBFE9E22E38E0F202
9F77AC82CB8A9B5B7B8D3A9F8FED5813CB526814AA98D3D0A708DC2DF71286A1
3C7AC73392FB29631B64CB7110D2488313C40486C0677751DCC3B4B0394BB6E8
E6BB46A4DDBF70C062A45644B1CE776903D5EF0CA24784A1DB4D790D552E9D72
49955FE160E379B148AA93A8CBD328EDACB8E3A599A2D30379B3DA9711A7366C
4FAB279F4302DF9C9D48B234182FACF4C1547592558767042CF485C8B7DC28A5
867D618D85A60C946A7632E2AF5793F52AEB5D73A763035E63B3F886BB21AB72
51907117DCFD48854672A4451824F344C2563BFAB7A1C7AF7B9EC9735994C925
4E02FF6F50588F672683326DC1E54CDD8A7B0BC8F7153A1426EEF276069D11ED
9BD9000FF23382B2D0B95B55ABF4C2B0C4870C8E6F61008EA274290FCEE0AF34
7B4FECAF2C8368DFCF9AA0C33C791B05165052BA6E8A1014EC40B77814451D03
E26C8C9F8C6B7B9962682FC8191D69F67BF88C6CAA0228634129D2AF0315A390
0181E21A22700A87C299AF1B9FC0792BB40CD156659A6B73A5C2B8C70A6D14EF
5BCBE54593D56AFA0DA6E53B4762345F00D33E437BF06F8B6A3442610AC354FA
E051382B124072BC0D13A18C21E736E2920D39371DDEA388457317ED0F6CCB9D
EF18F9A17188A81569E1B69E322059418450F3F797D883FC8742BC7B6E84195D
322483964AA9CEFF3EA00F107E3B1518046075AB0EC641350D1EFC9F8D7D998C
3ED8862094CF3ACAB06D51B44C70AC66CF3DC31C24AD166CB3944D99A75DCED5
96EFFA1CF769F4907880134F6DDD829F16E47D23C39AD52B22BD4A16B3F8D818
EA9EFC3E021E154168E94F3A5945C04A10A0CE339CB2A612738A3A714E6A0A07
9DD408226AEA924090D1CBFC4988C5E386CB2E941DFCE60C71E20321F93E7B74
7BD6AA011BF90B21040E8B09C04F7D75B17B2F16E43F593E54AD3AD771057FC0
D4926A17C418A79E0D131D2770EE1168B09FCB964C88A29A856CF07BF6629B4F
912225E4E007D055C191A3FB5ADEF3CF29553FE07A7E75F7520F60C38786C75D
542DF2E2DE86DF8660274916BE1BA4CA1F3269C94BB35D55EECE0180E07A50F1
782DA51BE00DB90056FFB04FFF49C8F66095247491364DAC9BDEB8AD06F54C9E
A5C41B05A21F72B102FC11C8A097C1814D8AB06E34EF8E876023236FF4B66690
712938BB2FDDFDC99AAA25AD6810541DC2C630A67AC5EB4E810BA750717E4670
442D8EF40B50A4BC2397DD74E7ECCD12E574676AA0592F0D0E59212C682B964F
F012FFCABA5DB5F7B3828712796FB320785FA4B1E1A61B9F443861A6764E557C
ECB5A9AF76FE1B719AE796F5B6EB45D597D870F23A1FC14C6A8323B06206450A
E9D3BD22FC16D82DECD741DC391D232034059B33F78993948AA11DF0545AAD13
761F12FF2279485E090356EC3919FB89065ED98CEE8E494B23F473791BF9F6D5
AE7F28784B4815B8CF73033BA32D6008B89720176FDC663E58E7DF9C1B3B4A1A
B06A04B309EA4DF0D165B74965FE7E64E140B1B6E6ED879EBB3828AE57E89362
6D6A6B412117FA7BC82E722DAF3AE4D30BB64C4A59E23EBCCE2E6076B3978B97
EF69C179ADE9DE5368DB03EEA60153CE19AB3CD69B4380D32A7A86C151B762A1
22FE9B73054AE10C8EBFBF39E02C47A3E4239961AB7A65135BF508B4CB98E1B5
28A19A2DA75C4FF367E087D0E48771D4C7101C7719C216B789C905BA7E5AF695
D44640348F5C7CA372A9C7C4FCF861A103E371FA41B86426F794B2A1AE3D214A
FF3493BC74ABE4F3119A17EAF84AE17E3E9326E2208483BB73091FDDF6CBE68F
57625819D86D486C7C6E800812DB82B7B7D4A849AE0732F89FED1E1460CBEDDC
58F4465488184F219EFD5638A4471EF862B406A8E5451FC669CDF678F7C9B55C
12FD923A42922794D6B6F9B61C9F8B03EF79F8FB8CE7C6CFA4535A25C922AD1F
F68AB7C288FE83C44137558FBB4ED356944BBF51C1E125C2BAEA53D385E9E18C
4A49EE7B8ECDAC62DC739E2060C0FC1BD048BE16471D811569CBEC1B7ED0E2E1
6C653C6C1D4410342A2B7093A3F7030D2A06C44FD263B4CF6804C9066ED578EC
FAE3570B5E2E37512DF4967EAA5346A8CF2D56594BD31845EF6BFA0E83CCB996
B82AC19AF975A8D28E2F63443A8866950C44AE2A2292D3E4D1D7A49BF95FF0FA
981AB8B56EACA7043D74FE8BABC1D13DB4783C306AEABAE9397F2A5132D864D1
EE15C210BDB0C370FB1049462C63A0B6D795D7742125DBC5521989575E839ACA
EB9AB361AAD79CC19618CF0C8F08033E523AA8313C2A7C978F3F58E936728075
1B418C829B8CEA1FEBE62DBA3AA1543F24A00C3E13C502F2C09AD7A658A8385E
6D5FF70F0BF582E54113F0D223243799862B5038030C7F5D216A2303C33F11B5
FAF258B6504EC2F0D1C2276B4E1FB737E413CB85B020D3E3F22BE45C2D6F1AFA
2B762335BF37ACFA56E1FDE940B1172FEB292DE03E50A6831C004ADF1494968D
5D9B8562378D460A1477C87825A00AF832AEDF3CD8F086314C680490FEA4A2FF
22F84B21AE4CDE4A07B1668DA2D6EF9ED44BBDB151EB9BDFFE71402B19BDF83B
FB47E07F06D4CDE31356E97895041D58ED7C8175377848092DECCB9EC1CC6646
747A22F0301997B8F6DFAF70088E031575A50B226026543291A5941FF5A10E98
5C06CAA73CB2E92584636C0AE998CEF5BD22A14C67C91483B3DF8924606155ED
53A1D6205FECE23D729B56C22E2E5B62CCDC4AFDD52491BC77AB4E4D29D432D1
D578B1F16FF772D75886791260ECC73EA9E55838E0BCCFFA46D905EB98A3E61C
9E630861B8E566A000FB7004015917B92D3BE5F7863C436F5076398F44274454
E4AA7CAD310E60D8BC4AB7283AAA730440EE73530D6C43226798A856D01313F2
B9468016965C81F5020C9C6D8A7A542072530B0E072655F7979A56639CA4107C
0677F25CCA1B2063C77878B0083FD4F9810051DE1753A1FEED92266A845117CF
FF245AFD2E8E5BEF95193F4267384FBD0A9423E05CBDC2B577918075F383B3F1
BA36952DCD8CC96976DCDAE9725A034284A6EA2037A51BAAF6421E02E930A367
6EABD2F97BB709A24463E0CFCE320C419B2C7EBF18C721520580C8639C6F159B
BBE9A0072B29698D78E7B76CAEF16CD3EC2994BB4BD35138B08087EDF2E2CB4E
D3FA8CF5756E62327DA2F8140776A2EB3D39DC889BFF9FEF74B020547C39B0EA
131465C6B0D609BC977F8A14A61F8D65FF8022545893B425C21763EDFFE39A1F
FAB816CE91224EC4A6B774FCB37EA7F3704DCAA784A31205E7FCE5ED874D5140
1A16F8EF1341DEEEE8A707C4DC64732C1ADF08CCB3471582FA7418A4950D5982
4ED1A093EBCA56302BF10C4F90857D028F3543CF505B0C6D1220EC691FA2A168
162CDF05E7566B04D99F1DD333992998F6B9230D2A0B26B0A8A9A52BEFD1A832
5BC26FC54B84118057240E067930A6D07BF136C8ECEBDD37E685C600B3B2A383
2DF7CCC1500DE37FBE4FDA49D82CAEA7F7BA00E8B9ED08ACE96BE736EE4ED2A4
958617DF8DF589EFF7BE8B688A361044EE4DDC2841EBA6E7A8C1D0BC27A0A7A5
9C4ACD46C9429F1A35961E9AE07290B37837AC19B46A1050779585EF842C7BC7
5BE3B470DAFC00CDBF7319457F47567A9AA1CD0DAEAE1AB1B4FF9CC8665A3C51
B5D59C45457F8D3D33504504D8C4494C076177D5173F5635455BD6FF14D6351D
BDC5D19C5D19FF432CEA50312A2E70F4703BFAF714F381ABB3E2B00E5722E22B
CF0A6E5E3F80A888B7689C1C5E024AC613CCC6B7436C86F67B92282C58FF19D2
BC07B5830AA3D35B278235CD52B8F789FA9DC8E23CB2EFD2EF1F22F061F9D45F
88B55FCEB02D6F60FBBEBC4008D05B1C49C3B35E734EEEF91E7F400EE12CA4AB
C7B6E38F1DB46C975348C63AD02717F71E1991CA52B4E91482A0DFA99F57F379
E9BE619F5195E155B675D3D3AE7F05CF928758786D9DE3C26BCCA0F4349C32C4
D432C913EFF545DF9422F88C9AC66E224B3247BCDD3D9879EA5A68071E28EBF0
0F0B5BC9EA4EA77482F8AA8DAF25D1AB34FDCC9039FFCB4CA9E7ADE518CA377F
DAD5D9C76F09FC2E1D9EF3C5E74CD3CEA8E777681B3EC6226783F1AE42B0FEFB
E50711F22D85CE2F50A188F43DAEF05FDE35BDE7EA2049616D8D3F74917421CA
3EF3D62EF1CEEDFE0241707847B339AF3764A0E73E3314707D5E6E32D6DDA5BB
B6A77D2794F0C75B2628A57750531756B42D5D3F65F4E42375C0781F6D5BF2AF
DCA2630F1CAECA7B1CF92644D328CF7BDE26A884967A56E0ED1C7393A5D69FE7
D322EA900CDA1394F486934EAB593E533B8700E56D15B01910EDF703C5BF6F57
D22AE2797ECC02A992E25151BABC7455F99FAC308E210C6D89E26C5C1283016E
57A186D0EECF0F20ABCC0D24CC8C08D5D985DDAE015816E655032F78C1BD614A
00DE682565B176D508B97FD399230B9C0921D28A9416FD2D57739C81401F7210
734065E6CF588003B7B4ED054CD82C96F3A8D3218A5ADBA88B4FA08C80285E38
C62EFECAA5DAFD97118BE5BAC5557A1046AB37F39214430BCF93012334DB147C
98B1D14D966E0D4FEE4772BB097ED2E47A9725EF886E783F01E1B69E3DF1AC80
F8FFFD39A687303EE61DE6A64FDA6277B14E5AF55EFEC8EF68EFDD51297C44B4
B2826EC1D34F24F137E539D925B0DD44809135696468BBE74C6691838E600146
C44D49BA47846EAD20440D7F4926128EEB51D0C09FBB3FF896483930A064FAE5
4A2294C74586D3DD54064DDF4364EDCB99A584A7BAF7A1F35DF5093B7CDA7F25
1092627CA0CE8DAC55FE84A3CB223C22C5045B02B56D013353622989A63F53B8
FA240A382C59A278B7BD5BA6DF2F7EC8B4D102B28BE0795577494ED962FA61D9
6AB5F717765B461CC8E31084024D0D4C560D103B00A26A66EBCDF427FFB1FDF0
88978B91804F362FF73F838209A249087BFCC6F293085CB54BB7F614C779253E
7B4425BF9CFD3E64509C0E17D631C7F8A8306BDAFFE0F40739A46FFF1913DB07
C21861C3ED12F17430349F3320A3FAFBE59EC82CFF4F9246859D88A2171CD1E8
AEABC46E892F6EF8428E27DB4D5F8C17DC87CBF476F5ED4C048FE606432EE212
F87BA5A8221A84A7C9E7EC4484232BBF21D1E298C12452C28FBD95D67AC94604
A0D1E0695B7741AC9BFE11777F36DE3F8DA29FF0E606D1ED7577CDC9C4D9CB1C
5C01940F240BB07C32204F4766C3C7F695105B04D3912BF9FDAC8748A60BA9AA
6BA6E3A1DF5033A30BC2D853932525E99F89907D4E496BB4EC0511202100FBAA
CED0CA24D36D578AB5E7ECE43FA2D85D65E0E00A7D81F865D19D39B03D657C65
59708558758B4A83603B19F972136670FFDCF98BB6DFCA0137B53A42323EE42C
1CFE611787C952D533DDDC891E9C60489510814E4FE97221B1424E32B15E6942
7B3B15265688BFE78CB32E0AEBE6BD0EFD2DBB20744511E375BF555FF55CA0E7
76662ECC8ACC51DD1881B27DE34672E9799F1A89AD23AC79F8B52229B06BD025
C3F5D1A08FCC1F6F2DF4B16CC6F6E75D3478644C4EFE51763A6BBD73423B9F06
5B6AF20910565658AD501262317FEF59CD21A7157A42654F1EDB2B39D6C0E0B3
91AF827DAB430FF2E48916D9E67EC8A7FD1DC69E94B76F6EB9D8A9855641CB31
512C5DE6FB1541F40CADA50A7F2D6FDE1AE59F5A0A26E31155AB00CF17B77ABA
EB31C82AB27FDD13ADBB90BE20227AB3DB62E307232F92731C221D5D11BD5A33
BAB8EB85B64619BEDA0C08CA5DE1C9D0D0980DA8C2FB4A3C3FD1EBE275ACA61F
12DECF54BCF20ECD8C730CA54E03D34DCF5C41C774F2670E1B1A92DC4945F4BE
8FD17DF36C91F3DBFA30DBE1C2B379BDC3E5BED447B2B7EDE7A61A1E424444B0
D676049055C0E109E1623BE7C4CC599D054BAFB9AFA1B3FF320C55F9FD3F10F7
1E9600EE0CDA738751908ACA6489433FE0BDA33FCCCD7CD0EFB9CF20465A9141
AD2C56C3A70E3E69D117EEC0C617932F0DA7E165DAAC8918099C54916D49D690
310E78605C2143FEC4BFD21DFE6829C23C5D0B2DB4E16AEF6C057D7C25F5345D
90E5059DC0BD55AC360F868864163395E798CA31E9E155814BC16221ECCD032D
4761F00FE1085817109C44A9F7AEF02EB8C8BF983766559A53C02E073794C893
B9CEA5735DF316A683EFACE0ABCCEA52A598BAA32B1EAC009770D946F44B9DA3
DEA5909A4971591C710366ECAC12405F80F2B96147EDED17B05C328D3D72B03A
8D5B02223D1466A29F78B8FA7451524CA810A650915DFCFC05F53B4C42D66C5C
8E68109C97CA632CE61475E1518EB67C27FB04C74FA84C1A47D8C960D6B0A97B
CD7EFC7D8274025D3FD79B3AB528548593C75DD18200ACC65EE792DAB25C8E2B
22D0BF872307E08BDEE00DE4CCF3429300E8E15C00978D8A0B7FB0291B68BBF7
D469C92C458EBF5DB2A6B8C709B95E5DEEB834033BCC4063D04D63444E5B6011
ABD75C938B1C0A5838CAB0B1E0DFED74C3747AD994C0BD79F60905B58BB839A6
4B633F6BF6C5A6E976BCD9DE4629B486D433810DE0FE9C8A8D56BB65F17F5364
090783923C87893CC5E08495BC13EA989E0E0919A4D8E80FA3A1C5FBB6013C96
AC72D108A51A3A0E51FA94D3F16196B92A389D605961371C060AE2D76C69264A
896C90BB3CE640754E958C05ED92BE0932C9AF2ACBF3A8ADD3E09C333A795F3F
68F0E89A3F12451A445845F0420BD943D327464F736AA51DBF35D8BE01A42269
0A1A805540A309AD8C66E8F504EA4EDFB31A90BEA5EA4D550ACA373F907858C5
67103075AE4725E17D26A57E375DABF6ADAC1307E1DFFBA5FC9D6BA371204866
001999D7BE164A60C65F1298320DA5A9C7EDC0E4DFE18B952CC3DA22E18D5A5E
D0518ADF156BEEFD30BC9284E46984134E94CEDAD682AD11ECD3732FFD91E8F2
117988FC8FAA3EB23BB2239246903B667EE5925E31B722238A1A8B9E33EB6EEA
A93AB8BF37B43E9B420F626E24F7B92CC38AFA166E4703303AE139A956775A93
F410765631AEEA59B70A7C536F8C58FFBB5471BEE01DC7C581080092B32E171B
3B7A5A80C6C08E8C8F284330065D915FCB3FE00D4371F7A0BEE94BE2D65ECB93
E24B38A246704EADAB900899EF5CAD7F74366DBAB925D2FC5DDA3D1BA59029E3
DCC6A2C5413488164CDDE91AD6E2489C50603297B78387919AE93FA1723EEF3B
A4A6B5EDD9FB97913E5C32238201598099609475E62388C926A154F564EDD551
8208D5D42B37DA250D81F184B064916B15A1E52CC7960F994C62906CAFA34339
778BDE33633E8991592FF3321181795E471A52B5EAE61E885DFD5C05650ED7E9
3E9C4DD01077F15D65BD5F0495D9DB9CFFCB201DFB72473DB5D9CB5225F02CD9
30971278B4261B95E1485147064373B878EAA9284976B47F4DE4852244B51AE2
51CB98E21A4F8B5C71EE1169D456F6FE45A8D64BD2458CB36BE1DF1E0B40B21A
A1894AB797052AA88FCCE7C10B83706946DD76E813B18937350F6E0679CC9325
656C87137C3471BA02A5AF237AADDE956F1276DCAAB87A8AC8EB5452E319C523
DD8FC7D9810BD578BFA0601D8B128238E2BC3705A531967A95ED0C6781A01B40
B3827FD06F1DBD2F010392D414AE3D943D401A1D076BA71A8825E71FCE5FDDEC
D44E965AE84576FD04C273753CB14D7111EBBAF10EC7E94D36B254C8D49E34C8
9EC77993EE783F445862F1C8A91FC7BDDB14DB3260CAE74CEDC7B545AA87F79F
8E83D0E1BBEEB71EB6FB5A36B8B2DDF7D9B501FA00CD36811D17296D51EC309E
814CBD8EA5F622E5B03F3B6014ED4AD39C5ADA0336FB9121FD4D3BA671E52365
4B50D51387D95B43EA2A591FA0BE3B376CC185A0B276C6F502CA4F2BD037328E
D8E169ABEF8FB5B0598961A6700B9F75ADA230F01BA22B632BA69E93F0DBDF97
1BB8CEEEABE7DE64F16689A7B925AF06C61BBC5C6F150489A85F59E2B780BA23
FDBD1E8EA7ADE3251856DAEBF988C598AA374AFE291089398B724B434F787524
B5A7946E213D6FA98F5000E0DBA991906BB21EDCEDB45E5159F5E48814259356
9E38E1B9EFAC5197391169CF5FED8324FB70B77D11F317C5D6F0A11C2773E8EB
F28E5EA91E5569FF37ED0A75AE482E2F6B3419D148019E2FFDFA1B68CDB4DA3A
1F6A9D2D3C95A67093D413AD28F853CC37AC764AEC8668E7DDF0AD60E4791DAA
9278C585EE4C79CEF7680001D24E3BBD04E27A75735D879D1E9688098AD4C5FA
C53349508A8DB816436F407EE499B8CB4BE2C243A40BACE28E0066840A6EAED7
383F9FAD25849C4EED92A78A052F495B1BA661FE9546CB65CCABD9237CF40913
732D18F2D1761328F4B3B16676E11FD472CB97470CF85F368FB6EE0A34ED5B7A
181B29C15BB3B5626B9678FA60AFE702542B59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFTT1200
%!FontType1-1.0: SFTT1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1200, tctt1200, latt1200, lbtt1200, lctt1200, rxtt1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-202 -360 1341 829}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA11E7AC15F01C3384F89075B25B2605
942C0A2CECA9A7B578D31EAB935BE7B9AB3ADC0F524C109CEDC6C957EC56766C
0FC50BFC16A9442F5E255F3B0A67EE59204698AB70A1A39761E9B16DD89BB0F3
B2DCDF661B96C1C95C934AB9466827D2E4AC2F341B8CC4A08AB82A5D1E25B865
E925740538369BD1FAFD3AF962D17D14899B1BAD67B780B2D06D6D6743CEACB9
A77A234354E7767050119B9EE47F033B8B3AD59BC17B84C3B929265ECEB12176
454594C17B4C8A9BE7CFDB06CAE1B189B7B72FA023F2F671095CA1679D71C627
40DDA7EE2E28EB5EC2F297B019B93073CE0219E736F88F03E11B8F8D61132ABA
E20CB0C148E47FB495C9FC70AFBF6D9260FEA67AC4FF14D9CE253D43CE471E4B
09C61209FCA852453561C54B179D77D8D7B4BEF2852FDE1CF7A3D5DA6081944E
735D7BB3ACECA094F6717571CC15B2FD29D40FE9AD1BCCE3208DB35EF1515BE3
D4F0CD696FE9B889069B62BD57252AFA4E675A9EBCDF695915446FBA1E0DA982
DE636E320753B3FC033138F766D844E965C1B266F165839DDFAE9127316602E2
0B8635508042F84EC62AC29AE1E6CB020009200B52F025E7D7EC7FE441F242EB
DFFD1341C8928EFE881A3D40E9E62FED03BD3F83346AD2B6C5AC99D5F2C775E7
F7067EA1BF99B552EB3D1EF83AFF1B0C1C58650FD2487C2178954BA58D991C4C
7CFAACF1A0E0F4DF7FA73A74C1813C2348D02916B225A6CF9BE1E9E7BF3D8D34
8873F6E51D7F7BF679ACC5B00BB56FE8532B2CD4138A774184F24718DDD67E0A
154F2D35A8053DEEA29458A13E8CEA3DCEC48548BB1CB4FFFC10B11E195979A8
5921924688EE4C9111F7D23CDC01B08B5CAEF0EFDD3D8921EBD573C4AC34AD46
54FCC0F08C4A9AF4E20CD5C521B161341FCD3057DC2403FE6BC3FCE215E06587
DC9F82B6BE02F8D53DF8AF91E7931CC63F9ABBBEFD7D8363B981B4C8C8C8638C
A3E85620CFC9B0C414E419047BC51898C1AACB830A618E255704716186A72123
315A46D4B1702728ED604AEA156B3681C043CC0B55C8825B44D0994077088050
964EF0FD12353B47D56E7EFF9BC0A75E0E4DD995D2910B6DBCCBA1E77C5FC561
F61D00903019DFE92EEA4D44E9F55577D929DC9CC15BDD8E82810A67A2533074
30956CB4331B6ECA3D2F062637B25AEF0ECDF6D93DCC6EDB5C10DE964A8E6F94
424263E5C12332DF5CC083CF926BB118497BD332F36AE1DF94C9D23A83233FCD
EBB2918B9545B08A390AFA9294B6C973E26B49D2D5CF1B8FB274A16300BF66BD
5949AE73384D30E690328F06818BF0E80636D9349ADB297A2D0511E4525A562F
78DE222F693AB94CAF60F968669F4D0EB43EEFC0ED729468C5637E1E141DE264
4F058C01100D0808C7300708BE33F3599991D07DCF2C91949BF46181AE32B386
AB3787C9DACCC3C6B23AD6C1BC8707A4822F3C035CE24A5C89D98E88B45A8772
E1250A760F11E3244330D83143145837FB44CE9359121E23AA8A9CA6C09B9B70
1C20E811C3B5BB1DEC79AF1F03F937ADC8C60DE9FA7BCC618DD5963566DD674E
513D791E8E13824C1C2F4D025709D28EECB76E417619EEE85CB885D9CDC33C28
FDDF8B550FEEF2FE6BC4DA19DF5F562826CEA8A857305FA762B5C477083AC476
40886D955366BFB43EDCDF27B191A6D35CF856DCB95144CEC2AA1CD2823D9C0B
0D233256F46A5A06571DE7C485DBE6B0ABD7E1CB791021D197F75ADF310542C1
039ED26276723EE577E6EF13635A4000F8F4F61939FA92CB51AC6A97F32C9783
E60B190C331865581A5FF98FEB82C16DDE509CC731BF18DE8DAAE3CF7EC585CB
D90DD7BE01BEB4E1E808FB3C71BA7708C936B0E3C63B90D1D0C006DBFDBF77F4
A08173182FE22A3B3FCFC5F810414634BCF507E7A1BC1231A780403A001CA305
644A55EA5AF926C5646D6ADE7DE0A3931D012BC2CF389D4F68E24D7FAED43B6C
417A05E55564DE2EEF671E9BA70B18C3AB8B2DCC9D92CF549A7C81F83356C4E5
4F3D2D26135B2B69FD5EA29376999F39808C173E0CF7D25C105ED983DBB22B6F
FA59AF34834A8A88BC75765B90ED9D0C3779A1D307968FC725C17BA056EC76FC
5016FB2C4CEFE2D05B0A89C535FAC179898DE54B5857CC846C6676F16CDF8D32
DCFB75BDBA9D6EE548A507D73158928E265C9FA4C9A1555C27C73D19E9537688
EF6301255574AE15D8E216F49C9996ADEDE43E477CB2A8DFD6A7491E05C0C6FC
7B4DADA77311D2BF413CB128327442D69D1B7FB6EABA6F093A46408FCD38B85D
1D7CCAB29F21AB8E05429F3ABD15749A54893931D057D712E2D4BD0575955BBC
1BD97582F13F9899863C4A0F5136C0C24D15ACF07E3CACB0761A4C3466DD14F7
6C7ACCE6A26404B4CDFE96F3FD98C9F28D75A8CFF0CB1362A1838AC6EB52DA26
F442EE498596FDC4250B00EE1BA1FCC50705A5E75777872349CBC4E72381EFBC
72C9A40DA6E47D339A85B5CC850B9CA31DD8F5776E5672D0AD0163FE72A32E95
73B9D7B6B19308C7344ECE4046D32E5949C704C84D10F6D46D625A6F2AD247E5
96234C5F223ED5F7E70869CB5B1D3629A090D5A7E045608100C7EA9523DEBF95
10FCABB4488B685B409A742BB9E89BC5D93EBC44101D873F0A7ACFA36FD2A314
7460C67EA899B19687E500810E65F566A1C695F8D501537ABE3F1E38F2D184B5
5AC1CB0172BCA0F8DB43761F1A85C48BAAC56C78BFC4BA4185765E04A1F679DE
EB0D2E27A2EC80946CB3DEFC26C1A840B15A1B11BD38059A4C12DF4F564FC007
EC71A049E04049B8C28C887F25CE5150CE64CE5E6019766336E623860C137226
EB16D3762E4F749A571A3E2DB2FD0841A2985E68BFCAF73D5DCFD19648E787A0
D3E0E3AD430E4910D1712E7D3EB466D4E4A427AEB9E60BBFAC729B388E9D969D
99B78EF5CB60A0B62AAFDF916119BC09DB32695E34EB7238692EB8901B7A3D3A
4C31C55EB5D0DB70D626793BD8F82BE60741A3DBDD25B2599B59A55405CFD72C
726EEDA77CCF43C301B4FEEC2789B00B4F7AC6380FE28906349462C0BABE4B5C
57B445E575D535567B2F7983D6FD699E670BCE55AA2BFEB24F4F5F3583A0A116
F15F70CC78279E275DBB8177E23C9AF1E62359037314FCE713643CA2B80F6FA3
4E07B1C8F6F2717BB73FB3C7CEF91B81084BAE108865FBD8A79E6435D1F24637
B63C47C0AC7CE26902FB565176F6C84584FBDE63C182B6EDE949D8F732F747BB
FE41B156002DE6DC5FA7387F15F064F42A8EF914AE91715B92EF1AD3D9F44C93
A3A5879F715939E3538A92472BDFAD334ABD669800DE853DC4F08F34E200D9AA
FCBD51896AE8CF172E7CCF93ECBB9B499D9141BB15716F2C7F8734D5F89361E5
2FFE1E8D9E88A9F1C84F6743B995E1D0EB52E57A53519516257BB08B6CBD2CEF
2F86C2CF0929FCE570BDCB5312D175CC526B7B7C22FB265EBF69436112CFDF62
DA92887905B900D345A27F6DBA627291A0941EF6FB598F6E8F9A042925FFD8DB
FEC49C4BD57357716A68372715EAD7D8545C11F0614005F3AB9BEADAD60B118A
93BA623B5910397C726CFC1E60C22B760F2B4E9560A88F87A7780875252E8CED
1A0852A271019D39DB5E81A89CEFE0FED5BBE86FF84195CC472619035AB0DD34
41242258366371735299FB64B0DCCF6578B6B2ADA2C09F59F293550239039DD3
A478447C0AEC3223C1459E378399ED1AAC0173AF6BF28CA0296DD5488CC6272D
903B1911784C7D32052B27C8929594A7A8C7FF2A3DD549CC9B7E39E4AB047FE6
74CEF7124D5C539F51F6B22CB902B5B0165AF3E8C1E3459E49C27455007F862B
B47F7F77C3A59D1D592F25E0A5D2C135DDC50236E385B78600ADDD47B0C8CA4D
1CA42DD1D134DC204B126DA446564C5A1BAA91FBB6B4D98E8331661B1F5CC026
560DE08AA4F174F5B2C60C8CB7079C55CAFD0CFEA413ECB59607683A539F0FEF
22C8D3E6504A6FF7C0C59BE732D6518A519275B36FF6FAC7FD66141D825F45C1
1DDA2A4BA695A7B5175A93F3E804795EBB863B872E3CF2BDD4F50B589B05CA7C
0B29FD66FE0377AD24ACA780B97C153C99FBFF37333E8D0F5F78F5D188F8247C
0A408651B2E6770982F12D56DB0554A9B3CF6D6F613354C8A82835BD68AE7A27
4325D1BB4F3D5D20F8D944A86907AD0CC3D09CA0A2B44367295B33E1D0BF99B2
A5E5052433CCDCC168CB545F38B4842D82FB04C02E57BB179CB69B05CB1B7C99
C5586B725D1FE40BC8A926EED7670054CC043974F7F51C1B692431A07D0A3A5F
BA960F55AEDD5B17DB055E4F3A896C200569FFB416C2D6030146C91742F96F4D
82701FC8CE428876383FA1A5B5F00E507B47AA549D061FBF70D06E9D36A82FD2
23D53735A9CCAC02327C1428D478B2CDA73B11C440E18B5DFA7B72BA41CFED8C
A46D2443301A62E47FF0B741B4B256E229329B6520DA9B69D26AB2D421B09BB8
FB1B2B96806C2644C57826F6783F2BE334137EED89E6268DD69057F351AAB2D2
5E6D9A09EB325F6567CEFDD3B4B7C7753E2E6DA850F1FFF8ED27596DB1D7F391
E34FE1FECC661C017FEEC60E9C0E64772DC84619730C97F54F31137344DC7F5D
3526AEB9951C726032A1B4BDD936A776CAF7EAF2F56DCF2767A7327B2034F428
56AD4C5D8FFF53810CA7938EBC22830C3A36062EBF1F7A215EAC98410912C823
537DA267576CAB9E0E630978C45D32FD9C9976B1249ABC632792E34B5E7ED82A
05BFB348EFEC13DC6CD829EC27C0DE7713E2239F92DE2647ED61904A7ED4D48E
BA8DB8B38578531EEAC6C3920FAB1B2FD024418CB624234104BE3FC4599B352F
6AF5BC9509E7EB0A9B743CBDA1DBE2BF5A99875185A927B558D8989F51B94AB4
2CCFC4C92AAD8041372C651EEEB991962910D493FD49C40B0C2558BE99AD0C78
C4B76A6DD74A82A2B5E50730EDB15F6F24DE765F34159E8DDF6055223248AD15
B9063E237381749814F10EEE3D47CAAD269745A93A475EBD57E5D225ED9BBA97
2EC99403969BD30D2991FFFB34DF5ABCC5F993BD2A935BBF10075EA14B305C03
F03F490A0112B01626232FB9A930E7E7FCEB4C95F3F1DEB3A0F432DDB9B00355
59FB4EF1766CF5D5E70404DD72E87F0C60190A77B922CBF02DA5EED13F9322A4
258726D24031D11883D8B8D2D1E702871F304383D2BC39BA1C96E4AACE15490F
EB0A24DE888C587ABB5E8C73A976724607A124313F9A801BE8891B62C7A2B5F1
7C618820727CDC07AFA44D87292FB69502349F37C4E730B902E2C3E89F7FB3F3
E4E25FA0E1582F9936F3E44A333BD1B8490BBDDE3A93B140BFBC64F61F3E1CC7
C7188DAC6E32F8579F2DB5C7AF8C90DCD1D10C20B0E29BFC3DCCF12A4F4F0C01
CA464930A57F000B0B3ED0457F841F705B1098A5DBAF37BE508DC0A958930CDD
3277063F6ACB94302617CA83849CE60FF411A5653201A8CFCB4DF212F04EAD7F
45976BEE9E0BE18294E04098104CECE9DC44C0A3EA0B34B976E4767E21D1F29E
D4E72B03779B8C88E6A73EFEEF766A6C0082E7D68C1D233B9988BC995F360147
4384771C8CD52DDEC2D7D836F5B6F77A821D8027F7C5F71046865B61F7BA008F
F5BD55DDA27A9CAB663D5CE3A6CF8AE7256ED8ED6170CB6EAE8A29A5AF25815F
E5FF1D45502931772116BD3012294138591372BADF34847A526BF2D7A853BBA8
38AA09F20208DA1ABF156EC0201154C4E65DF8E63B22CBA218A07D90B681A98D
2F7036279F3E64BEDED6A5B796CA36698203336F9CDDF8F28DF3EEA1A634A6B2
955C37F4EC1CB2E77C1351F2F39F4A305933E56A01C805410EF9E75AE0B79688
C1417C23CB464A85B82074E8DE24D92D0DABF05154716D0D9FF77F238359F722
AAB89FE4BB8470C935502201A32FE56D881E9079192E7713088538B7B45201BE
A2FD7A0C367832CC8A959A936E7B9B981BFA7BA525060E8E38C85840CBAE5E9A
CB78754120C767307CCE056DCB692EFE5E7B9845BB0DE14E1429142CD2AA7E6A
174557C1FF3545CB42066F2C8957F31EAE52F815906BAF60486820AD219033AB
1712F2A46FCAEE3E56D84ED42F44893393E0C50F1A66A881BA25C36C530C88F6
424FEC5D8B485A16A330E180982ABF6E443CC32F93AA1815CDF19E6ACDB3D215
1F83B22BFE9CF619A02E659CA508BFB7697284F9D5F89A1E78B7988948EA26D9
29E3B69B892D3E9AD4A961576D78BF785F42D32F498E3B679C18689C0620188B
57D88F217D5C46F7ED30DDDF51F8C07B6436B7F94363EE9665650656F354398C
08C827C06681A641428A830512A85C054544F72290D99B3420287CA2972ACA93
0B94D11F39882A536C00BA88ECA3D8AD8DEF8609800827D49838B5DAD1C037E1
E98002971E1E8F6BECC774D5CCF0051BAFB84DCAF5CCA0126B9923A12D2387BF
D9810F0246FD78C82B8C2501947C4D0E65E0C284DFEF7D3CA5E042A74A1EB065
7821DA8DD73331F6911EEB77E5F31A66256AAF8F0F93ACA81ED296B879F82473
8B6E731F9F5D936E5B5931E302B1ED29618BD18734A50AC03C53A0FF11DB5F3E
DAD8D0B4C19A5D4F7A0EBD8101E155F84B01C154243580FCB444862E3CE02CCC
DBD4021C130CD9380D0DF56C11085169AE0E77E97C145671374C8A460D0AD93C
5FBB475C618AD23A6CE2A4FD5A9518241DC67FC941F007493B38782909E5BC1E
30D28D10A5B4727DC8E1DB2ADED1742130702F22F4ECD9993EBC24B731D4BBFF
F82730E93D0FD0711A346C5B78CAA50792F903BAC08032A3DD099DA1BF5D60CA
FE346D6557BD6CB3EF61FF3B518AF2052C63329AF01A263FB19A11FD16499C1D
DA8862032BDBEEF31D6CEED8F162138539AA4728F8EFBDF7ADB03535949CE4D1
4F9ADE619A53DFBEB3D6495AE49B2DCA67ADF52D61867B4FFAA8076657FD69CB
12B025976445425EC41B3C142969F1E8DD21BBB1436A12CD3083C81B9237801C
E15B20ACD30D2771144DB38672C65FE59E91D2B4E58A7DDE17985427FC5A7563
EC651A19D9F1E48CE81CE2DABE665C46A1425D416BD6968DB14B3E8218842D1C
8F6F9941F6E80230BBE8FEF3E909FF5EEB4E8F35CF774C11375EE132FBBA3640
F74620538445AD7D746127956D786382DE800581D95D6AA4530B22287287A09F
F93A3639846F2F8D9D0C09F9077349C96608A3CC57F4BAAC0531AC014D84F040
14F4F6B75DBF81F3F05D3588BB8FC5E812E399858BA3FE7805631F158C80D49B
AFE507178733DDF2088C72AF4B9FF4ECE0E90D354D59DA9E913606BC7FE4A981
02900BF2F026DF4C4C59CA016124EA0B4EAE0B8679FDB61D008D845D3F92FD21
825D765F2F94AA5F495E82BDC153E1A2BA2B47B9BC6AAAE1DD23DF6B9D30ECB1
BAFEA9AF65D7E8DEAAC0991E8D41B17F7A1BBC310E2EC10F83DD5A880BB8BCDB
C1AC89A8AFF83725B803C9A69C37E53A2C7D274808A1216A139461CBC9EBB835
1D75B4E76D5106CCC9D8437F7E214B87C48E4ABE10D0D1ACCD03982615563EDE
73605E33B1B0E1CC254C82CE8EC422308206E8311C4337297E030CC40799D7FC
06D16F028A304E0EEECB004259E1D4BD53E263A8878378F1C629DB0D93A3B5B5
0143F520C8267213204FF31FB014B6F412E7ADD6268E0896B346FCDD5F307EB9
CF7164358BE2BAC35AC4097C4FB869BD32794E65FF914E1E65B374C48561FC29
3F0D57007FD1104AFC97750AC8A9F8B84418D9CE49F33AFA3CA306FEC9AFB59D
A106E71C8C0A7926AA5643A7F091A006D724CB5D8269817E902F7FC85A2D03F0
BB02BD5BD35498E005FC163DD57E53AB4918EE639F5215D1EC22BF9E8EA85193
EBE4AE08948FDEDECF000059CB7154818B4C8EB83418D13840A391D296B4F654
19D9F90D45174A6C0D46EEDCA741C0762214CA100965B20BD7ECDDFCA4095785
0E313AFF4BF6EE7EE353EBC79D08A0398B53952E236864F84D8736BDBCC46C0D
E782281BBE8AF5BF97FC6FE83D78C11ACA04422DF98578B215A9606D49724F0D
03DFE321AA77AD96270F0C23D677501BC6755F68409D392B0317BF21FE43CA5C
DBAF370AE66008D9D26A5C91ED65D1D4BC8BD82DF3DACE44B0B82B6DDD4DC933
02607172EE79C5CDF8BFFEAB6790870B4C0ADE2A337A8EEA09371AFE39987766
E3DF7358C95CB43D521F1F55475AFCFDD57E0C5B43A03596E15ABA3DA7C883B8
E7606DEDAA9EFB25F516EF79D2369E33AD5279557688CA742C8F5F7C4D7113FC
2FA2CA02503EEDF29EC7C20DD3B4DC65F6CEF4D0161D26A793C913DE7263FE3B
03E516EB9AF8042B1720E744F4F3520F887B816CAFC0480B3860ED7B568DCE76
3F5B0870E6910D1734253FDDD7CA3EB024B5A05B37ECF5F9DF371D778B185F32
AD743E0D99A805E2974F8176AF2D0B95F7603CCD61283BF7EF9E19D351DD10E2
B4D7715A6A94805C0867ABFB84839479C3013B71606AC5B342C8195762AFC6B6
A7012316E7524912B0187287779143A2580CB20B7C7E7B74D7C5E506AE3B526D
C498385CE13B21A2AF5D6150EAAF93ECA369DC289F7B6380597E25B03472D4E6
584D3388132BAD81C231875CEF6D28855E6327CF6312EC02FC81314212E39622
A2029AFAB81DB3E7537C3F8E266C1ED9D91310F5C907F0C93C15A9024370285B
F62115F5B63CCDB8DE2378DDEBB652EEEA889BA2727D5D790C7789C184F2DC9D
8C86E54F8962B8362F11AC3266AF9200CD92354EBCF29B163A35C9D440EF2258
5406AB4E10FE9DED61B9C3B82FC671AF4B2C83C7677F5BDA42B2B4228CFA829E
B00947C8D5220990584A1980AFB36AC9A49A2FE89AF7A4EFF603B57D1BA77297
F8A64D1C43A6EB3B66FCB01DDF556244251C0A6701288584C22D5577092EDF41
F3C779EB8583B1849DE2773D0D66EE10FACD9D11622AFBE84352F2D520952594
7CFBD1D90A82EEFFF7CF0EF32CAB3866965D9BB5DA96D07E2A7681A0B8030780
2BC0FFB26A96422158615EE24BEDB87C87E777668D5E10B5ACD3A2A01EBCE490
0C957D7FC66A801D6CFEB3517B82D1756478B78D3A6FC553C1FA5A97C6C5DA3C
B8708911BFFAD1295B258BAA0A329178C872FFC1DC9775C83BB0334995C15694
9E22E1B528FE211AA425C675E45379541D8D4A8991A930F82571D53D869015AE
1B69E59874252F0D7A50D68043457B35DC723A60A75EB8A93867EDABC048370E
AB4E1A29F08F9C14B623757C226BA6AC65DEFBCC8F13A43EB6CC2176439A697E
9A5CFBC14441236857B1E35FA93A0A6C4042885AAC639F2B22D0BF87DB43EA9D
DD033F1F49A9826D3A378F476308D41B37E84D2536CA2502BB4268FD26B17354
EF47C5D6297C8BCB3538BA532BD69AAA70E17A15A20C1D9E0C555FB196E7435C
64D0EB5E19F856BCEEF235DD2DC448E17E5B01DD80A54683E962767BDEF178B1
65EDEC8C25AE4C93B63E22D7F947BB7C46F0CB2F16DF10662D5E5D29C18C4BB4
813D905829569E8C2D0B08B33C5D022E0D5A8E521FD89C831715C3EF3C9E2E1C
172810C3F5236EDC78FD49FD296135CE7EF30CB0A4938C9D32136B82785136C0
6AD19614EB0F597DDAE81F446C368A40FF89C0568476073DC71B01B22DCA5BE6
7E15E1AF4CFA20F1D3C5EABAB754882E2D3F9095D5FE2EC20FF340389ABF8344
F7EEE785C75ED7C8166671D9ACC947C579A7EF3623BE31DB5D3C3328B3A50162
5272DA93B586717AF8D58D6DFD68D43EFA768EAA1416349D84D1883599B80E34
18BD0763398F5FB91C9C462657A0E42357ACD9DD6E6B1D1D1902383855FD25D0
870074EC95ABA61E48EBC50DCFC17AEB484E295CB39684A4CA1700A25AF860B1
617DE655CC716EECC4D984C7C099456A8F9965BA9440A2159A686A3F8D65AE52
4BB33C8510A5C06469AAA5E1C04E92FA383537BE246A978962F572CFC2CEE1FA
AD216D22D0564BA7F1A25BB7E76E7B8C94EE4453BDDC821EC45491D03C1F2AEA
C08FC3FB9C1D3ABE6D41280817CD7502027CE43F7622FFAFBF71BEC4B964FEE7
52CF0393614BAAC30ACB5266B0144AFDC37E413A01F975AD9AFC94FF2B9FA919
3661E659D769C8ABF9E83D12EFCD64121BE112F5F9748698DEC2D4B451062FBF
B688E1E7389CD52F695498728ACC44593391B772316B9CC043C6D77A6BBC2475
30888DEABC674D92CFB823EDC8B6ECE51590B364587223CBA1377DDD390F7828
BB70D0E24739EA4FB3A7E3607CF1DE95A0F1C4E9BB69DFDB815F105ED9835C4D
E00529987E101B52248EA85B7F11B883465245D3F36F6578808AE6489B9FF8C8
C497A8A6650B855B9426B010525F287393BDE52B7FA97AC620A66CAB40216BBA
C6FD78FF3B4CE163F05839279C5C601E037041529A95105A45C29872C8CDF6F0
FC69B0F51A44EFAACA002116C8CA82508A1046621D3643C4F2EF154354BC114F
36140CBF6172F37E14DFF9D95D77F7057B4C073420A7A62D9E763C0EFA237E33
3A6E3C6D3EFEA669B797E5C4BB9B053AA1053D249E3AA85A3232604EE8CCB0E7
D9D5314EFEA23EB3311872472F7C3CCC64C03CEF1B8877A678F591B0BA2F9754
6E4B839265B67C42D294AB6E397B355257A1811C0009DB48537708D9DCA34A52
06F5706F0C6830A0DE8E5FEB3E4333203E0E4C29FE0F7D2F5DAACAE3173C865C
A81A799CE10CF560A68CE5BBE9EC90D4EB5747BCA3442E8AC493A0AB308CD611
889AB776CB78AA2D098D0F4FE96814AC406544117D148A09566B6023617A3EC6
62A844A76B483FF79AE51406323C7CA86E40E2212CA00284DB3EF9A8F6527DD6
BCC67F9DDBDB9CB1C4B5989A6A2DF1FBE19E1FEE8D4D49CC66025908E5F50711
93E20C5E7C103D9BD5E81C11719A855B65AAA49477D658E5EB58E9ED97F2CB66
518F978EC55D145B712F2C19A1C1AD46AA4BBD9A1DD9B073D6CCFE4500C9A427
CDA49769F27E525E4D6D963FECC2A75A5BE456F4FDA49C67C38C51F45A7F35BB
6AA673F84DB78BEB14FADDE33462492893808D6C41A1AF04BBE7F9714E79099C
9C126893E3092C82E0B5AADA5576052D3219A6AABCD6BDDA40CDB4EDA319B6D3
3F53D813C9134E91EE7725531F8E7A652ECA98C78FE69AFC6E81503EB9DA4FBA
B44E44259299A70CB104EF925650F4237D994EEABB0773F24A6BC3614F7E4C86
26BEC1C379253E7B4F582D9BD75E81CCEA2A7866BB4BEFF24F60924D537A4B2E
556EE7EE4D3A9EB42384DBB27633B8BE57F3804789B5CA177FEDF1500228F047
097E042FF96FE5669AD8B71D28D07DBA048E65ACEFDDA868B78EFE1B85919158
6C14A74783C0FA198379CA35CE04B2CA47EAFA203ACF92604B8270D2B85AC438
7AFE7312DEB6A7DCEE3F40E29D5CD8A9A545A2032C863869EE7BFE52BCA35852
9E56A7B8DF3D9BB21619EEFC2B2A511A96F0BFF12BD9AA37DA5DDF5BF70485AD
FB51E5E31D3B8A985CF7B2AA03757EC2204995E836833B9534EE4F2DF88833B9
E25BE6859A98D7AB1F03C22DA4FEA2E17E47408D4E49D34625C2311705AC33A0
6A6B5D06E8C9AB4BEE437A3BEE98855176481D2C269709A85F4AF7C7585F8945
7DEB92A62FF8F3AAD1B179928AE3408EBB6A413821B766D56530A3143BD91787
5BD4F189854112FFC4AB988D763E29D0720F3475ACC8DDA6C887B2725D885B53
16D92B81434DC659CA120094BF10839C82DF83FDE3D05BFD37CD35FAFC4AE134
C1EE55A8F40837B8C419E8B87F7DF228F406F9770E51EC9AF40E39CEEA91B568
81402F07562905FC6E98994CA35A6EA5D140DA6854D31056B9B6606A0A15AA2C
F2FD9BC138B3134711BCD0C4272A294ECBB6E6E9D6FB03E01C35504E2F110D89
D583BC1FA56D6F762E81FBAD41236893DBBC44F3375A9093550881FEFF36AE6E
3B0FDE3A04F9A0D0F4BF68483C3D239470848D0B49375AC07EAAC1F39A8CDAC4
772651B7318C9516C713ED106573674F36D58DEB5A6612650CE9363AF5F94B47
5108B3A785AC46696FEECA67502D7C143E287B6E5FA2947CBC87138DA0B300AA
3A998A0D256A2EAD2555AC737B5E934519D1FF13FC579EC7AABA31994558E49A
0197FBB2324D642850FA9BA638D528A85A338691E9EF40AEB5D1A06A4DC6EF6C
6D847C2F677A6BC067D090480AF3E10E5626B7EF927D66729967030357EF9F58
45AB48A84A757BEDCD04AE41F93CE327E9DFB3984BDFB1E92A0B7606853B5040
B88F802CA0228A366E11B36495FF3F454E745574255A02CD28BA9E87A1FEE890
FF45C1568260E212CAAB246290E8C82E70175418CD2E78FEFB0ABCB006353640
4F42E4D3CF24F552F5DC6B9FBF62FB1440068E3EC6B36D2B28C06E98438154B6
0040B21ED209BC977F81499A926FA86E4860BA7F3D56BFC9D8253D20088D1BEF
A38DFB481EA08030B750CD7EC74D10BBC1A15D64A8B114B9AD592071B5182ADC
0AD0C2DB915BFAF85796B81569886EB1C9C20C6CE352649E7C0F98456BEBFA26
81CA35197032D357F144156876340C4A0922B75E7EF41A4CAE97C6E02DD3A6D0
258721C0675C45C27CF1F277419FF97A7BFE63B5C591975E184933E1DF2574CB
BF7165183946BF0855A6705C7BD75B094BAD3441C287426208A50CE1F53A0E5D
4E70C3A272CD5DFF38A45647D2F2E66D2DB5331137C21FBA4AD07802547994B3
364AA1C9E33452AFF7390A6D1415DFC86C75567E77A8B604F45E03015795FA90
79B7E58AFA6CB89A6F5A4285662526851BF00F747AF812304F0B8653E0AA3F1F
7DD866B1BA23DD60794C1338A99EB84A0148537FB099DAEA4E9F9CABFE2DBA4C
4E3174738296F64F23A45B817A330FE130D852D781BF33F06B838552A1D6896B
3DCBFDA8573F40F9927CA0989733E374A312A9E59DF18A8E29D459D450F58285
B062AE81E70AE16763E2307E57155703A3ADAEEB8C149E081590803184208463
E73BAB631ACE06A9A9F847CB3C07A6B211D0695CB87D33A75FD9A2851557144D
0A379E1EF5FFB4E64A8D0B2974630C9F35EC6EFB3BC325FA20CEA73FE76D922E
3733D2298ED89ABE2B26CE562FCE7B83720F2C4FAD37B6DC6D77D0BDB06C9D6B
36303CA49A5C39E2EEB55E743FAA61D23A2718138F314122AF2335D915CFC941
12F31EB79E42CF5856A0F0397161046527138EB2CD19F743E6A3045AB479FD04
377525D67D6765FDEEF6F90F1166E1F634F3FF6D7BEB5361A2C717D7D4008F2F
38960F40797A981D1E7F9A123422F371DBD3954CF74E87660DFA7106A73FCBFD
977DD83111643A764968B385BDE9A7C5D81A376F69A88AEAB7388E9661FB1F7B
1128990701A7A98C5630A15607DA830C584CDA6AE851536CDDCDEC21CA8B2F06
13D918F414904BB943CBE880611A58AFD8154C33D63407E2EBB95CBC2443AD5B
7AB0FBB5F001BB5D1CD5E70D018B6EBD3001320C647191126CED53E3678AD130
F4591D3F63B87490338692E1E8CBCF35017AED1DA0518BA53B7329C0106A1379
0DBFD93B57E2EDD9A3FD9FEC85C1A110A7A49B406E40BBD704E1D9F468464493
DF45E65EB504D96B00A1F817359EC26FD759069EE152D755CE80CFC32F9FFD8F
7E1EA74EDC95DEA749C42115F44D65868CE8429DD6D822D3AF15768C6242E35E
A4157D31654746FCD229923D69F139A2F78376E52631A4DA7CF8DE1DB73C2915
DDE0C3BF224D4C202E8EE18C8ECDCBE9229B706ACAA51EE95956C96287E91755
BD247F23EC6EFFF366CE38EF08F9BEC6DF2B7D4B7217D38C76F5B6A4DBED33CB
E6B81FA722A7032E5F26D2D963FBF0DDF837F3214431415CB3D90AE89B30A02B
39B9E306D730D71EFFAC02A91ADB76E6E51F46553C745C52CF0B315523867980
5A8081675B0B825ED15589CE492D8849F59B153758169DF4A890178DE0E5509A
DC09A072B8317F50F378013DF0AE2BFEDD41224CBD871CED84D38D33FC2CA559
E3D6221B3C2EE8176234A2EBAFB5ED919E552578F807B18B6D3BBF431217D2EA
7D143DCC79EAE1CCE3E2C9773B3D779C7B3356777359DF0E7224B90689B5A2A9
B53230B0D079751675725C7312BF338F5F65EFDBC5A3974A7C571BBB9FF62EED
38236A85FAFB8E2FA2853DFA36F070EF946A608766C4424D960571CB822D7995
7F561E4EF1489083E90868ACA76B49ABCF4637D1BCCF1C865A3CE1C713797AD7
4C7D14E36616BDE8148E53097FF2A03AA15DBA4C1708444637CDCD838855D5AF
249A5426308DE15F970CD6FEFCF89EC6BDCDE75D2D19EFA89370B86D1556BC12
BA071BFE498A578236D15CDDADAED2C7D8E3FE87036F394019EE90ABA712CCC0
EE9B3A1C459EBF616852BF40CE8672A37BD8F27CBB4737A8E8AAC9298CABF7E2
37E04092C180ADE6F9F3A9F56AD61EFCCECD82AC1D917A9A7D8F522B2CA316B7
FDF16CE498197B71C57438BCEC02A76A08AB6D730899770B7665423B69866EF0
99C1B45B1AD9554047315278789D0F37931005401D2A36C02B22303E262EAF87
F740D2E01478881F66DAE05AFED762812F049EA44CD7DC6F714650CAE1188981
B82387080F9FA7455B4BA422C38DCF4000AF747944F3C3F6063FD1B74DBE8631
825B386131CADF19889B0FE75B3B2F9D14AD4A2D25D6428C40113D22152BCC56
D91543613B6B24C8804E63DBFD9635B5A9F5DAD31FEC083AC19C7F2CFD2FF2EC
FE2BB10AB90ED83B457E335FD53C0B24133E0A53BFD4F08A3540248476981DB3
7BBD0F90E5B3FD077D8330AA020E737FBDE1BE1ECF9215385BF41F79C837D7F7
164DD4B02F30727162F1BDD5D152FB9C4DBAD95818B4FA2CA454CC25BECA58B9
F7D54CEF2C90C02313B85D1DEF007C608681967A2EA7DC41B2AF98E9D3CDAFE3
5798B908F5087CBF8B4AE4B70893CC4EF461739567058F386433A85BEF80F76F
03F7FE4CE2C72C43393CC8383D01FCFDC3A55959BD3BE5CA703C7E94418AC307
E704AC1DF8EE0E6CE35B7CF75D1AE6220567B616333B839694A6B454A7545A74
764DD340E78068A0660A6FDBB0B23FED933B32A0B1C7879DFB32D945E18B4BB8
A8050D218B2ABF7405C9E6A7DE351875F28CC8E994E4256DFB3A421C4AF23A5A
DD96B4326EA995A46D93652C616EA1976DDBF44EEFFC1C97DFF618F44ABA5E3B
E045428D0EF2BAB093D695D7EDE3CFC2AD47AACCB60B4D9A6C7069C0FA5BE2CD
4E02D80CDF9431D80F01CD4E367FA59676E6BCCD2299E94629D4551810F9CD3C
55E227BF0DDC5513DDDDD6E80D8D0C3C799CA40AC41C3C5F8730FE78E9A3A035
78AB9D75756073B85FEE16E4A8500D58C483D7FF0E0752D104FA13386471311D
6FE24AE46FCA7003A22251C2BB1409CCCE96440E35D4BC50E74F451CD2985E37
BC2F35648BAF1F1DFEC9937F2FC55A1D73E0083658152AD806535CC136845E28
A6F01EB0B265BB441FE03FE3684393D0DB1BAFB4E31B4E6C689BB54227FD7BC1
FF9245D6515B634F503FF1023770490B39589CCEC39622FCDBB945543ED13027
D165D62472DA8844EB5425521407389C627A6866692A13AE4E40B9175F83E287
BEF5068B13984403E3EF522619B691A4A86F49BE122FA587FE7CC1184D110421
9D1C918BB38D121EE031891C93B75DB96D71F61D3D56C1B6B917B6D67AE8B863
082FDC66486CB43C134CA507A2FD1D1076FB2C42C86CEA1DBD69EA8D46CF35FB
7DD6F8927D49EFDCE931CF29A3BA5C9AD2EF62FC194C190E6C42C7145C3A8884
0F5C12D91FE68158CA53371C746F6323E4EF1CF32B158FB833A41FCA23CD0EAD
34AFCB8637B52BBCAE37BCF5B4CDA1ABBA328B5366C0A8B7DAA7048C0028AFD2
44C86C851D07CAE719657AD3FE2A8B8B9B3430AE369885F99C25B80FCB8C28AB
4967A2BF288CEA7C77C83EE8960904B7CBB3F11FAC4E8E00B57F537E9DD8AB7E
65048996F54465E3178CE78E30FD1C6344DCBB7FD16BD20D7D5993FBDDDCACB9
E4093068661EBF66C2301E3DE6320E4F7F571EA1D80C41E978F4E6D4D1E7F57D
7D43F8E3C4E2908095A6585869CDEBF3652FC01351921329435546AFAEB3933D
F9B52C52AB892DB3015125EBBF501709F4E57075B9EB5BA31FC1DFDE1FA083E8
438D25279487E210875AF8BD97C0EFD93E3CD3B6A32946769932A190455A8F4D
69DEFC8B85A53FB7AAD44192B471AE6B46B849A602F488F21A80EB7E38BE27D0
9B04CBCE93C8E10B4DB3F5470C355EDDA6436F03FA96A3C9C4C55FC66752FAA1
0A54D02F0F8146B8F0E983F629AA7C0FE58A6B08D20BFF6D89CDBE75FEC3B758
1BC9516B2F35BDB100771532487C04FFFC8F5B19E4D8D94A5A171C09A11A457B
7EC4B6153946FD25B6E23403E118E84ACD5635E36FDD09A10006230C808BB65B
64C6C1C87AF42304E21DEE1B2A3A76608AC6E26C70B028F9244FCA1877F3817B
234FC4FE47BBCF8D4304CFC3C5AE86A4D3FBCB6A8C95F5BC442A50F05B5C966E
E99D19B9AE4A76028201435313302357E7007869BAC57B97156C9B66E2F0B235
929A4FADE698808449427E9AEED873DFD3CFFC32061617226DF3BBF81A1D1110
BC18AFA59CA204E84772248FE3C6120E162324F02B8B936E6A25054F39D52510
53FA05FFB3FD21FFEF9C7691424DFC328D4CBB6CD429B70141AD516A56DC80A7
FDAF9099EC4BC88932330263A4DF0082E6A8CCA9DBF0640F63672BFBD4D51BFC
92F398E40D9D84BA7CA4E06E62DF937E37F9117E995E70CC618DD5963566DD67
4E513D791E8868B7325B10EFADA7813AF0A45B6152366EA02C11F9DE62F56221
9204B3E2A2253043F3F31DB722360D423C1EBEA1C9B8FB0836D25C01DD80A546
83E962767BDEF178B160E550FEB67DD8256ABA9EB54C0F31EA7BFFE117458029
A12F01FD25EDB0143C36A804574DEB61D73839C43C354501DDE2AF10D9C8EC46
826034D47C94F21491FC191896A26FC7F3C25BACBF1148F6C9EFFB1B3DB7858B
A4DC35147244290871E8BBCAE2F14C074F2B4A1FD38986519AB3C5C92A7C28E1
A84E20D07D9CE00A8F8EFE3682EE830C395BF7B26B2EB9F5E036CBC338610183
673443F10F1D81060208BAA39987EE882F8B8E79CEEB8BCBE39CBD2B709EC00E
C7CCB3B0E70AC145AF92B5FF6FC15C9E5137A409334AE1F5BD13EF6557113852
7C67DCE9D17E2E0DFF3AAFC7C279DA4B6D3BD167A542ED2958E271E9F50F2867
4AC2328BA271A63DAAC4CB05009F4AFCBFF79F815DE1EFBE831584605195F016
DF008ACDF9D23CF6D17696272AF0876B03D446EBA8C68A1C76B8A0E9AFED8866
23FA0804F5B4DD545EEE457EA16285030CD43125DC82E9FD230281E2EE9C31D4
AB518D28F78E986C463E9958BFD22E5F7A34B3C357E365FF9A046D3582FA02F6
B252A681D24CBF5B6B2351D287FA96E36EF84DF4A5EFE88D5B992BCC9ADEFD47
1CD0F0B122FC5389A88F1D8B2763473C5E2AE6790AEF921B66D375FAF9F63A32
3B4FD6A99BB1B4E1E808FB3C71BA7708C936B0E3C45C278468AAEF393E9F2A3B
7A3E42525D2E73BACEC396345E5255CEFF1954A1FF65BF6B92FA0BF68078537F
1E4CC91E86284AA19D74D39D3F5DE89590F8D7489C07010A4817D8B772F2C762
03A02E681176916C133686F256BA43EFBB4B9E5217E1C41C6CAC48DF178EA619
807132B3C88182451C30BA62E4A209B39FFE68304BCC1D825E417BC586BAB951
7277A68A5F2CE7F880A790CF14F0639F7C8C6AF3325485D4AA49934EB722FF4A
6017B12C4AE4DB7486795F64915635526E39974E286838BE79D69398774E6B45
E132FB78F6767B2557E9C182EC4635F6164591C923F2CF27C5CEF0D69BBFAAFA
A7B898399FEBB8700CB759832B9A48D2290676D6B470A43BD44AF81D1D32D3AA
31CEC3D2E56B609E21115B51A4CCDD0454FBD609678973BF963CCA5DAD937E67
7B18B533140495831B1E076887F72140840D8C53F501D786BE9DE6A4C8C97A4B
EEFBD55096295A637EB4D1B85B20CFFE8A10092A15090E2B22D376EC22331C2D
E832CC98CF1B3B06B12F6C73BE688FEFFD6F59204B209D5A39141AAF77BFC3EA
21AA84D8B5EA4675B669723240E8F8DD6170F0361D60BBB3C101F4B46446470B
EEC90328641435BE99DED5563CFAC92D13FE2C070BF1193B816D238709566270
4F6AD1566113768CB0FFF33452686CB041E23CA379D447570A167BE65FC22382
AECACA7C56EBC6A9A99442BAE784AB8445DC7B120548CB75683C6E83954E6F38
BE2FD18655E08CCB83A1E84A51D9737F27942DB14137D4916D4234315EE45112
F37209017C50749D0C17B9A47787705D7FA6F00F3CCEA0D8666E5EF2D19F7D27
9816BC7FD57C6AC8AE75FE8ED2D7879C8C8004101CCA2516498A95DD2816B061
A884ADB7FA41251CCD995B4E81C9A3C2E027CAA7E47CD79C53255718E8050A4D
F570371C1D904C9B7208C336BA686A591050BF6E2E0609FD9042D966342BCDFD
DA50FD8E0EE1ACFDE72786615E1ACC4E17A966A2BC17B46E5DDA2EAC0AE5BB3A
EBC348B3E8032F940CEEDC27B681958E225001413A579A6CAE56C93D1DB50D43
9E9D214EF74E2E77D9DED2E393368D5B739EFE36171716B71BE295B620B9E745
F4A05BAD737B2A2A8964806BB2154E6B118DF33908E6BED58E080FB76A44797F
75EFC94BEFA09929F749F00FF05FA04671219CEE833271DD9D078F5D61F935ED
217A3B6C38DD3E7F2BD3FA0E90C144B48FDD245F46CEA3F2CE1C8897D53B6500
4DC632CF1CDA60BEA3D4E10D331ABAF8A912631AA40A5473F4DDFED8FA29ECF6
56643A7BB88AEDB40D42725A9FB0214634D678A0491432D70D1417541EA61390
92E6F33B3B0CBB96D321BC4D4552655D1030143E8A0CE8DE1F408884FE98C138
3EDD3F56EAEEF2473FFD63B302B915FF910E63CE41522F55D26422533DECD96F
02C52E1FABF184CB532712D029C7F20352A894B559DC58455557B67F7E1BA724
1C11690DCCB6202EB63DB76C15B5516B778534084B0429E6744524C7E9DE1E65
32E3BFE0D6F0A9B6F880BCA5C9F9B9E36C5B1F99101E1C975A8C671B7A1CFFB8
662ADEBE46F07FD555CD81F0A40162E0A8087DF237C9582217693A51A1A12D71
620C15ED37A68F4EB5A6A8B1C1FC1F6AA1609FDE11866633B7F566D32F1423EE
155688F1F20901EC87FB8A49B81F8C6D23B88EA3A8C46BC4271BBF6D2B38447E
BC2B97A9A588D008AD454D48AA7B421BFB5A70A5D3E5F2353E996B5CF4B43B19
3A4AF2970DEEC061B2C0E9DECE172069E61AE7FC2357FA49DA47AB3DF5455B58
774F0C92C2140727058421DFE12A954C85B51AECB64484B14FBF8BED8E0CA01B
53DEDB23C805F775DF9892DCD3A7F8BBB86A089AB958E84D079E9A7BF9EE1C7D
1038C541DDE632D7AD1DEF69A5A86157BFF0244F1A60D5360139F7D776C05FFB
BE7774226092CFA8DB75819A99CF49696E3D89FC2D9ED262A92291FFFD9D8EFC
F9A59B280CB4BE4CEFAD429E5805EAE43E883820E16131B170F7F1BDCC7E282C
85FF5B00FE98C29A30F5DFF8078E7719201B565B71241DC67E1841B1A3A8C57A
824C7B0293A29C29B867756308626093D9485007295563DDAB4619F6DD76A9C5
5F64CA6884B8DEF079F8AEC452E9DA468B5307F0F25A141E91D31B272746A957
036BF27C1EC8D287D99A05DB2F046C66FB961F688B83F4A080F27517D2B1F934
1A4E6474BA2738B58164E05FA5F998CB9EA795E6FD08B08E88C83A80D1DA739C
0A1C4F6EAAB676E720F07B0621DDB1EA6ED1891A2DB20B0C808A6DFC146135B1
9093D15C45204A4608398B38312BE62154E3661B0247E7619B8C69F24BD9090C
D04D39DD47B773467F12BB61BD3A42C01ECC659F95BAFA45441FE11F56E480BE
9E456CF2AD1F7C8B0165BB593B873F7EFE775C70B21CDB37C62BD779D9E64F1E
342CD6DE6221FDB43A673DA64EB78A90B199AF3869A67916D8236E2507843E37
CFC766057BC9568AF4BC5CAC9052FD1EA5F3DA5EB2F8CC0739A5FFCB03394B9C
531003F02097697E15BF3299C4A78B86E482EC5AD87065E8CA67A3EE8941349C
5E7DAB444167CD3D55A8B92FDE66E53C984301FB4F90C7A8687F265A37620A71
D7B38EE8C9F376DEC918EF970B77B8E29C40860D133C8309DB837F4A0AF7E514
CFBDF2C2EBF42BA0BED18017C740523B09DA00185831850FE284B5305E2CF733
BFE5EE43E969BFF4891BF8C2F6DEB617FCB9E1E80DF4BED149745B7004703F6C
F1AD1ED443547F118E7942C3B7B39135D5462FEC1F705BCF3E58AE548F8B9B29
02DD60A68B18D252FAB891D966755448E4EBDDB8A1DF74D66D53AB4980508E24
922D02DBBC9888C1ADDA38F4A29AE4F045FA0378D86E4342146F9744EEB7CFB8
3AD24C60AD2C0BF54A9FBEB4CE7D2D193DAACA38179977C315D0A8CC316A5FE5
B002CAF62D58EA0C8276256CAE4C11C72BFB27718B74B841330A2A23DA081374
BDFD3EE818C316B7D3FA7B591CEAF2E219087928F3F41D2FB8069A59AA861934
13695546687E7A916939CCD8052FAD4C62A1C0A9221128664FC91DFF73498190
D268900F4BFCBF21F6D15E33681FDC935EFD8C87B8B206C51F9B36DEA2BCE9E7
7D45DAE81C8CF706813C8B6C475264897D45766634034A1CC0EE165451A95DEE
465AE7D06C102B86A3CAC7E3D207CC5728D65B80483BA3AD1227690288C9B435
137D4D76F9F99C71446B581332A84C3D18CE04D23881A442CA1877F3817B234F
C4FE47BBCF8D41AB54D683D59FAB8B53D3D0FB419579005385F59689E9158E33
BC98F91DF932DDED7F16216C8FCCE78BD74838921E315834B8160B41CC80FD19
7E16FEB0FAC40A823273EA447E9184FCE49816FB7627FB3A2D301EFD49D31545
E65619D94CF3B90397E5EF69970CAF3CF517684ED5C21C084ECEF4405FCE4A7C
A97B47B7DE08125A0C60391D13C26C2C0C8D91A3E30C0E21790CBEFF60640B10
83EE351C52D205CC869B49D8AEB78D66CF9B480CD24AC1ECC264B81B6A6F8034
74FA564202DE1BE47DF7CFF5E5CF59018F8B83148024212A31772091737EB43F
E9404D5357992F6D8C8B9AD1697DD088795C8B791E032CA6E0258507C6C0B612
BFE5D590A4692BF4B95CA0B019F98264E3A538B59DDF76292E06897C596565DB
8EC0B1D2011491149BAC47CD6E95256252D02353236A1BDCDA9D6D0AAC8815F8
D5220FD378D2122F78BF92724979706734E52ACD8DC0FDBE7ADADF30D6963BF7
64A7A01F7CE2704A66ACBE6C98E6B125106C80199CD7024CFB9332DEB3071028
3F2F8B87B99789377B2FCB2343AD613C0910200EFBA46127656070359652536B
C11265BFA4EC3E9EC559972ECC4BA2E2FADFCB47E6CCE5D90EFB3DC888D61F37
1DC668B935FE3091840199E01D25E908E4505E8455BE767B65167317E0C0E630
49948FBA78BF203225A5C019CF66425439029A4189E4FA2C64332643E24582CC
CCAE0FACA78A9D14966415A116377D415B6AE56D6325232569A0B964F65E18C0
E9D92E8BB3C17AF9831B269B1D66F44280FB4ED5A8E1E2F1DF8670DE1A53EA96
65609F8664A98E4DAA44ED20498A325704C1F9F7E6AC1A854F8E403D7F19BF82
CAB49A8659A3D9DC6F1B0CE3EA01373B8CA0054F2A2860EE7EA14ADAC9367194
88AC32F72FFB2F1957123E7A3A47280402E7DB438A26BA7FE0A686155C8F5A89
348AE052B2D68A170EA2494C6306635F9B5BE3E7F2D7734F49C949BBD7A12B2D
62A29A2928C196261D66D2CC391CF29085E8F49B14C8D3E84CCEB80AD0046823
9A9079DD2FF98A01C021C1549497932D98AADD0F5E3BEC5F4DB6CA1729EE03CD
B4E4BBCF1FC0273F4BD68AD94B194487B45B6B2EC3CD85FFE1738D2423ED4513
4756319FA22E72C0C5260A6FA02151A650632A8171CBAC1D41B43A878D3AC2B6
0E19A4379AEE00761CB99C9E957664650C827C098C73DECABAA2BB9F70580090
A3B7E23BDFC4CFAE093323981CE7101F25C905C6290111AC1B5028CA3C682E7A
B1B45C819A7DE6B97B29AC83E5F077725991E72F5EB52F045A3EFA21BA10E776
6300C402EE45DBD53B814B8431BFD156BC182CB4A943D71D8AC3A06D8002A9B2
2E91908CAA98D05B9D50CBAA9B3361AD239196E3E6D4040A1989C9A4CF3A4DD4
E41EA47685971093E114A7192A428B0A7A02F1F94B80188DBB551291C90D66F9
28E3EA82998B975A24E26146EE6B200435BBEF52D0AE34E4F64A28A145D11F3F
A2443CB7643ABD05B473CC405D523BD80C70155C9C04D7E7039F99918DCE9922
5BCBCA6815C1BACCA1374CF8E01CBC690B43D75A98B0F695B64BF0751EA06482
98FD361E98920300E033B3C99F680260DEA3E876787EDAC378F5C00FA615F8AC
7FDC883E15AB4B4F064198FABB5F96C2EA8CBAFAF1CC747D6FF41D3D601CCCD0
6BC22D2A2ED511941D4DABA2996277DAF6D236D643E2D653F7B8F17A2277DC6C
6BA31CC103B600BF3C57F343E143BF2476BCA26796BB68BAA7CC57E165FD244E
A1027F9553C125F7325A3E09294CB02100C7649003F84951D69A5AD6855A86B2
7131CCE42CAECA85AD7A74BFD3F82E41AA559382E3A39F91D1585F65A60AD475
C2ADC80140514119D363B0A1CADE1AA8FCEEA48E815FB47A57EC73E5AD054D77
69D40F24AFFC6F87C280A94CF9C6AD915900A44677D054C233968191E7B7F34B
D045C28F916C8750E0A4F7B79B49C0F882FBD6E45137C2DC704204F89D0C92DE
6F89BCBCC60A28C8FCD1FF08DBB2CFFBEF2FB57FF7E5CE75ACBC7A447FBB1EED
9C43553B956CDE98B20131EFEDCCDE81D66ACE4C303FD8F6BE0DF6AE8BA01ED7
58822F4FD7BCE93FAA2F2F9BADEF89224A80236EB3DD549D39FC4BA2D2A802CF
1FA788701B3A1871DB51B5DE6506080A28813437A0B89E22C41AC9F64A4B413B
DE21BC19B95415E86CC55BA147E66ED0097A543EABD04126D1938FC5A0DE3557
923F75AB5E706E5EBCBD7DC4EBAC3243189111E8F1CFF617836A8F7751778362
69ABDBA9B8DE945B5A67D67BAF672DC6D18D1A5DBF53364BDDD7DC5A350D4F84
513A89AABA581B75122C66EC72A3EF1524C077D748C31A42DFE02C0150AAE355
4C46A9734DB44129B4497DF696457AD20B747902786B519D3A485D2180D8C190
F41493BA974EF69653BF510F589FB14A5EBC89EDDEFE9325ABC656E39F53E122
259536E210A1A63ECBF93355E11B89A257114B61254B7318A5169A1A3C9F5E73
461E18D2D780C7C7FAAC380B1275D8F954BF5D7765A5EBB7F69C7EAF47419D3E
81F03B54407D478604919C0B9F34B31AD8C4B05812C9D6AD755392E092DC3B91
B802BD12FD1554FB810CFEDA04566DB056FADB729564274E37B45C59705F37B1
7523CB258A8262868382DA7C7D7DEC388B2670558DCC656F54EF7A005BE2C4B4
90DA0223F5ECAC58F58C6DAB6DF3568E61D37B1C1C5C719DDD7E59A758BD785C
41A35A0C2B62F1D49B407DE09DD4E829ADB6AA42A4FBB1B797E515060A13B56F
7D43530AB000942D59B7A7EFE2D4EF05494ED70D8082A2486E413E9F1CCFFB34
36FD83467EFEAD18AC6921D524D06CCEC3DEE7572DF5A0DF3A5D70E748B5BE02
10482B347D308A7435869B28B39E500E1D7D7B8E26B0BA47484188FC01B0349E
045E13A08636E1FAC744DE320B8B122D39F1090E60FDF2312208C3054C6CEA5F
AE1C1EE64F4871557DA3E0DD04D29C5BA37BF41937F2632190E7D58DAAEA9B8D
C45A14C3DAB19DF8E489055E3A5183E69E7E92FED95B500FA325FA80A8C2EA4B
1BF9E57F37B1C07F1AE8BA1B6827108319B1D48D24D6FE38923995478D4FA38A
3EA07A18D089639078ABD40D7583466226FA041D853D934D5C58D5C6B9023E42
280FAFBA08766059067CD3D7A8EDFC1AA09EA7D3C5E553AB897E1D4B32C9555E
AF9A3DBF9499E904C8A3FEE8D1D796C28132297E81F717820A90BDB45E16C1DD
978FC46C9A686093B3C855CB993EFA4C9C74540AA4E75B2DD97F4B197D07A9AA
D044715ED92A4AE54C9CBC34921FD978D54E034B6F4EC864C20BED380363F868
E93893E7B76D869E0C618255900E6B925545000266885D2B96CCE79C79F48602
EDAE3250EF7D648418878CF82208A2CFF19D4E3890D6563EB1AD0A0D07AB47E1
7888FC2C1C9A3DFA6C31BFB8BEC88309B38D3E1D7B543CAEFEEB515FA56B1DDA
82514B97DE1F5679C50162FB62D3CE795D4BF354F70900B8C22E80E8F2168664
0E27EB60E7C1EB7763E21679120CC4DF850032C44D38BC30586CB2EAB4E3C8B1
B7FC38E8A24CA653C4CB00D9D4AC55BFB53EBA2F3CDC0202BF9825BBBA6F0EE7
21CBD95A017F552710086350CC32EACE14F17F4542A1CDB4157E231B35BE76EE
9F21801519B00E6AA8A416F0366E3EEA2CAF5D87C2B5641C0B1FA5FB0375064A
A5A94293F8B02C15E1B25537F26C7C7B0B42CCA09D6157F290891B63DBAFDD23
2614611FAB63AB6E0C3CD34EE4A471347E5D8927A7C6D2C20C9D6062D06B8A5B
632B5DFDDBE33B18F6256B87FF3C151B19C1AC9D1CBA2AC08E2D54B4F56CBCFF
55FDEC548A7DE0EF5B13A7C257214DB06E45B39B57816991B24E6581F74FE0DF
C036067F516B47B2C5D22D2CAD38CE90C4309DF9E18A0A64621C8A8674077DB6
6E401270FBF826D360DA7926D8AB1E2F847F4D254B9DD98A4BFC0B359D64D431
CC84C6C5B704B279E0B7B5D84119A5B55423BF01AED86AB9ED7C852E8507E953
72559B2F971E9DD853251462BFF989D7A4225AF1CF178B752F028366D84A4E9E
0ADFA536EA08445604401E0FB1BF61D107882D75D1C1FB40D06B955B1E118971
F978AA5243CAE1FBBF5CA8416C53CB94EDC209BE386B8A0F4A86724938F45332
458D3F28A6DD5371DE9A17C93C1493975ECB14AFBD91104F8390E0AFB7F8F252
EC70527259356F8216E2A47955C670C8CFB01373D9C066C7153FC736C6156963
AF645634CC6B9607526A87221D5C655A630B54638CF751EBED4A4D25A87E64A9
CDA6516BC365F05285BBB99A99A1242F55C38ED84B658FB252C039DBBD221CCF
B392D2CD3159C615661723493C068F7852F582E67C63C201258BFB99740B3DC3
127303002CF9A3BA6E2F2FCBF89A45C6A810B11CB683C07C5DA6DFF4450F3E49
2BDB5552535017FED491A8EAB7BF1951145AF312A263A9E5CC7EBA25261B488E
D8F6F358A5E3980789D0E0251C397DE74657E3F58DB7A77F42EC2C1B5BB1074B
8D8493ABEADF59D967730D8C5DD5A5F8DA3FB4477F133CEE7B4EAF99C50CA17B
7D076C6009475F81CDCC1C8DC6B86217DDC96A6E1992573F32EC665CCED5FBE5
FB45BD8104DC7DC7F74A0D295D5D87F120799F3350AE5DDB7450C0CAD0D25184
41A99DF86E6BD0133123530617454A965B8A2F065EEDD89F309FDBEE7B1B226C
456200F67D9D0C576BCF8488A34DD815A9A1A251848656F64C44A4E5083E1D96
1416B89EAABDD6411B68B95099F89221F01144957CE053C7A2A23263CF6251D0
ED60EC0CACBC6506022A2A12A86931370FF1C88A64AC7B2AD724E3E88F2E40AD
8F1607D5085F5B4BE8F42EBED74369A9AD1BACA5D71D08B9006E8896AFC3AE0B
7FFF5EDD73C9A04D6D5354A7DA0E5447E18ED9947BC5FC215206A8EB75A5E84D
53C83B1751E4082244591051E528EF1E1372969FA8011F46FCEE63D6F39C6FAB
A7F3D26C992155A71BC337DF77B10E3A09F60871D2F31E9A4D0F5D7F76C20F09
72074B6E12B0582D2C23372FD1E8D0748F7E44411178D9C5A4009BC56EAB1D04
F95B4C11422AE12ACF74C36BCAD287D99A05DB2F046C66FB961F688B8DE71C98
501FB676C59D680144816E90741D5264483E5EF6E5C8406D8E60E60CC675E4AA
6399ED41F71ECFE3BF1A71DFECA66E0EE5C84C9BE61140BD5041251370A37D0F
0D2F1B01B29F001742622B78EF0C41B98D1A2F2EBF284B683D8E71ED570C080A
5B57EB895D9D908A33B90179994BDEDED13A24AFBF32A07C5006ED4CC2966D1E
6DF77D4A473C0E48987D87357EB83569C4C0D45AE4E72D87D95E425B4DBDF61F
63F27307585A4D66613C69175AE76C589CA8B2F48FD7E2F64F826D535604C001
AE195CF8E71CE392D555666D7292084C9B448800A881953F6B291711008A6E53
CAAC70B716695D5AB39E08558DD53E21ABE5039EA537253B5A055B9E91901C57
F704575A3EDCF6EF593AC5049ED6D1EFBD082DDDFF0A83F38D5CB26E31BA116A
49185F6665F6ECAB752BCE6FD4F9F7609F8980053EE97FCD238221E8E0E5DD1D
DEB2C7D6013A511139864066685144EA444E060EED1868271083E5B8FBC69590
A805904DAB8A4038EF3B8F2CCCD1E2B7D96C6919FF10EBCE90C47926D079773D
4BD66A6FFC865E744107C1F9FCE5CB954A9AE96CC5A283B3A8C6A86A0650E53E
94BA3D5A8C4FE889B13FB2B4F074DC71C7E6BBB21DD38F18F77A31D389B5F652
EAAE78982829448D5300BB08D9891A9434CA7FD82BA64E2BE257C3B6D1E21944
5E2DEE0AD0A6D1415BDCE7BC1EE0E3D80E0B0E1BE8B7B80FD6C20B283D70A4C5
41CC025C6702D2CD20E367A13CB1CA23A33CCE05CA5CA28E96BEBB2509AA8979
C239430A8CA648E7B9399E4C35376EB323B1CB6647A004C5DB73D109CA9B47C4
333D01356B3FE99BD864CF63A653AE5F0301A06C16A69D3FEFC1E8F683B451C7
0B15B6FCCE55460C02947E235AF0F3C861440E1BB64E758817F35FEA189BF65C
D68CCB0D68714FFD818FDE2367D7E9AACA5547EBA2564942BB5188781F73F75B
D74E03CA7BC423D376E2CAA22CB4328C5527865C18F9FAC104D598BFA9133FA9
834E4DB1A12A2834847BA9496A7BB7412019B9BFAAC5D56F0C727451815C52A8
D1DE65812E9B7A3AB2172EF68851BBFE56AC92F0A46BA0B3B19AF6A20E796E7E
D61ADB119C4120D07F3834C8034B085881AD95EDAB3461A1C65ABFFC54E058D3
E91794C8B2F647EFA25B6D2A9665C8D2D47CE6486C31708DD18C4E3B6C41533B
13A3EBE2B9D9430C72E8E3238959C0B076E2800E74C16E34561A6F9D36FB76AF
A88F68BC0017918DCD399C09D0247C1E82D71C4348335109ED91357137F225A5
39D885BE4FFCD31970F8CAD34EEB68EA6DB1587600F5D4AF4615C6093D25A41A
96447D4515DE21FE8B60436A82C09FEFD6FDFA76AE26C27F786C51FCD611C8A5
779169F00624035A0BAF6268A273112DC13C7BD0994D53087A86AC45041DCA3A
9EDFFD1B6DCFE6ADA0E99F6576FA9050133549C913AA54AC012D17C7256B7E15
B045E7F109890F4DF332240211E187F3B9949ADD65CA6F816E510DBF2E24E56F
8CD8BAD2D5C763F7F052B3AC6D8D3185A18F10F21A04C3CE364DD0022E46F865
7959EF975012B4D5AB738930EB7D3F7673EB2B0BD779F6F506AEC2009D38F7FB
6E6CE78160EE1D6F71CA2116ECCD472F24D37A2779C8BC02F04B9DA1A086B2DB
926D0305AA099ADBC0D47AB267955DC8D8191C1F959041FE434010930F82D219
294DF947DA2C07464D36295BE3FB88941924B199061D047FD5EA78FB55C05111
B85DD7F36AEAA979A92F7ADC38D7A9561D505770FEA850B5623AABC3FCB97298
C0CD342A2A527FE06130306EFB20CF288B18DE6A08C5D9F4F76CF3D0943A1EB5
FB5E3292801AF14BB8CF98ABB4E11DC10DE091BAB45EAAE5A00DC7E0A47A72A9
7DD5C727C72CEA5F1CAF86828C9D45CBC37E59B1DA90C2478983E4893A72D023
43FC876F9E429AD49BD464A62122FD64AC6443BAB2441659F3B636DFD1883F54
1CCAE39D3EB838634B5098B616D5AAC7C9C612FF1DC94992D35FA7EF605075EE
162A1A9621884027096F65191C20F76D668D083A52059C14A9C8B7C263924F9B
CA947ED76DBC1B0052666207CFBA3E921143880F4D01BF445DB9C6F91230E8CF
1CC32D55B8458C47B5D1EA6B21AFFF3F861E7AD31A870CCB24CCCA9D2BB20ABD
BD3E727A31B9FF45CBE471FFB02CE4E4769F5784E49C83B1F7383755242F3CB5
8BDB3A351A7FEC480562106878133CA087B33DB44ACB77531FC60DF9E5E30AC4
FB02F11A1CB69D9BFACBE40AF9D6A3ACA61B7267BB5ABCE2974D359CF468606E
B81D3C4B6C268B25B4A16FD49A55CBD906D779FE5EBE3C809D3C270F6B392682
E6CFAD86C7593A0FCA7E11ED2843F533B9FFECAE91870924C3113CEF9A555ECD
ADC12F14A5B209788C9BF4E38DCE8ABA253FCA6A0927C9D48FE81501AF57C7DB
93E0915F18DAD2FDB2979ADB9D6C366646D360173F717EC3A170B6603921A358
CDB75221EEFC11EADADB97AA82213083EAF69BD096ED6582AA92E82077A55DF5
92632A3E6730387C5DB061235C915205F106613AAAA43C1B428B8A10B3CC32B8
84F8B00F6066E6D879752198F0164216DBFF10B89E43150460958A0024F325C2
A91A5A17F75D50AAB563750DB7EE142C244DE726D5E34FB564F13B17C43F24A8
90B95B87F44F7AC760AEF64C3052D1887CA074CA9F99747779FE00DEA509FE14
262B16D5EBC9441D546A1AF753DB146FCF7D7031418FFC78FCDABB2586D35B0A
D499488A2A0FFB07DE6B02992E46291139D7416C049A4A61DF84FCD8AE804AF0
A8666CF42D20CDB21EDF5CFADB42D4244D1A9DB67A8F742F59EE9F3757A3613D
6B5D2F0C616B01B9C6FEE6EC3D882ED7CBFDA2F4A05C51CFE107F02AEFF2F4F4
C41F743CA2016E00ED5C5C3860D5D401720E788035873D057548D8A25DB8858C
0204B4F74FD037431CBCF81722C8EE566FFB041CA181B2EA2D5BAF392D77D993
F2EF232795AEF0D6A65B67F3692DBA5BFBA2578E432EFDD81D819FAA8BA46CBF
49F329D500D00751BC095EC709FA1C06F452E7F4215F6495854188771CEB08B9
D15092FB783A4A11A8E1945C250BF5D6A7E2A9CF12511DE31529F0288E231ED2
A4048DAB5228DFE05BC94A436FAD9E79B647C7EC19F3A13DDC12FC6BD50D4234
2167AAC20DA932BFA4FA78455E3BD43D6CECAE833A83965A33180B0AEC9BE8A4
B576F5C3504545933BF01C0E31E1A4C4C2875B24DC02224CD141FCFACCF05D7E
AC7B38327951BCCE1C4576837DEDD0ED2C921C6516587496EDB4748F0FEFE2E4
6CC68078DFA84254D4FFA18438DA11B8189FAC7329FEEA6BA9AC95BA96D760CE
68694390AFD127A50869BF88C240E3F06FDD575663B2CCB36DD6ADCCF9C36C89
DA157F70CB81E2846DD9FB0551BE250D3A2A3A48C18B5AC2DA8172A2FA4CEFFF
F3E287EFAB2C3C08F3AA38FC9743F598E14B05168076138353B80C61DEB9317F
CF4A5912C5840B3739DFD01FA85FAC0B6AF8B46A5E1A2E4F1AFD467B4557357A
5191BE5CA1D915F6AC029ECCF218A96C1A6F7F53DBAAFC7092242525E50FA745
7AAEA32F518ED45BCDB8AB359B11647E181E9F8BBECA41FBC3D285A49FE76B00
A2D3E665024AE7F32D0EB0E6EEFF235691B4EDD4C2AD68A1DE381636FB4706C3
FEC37BE00DC2D06A3281DD6DBDE1797DB85D9245A5F65F1BAFAAE6AB8DD58516
F54291575AFF7F114D461BC77FA69414980F46784FAA39434CA49D376C3F075D
96AAACA6C816C7475688D3897D32CCCB8E6CA24FA190CD5F09A87008951CE41D
C2B6E4320C4CD300AE72F942019F57DED5403C4C5AF522389ADB619D0DF87E5A
E7B1B3576DB39F0C29EAB0DA4BACFA4A97680C23B0A4C3F910C3387BE15D70E4
A43CB3A1A225EFAC36AC8CD449BB6245B8572E9CEB18970E8FE42912D6658BF3
ACCF715E63468FC43514BE6CB6DFA8E59875B2875DE4F7903B6D0B776DD96634
D833C6DDF70AEC9E27806665BDA1ED71F56D3561A9DF1C661670AD0B2B992DAB
9050B1E62C1B9EAEA382D8EBA66BA6CFF85104A07A62D2C9D5658A0F18579FA9
E6EB440EF1B8CAA8F570BFD8D4ACD132C6B29AC76C82BC66843F4175A92ADB00
0E1978A9EE63EDE0971C24F344C25D09CEC6E1BD11ED4F937B5A53B2F30BE245
C026323F15A881F6A2F8698B0E3431E4D9471683ED92F0F96AB7924CD7EAA240
803CF44B0A08F5D46A50C126DAD1C33C41DBA9F7BAF26E212487DB9B912FECC1
48A6B5A9F0F3542EC620261801F7F0D8735E16CEBF529B43E9F27F411DA3EAD2
EF737EA4129337A9D6EB203764D922A68615B1B71F63D2004BCDFBE51AFE22E5
DFAF40155DD84DB1F3EE4D6F1EAC284AFD4B493044E28E29934A8EFEAD1F872F
3020C2C86966C36A1DE4782F599426BECC46A0A2394D55A759E5C9DE7055603A
99F3B1C3BEC3FC3503C9F4D36F563A5A31A0614F00F3428FCE6C7D2E3451EF0E
7D1ACEE49983A6E5DD3F09FC4026FA1B3E93DDE5C9082A1CEA300989B98EA6D1
52E12301D7511038D2E2CF588003BC33A7696722D1D56628616D93A77062334A
F1D34678C97BB968AB0F167BC107E94C23C551DC8C15995764F5EFDA4D1CD54C
217E33478CE177BE1EE2033535BB3014D84DA1CE262C7253F898C0915BB7CF17
9C9E3F41938CB8FD5AD2E9A32B1ECC192AE02D5A7CE22CCD55FB3152D2946281
1FB9AEBCA401D36537FC8315D18192EDCCA27AFB43FD4342B4F645A6FC7267CC
23171BBEC63B9E088D68E7BFDFD7499C6CD589DE2AC5258B4106FA85B65AA64D
0A0F1FF41447CFEDDFEB21B89461DCAA8566B0897E5C1B2502D683BD000924E8
21160B1EFB587B114D8B69E282F6748C08218825B1988590CFECA2221462479F
272F6B54AD8A3B73CD517C9B108773848FB910287647D38F0A6A260CB0C2BE3D
5CC746A42AAD50E29B08476D0181C366C257397E9BE4408F61B12130624BA585
1D6C6E6B1D1D19023A9654081D837E5ECB69B2702748557459EB0AC8BF416F00
026146C7D4E5AFB62851D1C58767D27F3638E4052F6E7BEFCA59058620D20FAA
2354A80600EE3ED0464BD30182B969C8B3B351D0E111DE3FCD7AAC6231833359
B4088E891B8B3308FD915F3C501BAA1CF372B735F8F28ACD80077D037EA8DC31
714AB4CFAC64068759109AD9E6DAD12AECBBD6B24939D4C913D6ED98A98A4BFE
80B45093472AFB5EE9C9F5165D683655CD5C7ED23C528184499F1679E0E6C67E
A8D11E8AB5D0FFD6A165650BE118AFAF8EA330D13361A2216E33B748CA6D6D9C
5F19835EE7DB87C8ACF239146BB6D2CFA4ECEF0FBC6D01A2C17D9F43A4A09932
3F33B410D8F1587CEBDEFF0ABB73A8AAFFF9DB786D7E70E4B93B617B20F73C55
BD7B091D270D0D2D081FD18B7D66CA59B156EC4924A0A6190D8FA1516864461B
A72292473CCEADE23ADECDE18C9FA14CFF6C22953C2EFE5AC74A6CBD4832C590
5EE2A199B973F0EB40B5F7E8D42764C75824DBBE673EE8BE7C034C1620E9DE75
407AEE709A2305D5072107EEBAC269B4D125FC3B7DE3D14156E130B30845DE7F
9B0D7A5E03B4F41F521364AF698CD4C3FBB0F5F128E4E336E419FABFB11E039B
4E52B29323A686661BC239074F076901D493CC58D8DA984DEAA74C0DF36B72A8
A26670B8E443EFB3FE3D19EED0D6453A58CE628430B5DBFB183DCC97477F8C21
1C2C9E87B98B6813E529989F51B10F0445DCD4709FAFEE67C92170546042A84E
A9D12718D0C46967A42E850F3F5EF2ED794E4F789CFE3F1AA47629F102E33208
5EE61553B99EBFA7AD015906B8F6432B57E55D5001B8E3306F74A088A1B946D9
21F90E423CD10E102F98DD2B22C81CDA10A85D696075B4940B1A7B34C917A81A
20C2BECAC423EFCB573CD2D0DD4DCF5CEA0BE09BFEC5FFFB3DC1914D3B9B63C7
02200F74EDA84B2E70FBC38D6D3AA58780190F135CAD1E29538CB8B7CE69E2FF
AFC93110751B5C7B5756F4BA3F247F1E159EEB1408FD1E8FD65361A1A6F4A595
1947BAE42B7FE909AEE069F20D830E64747FEB7055A6DB8A0F74966019ACBDFE
8E0C586514E96AB8FE3E73451C9675B9DE8807964DD2B592E10EC37AE2049EA3
D57BEC4E43C1DA6938FBF88CBD5697207FAE54A989433863661AF43EF5C41F0F
988A4D89D2C6A4F41460B43D21BA7A45101DF299898AA55C89FC4EFF8C9B7A76
15E7041BEC8D06F7B41B09B55E644950CBD5B5325C879B537E40FEFF2CAC5B8D
E8E0A832C8DCBFA222AD65F80099E5C67042E7B5F2E05817100EEA6E6D9A06D2
4C39143A204085690E0EBBB96D672132CD28A7619C4A2C339BBB543D69245303
572FC81A0F0B5D2E89062C7F76D53523CC317961C98DD89A23AA81A2F994DC05
6166319AE0C7A3950F503DFE91A020793E66AAC88E94BA7020EF9E59F87857A4
DFC9382A5822BD311717E26B6CEB84D81AB576C8C2FF615A7D58A46950F1DC9A
9D3C9E66FBA19417F8DCE55956FA21D47635109006FEEFC14BB2F0D067A4C160
5637B00B55C95EFCADC358CC2F9BD581D96BB25ED058DDF063382245754FB9E2
D79AC4B8DC7A3E410C82A2921943FED17A1E3AB5F5AB0FFBE72C7F9DCDA62837
9F7CA77790C6E7A6F0F8C6C3D9E8FE99EDD2B2F9B78EEA34F54486CC1C24D09B
CAC00263E345337EA05779AC00EF2A861A04F33DB765E2C3DBACD21613127A41
2D756799FB7C19B6BB777671F1852B2C59CC623E0051B1E1E9631A82643ABD4A
03802144A8D024F48D08FD6FC7CEC53D591648D3322CC329DA9679C2B3F6C59F
DD78A8EE183594EAA434E03C9BDA3387A344BAAC095EF9356B3CA5A7E526B907
54076D65FD58E0F7465268488DF2DBCFB4D104F244DFE7D9533A766C23D6BAF5
4D37179C411319E68380144DD5D921D830C8FE8F3F350FC8ED47A84B487004DD
8DAECDA1EE68CC87B7529181FEEBB743BEA31FC97B016070F045637BF6F46DC6
CD4FEA8E1DEA0EF44B4E2129F9C20BF553F64AA7BC0B3D39FE8E7BFD3B95EA26
2945710FE2D708B72430AA671F0F9258F11D6C3B8814BB10FACF6AEB5B8B9714
FA3DBAC05F0D13F2BBC7B17EFFAC53BF7DC221521756CD2DD168E308DDAD169C
CAC40F1C5DE9D0FFA7FE80F879C3B5E9D29F9E28C4445DF31F296D60D64FE134
A8307D4178326B97827B8A3293A13C44123D05F1743FCD8F00ACFED58772BDD4
978BC0A27D0FD6BB9CB1FBAE8B114A64B7FE2F3F45C30570ABD975A7A4BA77D2
C3305F1FEAD60A211DA5728CE5D40BF73763B9139317F414752D07430ED7FADA
1CF7E36331C6E5C80785BD2FCED91A91FDA05AF2A735A9797B38AF08005E1D70
971AF4974CB52A8A3C7B75E449845A09758B06004061E0AC638F3C1262F5AC33
7A4EE5A95256B751476A21DD10BBCEFEC11C286C396E82773FC5C3E21C827D67
D4457900303584F87F26BBB45A5A17E5DDBFDBA158EDC89F25681FD2C7D00283
8045E6BBBB014DFE87BF0CD087AE1A432799BD2D05058373D746FBA5E62BA763
2D0B88E14A897354EEA6F6FCEF0FA787F9B6E6F84EB5E37EB4C1B6E79AE2D3FE
49B10C79B3C763CEF769959E03A07B47558EB409FEBC95E755B0C2223B076602
8CFACCA0CD98EB6581A50B6A67201A39F427098C432F19405895F8C6A43E375C
E4DDCD77EB6DE0154777DC8C1356CE769732E3B73831ED23F61FE54EA2BDE42F
5C0EB3D90E0E0FA6667F46C308BE2D49C4A665FBE09D631023F48E6C18F24F84
69091160DFD4A973CD226F2140E3C7247B96E53FED60C902111369FF81AECD02
C97BCAEBB9512A4C1F23D1840860B0364AFD8597F8D81F1A705CE078FA578CE5
EDC960AFC2EDB8C1D7374260E9C0D2367B9D8F92A52E6AAF677B6E0088B5786E
7914687F615570DF10BA1155E4A76D16591A345DC1097F2360A7322CA69FE24C
6EDBB18D444276BF9E456CF2AD1F7C8B0165BB593B87394B38B8776518CFBE17
886102B6ECF45EE98252EC6A5AB8548EF24BDBA65915687845FC92AA7CC713A8
0E7DD1ED53893DC461422D8B2F0F8475F99DEADB503252B1BEB48B3DD05D0EDE
12AA00D741AB7552E3E595E00168BB085CC2415CCF65476B351D4032278D1357
4FC2C5BD24B15E65CA5B79EF594185E1B8C023F7E083768AA53BDB45FD27EE80
941185B62F945375C371CEE456DF62E587D918BDC79A29F579C80221E27FC119
CE0AF2276F6A38D5E1CDB4073DBB66CB83A812711C25E8ED8341D2893305493B
B7AB6604151A8A8B7F0161153C6E7A079D3553A3AFF84BD77D11B92C05C6103F
C1F6491622A50FCD120B831320B058CCBEA61CF0B35FA3ED30D44DABD2636485
0CA9F9004FE5133D7C43FC920F272F88492F88770BCA8B65639D0B81BB459210
70EF40F71F1618F1F0BDD9E057287AEF2550A0785FFCFA566E50E4D0D4B11517
477D2E391C67C2096897FCAED0CAF98B9D1EDEE25BD10EF8AADE64168CA82BC9
E1B97B07AAD5A7C0BA6B5D04B1794A1B5BB8256C31B3B95623AC9E990D4B90D8
169CE5585CD1BBAE38A5702B179FC85106B8051FCA9794B3173CAF5E55AF6839
8DB90481040920D2E4379AC5B8BD9FBF0598A9E5D034B0EEAC1611BA51145E2B
5D58448AD0D80769C8820FECD7108190A2AA10D3E64A863ABB30D99B5C49627B
B9B15DB88234D7FB50A68B29463262182DD3AD3151E8AF8E69F422D573EE5870
B31AD15B3355BA5A45BCECEBCEB194A93913A8E62EE967B8AE24E6CFA3150B0D
31D3F189B660817520271E152B936834FE81F0E2A593DBD42E760089A7059758
8FD63E5159AE34B4E58A6D4516561E37B4E74610A687C33D03C38C854260A8C1
E52C477657C51E6E47B065403AE261FE43507AAEA4CBE13FD910AC689B6491C0
2D178B0E9602DA2D9CEA57A4C182F5278607F50BFFD5AD8338FCC08D365CE30D
199DD7994ABE92955BE45EBB09F69969A892162D2737CF6F18F86E183FD03CEB
221978AB4A68D7F82BF2C6F10F3D617ABA40CD764376EC8826CFD4C312067638
D882A82481E49AC25B3422B18AEE54B35132440C56AE5F6A95F084EADCCFC50B
D06D4F8D8635CA52455CAE0EEA667EFF23B268A3A63D31DD0E123B539EC3D86D
8F01FB5356F25E99FC2B304330497346889E7D0E219EA78C862589546632D908
70DA7A486A95E116309C58110795A587645CF887CE8DCBA91183309593F38D5F
40A7E2294D03F688AF9E2187BC2928D7ADCD356295FC0396AAECBC4A934EB5DC
D5D425DD52EED7D82390102B918E0933ECB86687F5B8B172DE042E8D72B1FD8B
30092FE2808D5EC4FB4272D8F7ED9CFB158F24D5BC47DCC7E25A012263E3767B
58E4FE4F2E360757E1F8364958E20366340B26B0424DFA236EBCBCF7454EE3BA
D6F3858802F5A0598B4177A11C33F787AE27A721C653807EA027C0C417F7DFCD
F1397A7FC751B62A211EF7440FAB57BB2ADF3242BB9BB96EACA3BBEFB98FEE47
398561EC18B0FBC7E32AEAD1EDD6A2420FE6F7A0E9E2D64BE95AF4EAD0A35345
C7AA38B141F2071220095E7E2FFC1E78A72C086448AFDA5C9BADB7095D3162D4
B07FFCCB73E1E4C70C1695E5C7D5325CD7BBE41E39A6A7C71BB3C062E9EEC824
56FD9BAE3783A32999B25FD41729FA9855CCE3959C881426CE53C48264115FE5
235FC1097577B363BBAA74A12BB0677C8BF75D0BBFE623DBFA14386A7FCB7DC3
AA1160D34887B37B9CB8224612AE42BD00C1CF2916D1F38D7547F6950796F10D
8F50AAB3C2C43C457F5DB64E2D47F4AD16BF46C59C2794CB7E1DCC85A223392B
91FCBDFC6F5567294A7727E9C45EE185C7BA344A0441812BAB3B069D412314B0
30D1CB5B5C8F12D0FA3FBDC9BAB794622A368328FAACBD6B4271705DAD1A4CA9
66A370AE730AF58067A9986D8C0048B74C9AA0C296825EA82DC7A16F18FDCC2F
30423292A66DE097E1881FF5532C50BC18AA67F6BE0DA9BDC0CFD3A4BDB5729C
0DCE82271887FF45005DD282294B9B0AB30BFD6D93EA3F97C82A6B0DC9EC5E4D
7800B614B1BE90A1F24FC8F9ACB288676F9D3A118FD5199A160AAEA3D67630AE
956E0E68421246E1DD2AF658B890E7351930DFD3300DEEC88E340B797DA86500
1B77CF0C653F91D3E09F8AE5861851AA9A50AFF055592BBC502D1B3F6ED01A05
97B6D04EF231D1B2B6AA105F6B9D9DD95D618EC1A3372387B16435D40131B4EF
4F313F7A4CCC8484DA08CBCCF4150080BD208451539B8187830F94D1972E11C8
6EF12E207D2911853C58EE037B703FEF62470467B8A0FE4E0C53943C0A087EFD
E0B0159112D96B14A87B6A5949840CA2441B934805137EFD7D07A2CDA5986A17
39C2367029098D0F4FC73BF7BDEA9CCEC53E5935FC46D5D01FB59A9045F1CBC2
A7B8F158BA930F387E1774B16033C84E5FBCDB30272E2D366297E5B1325D41CD
956C6E4CAB68CC45A0DCC0ED1BD25F9A9A132934079333D40854EA12FE071665
E7A1A662BDB046AAD25B068001114A09143BD499622E6DD1B9FBE6DB94126FE2
C7D7B98C9EF7DF82468069C246B0D619526A2308EDB21281AC6ED1DF1972193F
DF02D18AFF70AD116B224CAC77E8B481D0CD5EBF50102DC6EEDBEF2F9A024038
4B42E8C5BB8AE074D5B505C9F0DF1EADBAC35ACE69B87B865AC090485A5EB3FC
EB0ABD99E167556BAC06462BCFE1850A0FB2F4BE953FC7D45362A5F99126A358
E852F41C6A5BA0DC6EA367DDC1C93F7FD37A430964147F9DE011211565DE3A45
7C2A081EAAAE5B3C0C74EA5A71E20453CD67638BCBB4B4AA2956767DD37D1D86
280440A6BBF71212D7159CE2E490904E512400BA75113556C3401352E120FEB3
B86272B310C1289B23424D7AFF66E8DFA889C3FBFC99701901C6D0F35D6F10CF
8BD6F77DC6DCF97DFC35494E66E9A13615EE00220CCE787D52F64FBCCE41286A
65FE5859305E4294411E5195BD8E3E40E81382C4091FD05107974D71FB6EC6D1
C9CF2E39CBE5D92E474E0C4EB7E21DF44758758B01C5233406EDC954DEE5F908
97AD7B749735B5A7022E0A2E80DD69B79083970B720F498C7F0C583DFE2E1F40
CED98F808ADE0DD185CE305A92BECBA2BA60ACB849708F6FB606737F6E992106
DE07BC36E92876FE7F4E8CEF1165FEA540FF9AE4B6C33FDDF72339F5982123B3
8A4FE44250D87884C842AF06D5E74B041AD9CB809F736B1940D0D99174383461
10BAC019D8454ED1970FAD6AE6231288A5F378433F00BF737A9F71F48A4F90E0
5F466C5D11888EEE43D62A767D7CE30EAEB63E732B6EA66AB964BFC1E1B9CF48
C6C00858EE069492B461D377A0FB9E6225F1C873907B69D20803B8127E7D8CF5
F234242C26A8A5244B5BDD16D4947C76E6F6D9ACCD47BCB59F17947BE0F5D174
2438F8FF66CB993A84BD4C75CC2CA51C41A2B5838BCEA7FC694BE9EF54B11665
4F0E3B2119CA9D46203687F15A6122F9796B94CC3039388E51B5DF1C283140FE
52A10CE397CCB3ED332A26E726B0E9C370DBE1F222741F6D2394B1D7C0907FAD
8B7CA38E6633AE0AECE5E8566E34124559A6D22596C88A617468B870A41F69D9
5A1F364E4419D2AD84DA77AE902EC1A99631BF2961DC66BF088FAA2E0EE6D09D
4922BCBEEFB77482366F774B8C6207826FC6D84DBB64562470075BA69A650B97
256A547508515B7A43AF9590788E49B214AC2CE3354387686BBF9E8ACE994833
73ED9EE90BF0F5EECF3B34B2FA620830D3A42FAC43491CA1614B9DF427D87A37
0F88FFEAEC343D3538D4E12B1171B5CC6366C70918F188039FECFCC37FD86473
172E294B8E3B863C5BF497FE6C0E0C31067CA0FF3B60E3C894E2AD35E52B4015
962A22170CC2B50008B5A9F62E029D92F9CC088E28CA496B3694A67B28A70403
25FBBFC3B2C94727806559EAEF253C9F3D59E04BDC27A0D8A2DFC887D07BA554
1AE37111D67DDC57CF6603041CB864DC4136909FAFDFF97A90A1C7BFD30F81FE
5252DF01D60EB698D3BB466F50CC0470CBC0A626C5E0CA624C3DA9BD8B12CB69
FA04C051F7CAA12873F305BB4B32EFFBF730D72C00E02C44B4341547F03A3F3D
56548282D7E7958770A4EB5D71A034FFE5D8A762180D51873B7519367F9530E3
C173B34ADD1F026AF8FD6CEAB694594E7046257F81B835DB9981FB8839ABC4CF
00BD84CCF48E81976FB6FB011231F67BE3D84EE297955A2D0E7768C839DFC8B5
C07B1DB65B9417C12754B0D533E8B253A291BCB41C0552B4A3D06184BB1BA5AA
3B640BA5389B8104BE13BCDD2F254E17364861F4BB6171370337804E851632FE
397DBB1E0AC798B4F873236DBC801D078E72FB5127D0D4468E8B45445122619F
548F687369507D15AD065DE89A4A109BC3C696590B6DCE93B94778B732F78910
42E857A4D23149730C12DFF27806CCA7B07D7A66511C8485F8C09255097E9224
5A619BD36AB35CD84E27E2FF16823A8F8811A9AF99D394CD9DD11773724B200E
74A957DD70016CCC2888DD3716BCF91FCFA9788E5863F8CF69706CC8AF8445EE
4141096AE9235F6428CE879996374CE72098B7C4A38351D1D55D96123C36C06B
FF209556627D7B5314E0E1B3E44018424371DAD4325805D540AE0B782C9C4142
7412D7F3F551F0D4A2E30D6A1DE08EC91C452E306983E8EBE9B93896EFE160E9
D53F4CD8AB0B1E58FF727EAEE28DC0CBFFC8BD664D4516B6560047535E395BFD
1E4783CF0E3BB9393177A4E08742DC0D4D8D5A5946171F4DBB3340BFD47EC872
A7EEA816071BD051AF6287EC8C29280618049978A01410F19C39BF8BF3B66D1D
BD2E28448F16E54813A857CCB61D964CED05E64A5D321763C91EBA95F3724B36
EDD188A0ED9970995A8600058A0A6A7012561A5480EFA03EC67463CC8DF189CF
687AA45EE27DFD28700A4EA35DBE54D52602CC7AA81B482FF384265AEEC582EB
70357D14CB8A393365CC60941D6E750F54AB314FA1C53A2564B05104928B84B1
70B122024B0D09A4C02137AD5D386992B863B301506EB822497C76B69A1D2205
CB408351C0825E3915A7B800114388525D8FC977849B7F829F0C2A9FCAA2DB9E
02A3CEC733FA75B8229C3330F50A738FF5A95D12A8F05BCC5CE3A8C4E70CDAD1
DDCF39606A7D9D3E096FD4D3CC9E85CBEA8FE2327C6B4B4EA43A00077D6F8B2D
07943FB97668D64C46CD65FE3864F99E0C2F280861477D7F6FDF552911F80A06
8CA305929C0B62EE5065223C7D354381B516F5278AF99001E29D370F50DB8A4B
85782A8F0FC400A7A63C093209A020C7529D18A7B6370D8D77E5BC1988F8CB55
5F7A1D1E4DCB4D0A6FF4F954D6ECD88DC0A31134C25839FBFFD175023566A81C
104A07783F391BF68CEDABBF18CD26661E3666072B619C306C4A5ECC389AC047
284216F143A4C9917F06003D1A363B6A0F7808FC55AA582281E53C94A9A1E102
1BFEB5F6A64EC08B6162D5DB728626A8C87177BD0C0EA2A85FF545FD73EF9872
CB5EC864137685A0902488896D837AEE0E89B437194984574372B9695512399E
0C67DC7556D9844ABBA12A8385B819048672DC1E213D7E263AEB7B22BA6B2531
203A15AA018C8701D7AA82CAC82B9E7D7F17F0BCD8270C3246F8618528FEC231
097F78ADE370E40BEF565CF5467BE1BBE36BFB807A7CADF57611FFD740B0B2C4
D329A3C3C385564147AB4F3F2FC0EEFF03F1B49489DF12C96A0710D544B9E492
AD94D1EA6E8F98C0B32DE2693E86462A865ADD7828E18D219694964289DDC003
EDA512855FDAF1F230C06C689CF751C1B48B161E45E6F082944B740D0B227B67
81563ACF84B9F42B2487D39D57F8282418B20C31BEA65F85A54B56A1FFA135E0
C03CB30AFC043AD7BDFE76A0C78EFE93036ACAAFF639B32E797508216F005450
DF9438BA1B51FD255928696237527A390A9CA64E9E4A42A08A36F93F5800DFD6
F1276B5FE6241BAD574DB48DBD1EB944F147A739B467C1D4DBD6C48EB331DF3D
ACE60A1135F0FA5092DC2E723B35FF480C070E13CB074DB299C6D544E9F2F161
945FEDFEBA3DFB861D107DFD5DB150BBC4D5BB68BAD226405EF4463B1C3A9345
6BA4A62E8B04CE0CB30870EEB8395BCB25171E11AC4B0B202F34B13EEDE50D5C
263A87F20B66F9C0B6CEBF941BC5E8C359F101509510011B2FB47C172B2F4158
DE30A6DEAFD435E764BB11879CE811C06204E73B5B92DCAE1CC02A51EB311C1E
BCF374EE35FD27116D2827318A1BFE555A3A568FC9932E07B00E1A91C4322860
968A6F1A49DD2D36DF6483F2BD02C85C8A024919A6BB2904887573A57E6DB967
07956038708B73BE2C87EDCA71971528D5F9CBBD11F4DEB31E2DD88699EBAF62
4091427E15B100FA0670A9C5BF2815D75404F77E208D54AA5F89960F293FB8B1
FEEA770BE43FD6BDD54CDB6BF0613DC4BBA99F3D916CE69D69A5377A88897F61
13A90E4C2C8E33BF7A4E1E47DAE640ED0995A2D904A469068A7AC1BE6BF9FFA5
3A4FBBB575D8A76E7A1A2E49D0DFF96076450D318F8A56FB6D3D0CF609C4F91D
131CEA848643EDBA3D0D94232DCFE294F788CF4C17CC47A0D09F9021DB8A0F83
DFC325F60B3B3FB9959B1C1275EFBEF5297FF158BEDEBFA2A18BCD1C32E1FA74
3D2ADD14C7CF733BC942FB109C2DE866FAF5273A0C2B2FEE8C3372EF511EDE67
CAE414CB5B8113D72E69551911A380317657E7DD2274781B9B53AA16131598CC
F93033DD9B3A79E954C105891B36B2DCC526032679C936E937F022CE9DDD3127
29934D2248DC9BEB797FD1FED71BA62E2E826925B7B069E27354CBC17ABD568A
7ACEED9474EAF3A72F5F2A7DA71DD92491EB86566EA77C61B536C8F5D3E7F8BD
E89B851EDA643A9A1287DA019490A489632ADC12B2ED03F58DDA14498470C7BC
2BC1FB2F50676A0D071CA4D611F44FBDD2295237E5BBDF84FA9867958663D871
8C1D198B66A20A43FBCC8790234B17E26D27634E2F90CE913D8D522840B02BAE
D6B78874FDE9229BA02338EBAB406989EA58C9C0B7E4B731CA6A43F166992F39
BEBA53AE266512599809F860BC19FCB879761D8A826534C37310C9F16D2A565D
7DCE17E311E0842EA26304A49E9EA8F2B293CA2B70AB35B2E63C80D464D6BA30
EC2BC1476EC00E718CFA885AA59FC30EBDB5BFC3F872C892A3E15AD93BCDF0A4
FB35771AC928C25FCC63A3F2626A968210D8455C51B353611142DD551B4A3F5F
E9F39AAB1EECC3DED5EB0F7622D764EDD956052E8C0390146BA7C5AD52AF16B2
18130824969C1C0183272FFBBF7BD1EDE9C2469B5754B665CC22C41063F2E935
47C777C701E8C5CA21644AB1020810EA6D4C5B147358ABFE65C03204FFFFE014
AF65A155A76AE4C91C0778BBD93C7244C47653158FA25E6AC5A80E6E7F956936
B6864B38B108D05D0167B1976B74BBEA867624B55EFF5C1AF46D431B5DA82D79
953AD8698DED8B2385371E166D04AD8632AC1BBEA69AE1E4AF43FC207FD93C28
5C99D385BD5F656827F4F28AD58345D3AF322144B79F2875794927409DFD3B28
43513322E1AFFB96148C684B60595CF5D5D1C5919FBD5825B8255B5CDB0BD701
426AC5F505644BCD8ED70C0E29B2D4976E078AD86783F236D92CB6A6FAE2C6F1
F5CD5761C4A6FF9386134C8E38AB3BB06F59B0AE6E4581861A68255D3747AC16
2C6DD3EBFD05CD8F99FA0CDBF7BA3F90295B71AE925A93B050DF9F269579E097
C965DE4708C685E8F591EFDAEFE80344890972088D6194DF119E11C2B5D20715
3944DF8A2C9F973FB76D27C1C22AAFAE84349BA4E931AD696565BBB6E3D97341
86DA34B5D0AFD15524A194A7B34BA9C349081979383BEA5A8A74A791CBA35933
2C494F6716CFB7010BD5791531376A93DFCDEFC9C9629DEB23E96CE3F7272662
40B78F25A7F08DDB590863F2E1892217B488126537AEB3EC3D2783D9DD276E08
A668C1F901CA29A0F812657DD225E6652D41ED5997E0D4CE021FFD7E18ABE373
466EF3DC7031FBD980E8454CA2767AB7CCDB9949720B713DF9470E3819ED8301
9EEC1945D1BE4BCEFB7EEF437257A21B089A4B80ED3F2D38CB2E533C06C86501
2B1A301AC9B31DD22B711AE8DD57E2FDE1989CFA2FAFADE457B9F6180C314F2E
CB7EE804598A710B64DFF736C7C7264B278C58A827DCDB5C5F865D9154ADA3FC
B15513F39B4EADB3024C5EAC582B85B521EDF78EBA5AD851EB568988196DFD76
FA8AB157C4B8C65F10269C65F08D9DD76964E4F04D722B1BADF140ABE3AB1EFD
F76CF92CABE0850F0C3DCA9E92E181FF57F9C5A6F924E95A159F7E40DDA31D13
FADCAA5684F0F362CED116A6B2562A94B12D32FAB5BB9C5AC022E71462201B69
7287810AE208F341F8F386CE11C6E354386213FCB0A601560BECD70096CEE194
D8861CD5820C94704FD9D6A3EA2CBC5836962F6AE196AEDFFE900EAE95250E0B
952C4BF0E90D9CAE585ECB5D4FBB0E653E20F17D118BCEF76C6772450F5263A5
F16D275C1713151E5D201DF60F9AB44C59B453DD84A0ED74A3CAFFF0CC4AE985
BA5A029E21E5D9A9030657D86F0479F12CC10FA24B2C64F44099A2635C4DFC88
F51EE6F37ECFC475A53CD73E4FAD0E4EFB03D22967EF1FCD4FD70362931D1077
866D6AFAD77FE958045E41F015CBE54DED6DF01473E8430830C6D669A19C03F7
02A7A13217BDEA4EF630488728566A2171C2A5EEFDBAB481580E7D04D1E50E1E
3A342563E7B433F6A812DFB535A65A5831107D039279B1A588CFB5DDC4158F7B
1B3E030576584DEA754C4B65B1378C88A522FE153DAC81CB82CFA1DD2E9DA6A7
3EFD7CAB44CB712706BDE03A12CF9750E025343F38BAB221A1718C9C12CAA1C2
F658D703F5B502101AA65EFF2B31130044C8DCD8C0148E4806E5705F8F502180
306029261D05FEC5258F026D26F6DB08D045188C884C65F43643F59A11722D00
529BD14AC91C592C8C08A9318C14B174EE95D934E6306515D876470F6E6C4E88
51DC3CC625BA48B47DA759352EFAD640014EB51D6B514749E98C33DCEA89ED47
534AB3EBD3125CC04D268445E332580D87BE4C775A82EC975A102F30D4538D61
5C3CE21BA3C852AF16BBEDCE36769CA4D757C0AC0C8D277AC8FA281675306227
29B254FBFCE451F5195726146A4D085440FB3CCF8804B876A7FD4599EB4B5FC7
B1C2BEC6175BB1697DCC8D02AB576381EBC8ACA84C688576B5845548F337DC3D
1303E65ED21335FF806FF3C1C9121F85371B4A921E1C19E4B2CB99B8DBB9B273
8C853886889E88FC773086BD34C8B88A6D7E9A7CF4F5E0336E43CF5AFABBC666
08855C39550ADB35ED801C151E9C1ECC42334143301DE532AA83E889FB486535
144E809D6A4F103019DE484E43AEFA5E55171E8B9FFEF75517F4C63C8351FB93
DED6068268FC01A137AAC502A914FCC9001DA9D052038784DB4753905B649B2E
AE3559593BD8A707BCA4AB3BE8E2D88252010F72E6E44C76C5C93B35DD335C66
197403664D490ADD268427550D66CD9BFF9D7FCE9FFA647101F51A171F0CACFD
FE28B2B067A66CF34F840A7B192BF3B1882B0DE77529E1A045E453610D174E21
88D38A5BEC78019A597284A98491BD87AD89F78F2ED9E0489C4BBD8EB743D177
40F2DDA66C7B41F7554009710BD7808ACB4E7F76CC4B05804E8DD33124C1C66C
60DD9C6CAD009C6D2CAFC3B349CB688A7665CEA384BA0DCD97D7F26587513843
917524F74FCC26B94E0E27638226B1E0107E578D4593A598E0F5AC3ACCDF8C59
D86DDE63C404B4377AC01E31BCE520DACE775C88C4C7D093A09F408231D83248
C6232C4913727CCB7DC26301857258A08420BFFAEAC1E2B4709ABBA8988A11FF
D04421DF5B715D8DF59870758E3683917255D33D8B048D6CA343A44460319BA4
3EE1D0216C01ECA81BCB16AD73C8B9F0C0D742A99D49169DB1662BFD9AEC1BB1
5FC8E2223A422FCC7CF41376F6C24B2D12CD13D5D7CC49EA3EA9430DC0ACCE6D
F061DB4F3A9348CE0AED2DAB7A999ABB3BD1DE8D3A3A0C3E72615E9B48A9997B
50F1CFAB0364D2CAA68B0C503A0346E5017352B413867987DEC6AA1F3DBB4A8D
88C45F17ED1E9F46B445F9667FC8E14D406D84D4C9D9B86F59765AEF14354865
B4757906EF76D024A74F93F1E980DF548F1C69404FE098E179D4B35A361CC72A
B31BB765D41488FA652F2FF2F2B9610ADCC63D9BD4C81003222FA6159BEA9951
6BF5966AED600E9E7186DA07D8F614ED218279BD32C1E1434F2ECF895CC4D8EF
A4F974131D9D944F8FC295B5225DD31E8E73969A4B5B3877C74D4496AB20A07C
E6BA9D6DA0594094255C64A639FD3FA0F4D25909C2ACA8FD3F61ABD542D37A46
A5BE8986DAA11DBEF8E6CF50A21B65510A34B511DA48366F4E85C8AD1B4C0E3D
604AD39550536D46472B045BECC2AD94916D1020E0988F41524EC95C8DD9A3A6
66C024B278AF5F8BD3273D958BA59A1FBAA1375BD37B0DE908843E9311F33075
FD77588C468AB383FD2E215AF00C4378E32E626F658197FBA2D369850EC8B696
15C3A1215BA2CC74D28A41BC8FC072D4EE8912F20D52B6D0DAF5806900C99041
43F4129B3E8BEDC36A1844E58829140DFC2A5BF61AC9FB59C8A23FC72CD4D89C
B7295B03AAA4838E700B8C5401A88EDA49DA18712E6C941F2A986948EB5F6589
1518689DA7282D0860F8CB9D1322227FAD9CF7D90AEC42F5E5DF887FFD599943
3281387A801F8047678621C1F60EADCB0F336E8A2E39A95E2FBBB0C75D6B2884
F7DACEEFD2BE754B171DF077D34ED8E7E40DBEED55CE09B68EA7F9910D17A2EF
0892202903DEA129910532091E976952F1632482DA12B9F8EEFCDCE3AD685B02
C3D594E40A0278AD8A30248251C8C0E6DB4598784857D3499B71947C63D6818E
78772EF795E9E809662D01062B18D483BDCF45241F7F96A02269AA2783C3256B
351C5F22461CB919E461A9333F3B7AB7E05AD0B40DDA9AA80B9BA98CB24B33C0
D5876D06C014F02801C299ABB470437EBFE08DD54883F9B11566648A5781DCCD
7A1EB6660D9AD35D211B343C245232CDC8423ED2718B2DF4DBBA6007076A84F9
88459EECBE2BA96E3BB86AAA16BB53FC1CACF3613F0E2A4A2C61FBD1BA28679F
D0369BB4E468D156C4564C3825A5E33E01679D6A7B9B21AA869697089704477E
EA5CF72D2439BFDDF66FFC225CF0EC3C674E61CDF441FA141A96F7197E98CB1E
01C7D96C96DEA800C9ADC2CCE21786946AA86B680FD6E6107BEE1FE64589AFFB
5C8103B998F4B00376D3D58FC0E260C971FD65E8FE7251AD2F228C401C331BD7
DC83265A3A3D23FB8E42F112C6F3B750CE084D0FB815CE762B66110B0AD49702
8C72E696F74FB7663E1405C10C27EB6BB993A604B5443C09909A8CE673A74BDB
B1459FB0E2395A4EC1F832A2A61C99CE67C333641683C6D18C2058A81416D1C2
635A04945C247D27624EBC78EBE973C05EDC148A16512CEF58FE194BE463FD32
1EBE6F914B63664B698BD995104D787D241445483D5C38903815B19F827FFB72
2BFB02D339D4E731DF380A695504C7588AC7AF4963B4154AE6E9938E30FD3056
DC814F73A23D009E40EE62198B062F01240302E408D5E9E29F166E2194A5BF1A
E8D259863278E99F32749B319D9BD117C34186BB77146468BBACEA3F4D7408A4
AC693A1F3AF5D6C062DCEBEE18029BD45A61415FD7973A46FE3287CFEE8D7699
27737AB58DF4EF2023446BF1C5534CE090635DEB27988BEAD92EDF3750F18F04
831B60803A3C895668B510421272B28AB1A5A9A6D1E7BC32821D15AD8E566CB2
1A6BCB4AE8CCB854460BF6A054270BC85502213B87433DE0B4EA984744359CF4
68A85F2EC82E7E90FE6E0AF72BCAC34E16FD9CCE200440B100E1BF82252A728D
D53DE6E9483DB7DEE3B389A937E026B42EFFEDA1915BB9DD94C7997A02DCCFE1
2673D517180FD73F0F7C251B56DB33BB4D826488D4A174EF3D810E36AF40066A
323BAA0C25D29272EA9CAF6A35A1EAA01798BE8E312267212F115CEB05DB6086
3C8F69440A15D1C33A48C1FB54A819BAF81794630127A8A352504BAD87ED0468
57E88AA507CB83E12059A1DF1D6C5DC84EBF4198A4BDB1D94E33381DD35F4989
DDAB9EE5E2DC8F679DB2F3E37CECFCE6AD43364C8BF9D183CDA6533FA80D9B77
90307631629FB1261DF7DFC7BBE68E31F3635593D413B3CA1D89A39E3DEE44B9
4D5BE0162A469CAEDAA2E1264844231673E1F62070931EFE909E41A946CA3598
0A800D48303A75ACF76726ED903F96549F36F5B8D473FEAB2B8C8FF0E2589DC1
2BD3E95AC9EADEEF6820244F01B2C5D51AFE3C88169524115C3BE408F50D7D43
A685FC3020EC2C3B8733693DA3313D573BA84F98A3E4A0E9095A6D7B8B9E229F
2EF2571E5B2CE3B7C688ECA2744CCD72BA45EACC9FB58E58F64539A112779C26
24ADD244D667EEFA5F7C49F0D728F83F39F3B4C54D070DF5734DCA437E5DC04C
AC1D7C8055490D45F82DBBA6C149EBEE59DB19F066AF6A1120E116C7E39D18CD
519B7E5DB3B9F80518FA5E7B55ED9C803616B6352092C6B98B204C9923825EF6
441D3BF176715EE43F005836B64F39C1AEC2F2FCB2F7ED1A8EAA561268ECA0F5
04DC92E9453C01A205BD4099B4DC689A1BE317444A643EAA121527101C83F6B4
26ED62BBEFDEA4773BDE45DF1A91EC784A82DF149600FDEF38AEDCEFD9AF060D
C502BA4A5F877E97E0DCED4A788FDCC04273C2FA7052D0E61D948E2684FE624D
0F28E76352FFCB0CC5317E8DF48FDEED3EC2426FB8B603CDA9A4130430FC3A78
97B97F38F66C15C5FF5E16AC78961779502AC78C928EF5500B23107896754D04
49ED43F2D7BDD8E91DF0497A52D56BBE592193D21966CF5AD5F5289A034F664D
A2111B53F774C66451AB536B0E815F66FD9B12748A1501EE5892DD7396860B34
49E9A6EF747506ED461CC8D43A6F93621564FE3A8E0B4C126DB0ADD11712FD25
8ABE4ADCE49627FDB4B268C2F2DF253A7C5C88467E044E0E40747493CB85E9B0
FB26CFA6258B1A63CC6DCF7FD81C97938A04D96CF97BC99900E843030B7F75F6
D8057590C90B9C20B799C0BE895DB316B67CC98C24B9F2EB52FDDB384D1755B4
E45F651E2E02B8D5D7928534E0F9C351B1D61E7EC7CFB485453A99461DD9D413
E8EE67AC3FC39ED824224CC6F0F4690C01322BBFD762F75FF9CFC2AACFEE40F9
065348AB3623472A3E4A35C680E60AEE766775B2B4A18F7545ADA5BFDEC24DAE
0A29ADE7B59C4A80754123DF7D2DE37DADF29EF1A3B40F9F28E94D93C5D0F82F
06A8DE67634F43D20DBFF6DA1FBD848E9D4E9138FBE65E2699E441E7963C23B6
CB01A294EE165127E43B5DBB2724B06044CBF403F7E8428C936F761EFC76509D
3EFD9FBAF7F2F52D9B4219F7E05FC78F5C244C9730AAF04A482BA194F8FEBFF3
3903B2F704CA053717DEB6F5706BA2EBF360030E54213DF8DC5B07D6D47B7D88
778E4D66E24546104DA203DB7365B5818FE3CD339983961735C7BBCD62CB62AC
C5578998E652B8DB5082E1C42EB61BA8B4B22CD4A24603D15F14C19796DAB838
E518A3081206E6BC6C1C44D3C528422BBCCB7CC5054F8D9C9F7C7F96A1F00BF8
D6F153F0EDE7BD446A13DC70E157D47AF9BEFCE1E5B23C02521C23096D3837B2
999A5AB337CABBCC2F93A224C7F1FA09905B7250ABA8E48B2C9065FA94DDDC6E
D14DF0B989D7CBDC2996DCCB1900154872BE6EE080B298226D1B2CD434832CCA
2DA1B2629C4720348E16C8B4510220FA284577802EB990A7689FC3253FC48000
0B448673AF95CC83FB852B511ECA075C8A24C51546FE813CA6367EA5F7EF756F
DB3790A1B8F0323AFAF9A597740B716989D9ADD8740BE14028FC58792A1A9DA6
2347608CC8609FC62CB753736E68D6AD5BEC74DEB5DB855D056920A29A41B5DD
39B3F59D9A597B24E29731EF95F2BE1DCBDAF653BEAA3B43062BD39F3D9D3128
2277057423510E42D69399176D1B2AF86378D7F2FD4D4E0A4A0C7A919F071DCA
9961A327674AEC0DE42A9F649543025952A6727AF7187E38E3403AC40FD9A756
574999A39985BF51E02346959711A4CE777F71C87A3F3450EA9B9C2C6B229F3D
C691E716B3EE829CF03E61BAD4804BBB1A5980852820B97DBA4C6D3C89CF6D20
FE06D4502930C37EC6A7C5A80E24FF0F6F9E6FBEBDB18FA880EC961F521EADBB
518F377618D2E7DB6B4ED85839F19C316F7AF2EC2E1BE48B83B697D5E6CBDB9F
3A027194AC18F49E6A9B380B389E3A8AF6C6224A5E9639276A91FD2DCE3D3BC4
AD49451AF691278D2F695DD2B0248E7FA5734F8073C560FAC4D2550FAFBA3295
7E0A2FFF79BDDBA0E50A0B0581EA2AF8D978F42CB6025963E2E490603CE374D2
08229DEA53F02BBE210D3E507689002BEDD9C415D6D741757D4DA418A23218DA
8DAC862A1E608CA8C6FD6D173BE4F6FC9CD4AA4FE83481BED8D4DAE2E2DDA122
34FD58F2825C976AE00D143F2F84CD6E2D72FA6AC3560FFC92F473BDB6B2CE3F
EA9F65087001567EDAE9E52533E045BBF47340234AA1CFEE62A2A18F8DE7370E
8D4FC3320EACF6E40A581793E741210EB7336D00DD60036A832773247D6AE1A9
4687D7BC2D02009BDC65349889575E37AB15344D6D874562194C5AED4E958408
532E4F84C2D40AEAD3822DFCF41AAA2C244652A38BE2CB0297DAC7BF52C5BF4B
92C92E8622F972AE8E51ED42151EB69AAA6E954C63A77B7A5CB258FFFEB7B45F
5AB517428ED5F14CB1AFCE101671605B60CA3113B7701CCB8416BA0C6D5F3D06
3697F34C5B48B1B69BCE811CCC3CB1C0B601BC0983C8F21BEC6FD83AF88132E0
71E10693C5758702873EEABA6C864C17D0E104AA79C32348CD50BCFFCBCE5747
020D9D267F65DA4478DE01287F36882B331CE3208941202A14A1BC89B24BB581
86457D68066384F60CFBA9D101AE29B1E98E37C37C4A8CC466C68072D0AAF80D
CCB9D163E08C3245BB21C37CC2507DE7D9CA9B3F36EF82B559449B884294C3BC
0D3F94B80B8B368727F5277D5BE2B1B482C6227ADF9A0DCAEB313D3A2B2B7B14
D8C08FB6946DE25A8BB370D1E9FCFE0443473214BADBEB7F59BC2B77563CD700
07D0876F19E08A5B2CF91C9354E26EFC39DC6065D5D0B1804509DB7EF00AF74E
92398EC5E7464AF1F716976BAEB364A3AAD5F5D629BB9D010FBA1A3A9D4F9562
3AA2AD28C126CDA9ABC67FF56760318F90A87E74A9D0743CDDAEF33053F1F6B4
AD0A0F103883B78139673513288DC4595C556C02262C46F72A0B3F0BEFF22E48
CC61E0052CFA26F23B6F925076C71AD7C7377E5FF346378A4A89DF9B5CBDF7A9
2EEDA78D71814BC648C1806B2F0837089BA38136C5D43D8DAB7BAFF45F91D8DE
000CC2063E060292683EEB7B8228C8D600018041B08E972682088DF65B412B12
8BF450C57E5CE4E44E47A95E88CC711F39A6A4B3F0F6907248978C5421623237
DF329CDE0D7CE76D696FB4129C0EA7E38E5BF5D86D7D7EF10B38074E5A96FE1A
34283189430AD9950A9D000FEC23A8EB393F30E7DE35B61307B686DAF51B4AE5
60CC4C808981289AF0FE54C5EE7F172656EB67620F97C1520091544EFAE5C625
525F5093C54B870E7EB3D2F1BB432A87C9B78F99FE923A8AE162AA3FB950D9F5
DE87BB79D15B1C096D116DCAEC4D01C4BF5E023B7576643DAB5408B8FBF331A1
8C0E3D39450B720D08DF76A3FC9836B636A7E244FDD49B37225EFA70051A841F
0F82211DCC1594E8129F719CE82C479D5AE1A1BC10AB2251FB86BBE7C2D07661
06A702A57EFEB0B4FFEC8A61BF09373FE745FDC65787447F945C36C5CB395067
3D857AFBBBEDA0348D0C1C63CB767EB2755A811133665DBD78FA79208596A899
BEDAC304D4F0FB5730B59AE0CBA46BF04D09859E33E825A6B069E0CCE9A3231F
B5B4ECA54F74C107BB9D442F60E6447B50FE8B93FB0664841613AC23160013C1
B7579F44308CD37F84CA7CDE4957FAF4164CB4EC9FEB21A4CEE1B23EA0C2DAB1
CE9A6ECAB6B26F77909B780C12CCEE27561BF1C447C4B5EF51856E7E1CF78F73
29F232AFBFCE453F6C73CB23ED72DD2E07BBC5A03616866E5AED8B2460BBA5B7
119AADCE67A97DBEB25D3BBAEF9C991EAF0513362D5C34EAC6A786959FD8ABED
1015A60F9BDDEF4D6B980C809358D0867FFFC0A05F29CECDF1EA5E43E0914ADF
08A8109921EF4ADBFAADCD0CFC3048E5650506CE1D48CCD23454C5A4EC6138C8
B678BE55A7BD1081D3FF1EA90EBA76D95A9AF4317650BF3D159D11C0BDC82F5E
0B20B28EB65D4B80261F10BE5D9B9FA382CB981167FA69D5904F38879FA450BB
1B113E4887D19DFB7B4251C1E0B2624E05720816FA7DA6CA517A9467D77D16C0
CE81593313C17DD9CC60344D73989AD2F2EC55B01B1AED29D86B40420A4BE831
8A58FAADB1E3FF2F4DC7BD950938FEFE232999995682E90BD9CDB969BC2DAA7E
461845228E882EE2B9EA6A611C3BDB87F9495075DFD51E920445ACCC3E763D2F
FDCFC848E44A6D011D403D5C66E1E549F64639B2B9CBA76D9EB73FA273F53063
84F29A51F33F7BC8EC9F6EF7817A5F5306A9991DDCE256A71625FDCD7ACB6E5A
84697CB7B028F1455061DFB9479AF9F75F86F8463F5D7C2CEFFADE5B262705D0
01640513C59514B8BF90D76AB7AD80307E7C7F49D467B57754E6C592C56F794F
BFCAFE07390FEE69271CED21548FFF3C50013DBDCF6012B449B8E759E029B8BF
AD0570D1F2A875DC052D22E32639F1CC99C724C60218212ED1CFE5A143451D9A
9913FC4F5D264850224B637DC26D994498D0246E000914D5B278C024878E6D74
71359BD00A93980C1C5CEFD7BDB7020C6E164F3FFFD3D27B6166F7A5830C215E
9D2CFAFEA609104537495848DA98B73D2AFE29930B8134B502F1D7BD50E27311
B8A3A674A9832AD24F64F4B8CA85A4092694E33A0A190BA88417A32B6B43A1A0
8E303E97CB1CD9377500D8FD53BA9B22B5004100E049FE738EE54560B445A653
22F9E320EA328CE5E832DBB8F21C1435059D6809397653F938EF2D9206669D16
9DF0F976FE234C67DB03651E837800304226F060BA074057F2E1E2097720967F
7AAC40B056EBF14A4FB968BC4F9EA62645FE2C6930661F23A9448CFF0C007E20
B89B3E6D43366D62CE04E145F62D5E1359BCFF22856E462790EFC65E51F95F91
93B552045E94B78FD235234C9ADDFB866B769F4D804985C43A248938F282DA4F
5EF7F37168530E1E48535F0564166C28A0118A0E40AFB8ABFA752BC74BF01860
D9C581ED8864F71134A1FEC1D6A5B0B375544DE4AD215C85329011CA6FB122C6
3A5273517EDDD861DAC2B9827BCB1935F2E8752EF7BDFC93B9CCCF904BBAEF7C
4B5040676B4FE300677C025FBC844A0720A4E946F6D290993F70D669486F85B6
44446DBD4411584B1E471254552ECA26628D404F93F9CAB83F8D5D0C312792DC
746B628DCD2D6B6649E5B04C1C12ADAD3473311F240D8DA53A5A4F6A3FD728B0
954A64BBADC2914C797BCF901465EFDE740AA626E0467457615A1F6A0BFF2E2C
93BD4AE1374208974479060F25DD3F17CD9E67727015B515B50116C2916EE7A7
59CC09BB3DBE95BF407ACF75DA259912E882BA0A1685A5D27399ECC2CF9C581B
513D3712A0B3AE720BED283019C22883D38AD844E261350356D9604DD63C043D
CE95C183ABF8A0A12036898B5AD180EBA283E42DCD7892AFF17C52B4BCF03669
7B5513CC04041E01A0AC21246011ADA945C5FC0BEAD29F55BCBB14FFE0714777
9DCBF555A8A4D81078C5BF24F201C0AAD696A4D2A60DFF21E545AA85375BC0E8
F09A38FCE1B55EA280644B04829509EF47BAB1760F07015DE263FFD7C984CB52
99549B9AA7DF82274819EC9B8297959ACBABAC66CF01A3AEC579F6E65DEDB8DF
7773FDFE8AA1D611C0082C878939D9F014C59B443AF2915AB2FC977A82BC6588
E51FEF5CC8F1903421533DDCB26D556C718348A9553257BED3F83EF546366498
5AA83EFC508C0E5C789E862B93F5E186A91256633C15EC6B51F0F330AF9FC571
05AEF7837E02CED00868656F5B469D73DCD426C85699DC476206B9519C2C032C
E4D16F84814385544299347BC17634B539A1807DAA74C0B9A68C5B41D0691693
C8FE142AABBD48CA02BBCA5C29DC3E3BD474860A061CF7ED7796B62EFC7CD807
103E9B73275F7C3B56FB8920EA1A1190B319B9CA57FBB5C34FB223FDEF6F936A
A8241C85E124487E3171FFEA7ABDF5C94697374D43210F70625357A86DB3E584
D96D29DFA6D749D2A26C8073B11C30752F86256822E577D5196B89D6C46C78FC
5DED5857C42E8A8E4F019052C23323362594AD236BB84372FC84E2DB9281982A
F71D6F9EA70746F46B895DE91BB37FEEBBC8DA08D4726C29081922B19A47CD11
073982AEE47558BF3BAFF2BA50618106B83E3407B93305548AB6F7C30B5E006B
2C4509103028B518385F964B0DCBE9C6A28751F26FBB2DFE475DD2BEBB53FCA7
AE953E227DBBD52036A26D9315A1AB8F82AF5924ECBCA9263D8EE8C466BCE402
F9ED2E8BA90C908CD897F69E299BFF35C735BED2CF40B262033A71D616BE98D4
B97BA9024A07633E6303DD4C5B6EB893632CD4ED246BC6DE53E1C675DA54E0AC
4553E4ADBE374B3D6F48D27D63E2C5505AD6CE03A1276650F1C141B31B5CB430
64B1E2C55687C8F774870C925A5F530E93441564D2B4381CDE6AF114D90B5C70
5D793156447CA18E73FDF8CE5FA88E2B6B541BDF0B12BECA2F8ECFA13E6C629E
31456DAF74C88170A82622D989F7A5E3503FEDAF4356178716B186B82315E0DD
38DB2FF794C20992F24BDF83C322CC9A9B9307D74D315F809F5A9B5BFD71D306
18466F1F3A62AABD2CD8D8CF7C07B5B341E9DCDB59B8020F539541C8A5972040
B5B35AE0A050D3266465761C0A5E3CDD0C2EBF1DBED729A4E1D8932285FD92F9
79A553961005A74500F2F64A2365A67901BBC291AED4F6119C69699F9D993EBC
8C9626B9813DC5379BA5645C2E2DE3BC81F3276819389C176EB6F11C1C783257
EE49A389A6FD94314B0B5F85761DC44A91445FF7F22F2E5144CD989957100904
AD0C0E8524FC17AFD94793869FB7CDA0CD4955E8EF837E7E3B80072845167073
E5FA47791846F998D432507F694DE605AF5D20F3B4384F7B51BD079CD94CF3B1
FA6A72E64125433639C0A1E222A3EDACC8212B232A54D6D46564B46BB833EF35
45A269AF5F335EDBA2007655A8B8D2C592CE09714E0928BCD8C469A2CD385AC7
54A707B92A6BF207FF062CDB0FC257393697CB40163D833C819432F70AC67FDB
B053239721D96D2ADC3DD68CF3F3A0755140E43F423FF6D292746B3BCAAB692D
317E841DF181BD91FFFA61524B77DD2A6F4994B6D5D34E4805C927E38E2D7570
C837F44BCD6FA59D0F5BF917B5E17026002E180B5A5C7E80DF04FD373F51E842
FB707287D9C4B7A9919AEDF762DABFA376FA8DA7668F51E5C71310DB514BCB9D
2EE44B4537A9967E8ED7B01489AA536C4155840ED3A1E1E7340533FBE9DF9F24
80CBB3C8DA23
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B38A74E29B9E7D4BEF828A51B13E71DF2C
C78DC0518AD29137C8DC053AD6D86747DC82DFD3366CBFCD581044AE5B23B88A
25842ED0050BE19E7F538EDAF1128614873F52B8FE20E16DEF21E3D2FB51713F
DB39D6C3E8B60AC7B4A83F38D6C3283AA890E5C5D4462D0CDA1D49DEB5221D7D
759291FD43C594074033868359A9CB523210CF1A2479FCCC7401AC1BBBA29A0C
F8449C165FECC03856CB08DA710B6DE98A17CA615483CEDBDBD9C2F47D84B562
1745DBAEB9560610DAA89F9D6EE68F8DFD8D0E136CF2B9B44D86E9064DDBA73D
4AD2AECB1F576EE1254970C70643BAACDEE7682FACB396AF64E102AD05E9141A
2A2B04760E9C6C61639B9E43B6D719F2431580556CCDFEF253C0B613B9BCFAD5
ACE01883440C3C61D2BF098A3823E734AAC86926CEEBD235D1F3E05CA0A67A4F
22C2D72A793CE08FC5937B4D7FC5E77105598B3AB259EEE0DA4D7517CF10172A
9CF549FC86FE3C79A1FE96E5ECBD1897E78765DAB8AF93587203554CB8008AB9
1561F7B489D2FA6D444F54CAFFB3F32607B0397165B14A92BE18683BC31EF660
5F4FF9BA5338BFD5864400194937B828D9D86E7EE72A083EDF44B4052C7AEAE1
7734CD28601788EEBDAD2B623303ADD6029EB1D4D1250D769FBD461CE70F3DAE
FDF7FE421EEED9E501237FCD5F7DD882644EC037E53EA6A5216617F31BD2C5B1
5075E1A6F451A55A9862CA1C8FC3550BA661252DC26313FA7D4D37D0FC52CB93
8B81F1CA562A7F1F3A6AE580F7C4662A8D9F8B0FE80FE32B7AA829A4C185B878
B8000CFC63A7179906CB112441C4D31272D19165E0D774DE3F53F1CEA0DEF092
4FA99DCD8A91C01AE80B55FE8A4C3B71618CFE7B401161E375FDB205B8CEA526
18A1D6D534DDC6DCFF55167F6497C9C4BC36702B3F48124430CFD49B3B2CBE1C
7A2D6404EBFD2B3A23BD8323840C531605BD13EBB44A71F76248B694684125A3
85AB03B3E1D3BE1EB284C7F9FE20C0B73A3C9B5FBCF36B0E7AA6A9E3EE39CAAC
9A1926DAD7EDDAD3FE53F1DCF5517AC6E153CB0CEFD9F225AE1908F8610B178B
7B536FFAA648A9822FEE696F566A83597958730BA4E58C2F29771497E9F59DBE
0128C6BD4509E8A3017D2C31F192BC69828681967A2EA7DC476E4771A5F2A0DC
60F58E1CC111B1018F6210E7B8421656F86AEF7C9459D61FC2129BAC144B55EB
BE9D21542662EDDBD16E5BD358B6F36F9504A25C1D71E4F05B5E06C7B81BBF4F
AD370B0FF2409AD16282F172C43104F4BBDBCE706F141A75E7B554898FE557F6
A7A22B1E79D2E13D32D7A2336832501CA2C904FD3162CF242FCA166454A20957
C760D639DE068E646B6E717CE9A1DC4466AEF129B80145D3FC30583423EFA120
2DFB1CA24866C0D80E1C4D03BAA1CD98DAEA1DA807B25961851DC746F0052FE9
0297395079FEA2E1D6599F98D55F11AE5AEEEEA7745BA5975C89DE4633FFB2E5
9669E5D028E4410FD43C24C27B10EBF332F2D4BD16E2B646D930CC18A0E1D160
4DDBDC54DE542299E8F0087C439B8FBB6DA7585F870E2E2FBBBB8BA15E6A07CD
C7D8B70E2F3EF13A15CE6B09B55AEE658C50AB2A2BDD7A1F83B8214FCE10AE55
732814A18E0EFD1E2A6C3CE354E8BD6B807B5914422C329AE0BA4551FAF98C53
6741348D88BC9EAE1F959FB8895F710F29B907D815236B7D589ABB896C024C82
F11EC7D1484CCFF48FD1898015DD89A0C4DE78877F7EDAEB65D26DDCAC87FC48
1D1389AE6E5484F628D631C559BBC8A6D5E664802F87FC6E2A968DD2504CB17D
F50584A1C001110DEC85496D798E68619D9D9AFAEE525672810BFAD7E790F160
D56D7C7D7E09A12CFDCAD2C38C7ECD1196AF9694836AE996260F5D75279BFD6C
792623AA9E06EEADD5F85BF66D8C214574B8C804E705015947DCC2B5A8C29D9C
A288380A1728A30B0DD146071616B49BD95D9DC29288C628E08F12BEF8C82DA0
26F730C034A55B99F92D78D316703959F86D8595CA5A75BA1E56E9809EE76A34
2A6DBBB2819F3B1BE0933DE9CF7B148DD62D7653C4341980B65D8C903B4E0937
18A8DD4895754A767DD87ECD47181C522CA1370EFA65DAA9B08EBC7604E6FCF0
59FA45DE529B93FE988FDF8E5E176D10E708D5DAAAC5079856C31D8B737501C8
D065CB72CAAF688BE55FF9FC62DEA2677D41E2B534400816B9E00603DA2CDC09
F9077349C9623664D9EE32D6AFBDA650DE094677F9F0750DC171A0588E6AEFA4
DC63226D68B6DF3C239FC8BE780EE8DABBF52496501AEB4DD6794A87C56271E0
D26B79EB7179E2F0B5F8E0E2CDDCEEA1B492D1CA537C49F8AB6104874306AF12
BA45A12C2890F8CC804042591601F954421D27476EB0282E256A98811184FC8A
4A14A49792BFBAC68A88FA541B16E78E2D26ABB685A7C866F22BFCDD25E2C8FC
CE805938270FBE0DED888AE49D1134454DDC880DEFE6853F86AAFD72A3D58141
16B2327C6BBFCDC6582740E49F0D8C857A4E88DFCF73A0BE8499ABA5012D7881
C8E6D4D856490A31EFBA5A2A7B9BEC696D54EC229516CE0753666F37E5BFE1A7
FCCE35E848C5480CA1D409688C940E16C73D4064328E158AA0C4874E48603CBE
60C5B36E077C00902CA6AAC2707161B0444C4C09F532564C5ECDCE77D328B1EB
B79CE97EFA3FF6DBCB7AE371F405CE62F70C1C07D5AA99752F7C916D6F25776E
9D3C8C08E3AA6BBCDBC42371036E67A8E936112D0212AB6E38EF185B84F4ED86
6407BCD1A629AABA2D42F334B8793F21FF7D1931458E14860933EDE9B9147A7C
AA0B6C7ADF134CA24FDD37661632B19326B7ECBFF4EBCB5AA203420F053B1958
7436710186EDDA40EA97BA74A5E081E6A95AB3911105A22078ACADC8AB6FAC7E
F349CC39D39295FA027F9FDA5923E7EB77C0FDC76A82E53214F4F2481B9ABFAB
D575ED95BB4914E6731B4BF18A5155C953F704575A35058E489C10B9714800B3
06B18E60F010C55C0A796F4BE9068BD0DD2A17B7A94ACC185AB661C864C3BB1A
93A92F2075AEF496466451EEADE84BD2D2720BD9674E2ADF052007F91040A688
B829F5146AEC9BB506A5AFEB06E4A4AAE9D401BDA85F54BBEC24398D56F651F7
76A7526E13729786F51A18DA71D65F3C028D6337CEB228F0B38019E44A1BC9FF
47480C8C7504D5B7374E36996C3DF2B97DC1A0DE3557997B95387966353736C5
764EBD365D2A0B4B860EDFE42B145626CDE02BB9ABB47FD963B0C6F8131839BA
B5F27882399AB90AF028658E67023489E00190707E2406AD30A2E884AAA0F61F
3B766E8903D939C6B18218920EA70F2A6DD0BEE3147C4214167DE02912D66580
4AD9F47FD5E2593C8E6A44D960D7D13DEC8D31DA7A66E75426CECB79955D2C14
E551247A124582C20DF79946504B5DE5C9F334426B3BBBC4227DB5522C049829
6402770DF584D5835E64CF9EDF77468EE579B50456D7D18E78BFC4BA41857657
A023BDDD67AFC548914E72FC476A0FF2B82A16026B5B7B90AE3461EC998773A0
95A03EF3F4FF58DC8A4CDBBD4456181342F3ADE81FE911EBB3298E71FA5F5C85
95F5241B3A48868583290EAAD37651D3C1504EA2C6FE0F49284FAFBB545B4C85
DBAA7EF038F5EB123B04F7D4C7BEB651276EAC3B0E507992C739FD624F6338B6
286A431B730A1E4A219C25598FE2A2577774B9A1CC05EB5A7677B5D3154D1B4B
68A25BACE80C84484E6629F30890C6612047BEFFD0626B6F55C3A0330EFE5F5C
532AA229107A589D0471188DFD2CEDAC61D46CCEC6763AE4E37ABA077B0AA328
D16F0539158D330703F36A8211F43B5E0513A540D0F51474488C312A5FCC858C
06F114686832DA19007A63F58FCCAD408FCA55F0FBB4C6383882A66A4CF8D783
911EFAB90123E03D410E44B3468DB121DF70CF328987F9B4CD388D9486131BDA
9E79AA5AC2DCE2E640A0DC20C1D5F5514A53E0EA066D22E662CB73E82E06EFFE
D9F2798B3A1F02ACA6C9E5BE5DE535A61C2DE29FEABEE76B8F11C06312A8DD33
F6BAD19DF81D066A502FA998F5BEFF8F4EE3EC77E5F31AC6472BE9767DDEB019
500E8FBE4665AA24039C4E56081ED5206F2815CF931828B48EB68E091EA44228
3181F00DF8ACF61A8220EB2EC57A6B0117247DE5427814E677EAF5C98F6C3B9A
4D6E672398A26B2F9416EBB72AEBB3BC9F0E00398D64538E2E4E3BC771BDAC7B
C776B062381C1701AECC58B5F8AF0D3EEFA48A4EE9A01692A603FFAFC9311075
1B5C79F20C1866A902060F8B6BB4C28A83DB3E2C7FAB23675B16818DE675FB63
586884595698B4C033E07E8CBD8EA56827A2D8AD6A928DC11073159AC49F917F
DCE9A2E9B5A055863011216F3F8AF617E1C2A88F617DB02F069B0D126DC8C412
6287BD22CC9C10590C070D1174F35E0E10A562127553EE3758004E3C2722BB2F
1B0E8159907DAE0687F2DCF03E8EF1F198275C12BD7EB0F313315205336C8523
AACC88B01654F4C983FD0282439944369C2252C0BB59671443856541DAF4971C
EF10751072F4A19E45CF372111215AE27DE83943BC857FEE4E042019BC851595
20ADF4EBAB73776E794716AB2FE577E6EF13DD97F4FBDB0C6DE3F11873FB1F52
A2D4AFAF5E72A4A2806395D0A2006B7CF373EB213A92541054C23F7627D33F51
6394E52711EC27C8B919F85B14ACC3A17DB786AA1B086833CC9C07D19B82C90E
71132EABB55F4B3CE2DC4C8BAD4C7AC5DE77A3C39D634E3C60BEFD4148B68433
FE3F36B8A0F98A3EE39CC5E24377CC17434C6D8792B4FFD115846BF9BED2A2B2
D153725072D038B3A6EFE75E4A4C72088A48D2F5B92469B9D00AA3993AB45C34
32F79AADFDE23DDFE63DA3C7CCB725FE47246ADBE69B7C15C9C8168AA3DAAD30
3748CE8E1A0CE86EDE45C82E92F057EB6D15D7DABAD259C0927783C7D5D48601
1CB0106EC216249FCF4E88F70AF217C777FD91FDE18036D39D5F7B0AD6FAA5A6
1E4EBE3C2CEE5227745EC71298D4549F1D6B75D752E76523B547BE5849C61431
0AFB51160C473D6FAEBE724F309B79552EC7E686B1CFD0EE0B59A64029BBB643
529B5E3CEE09CB133C11A51A67800E59218D7B8DBFCEBA288EECFB9BA0861A65
3F3F4DCA3BB78B7DC14A444C88B13226568626E7E9F3F6C29E70AC3872FF02EC
46BE43B3766F052444394E462029A4E4D84599E6DB0FA2A06EE699BDC50F2DC6
C818520919F96124E665FCBC82A291D3F20EEC39C37C6FF0655E808CD605AAC6
0E5ACA50A1D75B0C6E5665DF2BEF1FB6302D4DED3B2D89E193DD5353DAEB143E
D65A0C14170CC7B9425FE0B83246F3E8A9827B3F9E9EC28346E30F68FEF27D62
48FF86DCDE299FC9762C4E07E5D9AD31138386C5468C4C1383246DF8911317DE
7E7CCEE7CD999A6C6D583509BA16438409C48B7467738E9CAB0E678576163509
FFDC4A0AD0368D542E8A504273FDD95DAEB0FA313F99EFD8BD0B4DC0DEDDD38B
5026B2BA698488522C21E5C2E11B8CC30481B5C4A98E5E38F0CAE67C73F352DE
57D9BE94BB27F85B0CB9C15859CDC7C2B12AB6EF8F990380ABAE1CB6A67A8DA6
06F7BF9654C4ADD8CF3442AA0568999A59AD145AC8D65486384A4786237D678B
8B6333C946980B89B72CE9C17B631FB6EE3ACD6413E7AEF80EC2B6173E720FE1
F28D65675AFB8BAA402E1F9CC754F3D13AD6541D1D3A02FFCE345C488F50D507
E27E698D4BFE18B7A225013F5D4822485B61925229F55A5D1F1C4EA3A44868B7
8687724B9D8BD3D951C6F57ACC243EC74C6F8A8923BBC77E2B926089F0BC0904
FD0583F6B3B0DACE2EB50AF4A47607C8D21474104C372A8527186E9806F3DDB5
4D8692A5513AD14428427F709B971F6498A74467D7EB5369AC748F3892EA2266
532F87CC8D8C5CDB5B692AF4903F4BAC549C85933742996058692E9125BF0C97
39ED41EF3A42280FAFB159DC12654EC152E3A4F818C02E12FE29FBE1D2E4A53B
A6CD4FEADF5FA2851C69A03402027CEAF84CD22A61BA69857FB2330928C1E5FF
56B86B4B650204C2A3BB44438C742979B4BC35B21F6FFB3CE6F903A10FC58E46
BB65AB343451EFCAE6D58C2574D222100BC4FA131A51FD0D7FAE48AD7E695C9F
45B57570A60A635BC15A0D56BA5BF6E400F8E6B63E4781EDF6A681B692A0A292
41EE2127D85E213A410882C0D98DFAD3F84ECFDFD0453E82EEF942FC33E6499D
871F0D45EF327730EA36F1957BCA9AB9528E81E97195F10C0090C83174A9AE3F
8143054008FC5CF97A37C81FB91BB31F774F8CB1F07D66411593D10A7024C54B
D41F59EF9D14947572CB28358821227C1ACD82E62A697F359C24D6A82F291EAD
99E84069E3BBB84739F146065E8409F9129B0F58E784AB8445DC7B165A582A09
132FADD45D8582AE345ACFA569DF070923D5234659D33F7AEA7B5C525587610F
41824C215705C71F52CBA6CD7A9AF024EF5EC25918D51390E769C1EBD88EC033
89CDADC765E59DC22DB15D1004E5B7FFF3D81F5A6495D7F9DA9D4652CE6653CD
E0DAC8BAE67F09223692950495C33EE38356E645FF01BC59792783C9F48E9D45
BA8365121EAD77DB4389D1E697FCEBA075CD88A9EA7106B1A90BE3AADD7AB511
DEB78268E9B7407F1E048155FD3EBD100CF8B4EEB95761151711295D2F890365
3E324BD820BC647B49E30C15E1C9FBF629D2BDAA8BAC3447D27D20D1D4FD4A57
5532A823C5D24D23A00CE200FFF0DD0E0636A9954C8C41A257765AECD176F985
514EE6896702657904F8FA721AF7FC3CE13E2BBDF051EC5EA7FE37C6BF785977
93E384EE93592A13A28513B88BB7B2E9174BCEA5CD5457CE9F969A0D13EEC27C
EA2D32409DCB1EF1A4425F99E293F472288C473439E89E85868E59DAC0EA3CAC
AE9C1CA84F9808A3997001F562D577F2AB7461609D1E62DC8F68972E5A91130D
4859BD331166795ACC5DCB244757DB2D9AA705510C94ADC5D12553B38FEEAAC2
107C5BAFB78A7DEE2D14EEA9AEAB97AF61C7AD9140A85779012E3B38DE80B2B5
38187FBA141796D0A9B366E5D5E10CDF9C1543266C589F72DE9322AFAF5278CC
7CD24C68F7E9CC4009A37D700481C6B329C6FB8621CD3552EB025CAA9F23ACB5
581B1B550918C7E2DCFA7B439550746995ACD85F50BDB90272736FBBD1457C57
25DB6BB0EA9CBED70FF4151EAAB1FD24A06E26A700394B28E34DCC640D6AB23C
753200042D102C3BE5C3B4114E681772CB1A6916544FC5DFA59A65BA4B527060
257C7D8ECC4C9C3E8C1D8130D3D341496C0DB23446D508F34540487FC77137CC
DFE67FB824F8B0257EB89D95D0DB5AFB480E98105819DCBBA71D8A8D932EEFF2
5B5D4287D3020FB2DEDF1F380FF87E57B5FC87886A841187BE964854927FED75
A11E760F24B0F1BACD66C5A32E4272D8758BE41AA448DCAE442177E52F6B5C0F
DA799BFC095704BDB7BD5BA6DF2F7EC8BEC232BFB62B91BFAA49F87C4FC095FB
F074392D457AC09EA563298CEDA345525FD4FC89C694F5BDA0BC4A220C71E990
354A2BCC3285BCA243523BE782F9D7CBD2D490CB8BF874A1F51A8FAEF451CC78
F25D7C5773949B18721382D22C8BDAC3E985F4EB343C75EC7D8F83B3114F7C6C
1C8CA766393C0AB0D7CA9435C7425B3464A017C37FF58417DFD9D3DF6355F70A
27F44E3AA88DD6CF07D37C22914EE0D52251AB181BCE9DB330AAA547046F7E55
9C2E1C356867FE01DF57EED0CE3161DD5EB3A60FAB4F776346C4DE4620C8AA25
88D0865228BDC59E5BF9E79062FCCB88ABD37E5616F7949B5DF2BCAFB8ECFC15
335B979BEC8AF0774C14DB9098ADE880E3EB09ACA94FD838DB529079B19F5670
A5A21ADC6387646F6BA421979A194197A4C59976AEBC3CD70310CDBBBC935914
AA0101540EC287B97BA43A640D3695609D823A9F0D305DD31803B563AA12F668
41D058D7E04FB7BB307553BA7E888386D9A9DA09BE1DF75C18047C4920D6F2B1
18BE14788A39977B818426B85EFC8CB0000C2EA32A5C4D5F8A387DF169BCBFF6
C6B117343FBD6BDCF6685A84A9498DB97873D51450D1E42C5B71919852AD489C
11162A1E287A37475AA1CC02D36BB4F92026ED6125DD343B906949B4E18C7C6F
E3FB67574182A3135C7563B72089FBD882F2B3EB1E58EC96F76C34D5DD1135B1
D261236A9754E118AB6DA3F54086EFA00E3B15C570A6CD51D4BB9736DC754BC4
4144C7280CA3F441F9E9D19B32FA24F66B88811946DF5371982C26B7599E3003
2303DE41055A5267736FF65EC0660B6CC6CCE83405EA8A7F930CA7D406D9B3DC
2EC190FF4B491421ACCF6B9213CCD088F716E4082E28E6D646005F70D19B9926
836975F1DA12BB186C8532DB4D5813EAE54FC3F9F79927EA6E6718AE3FBB808B
77B5AEA0F87B776FAD186D223AD5BEC2073FFF4D888335F16ED8CAA68C924093
28F75528C7FEE1990FCF21187C57A4DFC986A202A365EC212B0FED99FF4D513F
214E56723F575BBD971B9F9E0E6B094AD7B2E4443B69770125B5D86C6DEE2D9C
03CD4EF586D52B66A64F6060FC2937DD6981537F202981E9AD0E56EEB30CD9A5
DDCB6281B4927CC6B58E23D5D361946012C986D148F993B882B61613130575F2
B2F9E1EF1C16C9D6C67BDB6C8E2204B4BAEEB86128F68A84CBBA17465FBCCA69
A414E1A98FAF18BD1110D7274124D91660BC9303ABD13F17C5CA2258645F5AF2
4D4D95E2567CB1C2DD2C1375B510DA3A52D0F5800BA038647F35B6059CC52CE4
ADA26D2C9B468BB368507DA2C464936A1643177AA530ADC5176EDCB25D73BD65
6661F63292FEB71E4A5F0E0807A3FA22AD62D56AD099AC1C6C426CBDAFDBB87D
6FC579335533F701659837344B7C48C7140A5DCE323BD9ACF97A01CEB6D079BD
D568FEEFE9C06A18376B67951041F95EC2DBD14BFE73BB1BC727ED4A47513CAC
C1CB6127ED4C3D2F1D5428480C26C9C27F168665599D9488A4FF913D3F49FCA7
BE27915A7DB911412825F41ECFFC795515FAD3F86DE9CB22E5C3ACEDEC4479DD
86671A0CB9AD88152F4068F80EFD96ECA5E7039852BE3ABBA220217A25765A35
241D3A3D4F2245FF1BA4B20673C575E5270DFB00866FA89679B55772676DF8F2
F631B0628FA575A641A64145851B0635A246D434C91D7A26B9FF52B0C7846D2A
D43C016DAF6FBCD9AF0E1645CB4EB8C5DF6D164C6B14AA2EB948CF21986DC483
DEDFC03B251D8BBF0D40D17D4A2258EDEDE22FF60F99B5DB8B72E963074D9E53
5527B179B2FEF1901801158AD5EF92932CB7D4C48CB4CC52ACF4489BE80CB78D
11258412B970E856E70F0D6767A703553A445D5F520C3DB2D360FBA07D3B996C
664F7FF5D0166F50BF2893C072FB2AC60CE1B7D8316349A0C9B6B0FF90F32DF9
67724778904433DC706E505FAE1976B5FF18D7EFB36BEAC773E99871CAC27435
39D87355D9AEAF31D82E482674DE771A517351EE794D27CB79F3DC9E05F6C4EB
974EB6BB81FB8871F8681CEBDE60E071F5FE81971C9CA65FDE9BEEF7896CBA70
E6462520509368D49DAB948CBCB854D41AD0BE00FFCF1BCE7BA7CB86D954F644
3E283A2FCB0CB9E21DD64320C9D33B9A5233C4288818F686DD27656081E76021
B314CC83BB8CA3B316CC7B91BC8AB64683189E9E777B50EE9FC061A5F80CAB3A
5537AF119855DAEEF3AADF8EF93A9337A71E9FC635A97FEE70A36909683B6F9C
67E16071FFD77111CBE2BB420A20D1FECF3DB1B5A3E6819E95A803F8F74F2561
D3309AD5F6C61E6A5E7349145F1575A17235FED8ACFE0F3D8B8169FFAB507128
0EFC3E6BB803965A5C988D48A8A15E9D5ACA73D02FBE832FC366877A7912E5AF
FC738192C23F4EEAEBE390144EF89F1AAEFA49B9BBE0CC16BD6EF10D99E1000D
0BFB6159E44C0E28529DAA10B33F21B17896D2B93BE39DA5115C8C5DF991F5F1
BBA9212778C5C7F066FEF89DAD80396BA6046FB33245C98596ADF93F6629DAE3
0D262F4A4332E04AED0AFB01891B5629A79AD6ACAE0006B4B1E6EDE30C24A7BE
1EDE9373DEA77930F4228219578DD3E41C38FD66722BAF07005B45D44B09A961
6F14F2EFAC60FBA9ECC2E2D7E749563B8FB5B32C2F24DC2E116F5153E1578C7D
A4D54CD151CD19298C2731B6BEE2894F5CF73CFFA8E830FEC7280100B0EF1B21
A7C60575219AD9426EB21FED72D225FB20750B0F6F456BE814D1CEB660425F04
3062C88CD8FF8C3169105DCAE2BC87932A162CCCA0239624D8678DDFF2E0D478
92FC9CBBB12EA7ECA1A597BF84FD9994072B91189AB1E47F1E489F463CE3C796
B8EE321EA7F3DB7BD688D8741905DF49C7B2A3EBA3B571CBD6D51C0081CD17E1
B1862A878660536DB39F0C229A20B9BF062322F2334343E6BF9F47882192F01A
35F241629E226BA6AC65DEFBCC8F1501E06D3160832AA92DA5F34F2BBB24CD54
FA227EE471B762B5F59002A3251B085C9CB726BC6E54B98843BE3882D3B5BB55
CA02A223ACABF0EFB0E8B0F5405BF8E7F0C64555B29ADB992C57D07BEBD8809D
94DFDB59931D705C7CED77BF35A0C7CC2C7BB90CCBF5CC1272D19165E0D774DE
3F53F1CEA184EAE4224051F0A365481D82F1D02D00C3C5BA1F5817481F92881B
8F7F4CC5558E8D7B603F851D059694C08C124C2C8F4A11121001E27992E23207
BA7305F450CFFDA21E3377B43F22E3B12631C602F4B71F8906D6956150F479CF
958B1DDE1BEACBB5C8C949F05E26123382DC936DE28F1C35B0F07E4AF2445E02
0BAA2C1CA9A2CA4DEFF12616105467D016282E0A00B811CB3416C19375BA4144
0C7629E052D26A311824EA3E01AFF3B90397E5EF6993CEA6CB9F06AD03B1C0C4
46947A082F0B8255F7C59D6F3FCEF9D259DC6B71D7A8DA3B4FBEAD69E8AC4586
50780ED9969E2054CFF6A303DB09A0A9E1556024EDF278E291A6CF1910F6F744
2575753A6FA3B70D1CDCA5D0505EC0D97934FCAEA089CD2DF10F79328ABEF133
BFE5EECBB5792DE29249E2890B1154C6B17F22B8CF1336F8E4D8E155F1FD248C
FA3F59F355FDE1FEC431660881FC41C77F7B7B560083ED92F0F96AB790EDB96A
506E61207CBBC4B76494552EDF53C6AAC0299C38B9DA21EBDA7BE412457BA6A8
9C10B4FBD83D5D3F65D6FEA3EEC98A1425DB8527B592C2A8BA742F316598A68D
3515FE8EB29BB410FF9C854A31CABC6A41CF031811D94F83A0C7394F88B0B152
E36254CFD70684703BD28E9E093AE4F2E6CC4C0FA43A7C67188E86CF7FA42B87
E89B83E7B6FAE6790E9746AA7363A36EB2D92B6D69DB66136A06D7532DA36B39
79CC0E57EB61BB894377E9DAD87BCD558C9934744B098888D7D02BFF71F280C7
BF46E448DE1276B0F2BA27E239E33994B1B68C16EACC723052F7710963CAD0BB
3F2974D7CDB4C203FB8978ECBB2A55341A10182864BA69F3F439FBCE99EFFC1E
7C2FF50DF2BAE3647176E22ECC0EB3B40DCD963ED05D66519E388F20904CBB48
B7370853062F032165B7B58B7F38B0F0842126F4EE561ED02B277AB08FFC0C87
85024E69D6342FA6E012EC7C96A2745580EDFB53F14E7E4BAAE4A1439351966C
88761BF2229D9866B5A96EFAF647C24933FB6C7F954E96C8522735077894AE4D
6997AADA781448D986500F282641038D3BE1A83F56A8F59C000F311839248254
0F3F2881908CBB3B366FDA4B4B2A47C068A11E373A3FD0B7BF0C528466F08FE8
CB9BA0E3DE21C37344B459FDAC8D89F5BC891653DA66D531D46BACDB0D8ED94D
1823AAB113C0CE23DD0886917EE0E2410694CE7484B9F8E7141AA6BA0B59619D
E40EC326EFC139A01894C458AB903507E1F7457613F8919B12F431DF3C61A2DC
1F13CD3BBDFA87FDE55B0504D12894DA2F1DAA6BE705FF576296E39B52434948
66A508FBAF96C8325874680134C2470B9811A0F2833B82F0F3A234CE46C936EC
EE72ED5CF62983FFC3D0003ED526B9F340C8D8A1504F034BFE4C20D56524385F
038540D324F1D4DDBDE655DD3EBEE6EF36D5D9081E2479C1452C45C1B1A2E9FB
7ECD21F13382320756156ACD8A5A943DF1A827A5125663C68518378ADA8B3FD2
BD16D15D8EFBB9F9473F9F5026D0B374AEDCFC5F6F6E620CB74B225D5F9A5834
B3A39AA17BCDB35AEDFAB8EEF884A208D87E079ED27C588AC04E319DB481F8B1
B8B76CCF922AA3A2CBD21CD3A62C8F3F6349406350F5F70F441E5AD1E6518F59
85886CE849552622B2EA6C56EBDADA43667B487A9DF5CF6D4CAA950BE0D0A3B2
B95141A9934FD59DF987B013DF5D28324E6E9FE79CE62239A49FD033CF9AC5E8
ED77A256C4A67BA59F8D7E6F86D0A6041F419C65D1EB546C1A7E9BB42E02CB0B
B9343CCF301F1F53A4F71374E450E0F40E6C286784BED280761F2D23D56C3243
F2235C6F19D40B3703491FF99C2C48F370ADFA71A0CD40A687F751A53E7A54E7
1DDC7EE10837B156514C8CD9B45F1E3D037B6B0D836B5608B4C05BAF0768D97D
9504C7FA2AC3E184939D0FF6852F6BB5926E6E7F45DE38BE6A8DFFE5098870DB
4330168B2546F8FAED7BE8C4C273409E7F92CC16140DC13EA5838D0CC32800D6
079BFFEBEBA961E539D7D139151800420E196B9530AEDAEB897B6EA28C4BA3E7
E14925CA1DBED92AC9B1A567E3BFFF87730E3A279D9EE12FE46C3DEBB4D72933
5FC37DEA7570C77C1837F763535883EA4BD326B6230DD2720C648A0B93470120
FF64147729C1E48AB7460AF3BFAC5CCE4C3A3CB8F58B39213E687DB1A4D640F1
3F98E0A1ABE937FBD77537BA77205A8E6385CA2CD0546D010085C0BB8707512A
D57BAFD377F6CC9F667A8866943D6AC4FD4F004657D8BD25E8FD245E2D678DC7
5674B550C3F4879F836C490787F415B2FA6FEB085D2B9272CE3493352FB3ACC7
5403C8B4D9E4C74CD764B36D1865DE1C3661112240C90D1F41260954230A8EBF
E896D1CDB70DF31F43F3CBDECBEB933CE007B6EA45C8AAE8851968CC97B7D0E1
44D5E7330ED83DDBD95A9400D63221E118628AA17E1466563C736F6B50091612
11CDCE95A241E6BF9F6FBBB915F4C16677EB764B6BE9DE84DF44C87CCAC3DC89
778CA75B722F2EFA6C4E3CF50430C10191B69A0DB086EE635751ACF6DB769610
7D0F54590369A1E5ED9C565AA0EE77C041D7C34A3766F1BA3F3EF2BCA20FC185
4A170C809D57F0F5FD11F1375BDBE1575460D695189B1BAD9BF64E068656008C
38D4B2A256A54611F9F160BF2836F6413B9300F6F376B8E69A4EDF784392046A
9A3C3716B3B496BEAAF162C72F5B16B9D4D599992CD680D609957589E9A58020
DA1781C3D89AA9AC39DF5AD4DA7AE5E7D04536385ECC8100F3DAB316648ABB0C
5691E5AD41197C9E52E1994309CDAF85BE3F1BDCD0A42730C2F771DD318F346F
25B56FB943C69CE93D894962E18C90706D5B361C2FFC98B911DDA38C129F1486
8CAD1E49B98CF80EFEA25FF37F8689BE869802EA22FB4C6911A360B1A0E3AA7E
C87C0B1B558912CB82306E6F18B5B50BB828E02E05577336B3CF9BB9826D5BD3
2899E3021E8D7C68CD1F3921C2579013EAFE27738524940CD30335A13DB8F2C8
48243CDF2E433342C241FB08DA5D64366FDD9B0F549AF151CE578CA84F624861
7CD693AE0C5D8A173E4743CB9604A268629D212669B8DFA1DFC4719F4DD3D7B4
454FC41E31F5D8A56719A71383B4DA51B3D8315B361F6736D384348A8072829C
A3C552C6DAAE65C85871DD7A581261E93DC686007DB236C2DB28A9150A45328B
0691F47070C22793F3C3D92A2416D4E85E3C831C064582EC098C635C8F1359F8
AC00B0DC93897419B3DBF3CF5E150AB5AFAF75230A259A1A2D055569C12CDE58
26F0D306BEC294DA148125EB256FCCC6B4AE73604F0C43F458E95495827586CD
738AFE9099603FF9453FE88C1C91B5CA7A00F052A98787F20C5385946959E9D4
F2004AD8079B452984E450A62085316C22FC272E15E2703A6E63E112BAD22F4E
7485651A2839E269AD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(inserer_code_python_a_partir_fichier.dvi)
@start /Fa 22[47 122[57 8[47 55 34[58 7[49 49 5[49 49
49 42 1[36 45[{ TeXBase1Encoding ReEncodeFont }12 91.6562
/Utopia-Regular rf /Fb 216[51 39[{ TS1Encoding ReEncodeFont }1
99.6264 /SFTT1200 rf /Fc 21[51 51 51 51 105[51 1[51 51
3[51 51 51 51 51 51 51 51 51 51 51 1[51 51 51 51 51 51
51 51 51 51 3[51 51 51 51 51 51 51 51 51 51 51 51 51
51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 1[51
1[51 2[51 6[51 51 51 51 1[51 51 51 51 51 51 51 4[51 51
34[{ T1Encoding ReEncodeFont }73 99.6264 /SFTT1200 rf
/Fd 182[51 33[33 39[{ TeXBase1Encoding ReEncodeFont }2
131.985 /Utopia-Bold rf /Fe 54[66 8[68 106[83 66 59 72
1[69 81 78 4[41 85 1[63 66 82 73 1[68 65[{
 TeXBase1Encoding ReEncodeFont }16 105.588 /Utopia-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray Black 0 TeXcolorgray -118 -189
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189
a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118 -189 a -118
-189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a 1919 -37 a


1919 -37 a 1919 -37 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 239.47311 18.26175 moveto

 -239.47311 18.26175 lineto

 -242.22429 18.26175 -244.4545 16.03154 -244.4545 13.28036 curveto

 -244.4545 -13.28036 lineto

 -244.4545 -16.03154 -242.22429 -18.26175 -239.47311 -18.26175 curveto

 239.47311 -18.26175 lineto

 242.22429 -18.26175 244.4545 -16.03154 244.4545 -13.28036 curveto

 244.4545 13.28036 lineto

 244.4545 16.03154 242.22429 18.26175 239.47311 18.26175 curveto

 closepath

 -244.4545 -18.26175 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -240.94797 -3.0964 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray 0 TeXcolorgray 1 1 1
TeXcolorrgb 2684 -15 a Fd(I)8 b Fe(N)g(S)g(\311)g(R)g(E)g(R)31
b(D)8 b(U)34 b(C)7 b(O)h(D)g(E)33 b(\300)i(P)o(A)8 b(R)e(T)i(I)g(R)30
b(D)8 b Fd(')g Fe(U)g(N)32 b(FI)6 b(C)i(H)g(I)g(E)g(R)p
0 TeXcolorgray 1919 -37 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 4421 a

 -118 4421 a -118
4421 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 249.92372 ] concat

 pgfs



 0 setgray
 -118 4421 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 249.92372 ] concat

 pgfs



 0 setgray
 -118 4421 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 495.59546 lineto

 0.0 497.9438 1.90364 499.84746 4.25198 499.84746 curveto

 477.64397 499.84746 lineto

 479.99231 499.84746 481.89595 497.9438 481.89595 495.59546 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 495.59546 lineto

 1.41731 497.16103 2.68643 498.43013 4.25198 498.43013 curveto

 477.64397 498.43013 lineto

 479.20952 498.43013 480.47864 497.16103 480.47864 495.59546 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 246.82732 ] concat

 pgfs


 0 TeXcolorgray -118 2445
a
SDict begin H.S end
 -118 2445 a -118 2445 a
SDict begin 17.39995 H.A end
 -118 2445 a -118 2445 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.0.-1) cvn /DEST pdfmark
end
 -118
2445 a -118 2546 a
SDict begin H.S end
 -118 2546 a -118 2546 a
SDict begin 17.39995 H.A end
 -118 2546
a -118 2546 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 -118 2546 a 1 0 0 TeXcolorrgb 8 w Fc(f)g(r)g(o)g(m)p
0 TeXcolorgray 80 w(r)h(a)g(n)g(d)g(o)g(m)p 1 0 0 TeXcolorrgb
80 w(i)g(m)g(p)g(o)g(r)g(t)p 0 TeXcolorgray 76 w(*)-118
2691 y
SDict begin H.S end
 -118 2691 a -118 2691 a
SDict begin 17.39995 H.A end
 -118 2691 a -118 2691
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 -118 2691 a -118 2835 a
SDict begin H.S end
 -118 2835 a -118 2835 a
SDict begin 17.39995 H.A end
 -118
2835 a -118 2835 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 -118 2835 a 1 0 0 TeXcolorrgb 9 w
Fc(p)g(r)g(i)g(n)g(t)p 0 TeXcolorgray 12 w(\()p 0 0 1
TeXcolorrgb 14 w(")f(")g(")p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(O)f(n)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 76 w(v)g(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 77 w(l)i(a)g(n)g(c)g(e)g(r)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(3)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 74 w(p)e(i)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(c)h(e)g(s)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 76 w(d)f(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 76 w(m)h(o)g(n)g(n)g(a)g(i)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 23 w(,)p 0 TeXcolorgray
-118 2980 a
SDict begin H.S end
 -118 2980 a -118 2980 a
SDict begin 17.39995 H.A end
 -118 2980 a -118
2980 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 -118 2980 a 0 0 1 TeXcolorrgb 7 w Fc(e)f(t)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
75 w(j)g(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 77 w(v)h(a)g(i)g(s)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 79
w(v)g(o)g(u)g(s)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0
TeXcolorgray 0 0 1 TeXcolorrgb 80 w(d)g(i)g(r)g(e)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
80 w(c)h(o)g(m)g(b)g(i)g(e)g(n)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 80 w(d)e(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(f)h(o)g(i)g(s)p 0 TeXcolorgray -118
3124 a
SDict begin H.S end
 -118 3124 a -118 3124 a
SDict begin 17.39995 H.A end
 -118 3124 a -118 3124
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 -118 3124 a 0 0 1 TeXcolorrgb 8 w Fc(v)g(o)g(u)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 79 w(a)g(v)g(e)g(z)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 81 w(o)h(b)g(t)g(e)g(n)g
(u)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 77 w(l)e(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 74 w(m)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 10 w(\352)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
13 w(m)g(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 74 w(r)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(\351)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 15 w(s)i(u)g(l)g(t)g(a)g
(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 78 w(s)f(u)g(r)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 77 w(l)g(e)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 78 w(t)h(r)g(o)g(i)g(s)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 76 w(p)e(i)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 14 w(c)h(e)g(s)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 12 w(.)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(")g(")g(")p 0 TeXcolorgray 12 w(\))-118 3269 y
SDict begin H.S end
 -118
3269 a -118 3269 a
SDict begin 17.39995 H.A end
 -118 3269 a -118 3269 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 -118 3269
a 5 w Fc(n)j(=)p 0.6 0 0.6 TeXcolorrgb 13 w(i)d(n)g(t)p
0 TeXcolorgray 12 w(\()p 0.6 0 0.6 TeXcolorrgb 15 w(i)h(n)g(p)g(u)g(t)p
0 TeXcolorgray 12 w(\()p 0 0.6 0 TeXcolorrgb 11 w(")p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 14 w(C)g(o)g(m)g(b)g(i)g(e)g(n)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 79 w(d)e(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(f)h(o)g(i)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 80 w(v)g(o)g(u)g(l)g(e)g(z)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 20 w(-)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
13 w(v)g(o)g(u)g(s)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 81 w(l)h(a)g(n)g(c)g(e)g(r)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 78 w(l)f(e)g(s)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 74 w(3)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
72 w(d)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 11 w(\351)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 10 w(s)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
74 w(?)f(\\)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w(n)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 53 3413 a(")p 0 TeXcolorgray
10 w(\))k(\))-118 3558 y
SDict begin H.S end
 -118 3558 a -118 3558 a
SDict begin 17.39995 H.A end
 -118
3558 a -118 3558 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.7) cvn /DEST pdfmark
end
 -118 3558 a -118 3702 a
SDict begin H.S end
 -118 3702
a -118 3702 a
SDict begin 17.39995 H.A end
 -118 3702 a -118 3702 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.8) cvn /DEST pdfmark
end
 -118 3702 a 5 w
Fc(m)h(=)7 b(0)-118 3847 y
SDict begin H.S end
 -118 3847 a -118 3847 a
SDict begin 17.39995 H.A end
 -118
3847 a -118 3847 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.9) cvn /DEST pdfmark
end
 -118 3847 a -118 3991 a
SDict begin H.S end
 -118 3991
a -118 3991 a
SDict begin 17.39995 H.A end
 -118 3991 a -118 3991 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.10) cvn /DEST pdfmark
end
 -118 3991 a 1 0 0
TeXcolorrgb 8 w Fc(f)h(o)g(r)p 0 TeXcolorgray 74 w(i)p
1 0 0 TeXcolorrgb 74 w(i)f(n)p 0 TeXcolorgray 0.6 0 0.6
TeXcolorrgb 77 w(r)i(a)g(n)g(g)g(e)p 0 TeXcolorgray 13
w(\()i(n)f(\))h(:)-118 4136 y
SDict begin H.S end
 -118 4136 a -118 4136 a
SDict begin 17.39995 H.A end

-118 4136 a -118 4136 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.11) cvn /DEST pdfmark
end
 -118 4136 a 251 w Fc(L)i(=)8
b([)g(])-118 4280 y
SDict begin H.S end
 -118 4280 a -118 4280 a
SDict begin 17.39995 H.A end
 -118 4280
a -118 4280 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.12) cvn /DEST pdfmark
end
 -118 4280 a 1 0 0 TeXcolorrgb 254 w Fc(f)g(o)g(r)p
0 TeXcolorgray 74 w(j)p 1 0 0 TeXcolorrgb 74 w(i)f(n)p
0 TeXcolorgray 0.6 0 0.6 TeXcolorrgb 77 w(r)i(a)g(n)g(g)g(e)p
0 TeXcolorgray 16 w(\()f(3)g(\))13 b(:)-118 4424 y
SDict begin H.S end
 -118
4424 a -118 4424 a
SDict begin 17.39995 H.A end
 -118 4424 a -118 4424 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.13) cvn /DEST pdfmark
end
 -118 4424
a 1 0 0 TeXcolorrgb 499 w Fc(i)7 b(f)p 0 TeXcolorgray
77 w(r)i(a)g(n)g(d)g(i)g(n)g(t)18 b(\()7 b(1)15 b(,)7
b(2)g(\))18 b(=)8 b(=)g(1)g(:)-118 4569 y
SDict begin H.S end
 -118 4569 a
-118 4569 a
SDict begin 17.39995 H.A end
 -118 4569 a -118 4569 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.14) cvn /DEST pdfmark
end
 -118 4569 a 743 w
Fc(L)j(.)j(a)9 b(p)g(p)g(e)g(n)g(d)14 b(\()p 0 0.6 0
TeXcolorrgb 10 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
14 w(P)8 b(i)g(l)g(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
15 w(")p 0 TeXcolorgray 11 w(\))-118 4713 y
SDict begin H.S end
 -118 4713
a -118 4713 a
SDict begin 17.39995 H.A end
 -118 4713 a -118 4713 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.15) cvn /DEST pdfmark
end
 -118 4713 a 1 0 0
TeXcolorrgb 500 w Fc(e)g(l)g(s)g(e)p 0 TeXcolorgray 15
w(:)-118 4858 y
SDict begin H.S end
 -118 4858 a -118 4858 a
SDict begin 17.39995 H.A end
 -118 4858 a -118
4858 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.16) cvn /DEST pdfmark
end
 -118 4858 a 743 w Fc(L)j(.)j(a)9 b(p)g(p)g(e)g(n)g(d)14
b(\()p 0 0.6 0 TeXcolorrgb 10 w(")p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 14 w(F)8 b(a)g(c)g(e)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 15 w(")p 0 TeXcolorgray 11 w(\))-118 5002
y
SDict begin H.S end
 -118 5002 a -118 5002 a
SDict begin 17.39995 H.A end
 -118 5002 a -118 5002 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.17) cvn /DEST pdfmark
end
 -118
5002 a 1 0 0 TeXcolorrgb 255 w Fc(p)h(r)g(i)g(n)g(t)p
0 TeXcolorgray 12 w(\()i(L)g(\))-118 5147 y
SDict begin H.S end
 -118 5147
a -118 5147 a
SDict begin 17.39995 H.A end
 -118 5147 a -118 5147 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.18) cvn /DEST pdfmark
end
 -118 5147 a 1 0 0
TeXcolorrgb 253 w Fc(i)c(f)p 0 TeXcolorgray 74 w(L)13
b([)c(0)g(])g(=)g(=)14 b(L)g([)9 b(1)g(])g(=)g(=)k(L)g([)8
b(2)g(])g(:)-118 5291 y
SDict begin H.S end
 -118 5291 a -118 5291 a
SDict begin 17.39995 H.A end
 -118
5291 a -118 5291 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.19) cvn /DEST pdfmark
end
 -118 5291 a 497 w Fc(m)13 b(+)8 b(=)g(1)-118
5436 y
SDict begin H.S end
 -118 5436 a -118 5436 a
SDict begin 17.39995 H.A end
 -118 5436 a -118 5436
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.20) cvn /DEST pdfmark
end
 -118 5436 a -118 5580 a
SDict begin H.S end
 -118 5580 a -118 5580 a
SDict begin 17.39995 H.A end
 -118
5580 a -118 5580 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.21) cvn /DEST pdfmark
end
 -118 5580 a 1 0 0 TeXcolorrgb 9 w
Fc(p)h(r)g(i)g(n)g(t)p 0 TeXcolorgray 12 w(\()p 0 0.6 0
TeXcolorrgb 11 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
13 w(V)f(o)g(u)g(s)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 80 w(a)g(v)g(e)g(z)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 80 w(o)h(b)g(t)g(e)g(n)g(u)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 15 w(")p 0 TeXcolorgray 12 w(,)e(m)12
b(,)p 0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 13 w(f)c(o)g(i)g(s)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 79 w(l)f(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 73 w(m)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
11 w(\352)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w(m)g(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 74 w(r)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
10 w(\351)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 15 w(s)i(u)g(l)g(t)g(a)g
(t)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 78 w(s)f(u)g(r)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(l)g(e)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 74 w(3)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 55 5725 a(p)f(i)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 13 w(c)h(e)g(s)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 13 w(")p 0 TeXcolorgray 10 w(\))-118 5869
y
SDict begin H.S end
 -118 5869 a -118 5869 a
SDict begin 17.39995 H.A end
 -118 5869 a -118 5869 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.22) cvn /DEST pdfmark
end
 -118
5869 a -118 6013 a
SDict begin H.S end
 -118 6013 a -118 6013 a
SDict begin 17.39995 H.A end
 -118 6013
a -118 6013 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.23) cvn /DEST pdfmark
end
 -118 6013 a 0 0 1 TeXcolorrgb 5 w Fc(#)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 14 w(A)h(u)g(t)g(r)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(f)e(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
12 w(\347)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 13 w(o)g(n)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 73 w(d)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
13 w Fb(')p 0 TeXcolorgray 0 0 1 TeXcolorrgb 8 w Fc(\351)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 15 w(c)i(r)g(i)g(r)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(l)e(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 78 w(d)i(e)g(r)g(n)g(i)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 13 w(r)e(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 77 w(l)i(i)g(g)g(n)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 74 w(:)p 0 TeXcolorgray -118 6158 a
SDict begin H.S end
 -118
6158 a -118 6158 a
SDict begin 17.39995 H.A end
 -118 6158 a -118 6158 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.24) cvn /DEST pdfmark
end
 -118 6158
a 0 0 1 TeXcolorrgb 5 w Fc(#)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(p)g(r)g(i)g(n)g(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
15 w(\()e(")p 0 TeXcolorgray 0 0 1 TeXcolorrgb 15 w(V)h(o)g(u)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 79 w(a)g(v)g(e)g(z)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 81 w(o)h(b)g(t)g(e)g(n)g
(u)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 78 w({)e(})p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 76 w(f)h(o)g(i)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 79 w(l)f(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 73 w(m)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 11 w(\352)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
12 w(m)g(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 74 w(r)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(\351)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 15 w(s)i(u)g(l)g(t)g(a)g
(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 78 w(s)f(u)g(r)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 77 w(l)g(e)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 74 w(3)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 55 6302 a(p)f(i)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 13 w(c)h(e)g(s)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 15 w(")f(.)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
16 w(f)i(o)g(r)g(m)g(a)g(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(\()p 0 TeXcolorgray 0 0 1 TeXcolorrgb 11 w(m)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 10 w(\))p 0 TeXcolorgray
0 0 1 TeXcolorrgb 11 w(\))p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -118 4421 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
-118 5892 4016 2 v -118 6013 a Fa(2nde)1720 b(1/)p 0
TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray Fa(2)p
0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.2) cvn H.B /ANN pdfmark end
 1970
6013 a 0 TeXcolorgray 1216 w Fa(Ann\351e)21 b(2018-2019)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -8 -481 a
SDict begin H.S end
 -8
-481 a -8 -481 a
SDict begin H.R end
 -8 -481 a -8 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -481 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -118 5276 a

 -118 5276 a
-118 5276 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 327.93196 ] concat

 pgfs



 0 setgray
 -118 5276 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 327.93196 ] concat

 pgfs



 0 setgray
 -118 5276 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 651.61195 lineto

 0.0 653.9603 1.90364 655.86395 4.25198 655.86395 curveto

 477.64397 655.86395 lineto

 479.99231 655.86395 481.89595 653.9603 481.89595 651.61195 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 651.61195 lineto

 1.41731 653.17752 2.68643 654.44662 4.25198 654.44662 curveto

 477.64397 654.44662 lineto

 479.20952 654.44662 480.47864 653.17752 480.47864 651.61195 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 324.83554 ] concat

 pgfs


 0 TeXcolorgray -118
2650 a
SDict begin H.S end
 -118 2650 a -118 2650 a
SDict begin 17.39995 H.A end
 -118 2650 a -118 2650
a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.0.-2) cvn /DEST pdfmark
end
 -118 2650 a -118 2752 a
SDict begin H.S end
 -118 2752 a -118 2752 a
SDict begin 17.39995 H.A end
 -118
2752 a -118 2752 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 -118 2752 a 1 0 0 TeXcolorrgb 8 w
Fc(f)8 b(r)g(o)g(m)p 0 TeXcolorgray 80 w(r)h(a)g(n)g(d)g(o)g(m)p
1 0 0 TeXcolorrgb 80 w(i)g(m)g(p)g(o)g(r)g(t)p 0 TeXcolorgray
76 w(*)-118 2896 y
SDict begin H.S end
 -118 2896 a -118 2896 a
SDict begin 17.39995 H.A end
 -118 2896
a -118 2896 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 -118 2896 a -118 3040 a
SDict begin H.S end
 -118 3040 a -118
3040 a
SDict begin 17.39995 H.A end
 -118 3040 a -118 3040 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 -118 3040 a 5 w Fc(L)j(=)7
b([)p 0 0.6 0 TeXcolorrgb 14 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 9 w Fc(A)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p 0 0.6 0
TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
9 w Fc(B)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w Fb(')p
0 TeXcolorgray 11 w Fc(,)p 0 0.6 0 TeXcolorrgb 10 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 9 w Fc(C)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p
0 0.6 0 TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 9 w Fc(D)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p 0 0.6 0 TeXcolorrgb
10 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 9 w Fc(E)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray
11 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 8 w Fc(F)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p 0 0.6 0
TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
8 w Fc(G)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w Fb(')p
0 TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(H)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p
0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 8 w Fc(I)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb
11 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(J)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray
10 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 8 w Fc(K)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p 0 0.6 0
TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
8 w Fc(L)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w Fb(')p
0 TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(M)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p
0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 8 w Fc(N)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb
11 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(O)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 55 3185 a Fb(')p 0
TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(P)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p
0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 8 w Fc(Q)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
13 w Fb(')p 0 TeXcolorgray 10 w Fc(,)p 0 0.6 0 TeXcolorrgb
11 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 8 w Fc(R)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w Fb(')p 0 TeXcolorgray
10 w Fc(,)p 0 0.6 0 TeXcolorrgb 11 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 9 w Fc(S)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p 0 0.6 0
TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
9 w Fc(T)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w Fb(')p
0 TeXcolorgray 11 w Fc(,)p 0 0.6 0 TeXcolorrgb 10 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 9 w Fc(U)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p
0 0.6 0 TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 9 w Fc(V)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p 0 0.6 0 TeXcolorrgb
10 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 9 w Fc(W)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray
11 w Fc(,)p 0 0.6 0 TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 9 w Fc(X)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 11 w Fc(,)p 0 0.6 0
TeXcolorrgb 10 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
9 w Fc(Y)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w Fb(')p
0 TeXcolorgray 11 w Fc(,)p 0 0.6 0 TeXcolorrgb 10 w Fb(')p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 9 w Fc(Z)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 9 w Fc(])-118
3329 y
SDict begin H.S end
 -118 3329 a -118 3329 a
SDict begin 17.39995 H.A end
 -118 3329 a -118 3329
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 -118 3329 a -118 3474 a
SDict begin H.S end
 -118 3474 a -118 3474 a
SDict begin 17.39995 H.A end
 -118
3474 a -118 3474 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 -118 3474 a 1 0 0 TeXcolorrgb 8 w
Fc(d)h(e)g(f)p 0 TeXcolorgray 77 w(a)g(n)g(a)13 b(\()d(n)h(\))f(:)-118
3618 y
SDict begin H.S end
 -118 3618 a -118 3618 a
SDict begin 17.39995 H.A end
 -118 3618 a -118 3618
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 -118 3618 a 254 w Fc(m)e(o)g(t)15 b(=)8 b([)g(])-118
3763 y
SDict begin H.S end
 -118 3763 a -118 3763 a
SDict begin 17.39995 H.A end
 -118 3763 a -118 3763
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 -118 3763 a 1 0 0 TeXcolorrgb 254 w Fc(f)g(o)g(r)p
0 TeXcolorgray 74 w(i)p 1 0 0 TeXcolorrgb 74 w(i)f(n)p
0 TeXcolorgray 0.6 0 0.6 TeXcolorrgb 77 w(r)i(a)g(n)g(g)g(e)p
0 TeXcolorgray 13 w(\()i(n)f(\))h(:)-118 3907 y
SDict begin H.S end
 -118
3907 a -118 3907 a
SDict begin 17.39995 H.A end
 -118 3907 a -118 3907 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.8) cvn /DEST pdfmark
end
 -118 3907
a 500 w Fc(m)d(o)g(t)13 b(.)h(a)9 b(p)g(p)g(e)g(n)g(d)14
b(\()g(c)9 b(h)g(o)g(i)g(c)g(e)15 b(\()10 b(L)h(\))f(\))-118
4052 y
SDict begin H.S end
 -118 4052 a -118 4052 a
SDict begin 17.39995 H.A end
 -118 4052 a -118 4052
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.9) cvn /DEST pdfmark
end
 -118 4052 a 1 0 0 TeXcolorrgb 255 w Fc(p)f(r)g(i)g(n)g(t)p
0 TeXcolorgray 12 w(\()p 0 0.6 0 TeXcolorrgb 11 w(")p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 14 w(V)g(o)g(i)g(c)g(i)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 76 w(l)e(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(m)h(o)g(t)p 0
TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 78 w(o)h(b)g(t)g(e)g(n)g(u)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
78 w(a)e(u)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 77 w(h)i(a)g(s)g(a)g(r)g(d)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
76 w(:)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 10 w(")p
0 TeXcolorgray 11 w(\))-118 4196 y
SDict begin H.S end
 -118 4196 a -118 4196
a
SDict begin 17.39995 H.A end
 -118 4196 a -118 4196 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.10) cvn /DEST pdfmark
end
 -118 4196 a 1 0 0 TeXcolorrgb
255 w Fc(p)g(r)g(i)g(n)g(t)p 0 TeXcolorgray 12 w(\()p
0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
10 w(")p 0 TeXcolorgray 11 w(.)14 b(j)8 b(o)g(i)g(n)15
b(\()e(m)8 b(o)g(t)13 b(\))d(\))-118 4341 y
SDict begin H.S end
 -118 4341
a -118 4341 a
SDict begin 17.39995 H.A end
 -118 4341 a -118 4341 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.11) cvn /DEST pdfmark
end
 -118 4341 a 254
w Fc(i)e(n)g(v)15 b(=)8 b([)g(])-118 4485 y
SDict begin H.S end
 -118 4485
a -118 4485 a
SDict begin 17.39995 H.A end
 -118 4485 a -118 4485 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.12) cvn /DEST pdfmark
end
 -118 4485 a 1 0 0
TeXcolorrgb 254 w Fc(f)g(o)g(r)p 0 TeXcolorgray 74 w(i)p
1 0 0 TeXcolorrgb 74 w(i)f(n)p 0 TeXcolorgray 0.6 0 0.6
TeXcolorrgb 77 w(r)i(a)g(n)g(g)g(e)p 0 TeXcolorgray 13
w(\()i(n)f(\))h(:)-118 4630 y
SDict begin H.S end
 -118 4630 a -118 4630 a
SDict begin 17.39995 H.A end

-118 4630 a -118 4630 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.13) cvn /DEST pdfmark
end
 -118 4630 a 500 w Fc(i)d(n)g(v)13
b(.)h(a)9 b(p)g(p)g(e)g(n)g(d)14 b(\()f(m)8 b(o)g(t)13
b([)d(-)f(i)16 b(-)8 b(1)g(])g(\))-118 4774 y
SDict begin H.S end
 -118 4774
a -118 4774 a
SDict begin 17.39995 H.A end
 -118 4774 a -118 4774 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.14) cvn /DEST pdfmark
end
 -118 4774 a 1 0 0
TeXcolorrgb 253 w Fc(i)f(f)p 0 TeXcolorgray 76 w(i)h(n)g(v)15
b(=)7 b(=)15 b(m)8 b(o)g(t)13 b(:)-118 4918 y
SDict begin H.S end
 -118 4918
a -118 4918 a
SDict begin 17.39995 H.A end
 -118 4918 a -118 4918 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.15) cvn /DEST pdfmark
end
 -118 4918 a 1 0 0
TeXcolorrgb 501 w Fc(r)c(e)g(t)g(u)g(r)g(n)p 0 TeXcolorgray
14 w(\()p 0 0.6 0 TeXcolorrgb 10 w(")p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 13 w(C)e(e)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 76 w(m)h(o)g(t)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 78 w(e)g(s)g(t)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 76 w(u)f(n)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
77 w(p)i(a)g(l)g(i)g(n)g(d)g(r)g(o)g(m)g(e)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 20 w(.)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
11 w(")p 0 TeXcolorgray 10 w(\))-118 5063 y
SDict begin H.S end
 -118 5063
a -118 5063 a
SDict begin 17.39995 H.A end
 -118 5063 a -118 5063 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.16) cvn /DEST pdfmark
end
 -118 5063 a 1 0 0
TeXcolorrgb 254 w Fc(e)f(l)g(s)g(e)p 0 TeXcolorgray 15
w(:)-118 5207 y
SDict begin H.S end
 -118 5207 a -118 5207 a
SDict begin 17.39995 H.A end
 -118 5207 a -118
5207 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.17) cvn /DEST pdfmark
end
 -118 5207 a 1 0 0 TeXcolorrgb 501 w Fc(r)h(e)g(t)g(u)g(r)g(n)p
0 TeXcolorgray 14 w(\()p 0 0.6 0 TeXcolorrgb 10 w(")p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w(C)e(e)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
76 w(m)h(o)g(t)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0
TeXcolorgray 0 0.6 0 TeXcolorrgb 75 w(n)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 12 w Fb(')p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 12 w Fc(e)g(s)g(t)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(p)g(a)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 76 w(u)f(n)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(p)i(a)g(l)g(i)g(n)g(d)g(r)g(o)g
(m)g(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(.)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray
10 w(\))-118 5352 y
SDict begin H.S end
 -118 5352 a -118 5352 a
SDict begin 17.39995 H.A end
 -118 5352
a -118 5352 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.18) cvn /DEST pdfmark
end
 -118 5352 a -118 5496 a
SDict begin H.S end
 -118 5496 a -118
5496 a
SDict begin 17.39995 H.A end
 -118 5496 a -118 5496 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.19) cvn /DEST pdfmark
end
 -118 5496 a 1 0 0 TeXcolorrgb
9 w Fc(p)g(r)g(i)g(n)g(t)p 0 TeXcolorgray 12 w(\()p 0 0.6 0
TeXcolorrgb 11 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
12 w(O)e(n)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 76 w(v)g(a)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(c)i(o)g(m)g(p)g(t)g
(e)g(r)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 79 w(l)e(e)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 78 w(n)i(o)g(m)g(b)g(r)g
(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 78 w(d)e(e)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(p)i(a)g(l)g(i)g(n)g
(d)g(r)g(o)g(m)g(e)h(s)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 86 w(o)f(b)g(t)g(e)g(n)g(u)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 80 w(l)f(o)g(r)g(s)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 79 w(d)f(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 116 5641 a(l)g(a)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 78 w(f)i(a)g(b)g(r)g(i)g
(c)g(a)g(t)g(i)g(o)h(n)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 84 w(d)d(e)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
76 w Fb(')p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 11 w Fc(m)h(o)g(t)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 17 w Fb(')p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
72 w Fc(a)f(u)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0
TeXcolorgray 0 0.6 0 TeXcolorrgb 78 w(h)i(a)g(s)g(a)g(r)g(d)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 14 w(.)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 10 w(")p 0 TeXcolorgray 11 w(\))-118
5785 y
SDict begin H.S end
 -118 5785 a -118 5785 a
SDict begin 17.39995 H.A end
 -118 5785 a -118 5785
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.20) cvn /DEST pdfmark
end
 -118 5785 a 5 w Fc(m)i(=)p 0.6 0 0.6 TeXcolorrgb 13
w(i)d(n)g(t)p 0 TeXcolorgray 12 w(\()p 0.6 0 0.6 TeXcolorrgb
15 w(i)h(n)g(p)g(u)g(t)p 0 TeXcolorgray 12 w(\()p 0 0.6 0
TeXcolorrgb 11 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
14 w(C)g(o)g(m)g(b)g(i)g(e)g(n)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 79 w(d)e(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 77 w(m)h(o)g(t)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(v)g(o)g(u)g(l)g(e)g(z)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(-)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 14 w(v)g(o)g(u)g(s)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
78 w(?)f(\\)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w(n)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray
10 w(\))k(\))-118 5930 y
SDict begin H.S end
 -118 5930 a -118 5930 a
SDict begin 17.39995 H.A end
 -118
5930 a -118 5930 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.21) cvn /DEST pdfmark
end
 -118 5930 a 5 w Fc(n)g(=)p 0.6 0 0.6
TeXcolorrgb 13 w(i)d(n)g(t)p 0 TeXcolorgray 12 w(\()p
0.6 0 0.6 TeXcolorrgb 15 w(i)h(n)g(p)g(u)g(t)p 0 TeXcolorgray
12 w(\()p 0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 14 w(C)g(o)g(m)g(b)g(i)g(e)g(n)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 79 w(d)e(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 78 w(l)i(e)g(t)g(t)g(r)g(e)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 80 w(d)f(a)g(n)g(s)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 81 w(c)h(h)g(a)g(q)g(u)g
(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 78 w(m)f(o)g(t)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(v)g(o)g(u)g(l)g(e)g
(z)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(-)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 14 w(v)g(o)g(u)g(s)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
55 6074 a(?)f(\\)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
12 w(n)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 10 w(")p
0 TeXcolorgray 11 w(\))k(\))-118 6219 y
SDict begin H.S end
 -118 6219 a -118
6219 a
SDict begin 17.39995 H.A end
 -118 6219 a -118 6219 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.22) cvn /DEST pdfmark
end
 -118 6219 a 5 w Fc(N)h(=)7
b(0)-118 6363 y
SDict begin H.S end
 -118 6363 a -118 6363 a
SDict begin 17.39995 H.A end
 -118 6363 a -118
6363 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.23) cvn /DEST pdfmark
end
 -118 6363 a 1 0 0 TeXcolorrgb 8 w Fc(f)h(o)g(r)p
0 TeXcolorgray 74 w(i)p 1 0 0 TeXcolorrgb 74 w(i)f(n)p
0 TeXcolorgray 0.6 0 0.6 TeXcolorrgb 77 w(r)i(a)g(n)g(g)g(e)p
0 TeXcolorgray 13 w(\()i(m)f(\))h(:)-118 6507 y
SDict begin H.S end
 -118
6507 a -118 6507 a
SDict begin 17.39995 H.A end
 -118 6507 a -118 6507 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.24) cvn /DEST pdfmark
end
 -118 6507
a 1 0 0 TeXcolorrgb 191 w Fc(i)c(f)p 0 TeXcolorgray 77
w(a)h(n)g(a)13 b(\()d(n)h(\))h(=)7 b(=)p 0 0.6 0 TeXcolorrgb
73 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 13 w(C)g(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 76 w(m)h(o)g(t)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 78 w(e)g(s)g(t)p 0
TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 76 w(u)f(n)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 77 w(p)i(a)g(l)g(i)g(n)g(d)g(r)g(o)g
(m)g(e)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(.)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray
10 w(:)-118 6652 y
SDict begin H.S end
 -118 6652 a -118 6652 a
SDict begin 17.39995 H.A end
 -118 6652
a -118 6652 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.25) cvn /DEST pdfmark
end
 -118 6652 a 436 w Fc(N)k(+)8 b(=)g(1)-118
6796 y
SDict begin H.S end
 -118 6796 a -118 6796 a
SDict begin 17.39995 H.A end
 -118 6796 a -118 6796
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.26) cvn /DEST pdfmark
end
 -118 6796 a 1 0 0 TeXcolorrgb 9 w Fc(p)h(r)g(i)g(n)g(t)p
0 TeXcolorgray 12 w(\()p 0 0.6 0 TeXcolorrgb 11 w(")p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 12 w(O)e(n)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
74 w(a)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 76 w(o)i(b)g(t)g(e)g(n)g(u)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
75 w(")p 0 TeXcolorgray 13 w(,)e(N)12 b(,)p 0 0.6 0 TeXcolorrgb
11 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 76 w(p)d(a)g(l)g(i)g(n)g(d)g(r)g(o)g(m)g(e)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(\()p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 10 w(s)p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb
11 w(\))p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 74 w(e)e(n)p 0 TeXcolorgray 0 0.6 0
TeXcolorrgb 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 73 w(")p
0 TeXcolorgray 13 w(,)g(m)12 b(,)p 0 0.6 0 TeXcolorrgb
10 w(")p 0 TeXcolorgray 0 0.6 0 TeXcolorrgb 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 76 w(t)d(e)g(n)g(t)g(a)g(t)g(i)g(v)g(e)g(s)p
0 TeXcolorgray 0 0.6 0 TeXcolorrgb 20 w(.)p 0 TeXcolorgray
0 0.6 0 TeXcolorrgb 11 w(")p 0 TeXcolorgray 10 w(\))-118
6941 y
SDict begin H.S end
 -118 6941 a -118 6941 a
SDict begin 17.39995 H.A end
 -118 6941 a -118 6941
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.27) cvn /DEST pdfmark
end
 -118 6941 a -118 7085 a
SDict begin H.S end
 -118 7085 a -118 7085 a
SDict begin 17.39995 H.A end
 -118
7085 a -118 7085 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.28) cvn /DEST pdfmark
end
 -118 7085 a 0 0 1 TeXcolorrgb 5 w
Fc(#)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 14 w(A)g(u)g(t)g(r)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(f)e(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
12 w(\347)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 13 w(o)g(n)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 73 w(d)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
13 w Fb(')p 0 TeXcolorgray 0 0 1 TeXcolorrgb 8 w Fc(\351)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 15 w(c)i(r)g(i)g(r)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w(l)e(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 78 w(d)i(e)g(r)g(n)g(i)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 12 w(\350)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 13 w(r)e(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 77 w(l)i(i)g(g)g(n)g(e)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 74 w(:)p 0 TeXcolorgray -118 7230 a
SDict begin H.S end
 -118
7230 a -118 7230 a
SDict begin 17.39995 H.A end
 -118 7230 a -118 7230 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.29) cvn /DEST pdfmark
end
 -118 7230
a 0 0 1 TeXcolorrgb 5 w Fc(#)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(p)g(r)g(i)g(n)g(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
15 w(\()e(")p 0 TeXcolorgray 0 0 1 TeXcolorrgb 14 w(O)g(n)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 73 w(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 76 w(o)i(b)g(t)g(e)g(n)g(u)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 78 w({)e(})p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 78 w(p)i(a)g(l)g(i)g(n)g(d)g(r)g(o)g
(m)g(e)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 20 w(\()p 0
TeXcolorgray 0 0 1 TeXcolorrgb 10 w(s)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 11 w(\))p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 74 w(e)e(n)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 75
w({)g(})p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 78 w(t)i(e)g(n)g(t)g(a)g(t)g(i)g(v)g(e)g(s)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 23 w(.)f(")g(.)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 57 7374 a(f)h(o)g(r)g(m)g(a)g(t)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 14 w(\()p 0 TeXcolorgray
0 0 1 TeXcolorrgb 8 w(N)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
13 w(,)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 10 w(m)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 11 w(\))p 0 TeXcolorgray
0 0 1 TeXcolorrgb 10 w(\))p 0 TeXcolorgray -118 7519
a
SDict begin H.S end
 -118 7519 a -118 7519 a
SDict begin 17.39995 H.A end
 -118 7519 a -118 7519 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.30) cvn /DEST pdfmark
end
 -118
7519 a 0 0 1 TeXcolorrgb 5 w Fc(#)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 12 w(o)e(u)p 0 TeXcolorgray -118 7663 a
SDict begin H.S end
 -118
7663 a -118 7663 a
SDict begin 17.39995 H.A end
 -118 7663 a -118 7663 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.31) cvn /DEST pdfmark
end
 -118 7663
a 0 0 1 TeXcolorrgb 5 w Fc(#)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
14 w(p)i(r)g(i)g(n)g(t)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
15 w(\()e(")p 0 TeXcolorgray 0 0 1 TeXcolorrgb 14 w(O)g(n)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 73 w(a)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 76 w(o)i(b)g(t)g(e)g(n)g(u)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1
TeXcolorrgb 76 w({)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(N)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 11 w(})p 0
TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
76 w(p)g(a)g(l)g(i)g(n)g(d)g(r)g(o)g(m)g(e)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 20 w(\()p 0 TeXcolorgray 0 0 1 TeXcolorrgb
11 w(s)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 10 w(\))p 0
TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
74 w(e)e(n)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 74 w({)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(m)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 11 w(})p 0
TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
76 w(t)i(e)g(n)g(t)g(a)g(t)g(i)g(v)g(e)g(s)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 23 w(.)f(")g(.)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 57 7808 a(f)h(o)g(r)g(m)g(a)g(t)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 14 w(\()p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(N)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 11 w(=)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 8 w(N)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 13 w(,)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
10 w(m)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 11 w(=)p 0
TeXcolorgray 0 0 1 TeXcolorrgb 10 w(m)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 11 w(\))p 0 TeXcolorgray 0 0 1 TeXcolorrgb
11 w(\))p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -118 5276 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray -118 5892 4016
2 v -118 6013 a Fa(2nde)1720 b(2/)p 0 TeXcolorgray 1921
6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray Fa(2)p 0 TeXcolorgray
1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.2) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray
1216 w Fa(Ann\351e)21 b(2018-2019)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
