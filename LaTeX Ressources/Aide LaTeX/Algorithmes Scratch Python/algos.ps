%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: algos.dvi
%%CreationDate: Wed Apr 25 13:01:08 2018
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Letters
%%+ Utopia-Italic Dingbats Fourier-Math-Symbols StandardSymL SFTT1200
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o algos.ps algos.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.04.25:1501
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFTT1200
%!FontType1-1.0: SFTT1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1200, tctt1200, latt1200, lbtt1200, lctt1200, rxtt1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-202 -360 1341 829}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA11E7AC15F01C3384F89075B25B2605
942C0A2CECA9A7B578D31EAB935BE7B9AB3ADC0F524C109CEDC6C957EC56766C
0FC50BFC16A9442F5E255F3B0A67EE59204698AB70A1A39761E9B16DD89BB0F3
B2DCDF661B96C1C95C934AB9466827D2E4AC2F341B8CC4A08AB82A5D1E25B865
E925740538369BD1FAFD3AF962D17D14899B1BAD67B780B2D06D6D6743CEACB9
A77A234354E7767050119B9EE47F033B8B3AD59BC17B84C3B929265ECEB12176
454594C17B4C8A9BE7CFDB06CAE1B189B7B72FA023F2F671095CA1679D71C627
40DDA7EE2E28EB5EC2F297B019B93073CE0219E736F88F03E11B8F8D61132ABA
E20CB0C148E47FB495C9FC70AFBF6D9260FEA67AC4FF14D9CE253D43CE471E4B
09C61209FCA852453561C54B179D77D8D7B4BEF2852FDE1CF7A3D5DA6081944E
735D7BB3ACECA094F6717571CC15B2FD29D40FE9AD1BCCE3208DB35EF1515BE3
D4F0CD696FE9B889069B62BD57252AFA4E675A9EBCDF695915446FBA1E0DA982
DE636E320753B3FC033138F766D844E965C1B266F165839DDFAE9127316602E2
0B8635508042F84EC62AC29AE1E6CB020009200B52F025E7D7EC7FE441F242EB
DFFD1341C8928EFE881A3D40E9E62FED03BD3F83346AD2B6C5AC99D5F2C775E7
F7067EA1BF99B552EB3D19F4FC153D92608A6CC832791E3A32A50C9E84CFE18F
9E91CF9423BD122FC94A91CA92D786D074E4D0DB2FB8209E727B9AC4CEBA2EC0
6F3F08F571252E8CED9A0751BE795191BE5CA1D9174348335109ED9169F1B5CC
A6250255C1859118DC64CE2F1D75C409B4ED106573674F3794C1E1E059A77BAD
6C9F663984631254B2F2278DC479DC3AFD69B176E7FD6FC4FC1B46FDA0CE7F3C
ECDE6F53530C37EBABA41F0EA252119950277E7467924722964C551FF3BE35B4
D7972D819D3821FA091FEFC02B248B6665B55E73C8D4C9A35C96375DB94FE91E
079DCFEBD9E34C683CB22A4A4E517F6503AD5892A1A7604D26A2527C17CB5ECE
08BFBCA1E859B39CCCEEB40C5EC660BAA4F798E9ECBD57D99D9858A9E044FF36
163C849D361A1E5FFEEF71A28E214B3BFD198D6B12ACCABDCDA1EA2EAC3C1C42
57740EB1328AD2924D97B97858FB3508D01F39905900A44677D054C233968191
E7B7F96165FFB642D1A36361B8B056E3AA2B41ED659192BA8D3B048A3B47917E
6A9F22C857F04D2BAB51D7EFFF56E05B2BE7BD831C20F384777D027C71522BD1
5FB90197448D51EBFAAFE15A688FA0086CE1D3017869D32AA1EA1C10DD37A377
615FC76FD66870BEA874628E0A4FA065C0B2CE3AFB122924855642A67A99FCCA
94BDE4C447E194013CAAA17C951013D63E53F9A4857B003046F55FA1585EE041
F16B13119DB688BFB73CCE3A81C12D2733C297DBD30BFE096EDD56D5EF9CD88E
4B559A6513385CD9A2AB1A9CCAF306EC12F62263DE129DAB52394D2B2CA27C4C
DEAC8E099600606CEBD60FC9920B77A2AA58EA96F4C9CFF7998CDB1F703D6731
0C10FC1690089B743CBD5236C1E9B87293BC88EDE67CF9748B5A0EAD84E9FD9A
8AE382F239B232929B577C97D32873563D5F82949F73DD86D9422DB39237BB6E
42B8FCB7F40E423AE5846590D7D4A0844A8D953B2294A3530B70506A8BDB04C4
5FD6C30135A61F76E0CE573A0BE83C5AB759DDD2EA863C5113E097087C5E7953
B691D46E49482F924A4795DEA2323BFA60B9483D71D9D6F66DE76DF499F754BC
18087842446D7A6D63D71FE765F5592390320559EDEA215B206F6D88F9B651B7
295555E5E67A82CE6C2C4B87C4B93B734C1CA138B911BADFAE94C5789D864D85
AAED9C590956DD3C8503B34C9F165E4550B85B0AA8B73B7D287A888842A84F44
E072E2D000CE5985B754DADF75E07F30210237D9E81C7EC7CB55C9715BE8EBBB
FC636192D921C9DCE98A6FF1EF251DD02D57D79722E571F47D87F4C946189FC1
FBF3E181E097EF32D55417A119ADD0A8D9D4DCBE364766B000D732D9949A1E96
F4F6F058E2560BC1C517FD7C813DCCD5D84A6B3EED3B427B47DC8F5645248EC5
98904C81C240E3F06FDD575663B2CCB36DD6AAA1743E051A5CD3E1C80121D077
C8403DB2A1A27141F28B353C8AA87466BB5C0F6140DD2E0DA0494936CBDCBA94
50A2BAC0E3331F077EF71245D6A1C17D3FDCDBA8B4EBE43B924370144C1C6FCD
650270DF4EE24629D829FAE10DE7A2A4339CE24A8FA1408A02FBBA60C2A50F61
F4C703C97BBC59068DBAFB562CCEB7453E6434DF3DC6705C5F70C84ABCDF3F07
E2D620E4ADBD9D7BD39315199E3471D1CE0E34188E50C0096DC1639332651BE4
80828A3F568043D0E4A1F25D25149B2F24EDE3962CB010E15A84AE30E4846980
EC5C1049D59579120E119021D3E4077CC0C49FEB71B475E1A557A52CF5D26CDF
0AEAD125DE84858DE78F5CB85C1FE5EFA156C2939C725EC4C91E5FBE1D6E4A85
FA546218F5BB8034648A83A440BD96D8705D549AC19A2D66E18FE29270B94153
0493A792AF31D8447E651DFCED5CFF852770AD88B26D4DCA36C8880B7D64FEE5
5A96E081CE67BFFA2F19E41E22C2614EFC3177E2E7388E86A129F62D7F314F14
2A4E69A0827B4F3C0A46FB47B6E67A05EF6638B1F64930049606F6E6DAD81E3B
829D1F795865CE1F374905D4192E141233CD84350D60C691AC4FFCB9648934E1
2A5DEFF896387341436E4E6C5484EB7CB4542B60B5EB568FBD90D3A0A3264F70
046B4F4B52F2D5209525947CFBD1D90A82EEF4C1E9C6AB966BB08C04DFC00F6E
192B904A5EC90B0D9EC8D9D9B5BC3E26BF8563FD245D2B8AC53C60CD071C47F6
E34CB2E8668D9981FC28449F0691C1D8993B48C077FE01232C868762E85F0EF1
3072FA842122BAB8CC35A44930D8636B2F07BA18837793131BE20E8786656388
145B75F62204E623A02FFA5021B67B0F3DD5AACA15115AEACD61985EDF817CF7
182D1FB18410EA02F8DA0DC5A3F55B678B6F190CCED55426A5523EA703604458
7A364E5DE00E25D7382D90CF3A5C950981629D0C9CEE52E93768265B77BB1842
D47F30465B40B606B26C093C8EB03F6EEB2ECAADF1C109B006ED28E45E47EC9E
75C44149235790239A4576486737AFD40B431C32FC363DB28AE5EB4A8BB7EF45
5C242812451BA9E1F38573C650915EDBA5D1ACA5372FFE67ADDA409F14ABF4AC
E5EEFD0D302587BA00319CCBF0D8C374017298F7C66140E10C8D9673FE26902F
FE2F6D1B7942425AF95652CF8B3D7EE528E712901AD838AF2D840055E57D34F8
F5427AA8B28B73D53F872A5FCBF8EF6BE65FD52B10C375592CB3356EAB836DAC
4807AF95412F05BE0ED67AF8345F37A0B20E82B08D091CEF8BB75415EC339887
01ADD7A8411DF02025DE5CA8D7F86B434C1FA9AFF1C6E632034C44024D87A445
DDB654DD3B851C6AB0621EFB194C6318EA271EB7B2024EDAE73B2631F8E51850
6118D8394D3C4E96E7F6F21638A1800C217BDB15878D99130DE213B16E03E5FC
2E49838787FD0C0106F36CA49B4C6439A262E4CBB1A8C9A7838F8DE435BA0D81
412AB77BC8E1874CF329240E46C1AA937360B55C2150AED64F9A5EB6A269D3B7
A4B2DB63FE06D0D625B4D9BC59A92A88F3D3FBEC28F7CB55A617CC931049184D
FFBDE155F7118DABA2710058926158D711DFF21AF39C60F597A05E9B37E4FFFA
D136A792D8C4993C3122F5EEC98D02ACF9EA6D5F967370A7D562EB02A302BA4A
00DF72DB047943D56868567B1315D0F9FE44C80ACCD1BF6A3112246806E0B9F6
3AC3417C5263F01DB4DDE4E6894EE0F8A39060F99EF165DA0B4241270814C693
126EE873EC04600A02C995DB65F0E08A5C0793C26287A77C58F88312DD85DEA5
1F6B8472B15FAAAB32CD9DE6BDE9FA15474AC675E8EE1F8ACD9347DB0B27CD76
A99127CF39388F0972D13AA19210B0C4BA7D1CC306EFADA2C37166136D8BAE91
ECFD67C463442638261697EBFEA96F2289B3EB467E5CF14E73CAAD95E110FEA1
216C9832DCE7E31B732D761B67600809D4B1C3B1D24C285191CBBD78AB420996
5FDD17C9302F60C9809B51B46F37163C32064DD263C1C973433A17CB87862910
C4D049BC66C40FF3E62111B4D48F2782919CCE6362166B55809E4CBA5423FB38
A6DBEC4A5361FC6631A27F331AB1D4DE5374A7A854DC37DA7F8087C848C9D431
786389E89CA9008C0B52607CFA345ADF9F91A5D2DF077AF0BCB5D687CA7BF163
78BEB8940C458A60F471326237A8979519CC9B81E608C0406CEE89DDE43F0CC9
DE58D2EFEF8E3D81853E0C53BF03CFB40C4E4003B6887A21D593537D8E24537C
5E793ED16B46EDA4D6177ADD6A6A1FDABF25D6A6D678FA05EF92A998797785C2
2DE6942CC1285D0EE6CD85C35C0183BA44892206B95E1489AC693C7DF6E181CB
97F880A54D0B6B6F8E064BDD22F82ECE5A93BC30021797C9913A4D7D411C52FA
6EBCC6C9DB7D3B620CF4E0191F8ED22F8D62752AB55C9DB2519815C98E40C0BF
EC4751CFA3ED0F1515BCE53148836C6E111EDC9562D69A1AEB141375D9E71C55
53A14C595260430C54576EA7559E6B6114267FC316FE5AA6B809140DF390A3E4
1DC064A3C4B0448E20465EC30C3A7EBEF3A7A3DC7EDC871BC564BA9FC17A9DFA
BD5B1657FD6F3A1119C36CE0038556CC2E780C773C8D80983A6736A107A5B5BB
C5E1DB6A0DCB8D0CF788A3009ABCCC4A0E79294A55CFB8F0E10624C67FB5E460
E8610B1FE94F320F96024C27E8BFDB2A245FDFB7ACD82556A0D4E648240D898E
46CDFE4487F0E44DBDE4D8C863BA790A3C8F22F385439E40CB3C14CD74242AB2
8169A11A2C7BB9C05E8C9FDC96111549E91C271E252F8D170CA31B2961DB4C9C
60E6F50A6886639B94529409B0FFFC95F561109C50B975A26DFFFA9A8F43B31E
330BE53F487B7F8FD8D06AC0176F1D452C7BDA4E29E4A2AF979E544F00DD5551
A98F338822A9A64C53EAAD1711F183C90B14D2A9ABB0EBFEC0EEFDB885B39C4C
44D8260A698AF73FF392E07A86B2582B96E03F56AF9C4E9B39E96737E283FEC7
94CEDC09F9077349C9655341C7BD11BEAC2CF89DB02DCC30A54D6E85A3B3F1D5
2392951B81CC79F4ABDD8F9038C1B0A30E8C92C71F4C2A9D0DF3B6F3A0AAE25F
B6CDF5D3AA9DF5271293418EBC442F48690A01F044C379DD1EAE2BCEF21BA426
BE2C493EBEB81392955105AEC38EE03F4DB4D1D0FA8B554BBBD608D100D3CE0D
D6B3B23190023A5035F28F217D5DF243A1FB7092C88600C780BEE103DB6AEAF8
9AA0764494E4669B3C3DBF9B0661B3A1D2DCF495C9EE2789B00B4F7AC6380FE2
890634946A5026B0748134B6F6FA919BC7CBCD9F998A44E891BD5199B8163247
986823AD649CF372D07415CCC791B8B7754DED7769F5DD27BCF2DC5981E013A7
629E643DCA18801DAB752FF1E1A4D6F6C6618E54F7FF5B1588199252F10B0978
B9C17AA0BDF094E6D53F222D4048287F80A484F05D7624BCA26C1455EAA0E3A0
17AF221254218F656F0F84765443DADB814D81CABEC45F4E6F5C6488D480E841
945DD69FAAB0C6063E18CD20852B1F05CFBB9B053AA1053D249E3AA85A323261
786D70A68F67D0958F7B6763D281D68BD807F3742FE70DBC9CE0878ED59EFC52
B122D6E079AEF23D64DD5218F8DFFB6670BDBD7C2B30891DF7D24ED2B44018C9
EB0B1AFE05B417E7B630C8C5D9DB3167E60D997AF642767194B869AAE4020D27
84FAA9A2DDD2B9F2EE89F19DE217C48F1895326FAF27554827C75D25998AA4B5
67B98EBBF6067C4DE61848CDFC1C45E49C7E2274CAFDFCFA1C63A568B7413B67
6C717E25102703F477315EF8A1CEBB7577B637E61DC2662EA19C65721A2655B2
C804E9D764A017C37FF58417DE2E55C1268BF71D62859F2D9A9EA2796075AEB1
B9DFD302705C5444197C235D6C4585BB2180C9ADBF5F30EB45F8EF9429592EF7
15A396FF20A2B48F77D127E0BADD73CB819194FDB0535D5611E1A9DAEB0115E4
AE5FE13B2631F8E518506118D8394D3C4E9534E18ED948BEA12041F7030D2A06
C44FD26023145941723005E8C6E420FBA22DA809F2774FF02D8F8DE6BF0430BF
2B6039464D053BA07B9A6724865162FC33328E1974995E834FD39BB81A3CAEA9
654E52C4BB7A8DCA32B6B1A41E8730A84DD6524A30DB697998C18F8C75A6593C
521D27E364F9986988F44F9FB1BA385D79739EC28346E30F68FDC4A8D31232B1
9326BC7B08F19182BA7A3F347521A441928177663BDF60082659FFD79453A44A
20C66E1E7122697E62E4081D5CA573BE21564FDCC4809EB18552BFBF3E3BEEAB
4B41EB7B77C59EE90AF4F02BBEC77CE8BAEDD0066D6DBA8CF0A3FEEC357A8C41
5FEB348899D7652E9A512A4D6804B4B23ADB033CC4ECB93EB10E687C00BB2C95
BA0755439B2804E5FCE11969BE5CC89920648625603400441262AF317A4CC295
991CB993566C783A463CB52C2FF2892A528B5F2D4213BDBE4D2D14A7E9F67319
9F1EE65BA361272B1B47DAE0981396048A5AD1F663FB2D78FFAD1F872F3020C2
C86966C36A1DE47BBEBE2B9C8623A4341CB7362A9F65CDC181AEF58BDF7D3EDD
17C69195D52981FA04770A97D7BA0189719FA8780324620366F20FA25B4C19DF
F6C2AE8698A561F1E0847C94A4581965A04EB6CEB7390252A98957C410F91795
3F351C8451997F0083D2DE423A5D7FAC9EFFE1357D42B278AFE556D1067F2D16
9BC16959479DC625DA2774CB84912E46057538A214B96FC4D1ADA3DC26D77EA9
BCEC71F100D9B85D5F867C4D9FDC7541557896A6585869CDEBF3652FC0135192
132944071CC2AACAF34C727330FD4F460F8E24F928AD32258D1693C478E90F15
46B264428704FAEB29203A0B1120F6D0330E0BDE8876CFED95944BE41BD94D74
2D2137079582236B702BC49F8717AB23A1051BE31C3427B5C486DD18912FD7D3
646552A788EE6EDCEEAC08A119292B15E7F7F6EA014F3A2B5DE4A22247E88BD4
C45996AC2938222B75ACB3F498A01FDD7EE3C0C4181BCCBEFE80D43695514C47
2AC78E697DF83922EB9FF70550906336580866DF5BA2A1E3F9A2F51B416F7145
F3FAAE650DE3C615698EC35D335F60CE5E0D106BD0A1F0E113EA7408DE17270E
0A6C2F891EDB27A135990AA936BAED123BDF873F5D32986352549A3BA2799EF9
7B8EE8B96A52D70C2D3B9446E6DCBC1491ACFF53DF539BE14907B0AC22A30F42
7D061297C84F6A6969ABCF2DE204B8BF1FC7D06D3CBAFDE2B7F8D633847EED52
392EF971109736612A039ED025D7D97546EBDD463A19AD76DBEA523D0D446EBC
550B5FD71A55FCA75EC0090A4BD77FC107023E1F52279AE364EA053D3D8FE847
5B87C18222102AE68685A19E59D08F4F225C770E404A4B2D5FA1288B8387B976
C875B50929D3966C9832860DB9B412332BFA5DCB99A9757AFB867B901CC8A602
5EE6E12A9AED270D031F0260B136B926336C3274788DFBEFA0AB42412D8D67DE
2CD1299306802ADB4408A21A41A2E09EE6C087C5F3898B654161C3C3EBB3655E
E55886DE734AA1BEE176360C9D4729BC9299E6A48CC9AB96B6443B97E9E16C77
0DFF99CB8D09EF4454C3A8B22A857F7FBF66B79438C71152CF8701502622C826
AD26EBF22155C02D836C61E0B2BF364C55BC430DCF83C3CB7BDBFA7E97845ECF
8EF3B6A3D13C40F70038D918394F20CA784B6F8C9E0B72B2D0240EF6B410D743
1A79CE9ADD196DA18D92AF442017714F3A75778650252B780CD69A805BF57B01
B0D32E68CA744721243ED33C15005BAD9127E3CFF86EEE927CE5E602DAC7E14D
54D48491EA0027EE740B4A1082A7DF97B4548B76B14E972ABAB31B7C647AD2B4
50D80CCDA3BCA6D3A523B80543E5C716B404A8F2391DB2FC6EEEE5A2A507AFAC
C6EEBE755F29D0B9412526CB84936F109A0B248854BF1E7E171BE67C38AAC695
2E4170A4A239E6831DE034D2F4BEC784F4132F48667B6A874E53A0AA80B7CC9E
F5096B41CC5449B737B9277F022E48F07B9C73FA6800FC183C150AF02B4653A5
5ACBE4C407C8FF4CBD8628321493E84927F7CFF7EBC4AD0DAC11AE4FFB0A7C64
42AD1DD294CC46C8B87E9A78529F835ED70B702152DC52D909C1A300D78E6E9B
6E895E837A96E75454B004D95271423B6611D3879FD381D567701BA425176BE2
95AF7F8A7A7DC7D39682CE23EBDA471669580C9AE639399FA0AD809EA1950070
EF36C3E406C33C037B51DC5267C06B6E8D6998421E4EE5ED20191B6A7AD6A357
32DF471C7E718B13F29CE209E3E7A0FD5B1A24EE5D80ECFC0D0D2158B5093720
1A7E78607868EC5DC1C8CBC5329D97AFDB352F5719689B22D3B8EBB904BB928C
B1E676CC759AAC9EE1D540B4402277A83331201E3A289E97F17B7BBD26353871
37F29D0455004EACCC2FBB9854D2B0FC084C77443448D7B01560B4EE0CF06176
40AE8EA99AB61A02872E8EDDF908066829ADA91DA1D968D7192B85F4A95922F6
0861D99911E33447D8549475B2EE6256E4C5931142B4C1064DDCE295D28468A2
BFFB11C1B61C8FB7FD9395E6CBF84676A658206E349BE5593DC6B1BC123A2D8C
5A752A1FEB041810C6DD545F7DE98A4724D13A676C071F4EF3E84242BE3B5A2E
3CDB4C63F5B008F8FC167C762789D96023EAF7D4C34C8DEF8D4B2054A8A2DCF7
2E1D9D047D02FDDBFA44550A03D98CFC0271A8A5C6007A3338EBE018F3F8539D
22DFB5A7D40FBA8779FDE1B0ED350E58ECA8C603058373D746FBA5E62BA7632D
0B88E1482B71BC1C6A126A6C76BB597D1EAEAA55B511223A8B019ACF3E18A8BA
532BD69AAA70E5BB283CF6615D460026747763D2683A5BC2D68D1A004B586D29
ED63248721974FC3C004C75E2828CDDD3107095FD062D11B7F47E7A4CB7EF71F
78AC63153F1C4D22C0FA65FABED9E09AECA851AA1A7A7519E343CBF5A3AF6027
C908EEE802A295E4248C4A10DBD3B89C0AC1C6734DE8874AA71E488093F7202D
889D9AEDD15BEC23BE24C3092C138192140DEF7D4088D3F2082D570A1DC7ED9C
F11494A6D112DDB9337EB35FB8C8B84993DCBF321850127B022674455EBE48CB
E994F1A3AF54BC4121034DA9E029A0470EDE2E0C685E6F15D50D8B9315CDC469
594B76D390751B41B3ADA384E8EA5F6B277040BCD70780090B81610A7D9ABD33
844CBE2B23850536E8E4795E869B9B7156B4E83E8010294A833875F9F16E68C2
BCDDA6675BD1F1DBD790D61561AE5C0616208A4A264C8A460D0A2A6DECB325BA
32CFC7BC164349B458F4F90E90F1F084844FF1B6FD006A0C7828BB707BED0287
402DF3168E4C3CCEF87EE4C090038341832D4161AF4CFC54CEBA5479223FB34F
4A59ECC4344E74B03E45C7CB40919D63DF8C1680D7EC2373B6FD6C924443632A
6F629EE1B60C0D79E95CC48E939AED5C59459E230067967A1A3266393FD14E0B
B7BC7F81B30458912B40D54881C467D3250CCDCB5FAA8A1AA52DAC77F7699E33
AF0EC4FCDCF69E173152213DF5295D40C3A06C2C9625BC53344957560EE06A8B
AB7C3C8011BAA755B29ADB992C57D07D4A7A77B911A7E7AEE41F0BEA1FDAC194
51FC0D70E4198686C3D5180D223C92CC0329BE522F5FB2C3CDFE56319DD88FCC
4E40D53D50F358FDDF71D32FA9ECE0C669C039286079198531EDE3FA78EE9666
8F5541C7634D2D0A452AD4229832C3601673E5E85B18D216EDAAB4E2C0FBFF02
93C0AAF406FE416C0E028369FD738C95F677BBA38E5742A98350CC298EC3CB7B
8D2FDCDA9E151D2794A2454D6FF2B35B0031AFDEFDE65E02A883E14278DD7718
FAD08CC4BA9D7BE47ACCA1F458FC80A98E0A4D45BDFEB49ACAAB7E808376C9E7
438E016D6941686DED51A3C7307BE347A0E68AAD5A0A63AA127A4CC961AFD9E8
18CF14A96A671FDEBFA2674374AE046AF8A91BB229AB36C70E647C09131AF0A1
3232A51D5E33F0DEC039DC701E8FE4FAA0A4B57239835490FC25A1C121518356
99ECFDC0C37978AA3EA3B13DCFF78285B947BAC908B198FE6F7063122AD02011
5CAD325A62D69DF0C400E149F9741689406DE2CFD7820C10B9FBA427A226E540
4B71839F98831A922B5D47A2265703123A34BAEEBB06ABD4834C1BCBC7E0B8A3
B062B6D732AE47EE72F26186B15C32F0DCB0EB88DC7864AA1C7FC66D11ACD5B5
BAF7E53291C6E7195BC25B5004B3C243067F074F06041A2FCFCA28E2D884D7CA
60C224E9712F72CDB12CB3356483C87D5F455E267E39F45158FEBE4F3F940CF2
F9FE072FA44D7445E1981A331400F19BEFC42568276E2F73CFE77C698547A4A2
E2F461A3EAD126FA65529EC1FB00BCDD8BAF88B63591D81401072CA100D46D3F
204078F5D3F969346C4B15ECD39E1A35635591F28FE190E74866564C88941DE5
CAD66004D5E8C0B36974FEB521654CBA4A65F19E10FB1B21A18EF7B52D3575DA
03DEDBC19BDF86FD147F9DFD5D596C372353595E1B6E32702FEA59B669193D82
EFDD9146B43DC5C5C90662593F644D4C60B3A2B629547101C5AE6D4F467DFAB1
6F4343E83836A5EBDB83DD1AC8F18610EC214C0D5CD55A311A477BFD22C6637D
0221DCE95F0E420DCEA1DBA283274642E066547906C342ED568844C3B89D36EB
ABF7A7291D2E37D63E97E208CCCC858A513ED0D518F7C007660D60FE40CB3B2C
C39BDD7F1560D58FC968EF269DA1E88464B19EEBE1F81EAF5DDBA6A5B619FC24
504304168A60094B8DD6181DD539CB07BFB1F7D27759E76E615E8AC96DCFEB83
20EB6250ED68DEF618B911E1AD17E5B6ED6450884A86D930A963754D3D1838A2
837E183A2A88F22388A9EA41E968900DF0B0C185083DC69265B89025963133F6
809EBBEBFD8040A02847A4341F88CFC7672BDB5BA9A7344A2D098F0B4B82C3D8
CB155A03A55E5E2E5112CBB82580832DDFF93BA686CF408DBED45A87F540EA1C
12A55F5671291F97690055607EA8F372B87A46F43A33C2716533D5389256A33D
7FCCFD63B4BE7418101EB57A632AB59C12EFDC4D7182F953CD07A63FFD087ABA
D5636CFB39C1AFC85DEA0EFAB18EBB46D921F90E423CD10E102F98DD2B27315F
2F55D26422533DECD96F02C52E1FA91A1D958DA526DB2AE050183B69F77A375F
54FC8BADC3AC9CF383C73C2A2ABC50596AA7CAC7853E2E847EC769203627ABE7
BBB3B4C4BF2490A0D62EAEFF156B5828234244BDE0BB77983BED35A08DBAB56C
D4E70C2DCC47AEB2AC84DF803AD3863007579732EB88A0F70FB49A077620A992
D44A6F0B91FCBB2194A9F4B4CAB2B09406E5DA8177D46FEA5870DC1198AAAEBD
432D8CCB25ADB0ECCEBBF5382A471E5184DE90DFD9A438C10C8D1EF051E88AE7
7D56456FD82C90F5D0F35955E9F3CC57300C19385BDD1CB32951C6CD15380A31
A4F8BC51B5028A6D3A83F79918E8CAAE26F2C9B2B78672D323718C7292CF7D96
BD4E3E80213634B10F7DBDE3F53105F2F77FCCD2DF4475509D9FC74F9B037842
AB2372B9A6F35E1A4059B0C6F18FECC7E00A2BA6B2D994C0E22F9ADC94585475
9E124EE850C7AD6D74FCC0851826159569889AEEA3BA7836495241743313D1B1
337F24127B0E09452410840591D8FF50620AB8D6BCFC7FD2FE4D4428E388229D
7325DEB5AA8E88868EFF3B89AAF4C334B9858787014694F278B6A8B09BE227DC
E833CA1E5CA81E6CD6BDE510BCE5EF6FA4AA3A4573BE520FBBC5384D186B4B78
4D587FB71E82D1A5312A3DC5042E17EF20E8A173487DF644CC716D3A5D21E045
B83EB018D939123745CA8BE8DBED30C5F4FC3BBA8CDF97A19BFFBA44A36AC7B3
A2D6F721B4CFBDCCFF1BED30BB1BE4DDD199727251C2930C7FF181D407942F27
5681B7F9DEC5AE5B6FD125F6E863864E5DF0FF3B470C2F082067FFC990278427
06D72EE09FDBFC01E3DDEE2D53B21CC59C12A4E887BDEE616AFF4A66FCF41D02
C7EF26080C9902E879B75777395A19D63A97CC63459129D9A0BFFC3DBC5A9857
3BFAC64E6C7B4CF1633B6AC984577C60BA156183BB68AF3B962FFF77E19C4169
EF6B9A5876429CBBE0720EF4E624B011360BE287F41235393CBE6676F8C9C6C6
BC70A2C9BBE16D8613F6EB582F49EE66B82CFEBA5C5F8C98C98F829D59145252
3D44374C1B444111BCA20827DCED39A2CDA2167CD3A56B5A2FA272CD40EF2025
6DD4E05169A0C68C7C49BACFD77D9DD86354761176C27BDE3F0661DD7943A9DE
0DE1C8AB9BF19A5BB8741B68891BF9A6B1EBE66039838630F35F0AF5D8944F5F
3144EF014710E6D5B00162D97159E937F9B47122422E1E73FAFADAD78125EE54
9A1F90697F96A1F00B49899173F6B1AC83B475FC8470D1543FD4D0470FBB9D78
AC9D2AB7A59741C2283091AD196340D32CF19143024DC9202D46EED5E045302B
71EABAC5F8A0D97D5528742B877DDD6E9209BB556DD0BB74D75851D2BB81EAE5
47713D0F7BA5152F86DF51FBC45BE43685B0144AFDC37E4629BBE305AD8213EF
44204E8694612A779696AEE7783CD001A30160440EA86EA88BCE1734AF158ADB
0A32797DF36118345B2AE6DC6500FB077F4ABB036B2C68725315DAF40825EA24
3109A9D2DD41ACF6D9407B49573A36BD084245DCC0C4CB6BA8A2CC08811D7FC5
94706CE2536EB7AAFB312BEB7AF06E6CA115CF24E6B0F0844FF5F3666A914EED
241063B79159BE99419C569A573A79CCD72D21A5FEA1848B62A16237CF967FEE
2B827E543310B17221420768D115F62427531EAD3E9C53D4E210C6DF4CE0439A
D51CA059CAB2FC87D6E65E89C7428AB49A6E98ECDFA15DD44DA34574BFDA34CD
5393989770235661621A729529B3BEB4F49A32CB8A923E240986D45E5A7F2A75
8F9BC5C946EFF7D2E96B6C18E7521C6563A677A3AEE379269B4718AFE72B5BC7
625080D073BC484C694A23C7067B66A438644ECD6A327AFCA6D3D422A47673C0
438691F4B576E35D7122F1EB8542DF73495CA295BE6933B1441A82533F183AAA
98325C1459DE4A183FAD8A5DF5D36DD18DED24E434D98573336D5F16497CF614
01D73C5BA42F50C112B8548A7C45FE1D59818563EAAFECE69A764BB9E25C7CFA
3DF39FAEA546BA5AC2F7FCAAF80E6021E312B30483C1462758FB368F0751E74C
0DBF09561107F9BE15F3262D019CBBA26006FD4DCA7A4524D2ADC19254075422
B20B5E3963FA4D7764977B7C9425CA10E69F746B0E406F62B421E9D68F9FB035
BE9F8F9C31AD6C881660D47FB341FA02A41E73A4A2B6C8893F42FEA25546D32B
DF3FBB5282962120BD37C6B003661EF1F2729556E93802297CF25F0E072F94DB
A9B15CC145F6BE3E3B8BF6085986C777E3721D85508E159F2B9C855592B1C7D4
CA87B116CD804D0A719CD4E8F10BD5A0A62D6D741B717175BB4D23F82F2E9B55
00150BAFCF7C2199AF5502C1D7790849F810D4245B717F54412A33979B9FE7F5
0E5CC3105FB046DB6219CDB48619F12AA011B09CBD3C4A8E52F4FB1049C3C94D
1FDDE504C2A9C76DDFF027863F5EEC17A1974AA28E3DD48AA419750D78DC8FF1
3A5A6B692B2893EB5B54B5FD26EF7D426640589F58D4624B8098C9D0B5849100
081C5CC0BA416D69BEF17328B65DB9BAB6A49FE620EF6E6895E464A4FCB1BA37
E4A11BC3DE5341C0C869A0250D7377B26B2CBC69994A576F5241DBB4C36227C1
A5114AB1C388263F35657F0362F7006B9DA0813F18609B04176AC85E77E01BDB
33F07E16D63DEF4707F6B104F3EFE06B6836A688BD4AD18D94622DD5DB094C15
C4F421C8AB4A6D3AB54B0A1F4B3C414FE521FA2B2AE66D02C9F77ABE35B2D497
A52F427B48559206FC9B255B98724EEE2301BB261726ED4922B80AE4C107DB8A
FE502AB88EA3A8C46BC4271BBF6D2B38447D83BA4813E1F3B1D72527A53EBF53
D8D286C8083F70482597F92C1E61C861F9E8D0E64D7FC107E94C23C551DC8C15
995764F5EB8712AE5F357991951BCE11B2DB259B0E23844F3BC3374F53A1D70A
DFCCF251C95E560A9DBCCDBED76F95A8D9116EE821549AD0A95082D8A90A2DEA
987251E4EF96AEFE8458B2AEBF61E37964800F164F028F88CB2A09B2EA710401
C352C44CDE1FC15112897D16EBB6FC7746D687300F90ECEA17F062B801F661BD
D3E513AA01CE0943FE5EECAA190E5CC6F3D240E0689D971ADB484CCA8401AACC
25A83B845ACF204AA20C31A589D0764F36B199D4C79414423A5D5CB464AA1606
EE10759823C6BE1275408E7D0F7DE20770AE26EFDF315F5EC708BBCDEAAED128
81477FCA280B1792E66A173EBA374A4A48ACA5050862F7006B9DA0813F18609B
04176AC85C9FEC4F845A140857F842B95161B324F41C263E4318B7ECEF0FA5FD
B588D2612B0641197EDCFB416FA0B1FC626436B4D6BBD6E3CE5998981BA8C23E
398AAEE5697501FA1F9A608BA577442CAF42EE425217CEE42522A5276014042D
E97C5DFD1B5068CACB84FD7005C6DE83124755B02A4184CC0FDD2FF8EA6DFBA8
2A20F1260452FD6044AED5261EA58D27E5C233674F0000C5BB3A34201951610A
1966F9A788BECBDA3D55D6424C5CEF3B9C841AA49B49E6722BF395887CE668F9
9749729848311D10EF425951847483D1FF8DFECD298979C10010D1C3524F6F89
EB6923B6EAD4D7F5EB46265AA5ED4ADBBBA67DA7CAD24320C9D33067DC210CE8
292EDB7D33143E9C3CF13C7DE5CAAC3B2E33AFBABD676D741730EDE2DEA3FDCA
4CE35D25CC80C7C2ECB0F5405BF370B45488F0E706131DAC85A88A5CEB75C30E
761254F64DEDFFA3D7090D0402BF4B9AC4EB8E1B9C0308C2FAC82F08FF6C08D4
C75A204729B4D91C206F483C3E9353AAA14C871A230401234B36BBCDC4F19CD6
EBADCB7D7385C74B44F1EC8DD5B0B4E237F919152F8D9E86229BFCBFB1EE9950
1EADF417CE00DDE8DD468DA189045619995F085D950BE2E3A6FF12D4D04BE885
B29E9323FFEA89D49C450B99E5E00B685179B2ECE73DA3B1F9B662B7CBA5C6A6
644076BA65A173CED31B81C4FF697C5CC74AF0542133868010EE23C94C045901
2F278B56A748E76A976728BDE2D47D16F4DD2004E22E28CBF89A4559650FF62F
9D9618232010B3A7BA41DB5929C152862427E6DBDAB2830C10B9FBA427A226E5
404B71839F9DF3B220D609A2706CDA6E51FB9A5ECCECE37080AB602AA9720407
AD8891ABEB4018196ACC5D856EE251361F5FE450B55F5AB7C8FE69F71FE00DB9
005DC58973248CAB687740AEE0DF952D585CB5BA09DBECFE5A994E50BDD32BC9
B076B753C8E8EB4988B9CDA70FFFB6F30ADAB249B3A82F7BB0667F0385712B6D
B4856CCA3DFEF5B0255C27EBF31908D259DFBACC56632900681A2F346AED20E7
D31F4552398D636F2041F6EE049BC37C9B239E79D10A5EEF53877649E137E08D
525402B8F7B7F3165E55BA7988BF49CCF913425085BA2DCF239E0ACEB4E5E3C1
7FDFE534AB282624FE5795A75CA1FD59DD21624D7CF6C1819320B766793F2498
27D7B0C792A0B968B14E9B37D3464A3ACF26E00CD63BCA5A812C06822DBEA4CF
609AED4E13EEAF80553A4ECD06C62E0B1721F4EFFE581425FA25B465D408E7A6
6A0E90EDCE7A3AF3514F0586A54F076F34DE6A129E6F95C41DEA28477CB1E7D9
8B2C5336772153B097CC1B76B75C2E8A6A4FE24F69F4726DD73FFCC1E9A0E244
E89F0AD558650EEA39978F1D7494BF5AA7B2D81B7AF776C50D6F29B33E9AFA74
58C76577B025CC2EB4F94DB433419A066AD2DE64BCD8AC45374C54D922F59B14
902E78919EE799712FCE00B4B05FAB870AD3210EF8EB3A1425ADDE3EA443D87E
143D2D203B13D79864AA4DA8F143C672552C6C1C4B9DCD81D2F792244BD6ADAB
3C186FE29CB288D591B5F8D8E9270F84C3A17879699A794885D7C51D5EBAEE7A
A7EC50ACE67ADC2ED1221FA8330AD209AB2F31A131A36BF26673B6AB1037E84B
1C92C25D3BF6095A365E842E7BC0355B5D2B89D59C24055ECFAF71368C078579
FF2AA1B7C85B6AED675C8CEA80B1C3511FC764C7448537E7372AEEF63019B725
43D280D64069EC95D6B59D2249AAEB863B4C5BD1695BD593DDB9C8BFCF304E8E
193D4ED68C189DAC64EDF35EE624193F88587B2B01C3654B195AE60787DB399C
BC5466D40EAB56EA42325062A25F890F862C9196D299E09079CEF395DC2A7094
08BC924D7F3DE5AE713CC37BD962770F37D0681ED8FDDABCF712B42086EE8900
25CF7B5A6CC7E7EE391F360A90A10C3299FD377476CA4E03FE5BDBF8AA429D32
392D317A0FDF6EB818B121EA39688B5B5DFFD6711A6506A117B236EAA20B026C
176CBC968560E746149D06C106735E3322D680CF7323CBD6529ADA1B4B8DA2E7
7D209CF1A646DAF4C5D06F15C039CAAD1A59C372423B426EFCAF69D4C3AFFA16
2C9AE1FC4FF99C29C798D690A503B8DFD0B94B649E68E4E71960139749E6427B
96A2EC04EFF9989B81F3D1279A8A9A9995CA135BAAAABA5A99F87206A02F3941
8BE6A45DBA4C17F47E57EE1B656B0C79EA6DB4EFE8D8620AAD09E162AA857368
F0704E10381E26CA9AD24614728A47527262110CBC064997669EA011735A5632
42DB06F6F19AA2F1F87ACDBB255D9D8DD8C81D960E5723A96091CC760D3416A3
8E96700EFC466235824DDCA5D00C48987D87357EB83569C4C0D45AE4E8DAFF71
4B518561B17A9860DA936CC61227FAAEB8D678A3E3BE9398FDC5E94BAC3B253B
8448B48CB160EA6FF57DFDC72EDDF856480AB18B6D3BBF431217D2EA7D143DCC
7B59198B53BA73F703C0C8BA76E4E99291D00AAA31C809C50E4D2421E438D41D
58EEED5B8CCB532712D029C7F20352A894B559DC57957D9A160CC3E68F48B308
5A05262EC609F5A7DE56811FD89156A616E97D3649179A20A5FF22189B85782E
E6195EF6ED3B6F9EBFE6B4F0A92C00D79A0CDC1269D70A0882F28D17C685E49D
A887A4FF26D3263B0942638068AC6B80301B341045978D34A9AA42FEF5F9AAA3
D39F5A1A72B430EF00E0BD48D972AE0546947ADF148D4D8FA65D54D59A5C3B79
44D6A8522C4DFDBC5BB43C61558D39F5B050C02819E59F2B7222B339700E1A66
66D96BDC78FCC41A97E3E5F0B879934FBA33E6410694CE7F3A03CA4D8A20BD92
408A668665C04306AA59A268FC8EA33DA8CB9ABBA17507700C8E264F5C4E3E11
84891DFFE391AD501757248DE1175D665E6915CC96603D36636F5B2306CA1DCA
C207A711CF0675808D37510FF1A39A9549E7E411C533D6F9D6E4EDB75C228472
D120C5D9C0BA2E7EF8DE1DB73C2915DDE0C3BF224D4C228F18B6D2CB3960D6F0
D6F0F08578A30A64565611D32024E568936163FD3FAFD44CD3CB4F4F10241FDF
5359811480E9A1700FBCDA80382198B670A990BDC57803F35EF9128FE9A61D68
D72C364BBBA6A23A7FDB6B95562ED8191D924447F56900D1A6F47310D6DFBD4F
A66699D1214C1351F86596B360A0A47E0299C85479FC17CF4C543A2EDDEA27A9
9E76D24B04C4521AE5ACE33A33FCEDD3B873B9087899160E3F5DD6D82426C71F
72B7AC1B7DEAE96D37762DA7D2C292C3F5C3905C1A58C622B314CC8305DF0012
C9388C4C9F555F45F8F84BC0AF1CE0C751C53056C2DB79632AB59C12EFDC4D71
82F953CD07A63C536BCE01137592A17BFEF5CEF5B4636A0FC4B2B387B00A7C75
ED147E3CEDB295474D564273DAD83D028B9DF88791AE4F207B8603A0F252EAF1
3ED8CFC69D05D64D6003C8904C836FDEE09D265192AF69322B6309C723F9AF86
7E4292F7ABC48A9F9FFED6FB331F5711BFEF3BE6E1127BEAE86AA0D5F885EB4C
8E193D4ED68C189DAC64EDF35EE625CA510BC09AF8A908026EDF26D85EEE2E3E
DC24336B2EC04E12217797A80092B2A70845417F1089F1F12EB4BA5BF6E400F8
E6B000D5702B7C21F5F8B72FB3875C001E76E85CE34A8F84C92FC373B02284F9
060C62A7866BF011878B66454AC75984BAB2DA260AAEFA48BCF65FCD5C64EB83
331A1D69E8BA6D4834DB9FD36D0ED2072E39D4128C54E502446A366EBB2DB65C
FD1910C5F90752F2EFC66927D21F35C5E859354790D787793365965E3B6D06A1
102534A6F09C7FEA6FD3ADBBB3576DB39F0C29EAB0DA4BACFA4A91B098DF83CF
924E00DCD4DD8BEF1136AFBAD9AE17D3DC32769C79B85AEBCADDBF3B803E6BC2
9A9E5BDFFDC394A6DD05090D2AD1B22C1BF44D9AB6942B81BDBA976FCE898C8C
7AAE11CF12DFF092B3CFBC34234AEDFB7B0F88FA5A2C4F86F8CA845FEF772477
C54254C4BAE891B75FC22F4C691F9E8A3363028BE46E13447122B95093F816F8
94ADD0E500D6C447F86C8FD91B7D1DA32596763DB56443B84BEE7156AA61FF86
610BFE936F0EAC10B249A2BA2744E04DBC4FFF499F23797BE959B2B87FE13DC2
90C53819DBDC258F7220188FE7F54CC51ED4CB9221317C89429AAF6E52912808
E8C5535260D4EA5FFFD93D9868C2D68770397C7B4173F3C108521A540F69B02E
08A6167A57818974CE8173A0C12FD7739ABE03F3FB0C86C8D8E7AA4AA2B80DE8
CDC18198E7BBDB8172FF911C16FF9C198E7F155F65A791488DA1E2FB3A06DED1
B56E016E19CC4D899762EDA2760085768D83F9E7711B59DDC9ABB2E9415DC4E6
065E72149AC8A08C08FFF222CC3126DA20B024075C1FD49634792EE72543A191
7508507F81F868B7972CF270BBBC3F1B4162F2FF0D37FB5A2F90A57149A835B0
2533C33AE7C79C87603B19F9797120E085C7CFD4C4FA43070CD1E4926BF65931
9C3734B81C2E144AB2DE01E9FB8C55DA1511DE781EA5743B2359304EA20A61DD
0A88CDA2190A7C4B309234799559BC14EE930B1A098F840FE83CC303CA9BB08B
B6C8F392A0971EE623A5CFC18C2A6DA8841506461767E3AEF408650BE7E200BD
C0C8F32CAF4ECA0423E5B046E667E956F94D402305023CD7770583AE6928B68E
1541D82A4BA8C17A0CDDEFE0028B838183F5E37C2126C1FFEDFFA5990D4F1B69
CA3E8A11FAFA11120744BBFE71F16FA311E058456E0E11DF882A64DC0E39A85A
2835DB65C2C2325C3D8B4744DDB61B2D4B9841DA7E4FE58F9BCB46D082E3F0DB
EB3A328C7B992358571975046E21FD579F18C710D4F20FE53BA3F9CB873ADBB3
22ADD241314FA52F053C62EE0F14316833478242F9C073D5C91633AC277DE63A
C5BACF55AB37EC2FAABD1E52EE4BB839E4DC23EAC7C94A3EACEF4395BDFE59D9
7AE939EFE603DAFD54B8C1638D1743F177F00C0111542D8F7AC5F7A74905DD06
6087312547B950B74E69FF8C7EDAA14D93ADBC7E01D93162AFBFBDEA945CF61D
A81AF8486DB2FCF25D154707E52B2278615C223E29DB45ECC8E55495FB8820F7
2C070BF1193B816D2387095662704EA746CF3380BF611925E1EA0B2B5B3D0AFE
C65C5D0196AA31847CEAA6EA1FB37AA1512B7E1A5A333268313F8DEAA256FC5F
B2E085EF239F92DE2647ED61904A7ED4D48EBC6041D4ED3E9982359291598BD4
45EA2211E35ED80BAEEA76D92A1BB2D923234FD2A1D0E6C372C3EDFF93E10E0E
DDF48A5182F9D3FE73309B60E6A180BDC096004C09C4DDCAAE7C041B52A0FAED
2A6CB461A9D43E9F778400DD81899A75F58489076969F99A80D23ABAAAA332EE
FD654E792BC98F10E2506D6628CFD1238DB5A759417E0D6A70DA97484E36FA67
507EBEB2348AAD8C236C2F79ED1D7568E1B0DA01B01740E760A719D1EA77F7DB
7CC705C67E3B9B2DF1EA184A040720E9ED94E0B4221B343D6D392053084F12EE
D509A330CEA0DAF7C5B204EEB928256CF57ADEF6159361BB0B9BD43D4B8D7191
A9CB9641F6767E680014A691CFA9BC37EAE048BADFCD2C692DF06DA1487FBC4A
B1C187B03F94AAAB643C623AA10C126651F8DFC95455B8E798BA91F2C1745436
50F59A037B092B9EC740EB5778E39C741CC32E2D7F209DB6A3278F5C3BAE6AFB
38B757DA81569CE2EDC18889212E0CE535F58F5AE00F69DCA212C978F11CF1F3
C9E24DBE49E96DB2FD79AFC258393E4B6999DBEF9864BC27CBA7CABC2A7623E7
7D6B5C58DBDDFA806CCCD979C71DC4F02FCCB67063E2600B868A533D8C4E5B37
C1E0A0839B04E508540C9F6C30F421FB131D87EFEB1227B67655CA63B8285CA8
A68ACF31D6B10246460853358ED3BC4DC80E2C8EE065759675A0507B7DC70DE1
12070C90BD0F218AC63132E57B963CE446FC361FF4217D484474B662BDB92283
D532C9C587975C1044680F62F7D9BF246114F4032A02964E74370F14EC8D7F8E
637DAF9A7AC452BE871193E8176138A868EF1020FA10E8E060FB38AEBF3EE237
EEBBCBC65EF99AF0BBB1B030CA80207D7B38F41A595A22EF4121F9FFA02D5B02
6F6D1ABDC3EBF86872302A4EBB29FEC54D709C50864C105A279C2511488D5197
E9BAA33950A7B84F019B361CE6E448845F2100BEF91E71CEBF9F168505F38D0A
C4FA581EB40E64E135A4FC9D8B50991F9B45BAE084DC5A9506320FCEB29F767C
7B2DCCC4ED4925CC1A998112F6CAC00A373A23292B4BD5EC4969A9EF3316DCFD
9401E35CDC6016D116DD87E534985C11E1CB56AE0A7C8203D9F119B813E15DAE
0789CC114004CE5FCA5FF4328CA207AAFFC94931C6852621BD1A449C165FECC0
3858BA8C83F8664FF2DFE16524FC2F4C014C1CA85E2A0F842621CA38297540CA
0CBA1300E1B972EAF85FCC41622C5C9BC654EBE21C6C8DFA7397D0227C6CA5DE
14AF5B07216F8BBAC89E09FDF1901D8A43B67E620200B9F9CC689AFE8C5A61E5
4D097BEDF1877415B9249DEFB6E683A7B6E729E56E422A2B75AC06B4867BE2F7
800368CCF435AC4FE8C9E844F59FBE1C0241721891A5AFDB246489A60610825F
FD2D739D352143F5E2B9EE52B74A6D99F7B8634FABE7288C04EC131FA27C6D17
149488C3BD38D2A17BC2C6F1058C02EDE2BF7079D74C8FD4A3ADBABA51B07B6D
0B5DE01ED3970DE186AB443D6FE0697C6C8826A6B64EA97F58358EA6707D6B09
A5D65B247BB1EF8F2164CFD3EB507EA58F3D1870C293E83E5EE42BDC95A092ED
646F3686A6A5656BED28F8F710E6C2A5CFF1F31F6AC765397705FA916F5F1FEF
BDACB6C76BC2BAA7B1FBB24E3BC350CC68E261FA07DDAC6047795B6B29E97E12
360A0ECAA2D7D523A06A6E2887F94E7D1F37CD59E2740E54EA271BF809A7397F
15545082E1DE1E43AA462AE4B1B758FBC45E89EC2169A1AAE78E77E2A61C60BD
0904200CDB0792CF315BA0B3BFE302F4573FD3B4B2814E54905F25C08A281F01
6894547B81998A8B34E3E1AE0436EE0DC1D97694F9E99EB7DE411D368FC2B484
647EFA31F1066C5097EC50CBA8CC4688B6D346F64428D89E4B111BFF8C4FC351
F9723FEB7A3D5AA93BC8576DC979D9AFC3ACEF3AC4890DEF5150662BDB6E8438
3E96FCA19BFDC5AE5D479AF0E6E11CB661137C2A878E540A07D9E50E9DE7FAD5
050D2547F76C8C39EF34A278BAAC6E0BDD4CF5CE400B5E3DAF9CE29F5C562071
3A526B75567E77A8B604F45E03015795FA9CC2A8ADFA5388DC6F89EB76FD3465
45AD9724BE5B83EB23F77B7664C4D558F15D8B862ED8433F6F724384A6813847
205847E9588AB3023FB6F0CE943C24524AB64B360AF678AA3E78B3D71B7757CA
B550549BDCCFFB6949C4DB40369F75EA8DFBA93BDECC8576AC89D7D22D7A3F1E
D323DEF28A9FDBF612F575EC6A529276BA8085E5D0CA8F2F54CC5EC8F48B975B
89DB0BFDDAD14287110FC26EBF914091449B9301BE832CFFAAA7F2F7C5DF8833
1831B8277B941D65BCE467D48E92B797895BE98763C82D8058CA06A6C90A9B05
F416FBA90932CDAA177A95FAA4202556503942B70A2626B6321152E29E0857AC
89A060E043195B95577A947295AC357CCF43C301B4FF90432B64CDE5BCD9D1C5
B080C962D5D7B4AFCB4A14E33E0FCB8CB7B0CB38B77BBF87BB020D55D70DAE34
4243FBDDFED8FA29E287E88C22F6D62D48AAC5BF951D56CDCDDE74498D3A0B57
C6F7B9E1CB18B2010FC17D9DCB65648A2AB8DC7CADC27273EC391D366C4D2852
AC88D4C024EB3974C265886281100E2C82EB20AFF7B171B8CDD1896E3E27D6FC
3E9A5B4A6A90966C9BA4D744669647437B2B756CE0D6E8DBD8D34BA3C647BFEB
816AEC56AA418336EA1F617E02795AFFDC5ACC8DD58D04B4DA88A5D420C9D2D3
61E16C87F58A154C524663AA057BE2C823A4180CC223348F3A1FE8426CA4881E
F3502D2C6DEFFDA61220D9F1B8FDA4BFB00807370022F1DF8AB8B6025C74D7B0
EEE93D0E4431D0ACC947C579A7EF3623BE31DB5D3C33234247DD8F042BC283D3
03EB357DF3C02C1430366DEA08E54C68A2524CDB0FBDD745B06446C4D78465B5
EC2805979811E2B3FB3244D700CD55164CE4C1D7E603BA84311B11F1ED2A3839
DD09671C791CEA67F5A9C6A82BF679C4A84741EB8852B76C9F0C91B558C7C0D3
D6ECC7F89EDF2800CC56346275681B4D8FA3C520F21B5BC53AE4F72E75AE3EA8
23F20C0C8B8C88ABA5D2A333972193D26301988BDF23E70F7186DFE5B7E6EFDA
456085933C315BCBD971C5D5627A380A78F9C11AC722B233136F9989303481B5
29E3ECB1CFE6626B20D066B13E2AC5484FB0E9DF6EAAE7CD203CD6139A05C899
B59DCBD8C691A7642DC81E608DF2FF576BE5C494D3B28013AE8EF6AE11CA64B8
A33FC1AE4CFA235E4DB699C71AD5C0E23DDFF6068D93F2B8B93F622DAD5E314D
946904477A22CBB26B89A646133CC62753DEBA18D0022C71915A4793146DC083
F878A2DDA733A67485E125AF3CE875FFC6DAAEA9629D72CBB5745F0F1C53934B
9EF405589F151B42512E7B084BD5B0C317DC13D257DC391459FA089C7B02AFE2
2C4155898A4ED9C849C2536C850198840DC850B94BFBB19C5F370C05CA0E9C4A
7DDC93BDAEF848BA89DE744ED480DAB8D447868F9AB139EF3524A6A69CB553AE
004A549929A97CE2D68EC9C421B1297A4D6B8712B3BE958098A6B2D66EA35541
881381768E12BD428B67B78291473E5E059654DE9BF3D7BFC5FC1ED8546E556C
13952D6B15483ACC4016405B0472635833073C205DCD9B96AD58B0946C643E2A
D09945AA444C7EE187987ADAE9E0D77061FC69EA1CA34430E58501284F589BC7
572B20F9CC5B7F2B9272A0735C681B6123BDB6207581346B2254CFE2AE6F4E4B
0F7E1BBAC0EBBCCDF9657CB28A3FDFF57C82DCEEEE88550E97D1EF900E81B313
434BFE81C0CEE2B57FA787ABB7C3532F7C1E8A79DCC39BA86A43AF8D5CEC435E
649EB987962CF3781823D18A1FA6F41232850E2E110A277F7AD5D582EFE74470
6B81097E5BEE76B6457FD72A0B8735BBAF5AE1DF06DAA52D6D741BF6F7E3F7A4
B61A75E2A48893CD39B0D0A1F4619B144174703BCB796DC9B4160B6852B69D98
03AD126BB6D2CFA4ECE7F959E58251D8A748F57D3ED28669FB2D23B5DE3CB590
2BC1F61B40CD198C69960187A60A567571A3AC2A2BF8A3CDE2147D0707D0DFA9
662627DADA05827F15FD8347EAC4FC575291C455C8EC0A4F1A9D21F5BEFBD631
4D9051C9CC94A7607288103A2BB41A07792462C6115216D8AA351B8F934390C9
09C288842B157CAD1E44C4F4C9E9668C189F3EB6F7E5F74B7603038D668502FD
3F597C38189CFB31BD28018ABA790AEE9C322FBE6679A2ECA451C3B015F87FD4
C0F15A62AE472F4982A3EB22E3422EB0004CA96DE01F45E3776809003E6D283D
4D0213C978F11CF1F3C9E24DBE49E96DB2F30351AB09F7E448AF2897DDCFD26F
72EFA865A97F173D4993672A721BC7ED828C88627FBE288AB35BF3532DCD2316
071FE62494B16C618F61CD962CF1EF472D1015854A4CF21AD3C7015E35714FEC
C46CC6CAE184BA63024C58CC28847CBF75FFEFEB0AE2802D627EE348163CC4EF
6379A19A7FA4CAF438608C7FBB06503166214214DA6B918A3812FD14DE20374A
8A4D0EC2EE2B540BD2E3D7C70A65F2C1829BEF90B2355F36CC8C1A9D026AD089
0BF5686C5B603E31A54A1AAD1B2559AE4BA31B3CFA112EA570414A7C55B51B63
6B68759CD2F395129477597F79AE57190A61F290634F68FA11269542DDB5E085
0489ADD09142D86B7B9B981BFA7BA525060E8E38C8584852EFF24F73B4A23869
0DB398D83F65753818022982ED681E2C0D1FFFD1DB7157B2105A0FAFD35155E2
0BB7F571DA2AC12180911FEB578BB2842DCF86FAF6E8D4EA877B05F4DCE72078
89B1A7F1D86D759BBC27CBA9A5D4ACFD0C0558C0723195089CCCF80F673ADDAF
5AAA31F6BCE3071812C0CF0B614C56AB614F00F3428FCE6C7D2E3451EF0E758E
841D1BF67F12622FB2A85FB38FB2C15B2DAE45EB45BA5BDEDB263BCA0E265ADB
27E94E67849F13B9F872439F65D451B1FB35B5130D38ED2440ADB118DA45070F
1AB8BE5E1B287A2E692C941D88C63D583D1AA7F3B38791E428FBD9E413ADE75C
9E7751731100BBD8AE904DA4FB0E42C960A28F18196E9CBDFB7D4539E862FD9A
5698548EC65BFCAC0C3C94AAF47044979686C12ECEA3435D4EA288DA4FC0DDF2
D98221C7B96CDEF6E38B7E37E407D055C19A7E1ECD23DEC40E6FFA7F1FBED7AF
D8C334877EB91D5A5F4C5306CD25A83B845ACF204AA20C31A589D07A841B9616
3153862C5E2D059CD0A4EBDAB9FC5224AD785865195A45CA894AD20C707186EF
96215E0AD9F9D5BD03404C1C5076F10AD5B56E016E19CC4D899762EDA276008B
2E79A1E19C7A52272B3A0D6983DF6129965B92A4A71EA3E49592AD0F69823438
7F8666D6623D351E534F10B20D84CD0AEAEB815855749CE06A40687FAE5568D5
E08B4B791F16AFE6AAC7B7FF68CDB1AB191FED403A66D28B99DC4F5B1DBDBC83
2D60E58A729E7A7F002AE9749617ECDC56F7FE67A29D864D383D6C518F6D29B4
BDB422028061F5D87F1AA3607C34D2FBE4393FDB13FC3B3965B9B1C31B4220CA
2E449BC2817B1F5B4DEFF2FB6A2DC45AA997672C61BBE5B3C8D19CA3B2805609
459E7002DF03B3835475F092060760AF6C6C3DDDB7555A24F5E48CF6C851B2FA
B3059E14B7A126E4243EB937E8A612614880272A4BBEA34AC676B1520772E9E9
CAE0234229DB7C8BFD0309F63FC383245D3C107F9BB0545D5AE5D198F2600680
2F7A1E1069E362E2ED3A6048EE3B607AE5A887045AF9E1A2222386EB6FA1477D
81D63314EEFDD7D1FE1C0AF9FB75C8D66B7315C561DDE3696985FBDFDA6D3E86
ED30CD47FD348711F29C90CCB46C0A81E8597CE360308CF53062B517FF908D97
D928EB16B46FA1C7B9AD10F0B2118915B8EEC1155ED1FFE6658F7427E0230925
55066C2E96421D8FB00F97B4EA47596223F2FF5B5162A295A533F1E444F8FE4C
2D3E6207BD0481E12CAF6B17E403AFAD974695CC9B91EFE137CBE100C11C947F
C65350DE088289253B7B3086BEE271E63CADAF734579AA11E3607832D378E617
E7E076D2BC989667BE5253ADC946CC6DB859AFC0AC5BEF9CF39C2353552D5D6A
0EEC86ED360CB61156981495CA4134A0613E440B61293FEF25CE4D4A29A5FA29
B477018D51528367C656B2BBC0806CCE9A67D4504FC1BAFA165A4D7296CD19EB
EC0DD982D459481334F18ED71E64DCB6E3DA66D58D86E0352A985E99EBFD0A93
C31C9BD4BFA49B6707443F7F8BBAFA463253991A2E6109B17FCED82E187C12D2
E42D145BB8F9DDEA51D59DB2883387C755BE212E7AE465883C95DC047DCA6614
878132390BDF31F37432FCA554E66AD90692B49F7D9CF400988BDF23E70F7186
DFE5B7E6EFDA4CCEAC10A032735D2A6805ACF5F4FB0387D88D92A4079527528E
F3F4F7A039B9875F473932B288E3DF27F850FF69817FAF97B3612131A2B6994C
163FCE3BE2292943A9A63F7AF293CADFF2DAB1639FE2D7C2D9DDF939A41B7390
B1BB443B25A207BFD8AC0AFE08D8DC1AA495C908BA6DAB1A4BB21AE84D633B24
F0C8DF5E86347813AB2AB78E892ED60C5B259D400B4B56589005AA6C1EAF719D
34D5A75421D6FB5821217239E414174A8695B048596DBC96D8A862A05E65C1A1
50BB7ACE00FBFC10C32CA8463024B73CDB5A86789194FE988F5FEA5AF6530D0D
F9A0B80892EB8D5A7C48C7EC5406DF46611696E206A7EDA19FF235A1B1D92C90
48EBA6E85C22C5042E17EF20E8A173487DF644CC74F663D677175054175A89C0
4ADA9BE53A8BF589414FDC30652AD9F57B764925323ACE4A871C369AD530B6AD
81CA1B8E37988226D1D7ED2C7B36B834C09F0382E9B09FC599792AD669E195BB
56BADC710A11929635B115C4F9BD530D4FB045E015468A4B8BA66F300FEC7FD7
98A22913DC0BAC6FC8B884906F972080D9DD4C9F430B232E5FB20E744372B052
87C3764AE156D92F882102BB42680E5D125D678FA7AC5F26BD6EAE4AD9830DB4
DC4E62E44BE4AB58E9B71B3F79212D46A30172EBDB971264162BC99F67C9C6C6
630EDC58004134D63CF46DACBBB67FC5FE8F3F350FC8ED47A84B487004DD8DAF
F6745C8269D4E9849B0301E2FECF6C0E452795EE1F25E1198097FADA94D65029
56CCAA7A9147EC2BA44C3FCB2CC59ACA2CFECE06BA04CB5FAE1946E75E8AEC58
A269D0B4B7D9F47EF6F88F6BCECCDF7F2878DA0F0329462D2CC44BFF74F85D8F
C06BC69C7DE521A29AB9F8AA7D45277B62E03769C06DB70A2626B6321839D923
09C3537A1E38519F5EF4AAD6612EB7C19B2A137A027937F12B78D4C35D3B4924
0A366D52F5940181E21A29549C7D748A38D39DE15E4AB2DF75B125F553765089
3FD921D33AA4F519B2140687F6F186034A31ECDD6CF5BD141F6DC5AFF8295DDF
3642762D07BD8A312C94092AEB01EC29BF764E686280438FFB1C6C4541D0433F
6F724384A6813847205847E9512ADE0F1C7634AA0D0F4EB6849A46E40D4187FD
EA7C5D483AFA01F0CC6C836A67D26ABECE904D42AF9323DD62E7C8C42132E28A
B2B0E37FBCADD954943CEFBCE832F6E57CD482A248FAF84FF4A46EE699BDCED2
BA22D0710C5600B793BC7DC221521756CD2DD168E308DDAD169EA12FE8BC668B
84CB77D92ED867A3C279AA273301FBB4FAAC99A57505D4B3F397CDA17EC4B882
87B7F2964E02501765C165850765B00CFDFB9045D032D14E0CFFF0A9387FCAB2
6A84FC45D6510EBF2F3DDED822A654C068E4B56356711C7285F8B7A6CB8E9007
041B903BF5084EE6C6A203FBD7B0D3EAD324001929DEE1D4A4F55CBD902A0FAE
9E741F890D5B26839A629D9C95A6EE8A365B5EAC92855EDE27C6886954D927F3
887DA412DDEEC58A1C243F36885B8C66D2C10F025D415F266214259A48571E2C
38B761FCC0DF91B39DEF14976D7D00609F5E87F8BF9739E25CF526F45B6665B8
2189DF9C6BB61ED48EDAD95A5448CE33023A69E0245503B2E7C2F07C7B805922
CDF57BED0818A71712B936191B0CC7EB76E26DB544181E89C5E1BD8EAF88C317
4C325D1BA549101079D6A0779E7D4F23BB9F698DF6BB8207093F707C63805A09
88F9574E62639364BC281699E31C3A9EA86589DC86561EEC79D3CFD3B7FD4F94
9D54684985A2973CEC695FDD214A81042FCDF3AF864815794B7A1BEA96746DF9
27B1B78AE0AE8930115F832D6BDAB2A74B7DB07ADDE076D9DDED30CD3A82DA5B
ACD79AC7D43D95ADD71E74B5F9298AB5A94D09869DA9B056402EBB9C0A0CC961
DCC125BD4A86E754EFDA16BCA23AEFC5EC7736215CB144B249E1FCF4A665955E
6972C5C42D49E82AF42A1E444FCCE7159DBBB321BF5DCBB68BC537FC3F1E7D04
513F08B7A68909EF4454C3A8B22A857F7FBF66B7975CF27D4F20C39D85936EDD
127743E91E27DB244236367C81EB98A5748467C5D8CCBB281B26265CADF1D9E7
DE190F757EE64FE2DAD4D833C11538EA39F0F6C1B8196F7A2F11AADC43B365D6
CE55A97F2BD9E1B6AD2FC3C2B9A4ABCB58E61ECAE26A40DB639AD6659502F90D
E95F1EE76F90FDF4AE8C7C58D60E9F2D6F8DD652E5398859FC2DF47E4618F30C
5BFF35F8A1F2CAC875C9E8A41699FE952F8E074F0F034F2ADD094226599CD4AB
E8982CE8975FAF42C2CFA828F97753FDDB6CF5D7D9CDD4EC5A431935D46D5C3D
F3807AD7E728F406B3E19297EB1AB13AE5D35EEB4C69CE0D8D416AD0FF129DBD
F0F530C2CA79F756C24239A44103BDF547EB8EDF962AD9A6CE80D1507A361BF7
F774505D0169E40D233346F433E618A247C30339F14C70BFB0F59267D684905E
7FB3D96D090EAB061C1F700286BB68AABE1491F5BF10AADB6778AE427E32BE84
816DD5386B091724D0FDEBECD3B1255CA9D2FE25A562801ED5B97A10637ED333
FDCA71A65B805E1FE9CAE473811AC93FB188C883B8C3C15E7A7FBB1855488EB5
54A27B2A075D524A15C97D48C084A5888BA9052DE8D0161E90B8C7D900193CED
0B6E1698FDBF9DD6429017BDB5C62ECBA7B89C85B9B0B1B99695E6BAE3C8F553
21E3626CA59318C01133836077C272D5B872FCB48FE4A864AC9AFAB7B7FADABE
AD427C9CADB7FF5A5C72261EE53C264A249522FFD1849213B0ABAF27BD4EFCC2
FE2F039D1000959B5F5A5158A450EB9F0725264C3F51FF885C9F17B902740041
BB122A1244001D3091B37F4FB223E2BA5BB0E57C04B9BEE5FAC746949CB33178
D0184F8868FE130A8E4622F1536A0FDA075838E0BCCFFA46DA3514BA13FBA181
BD7C8C42A5FF9059D3EA782B9EADEA7D2AF8E1A183017D05D2463C9E34742E30
B600AA734C59A2A3AA74BD7D2E948163452CD5E0964EF7F2A3580DDE4F376D3F
0D464B09204F46A0ED60AA130149651F5744A27AA11183A95ADFB2991EF85F2B
D6317212EA130EA6A623848718D0DF45F19FBA00895D857FB6CCE2D71CFC1AAB
938C32790BEAFCC317C2729A0B9881147184B65F5D7C052F0667884DF3C2A3A5
28471815F0913AEA983936A6CB6C888BDC8AC7D9D12C35AC98CD0F698B1FF814
077981F630DC3B47F2E32A075450171278DA788B699879C32CCF86087143AD2D
7FAC1CDE35C4D6B8BD4F787AD0A6FFFC0462AC49633C08577529A79B2FA31EEB
FBA2EDE43E477B820DF4A612648D05E8AB1B8937E9C871617B7C84A8E0AC4D7E
62C82A0E03C14593FB1046FD1674ACADFF4CCAF32EB2FA8AD288EC56023BB69B
39E04BF02D917D893A388E151F477C848E365E4A714981110BCB0992EAEF5EF1
1B64967B4EC4C07B1FA2ECE712B72CAEBA74FCDDEEC0D1812E4E3279D32ACC9B
B23B6885F0FC8CB96A80221D5C65A65D8482A00FA917AD590450BF05062B1366
F4E7BC4DBE112C8396A40FC1EB481033310249DCE208BBD9573C79240FFB44E0
16ABDBA0325F3739665F4BF4162709E9C6BCDDEEF126238B17805A31F7B99993
3E814757CC250971ADE946051107EA4D937C463BCBFAC5E6B4A812BD40B5E72F
5BE5C823162BB7920F35B31A8B55118773D1003F338396B97A90A9ED738FD89A
0982FB3C27E56A4786ADE825B479683F94365AB74A10D01644752A4FF26DF999
9E3ABC94000B2D142F6549ED74B7EAA3CB60D79E339C6665D98AF2785F363442
A0FAE9BF4FFAA1508421BAD346F805D5B4960916AE96BBA480BB4472260A0C80
8CC8524B93CE8B815F2EFBD20E109AFAEF6A8ACFEFB866786428120B80078E0C
04B5F40223B55FA0E77BF5B24A44F45F43A20BDB91831E4C3A8495737188974B
FEBF70AD9543A3ADBD3BC1904848E290E66C5829C3B7386767ED54636AD0D6EE
00630EAD7137A71E9FC635A97C5A284AB36990D594FE0B054B5CBFA931106E30
51704ABABD4C826F1FAA36C9E5551647915641032E080D3C775CBD2A805F5F22
1014E3ED81167B919D4C7EB7815565335CC40D38613E42C2D24DF2716FF77F30
AD5A2B83CF7E2C5F7C44253E7C83EE7F3ED553B9BD63F7A65792293E40107BB2
77DE1C1F5B839638165BCF5CE3DC499CEB3C9522F47D6FDD7BF7665D5C844A3C
8527373B7E5F8281A2CC37EAF5F56A2ECCC3378153C1AF01A4E7D377F6B7BB47
F1A286F60E80DC2267BEE5FE1B5B2AAF8A4BBFBC03D35B12C687B39B276E2BF1
58FFE415CDFC4EE4E9710565DE42233EA6AD853268D738F11A1ECEE1A932F2B5
81572D98F18CEEDEDDDDAACF7A2E6246DCB24F189E355524440AF092E6A130EF
895CE4DD39B64ABD272128AC76197326069F46B216E366C8DE34CCEE71ACB2EA
D13836AFC95EF5D671C75115DDD74AC44D19639465A2B45629F7D44ABF22D2FD
F6C7D793FF8570898A0530457A840D3F413E1465197CC2998BD6929CC836C3E1
0B6781A7C27B2E70517E3D29E86D90603F9FC05B76A47DA0CA1C570738092D30
9C213D70F8D476728119EC36B8C222AB024419BF28328B1827BC04AEB5A3BB49
945722481A2BB0C0426BBE1EFE79053A8A78531094D9E118E0F08210ABB066C7
5978C04CDB066FEE28F67CFBEB2EE4AF7AAD7DAE71224DFFDAA286398F5B2162
6241291FDFBD52F43F4889B25D0C84C26BFFD4D9B82BFD66B154A8D99640A300
550839FB6356827BBDC890F80FF96C7B4E224D21DDD473CDB0D162528CC6315E
4B246782045EFF42BE1666E63B5548430ED8E1FF88240480E405FC436052C26B
8D56589E8BC97D736A3E996ED314ADCB5438EA14876623088B4B8B19C78C1A0A
48D972080BAD418EE3DEC8A2A54ACA39B50D8F4EEC27B91A961B6F3478615283
32CC44B826A024CB744192B4576BD854473142B5E5579BED3510B28E0B53E167
799A3558E34D412DF23AB5FBCBF59686E36BC0F9CCD95C8E37926B0728728A61
17F9DABE6C645CEAABBEDDA6BFEBF7945152168983E19345B965EA81DF8126C4
B3E3944460CA539ABA4B651FDC7752052A37B16FCC865439499EAD0BA7897648
78C535AA8702734C5ECD5D9A595DA6AE2F82321A8826ECC07689341A8E20C965
46B2C0A5DB122933F41DB5D92041277DEC624F175EE37D3FD4646CFBBD9ECF7E
BBDA43C0801A98A57AC0CEA9F70949557AD5183C1552F47F9466F57AFAFB0671
7082BE36A207815131D777FED88AF536D322B00F998663BA7C92DA29ECC7F868
1C758F1CA5B7DF9464DA93E64181563A820A25BB2D999CE2CB82ECFA1AA7242D
58E0A9867B014DB4D82AC0887217F85FBD65D2B70848F190E907CE96E5BCFB95
76B8765D4B60122DEEF1E5451859F17AD8D9DDEFC9C89B499C83072DAFA36B64
C6220EE08AA49729152DCED03517E243C1572D10A445568AE6C8A0FE8F321C37
5E1C6B19ACA644A1E094FDA5AEC0BFF6E8A8CCDBF731EB286CF9DF4E681F62DB
CAB66978AE8317E93E5239B79FC049AD876BD2626A859C441C696BAEE5FD1F3D
E305081C59A7ABEE6B9BD2D03331BA370D9781C04D3DC5F2B748DBDB90421909
E59FD2278C4C567784DC3BC03C8082A319D4008E83DEF7E463926B27EFD328A9
C23A7EE8CFC691ACAD62F9597B575901CACFE0C404062BC45F3D0632E0E16DC0
0DECDBB19FF9D23D5834E561A5E5191FB04D66BCF18F0D046C9C0105A9509BBE
AB6A16DFC27277B708FBE4EF46BB4B3DCE6A86BF68C41D7E36452E46F688D3F7
7C93F6795820D6132BBE71351E884FCAC93DE2FD2B5A25E06ED4E1277C08B6F1
A2E0E1C7CD4B1DFBB543D0093D3FE75751224B352CC6F4D9C8579B7090B84CED
D0ECB76F7A272FEA36C213E27103EE0B1C176DBB3BA059C7A368159BCB1F2C8A
181B69B0F18100859B970348218FC1D91D97070C2C92FEB8DCE6260242B82739
E68B215354BDA15A6F6780BE2C05C703C664C6A1846B95D1FD6E8245102DEE96
421DD7E82822940466DA7BAABF625B148083ECD00ADAE2272243239D5CC78D8F
B6F57E640005DA78D33946229D90EB8C3F63124BA9F4B78554C6BEF312E55F2C
7E61530F5F929F2B8561D1D3E03245CE79CA836893A82D9DDE41455FDE222A96
FFD5EDE4DE445F29540C78DCF9B054D850F36F3A01B2671017D508AB8ADE83BC
77C0FD54284B636E2B80A7A79681109BEA38843E0BBD8DC237850EABEC73DDBF
F3B5F2BF8AFAB54D192BD4F70D40A1B1084DDCD1CB007A5D97E9A01E3F465AA5
01F55CCD70D488100EBA40303687A03A0D05D71073059BBCDEC1EF6E9FD63DA4
755B277E699A23E4472BD6EE06D0B8695B0C058548DAD8D78AA2EE5F5842B608
58473E995C40FE86106B8B698638126F879AA09939FB740ED4AB5991A5A2CD83
E3661A522F830FB2089B0338DCA2C0502248D0B0F5FD1F5CB1A92BF3D6DC4BAE
D4E1F951FD788E6AF2BFB8CF5389BFDE06400D3030084F8B31AD25858D481021
E191DD7CD67AB53A803A22A881972118E96F96ECB80FD67CA184415AAB721998
DA558BFC6C71A666FF0FB19B4BAB75CDA1FC3CCAAD28951A3EC4D0DF57FB86CD
A3FC1E1793018EDAECBE1E3877D4D1084887E51F2B88225F65CE1F683348BBE3
717A3C94BE27CEFF8F2EE153851543D6A5AC9C7D6328C7ED32D9C50C44563637
1BA0E472F5455B3AC6358464E1DC7DF63A07EB0C5E35457A75961F88F9D67995
6CA53F08DCC692B20850AF0CA313B751BAA787AAA03A48D3ACDBA97EC5241B39
10621C91C54A513C4CA60B43A9A67BCFFAAA62B893BBC1EF13C5876FA8AABA64
1A8C04B535671E4690A43CDDD0460206B8420704047CD7B54EE30C716249F916
20A8B8389C63F2D99589EFD8E501FB35447677A909F0EA5C0316D17416C83792
ADE5990137DF02C27B91DA620CF2CAA714737152F5327087C00BA59E6A7D0ECE
5EBD40E714F04DCDDE810AE2101807A7DCA850DDB024E32761D7072406C9BC4B
18697B0BE6100082075E15A416F93D5E6779166AA78F9309EC61111956858FB4
B9F9215F3AAFE24A0D0B4D3B84785A82B8D4CA7BA0267563F1AACD7FFA88FC7A
E595A78BA651DC5D6B29CF0E54FD60A08E3E4D6CCA1BAD5CB49AB8422CF42CA8
2D28A0F362933ADCA76E5C11A0077FE08D37B4952282C869E0BC1F5FE23453EE
CC7F8D72E09EB828F295F1A1F80855C23C51705F8D810DF913DF5BD450F4B539
DDC73E419B876218B26F0DC86B2D70CE8C98B7076D6739AD765A8814232CF328
756FD7EBDC2E4CA8997A135707808F5F41E22E0B92C264A35FEAFDADB788157A
36661DAA29E5CF9EABF3F8F03F142C790C9AB3807B2E5138A7A140A161DF9C6D
7EE670549EA758E77D64E9EE9E0B93A15C1EA3324C403568B155F12B339FFA55
76F740A8AC41030A0D15C5E50C8A18A1B2DF7EE8059000962462B0DC3CB9533D
AEDCF2267A8EE17B7D89714351F7AE3BE37CB064F5021A1A678D047FF915C361
AD5E5BDFE1663B0C5F7E63D46DB5FD8612C21ADE5AF72AC470F0FA59C38CE52F
4213F66F5EC1D7C9BFE2786230EC0CC94B6EE6ED6D5388304F3295A8976631D1
157E2AAC8BEC1CF9E0868F5598AC4F76D674A9D4772023F2A76E76086F74D173
91BBF1943EA37874F418320696D0C4378A8681FE71A54847ADC58BD6DB1F5E44
BBA31D369C455E13133E87493A9CDA92A84E61EED63CBA701AFF15C193503E9F
94C5E20E0821D64F6AECA81374FD073A1FEDAFC87FFC3469DAE5E9DA6F8C0E9F
FD46D55996985F271963D07A7A1E7165E3F4DEDB6905AA086FC30EE81E14AA44
FFE39EB1B44140DCA727ABE7B48D4649F4313C1EFC6559A3E53BC714F9311422
1B27872E4F1D21F7E9D56115F584EF4EAD27AA6C68EEC25AA62682D104D885E7
E68CFAFB53C950C3EB0CD6EB87A76FF3A00E65B308A09AE60B2B686E051A9EC3
66189C3D7C39B38D6B95DF4DD39F35CAB7A8F4575D1C1659883AEB9232EA60F1
049787B5C995FDAFA387CEEAE4EC939C74590C88C5A22943B68BEBA64DD73C69
5547EEA9845B2EA986E887B9219710F4275FC3CE7608203CEF0349BFEBC43302
A241B631F9D7D43227DEAD1A59B4CD48F31E8437DFD6CF220DC8B92B74B8CC46
6CFFBE9C151A954FB35C1592CA8A88266F0B8B21B71263BC83A21F5875A1AAD9
B7BE26B90322F630964EE464B59FC28C969D1B61899649DC1B54512152DE6FB2
BE608BE625E02922D84736EBAA75AFDD332C31F1BB51AEB971A39A924399F9C8
320B79FDEE427B2CB829269162BFEF5CF4A8E2BC26B922057425763100F18C3F
CE41C29CA9996398506EDE7A65ADBD25114CB526B8CAF6548DBD00F8894B05EC
E729A16AC750877F656189D3AE7E64481818F12CAE33C06E893324044E4044BA
ABF0BCB2C0B9DC0FC10552F717B9D8859484D5FBD00D6D6A9DACE43DBFE62618
A67F6A367CB41F9A3E087D2480B8FFFECD01E45B7665F5D45BE15AB952B10F99
63217EE54F0C03C8A626A5A30FF2B3BAC1CC10F59005059D6B4A06FFF11FB519
072A10D6FB5B266430885333B1BD65D641FC7C68B5C2AEFC22CCA110B4FCBAA1
BB27C471058C7BB9551F77E08FA200C90AA92DB4E2E6797326F852D7A92DB3BA
F319937982C6926CDA57C978E04DEF91BA3B6E77839C3743434353D16CC80023
4BEE7F6472DFC143191F4BECB0B356B4A85E9882F4724A59098DDAA72B36E47E
0040CB9C113C3AA05B7401DEDD1D25E0F4ECD17192BB917A106E5BAC3969FBDF
93C6CD69A119B4AC0F3BD6BD54DCA6F1F42354BA333612A1E09A401C14AC24A7
EA0A33BC306AD37033D0C9A1E0DFDD8DB6FA08624AC29EB57BD5AC0A4D3E35E8
664C4BDFEDAC7FF14C6A921650C46CE02A35BB2F1FA392A49030904E3D153AF6
4FF1A0701A004AE0CEE5E2EC368347936223E631387CAB4AD563DEE3674C855F
52D2C9B0D208FA39206749DDF4D5F666F7FFA3C9DF756C5663F3B152B2889EF5
723157F058402C1F0994F1B569FAE791744A5E27E610A4D8483FF445B4603B19
03DB50C34E71AC3C1BF357C4EBBF1B38A07284C2BC7F3F1CCA943C4DBA20DB1D
CA44AF8CB00F06281B1AC743DFA0E41CB49CC7296E4ED4A5D1845DEA33DD8631
8ACCCA6A9FB5BD54E6C145A5064B35E18D192775A0FB90A0E73E97CA45668684
EF308DB5491FE1AFFA4CCA3DBB5BC1FC63E2F1410180B4C8B4CB0CDEB47A2898
7013F2D3EF49BCC239E77330D25A4AB2FED96F7EE21F078940056B69558017CC
1EBDE2CA513B949637C3B2C66DE084E811EE5E0DE60B7705DAF897BE2F100642
9E6B705E6A512E9F7A106EDE284DAD5C90E389A4D6710D2BE5E78526CFD434B0
DF69338883042918F41897334BB6CE6386F925663F4B58BC5795E0EFEBE37E22
84ACE6C1F277DA68237A8C82EA10668A88AC881D3D7DF1C6746D1659D1E4B7B9
65586BF213FB9193BF48B78832850E07E6E0641FD8C4CF4AF9FDB4FEEB4F4CF3
34C88D071D869C9503921EC0C2DDFAA54EF98F749ED47DE7F695BF84871E1240
99552F2EE31008A0D674E989174DBCDA6C39C4390404737C71889E25E06B5A6D
4CA4A60199C7403B713EADFCF28102430B36BF2FFEC5FCDDFAE3A94C7E5D9DAB
F9104CB98875385B86A53E099C80B249AF1355B6DCFCFAD59C6F72A9B5B22BBA
75D2B55793A7AA9157F483BC8D5BC64DBC33D7460877156C63CF6B74C3CA9FE8
D70F9760B591208ECF4E2249FBC13CBC4C8BCD28D23D7F5174BD878A94064D92
805C35FF1B8DEB7D749B1616EF6B81CDB561F17A8B929AD1C1F0E7DFC11E5AF6
E41FA7CA326D1AE2FFD6E6CE148F266C3E2D28C0541C280FDA15A938826F241F
507EDAC26C56668754593663E1496B9DB0EAD41C8FCB2CC06FE7A0CF9A8079D2
AB6CD5BDC22FA7D8E923B3D9D760288B1CC82E749EDEECA57390750EC54C89EE
D8B90101427F8DF0700976459AD2882D40D03323C88576CC24C51F090FD289E3
5C0B7EC6F91FD2C5BDAC099C3CA9CF6CB1A47884D2DE55476E0E3FD2111D2C1B
13B00CB38E2708E19D9253F61D65F34827A59ED9F484B2F753645F15EEBF300F
15B82D518B7097537D6DA87F27E017EAD545AE5C5FE743947883BBEB3E7AAF7E
BFC0927EDAA1F3D4E96A7F2802A0C465353F80F24FA4FB0906B4EE05BD8B6DE4
72EAC0B56BCC0DE4B82E3665B471C39AD191F24DE3A92871C7C1CDE6F65BBAFD
845EDE4E636DE5EA0847EFB7FE0D41E4BE3615657D7A541B795126EE67A2A79A
79367E1697CF39653767CC1D77A6CF0177CA2A6BCDFB2D305689F00324EE4C30
5469B23802B9B2FA16F4D48511075AA3482AC3DAF04AF6541CB4108C943E5727
B353D7E9C50C26C968BD1C8F5DBA61459B9DE41129D2C940DDFCA9B4C397274F
8222723778960D6134B327E2031B60C11AB5FE7322C0E649E9A4C763020A6B98
A2F185974B39193320DD6868CB74BC91D58AF2426BBC52E53296CAB68923E32C
08CC0F927983CC93C364C9A04F4BD1B56B809E0995B6A3B7ECF856006705E587
06EB7080337F7DAF9D5A270E94E2924B349CF7383345F152F5F681218F7E69A1
1A24A85BFB6AFB12660987766FE9DBB8B5564BD93F113CBC28C6321218105BD2
248EEEACFD89D0E5331002B649E48CD280CFF193E14EB14CA6B220C461D84CFB
5409BE84D0FD208B0DAEE1C51FB783D99880B959D6AD47FA3978181A50ECEA03
F381F4360B50A02FD1A354E83F873ED44BB8C28B9E864243D4B44E1278D56D8E
76C17D7E5A356B0596687443D1F9D774920C1183F3DA0F63B919793878612FCA
35033CC0B1AFE63608B27C13F0CFE8E78A442DC197910239A2B6B9332283B97A
DE069FFAA0336847F67E5D94BA40789780BE2FA78811BA5BF98A1618C1D65098
23AD53AC9F463445FE45E6BBFA36543773220105250082140D4A847017FF3277
4448E9B447F24AFB5BE87B46196FE4B3F7A36E36F445107A201415D061E1DFA4
94A719EEC0A48461F88BBC0C764EA329B43241713F5FE5007BE936BE35712C35
C97026B853FCF7D75EC3D00FDD50BCE3F887F30349181DF7AAF804163CC64232
091F0EDB25D0EF134F849C4E93058EC357BDBF341D0D0D9A7448D218348BB6D6
81D6A8D4B4A1CFE6B4BF3619241810B926A939D7635E3BDC9C40D1EDD0F99039
17DDECC67BF90D0B521F9D819846A44C1CFF062D25140567A9E492AB66A6866C
E53775CD93987BE87756C48EDD16936509B0A77492B12761F20589BA0F154807
1666B71078F9BE556E45E290FB36F6B947D3FEFCF7B56AEA5EEB65263FE5D955
F80AFF3736B6B6912DA206AE42FD2D434305E44CC8511082D7DC8849BFCFA528
0277DA0B24960A655FFD9C52FC55B40C6C90BEFC9DBC19A737AA56E8D57FC028
661A95EBB0C1ECE2CD8BDB108ADD113FFA9CA3125C4DD312446BFE163EBC91AA
AE55B3F9D5BB74A6A6698DEDD5186D497EBD079802460AE16828CB69ED24043A
B24871792D6B0DAB25FDD19DCB1030457F8DD1CDA91A7FF4FFA3EA4C795396E8
2B32AE4ADF0EA9B1B9CEF4775411A9E732962D62E48F1DD8519F8CBE04274163
B0E147EEEFCD5CFEF42206295C60E7BE805D24D979EB241F9E1F7F3A65FACFFD
DBB8F3D21DAD8294AC0E6587B08079B79856EEDB09E2DC8749514E2CB8D38C11
6B9F681B9C90FF2C35396B66B55ED051F74022AB5ADDEB0E1416959A3677453C
1B5B7F599076C13089A68EB58FB69BF2445B8E36570B0E7B2C094DDF0102ABA0
9270E1CD836734BE06A616C8378AACE37C233B6AEA524D30D9F457A31562CD1B
DAE7C9E14CA3BA09AFC79096639CFF9D7739B4ED2722425D068D3D7481954454
5476030CDAE1B76876F4EF0FD2A78ABC99409EDF1964644802F556BD6D307CEA
58CF440FFD56E7216B36E779A8FDF73FED737FA517A90D7466CBC50A1DE99CBA
E7DDDE5FFAD9B295F1E3EC34D4CC391B77BA7A73EE4D9F9957967FFBE7EF30EA
E30A70E12BD20F7C4CF7C5753AB4805650911055054C52FB9A3FFA6255FADAFE
379DA1BF9F9B5B21774241250567C4B7144065F29C251BA16F4A748C175FA190
68E75F783422D74A85B1382995B3FAFFE1F4029DF19FC36B633309FE5188F034
42D663A968361793C5609AE7E612089C60D9644DF3E1F195170FF004D47D11BD
75CF5EE752F9EB79D81D40F3FE9B3326293CF5309D0ED94C3D1189DDB5D2FC1A
2EF90EC8801764DFF266D697EAE6C64D31C3DBF1CB4381FE96F676C0D70ECAF6
D1DC85D4FFCD5CFCC4D02488708D128171AE5A552A51A2A51C7BCE5F0EBEAAD4
EC36041F4183F46BBB437D5515126397369E3E56FEAC2418B597FAB53CA3C8BE
0B3EABEBF7D9646BD3BC407795C2C97E7D13DCD499369F7C1AA62A711E10C666
292761D9CF4A63C55F04FBC6AC25085E3C4C8BA130AD2B322D68014ADDE2946E
71ECA9CA010EFDAB64AAAC8B429187B2FD41B61382861F291556987DC629C7E0
8D5405361290EBAF7292080119895AFACA87F118D4ED2A8EA7DCB34450A9BC6F
10C00BA1A9139B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 161 /minus put
dup 183 /lessequal put
dup 200 /greater put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707C0AA8E88898CF
1946FEBADD822804C3319B8F8FC6EB7CE96C596A8883E67BE54CB8FBE9AE9AD8
6165178CC031BF23D2158B8D326ADCDE14AB22119AF44671F96285AAC87EED87
853C1572219A88A9AF0099588291ABA4C627D312534F8E5BA07DDBD1FDACBFEA
0E14B661E814ABE9071DDB4531850C40C6CD91C7584A4E8249386EC4F3277E1E
4302D9B1F2CD87B62D75FD9BEA2784F5F5E12C10D047E7F64BCFE4E6AE2C4508
282587A821245F63B65F2B2BBBC3D37FDBB9903FD981A33C518EE97EE245DD9A
4A5FA7C05855A31A0EA2AF7E1D324948D1E2085F240C0E63555CCF1CF3FA4006
1810BD5F29C393F8D676CF19CF8C9EF30B0DCF1A1170CE398828A4FD283C6FBE
22A69317BD103014FC78E93C0305034C28B5E74720498BDDF6DC6FC7B5549C38
8DCCA7FFD03A465E6EBCECAFD9AD6A4515AE2EBD9F935FB0C9A190C50B70E7D3
11C70860883F05C74A3B4C28EE14573F6B701EF8DC676E989171F08E7CB1D610
0B87AC8365B9BFD0551802E964DE714ED5018C64A21AFED7608D79C9A44E6A8D
9E3E6FB63ED704CA287CE45B092BB691FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 115 /a76 put
dup 173 /a121 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B02391045CE2692D14FCC731777E1E749642435B0
4A2885E1BF5FF31B603896C35AB36536A67A130546199EA762B156F1C4FCA027
7DA2CDC12317BDED509EA7AD0D2111E7BAE0678BB3B45FBEBD4908E2328917DB
B3E7268CA93154777974A0D88A7F5668837D737474941F6AC36967CB0493EE58
D7114581FF800CBB95B97314FBD2A91C4F0E5A02E35F5FFEA1FB722E8DBA6CDE
A879BA3106A6BF5C8893C457CF577E82FF229A45F7FB88C930E00C41B9413108
F3DDD1C99DB7683A1087E094B48AE11662FFD3D82CDC8C6B8E693CA7828C8689
82FCC8BE6B4F275F9A6B261A7082ED1CF32CD91546675AE16824DD84B6CA3755
98B6C439A2E90E35BF240DFF74A2F754FED1D9ADED600804B7786C219D2C18AF
D70D490F20A4305479A29C6F7C6945172164A4E587C32FFDDC1A25905EFC237F
ADC20659B5F9293F091E9FA1E349FE97857C9B6DE42D88B0BF013FD1B64F35E0
B30FCDE41CE1882A74B0D383A208863134E9AA37CE0AF7C4ED41B2F7F13DB459
A5F8DCEC4BDF10A9A02F36C06FA7B26238CF55340B24BBB424F14BA71C9E0244
FE096571F074F07CC1AAC1DF294CFC7BED4FF4B0E5BADB6E56F7B4B3B9513B8F
BC8E3A5281FB844F62D48618611F1FAE737BD2925C54BCD4ACF86936ED5F1596
2D7DBEBEBC3D2667ABFED58E96F6D4A22E042B00542ABBCC4B8AEB1D08B5EDEF
0E0AE8B992B8958C506B436AB5DDC2801FFBC9C080BBE488C5D7913EFAF442F2
AF2286420A0770670AA0B84EE207CC73B27F3638B59766AC2FE42827D171434A
374F1523236F5F33E63C9115F80624303534894DF0C0E9BB165FF099E2D51734
13B3995A7DB9B4C56C828F8FF8DC5F32566CEECBBE3EDC5CB643AE0E6AFFF1E1
33CA22AEFBF4978B5A3FB15D572551E6F6D1CB6E43F9C5F48BA7137FECA0E57C
7BDCB701639BCA947ED76F1802AB7B9534E2D250833738DEEFE1A56B940E651C
5D7540E1F13D801C5535585729C06A53A8E6819D45D4272067C545347BF5F362
D403F91BA1E5BF9897E5E60376F60BD85C374F605A05FC7CBFB86718C5FCFA94
61128AA6951DF21502BD93CF19040B8171AAF8F21AE654020F34D2E4564D557F
F2F59C5E6A27F6FA0138C6ABBEDA01189608264D061977417B0C7399B004DCF8
58CE686804C3F119899F5BB3DC8DE39690B59D7E7160EE6EA3E6E8FB3190B7E1
BF4C2BD3DC8A8774EB6C9A7DF4EFF9DA9D4652CE666141182F8636310186CB86
6FBEF0357FBABBC1DFFB65AA474FCF20136F792584F36B0027977D6B37B2827E
64FF0CA96215E398E3DD8CEC4918D7FE142F2FBC5F9332C1ACC7C13047976E73
6091D33F5E6D4508278FE8CB356B5B756C55F718EED93425742D97CC0F23FBC8
8F8CD4E4AC3730E33A9768290A90A5FC5E18CB58532AF7191B77C84DB7F38BBF
060C451CDB3175C40C0518D163A4D220D619EBF3CB07A25182E3F959D47283B1
93B4425174F706D303CEEF0D9E89E6660D609C17A3E2095F15E9AE7DCB5C1AAF
8099653AFC4BDE0B934DBC586BB072AE59B05FEF5314A81C8FC032C23639407A
E0B9EFE6F00DA22E09E257BE924C7F0B2E9EBC37847A2850BF896FA8B9D5F379
DF239265A669611D2C57315E1E7B470A5C8C73A88879AF0DCF84E595C732FC4A
C9C488F1294BA04B06581EEEDD6C8F062E4BEAA0BAB1C2BEBFAFB69D80D7149D
4CFD9D73878C0A6B8F32F601E4948821FD3DB884BC734C6CC7D7BBB0E2762C20
72B434BC7D212DE43624B1C342D0D646EC1783BA4FD13BC3EEF74BF4D162F68E
12C07BD0F3E394AB4A3C8031017ECC0F34F0F0258E1646E555F0E21CC3FF3BAF
FFF7D31EF1975380949A8C321102BFF8AB5B5A9B4E113CCD879021F844A1012A
15B544ABA327BDA23E4AA044D252D6A7CAEA86E32299046BB7D5D1979496311B
CCFBCB1BEC857CD8261A4B77C640AC7E65B3E52446B2AD7A3E96CAC8EEFE0EF9
394639FDBA7572C9E07B54D98FC28D6323699246ADDF6D8B228118F1120F1E83
2683845D74EC17641E12A5E96CDAAE7EA772F0CD490E374C6860DC126406D5C8
BF7E438A2E9E56BE7B4821CC95A34CE06C327261EF6BF70CBE2794871CA458F7
9B804FB5E05EFB66AB5988020DFF908177C7539F66FD04A94FF17C9D83E64BDF
E956A424061E9F02BBDD4486DECB4BF5BB0CA2F22B8068ADF80AE9FE488E9640
C124E3B8B52E6A27C2CA6AD360E7DF52207AE36D7D2387C56FFF6CC17C3FD55A
6F6510B2E8FFDD0F4A97E6D63E49828EEA03D195015D30E3BB12C205F9EC6EDD
D85BED3B7D9BC184E497D00B1BF7B3FC8FB45A38C293721B4807B2C82CAC3734
61FEF5EBEAB70033D0887FE5F14A0EFA52185B641BD2C84EDEA7A35F3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: StandardSymL
%!PS-AdobeFont-1.0: StandardSymL 001.005
%%CreationDate: Thu Oct 21 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Standard Symbols L) readonly def
/FamilyName (Standard Symbols L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -229 def
/UnderlineThickness 46 def
end readonly def
/FontName /StandardSymL def
/PaintType 0 def
/WMode 0 def
/FontBBox {-180 -293 1090 1010} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 191 /carriagereturn put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA4706D91AF999C9244BA4C770
FE5B3485F083B758947E4EDACBB478E55F1EDA6FD43755F3819F9292072ADAED
FDA1ABB92842199CF874FD0D8A6429D69D5F1E8BB56FA51E0B0A12874786CC3B
1C24C9C608F40C7774946DE7D3EC6F234B793C9170E9678D19994D61A213FE29
925028E208DEBAE41C0BBCBFE69FF9920D5473AF395F9D07E27F7871953BCF83
0D8E781B183FAC31DAA08488CC639C348BCCB2FDEA9BF11CFC9CF589E0E5D912
9471AF733E09424A60685F4516C1BFC2912883835D495AFD44781CE0FCE03FD1
AEFD4190D530C243E82BACF9BBB7135AA21AC329BD25AFEB5284D0FEA70F0757
7047772298ABD77E1BC00DAA5CDC0B8C239EFAD8A783A1260C2C8114B1CEF1FB
FEEAE79B4EC33824BA74E4BEA34BA26730DC2B90DDA59868D0D53327118E0A9C
CF307F710DEBD7CE9A7888FE9B339E1561B4B83F838F8D9C615054192F4B8452
5908F8BAA5220EE28F4222C1FA5A97DB983BCF9F584866482CA7EC79A4AC1199
8E071F5260F6478E070D0EB84A342890283F5B5640CF3C44AA2A1724F5F09186
1086C71F7953533AC56D6265200EAB54BBF0FEF8154EC13229A8B2AF4E6F4449
04A576D348562D512556AF95293C7D115FCAD4853FE3812D5760D304DCB7FFB3
5DC48160548740F81F1E40DA43DE1A71347A69CF188901800F4AB8020F184072
2B7A27D5844580135B61E4E0702C49079CD216A6C58ED45999C8583B1FB0BC61
C722B6A634305F08AB34397B5321DC04B524A3A442C7E50D3444F56DFF34606F
D3DF9B8E94FD2F4536D46D8675B9A149EE5DF2E86F375584E6F2906FECEF8966
5ADB994388105BBF2A893679D2F6BC3D86D605B1E9DE285F102B7DFCE33759A0
0E8C6F5ABEC036ED8EC8AD7A5758C6153192960404D3AF8B870965E846F5B176
F63876F1CCB2030A4F858B8B1ABC470210496918023BC45492EC7C566F007B48
F2A981808EE71F0C4AE8834D18C47E4076805710B2F74F5895BEEFD30F286485
DBF2CA742F3BF1420A54EDDCB3B55190FD89C7694D25716F3997D33F461BEF8F
80339EFDCACE045F72473DEC4B1C1DDA85EF0E148B4525ACE69AF14D40F7B54E
79E85EF31F1C32300AFF2F74
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7846985ABD6DB9B1404A5E1EE79A612F3F94DE12F21661
BE7E591D7947341AAD30F1FE76501224D644A36F805D33FAF448F1924563210A
E3A16A2A43888775646288E228A16F187998265F9861902FD93DB17DC1A0DE35
57997B95387966353736C5764EB5B351FC2F71C40BB26726AD672D8ACC72A4B7
0B89CDDCAED202BDA7E803F7745E7E978D666971730057B4A64742140C81DB51
6E547C662B898F6536AD1ED8CBED4CBA5E2BAB2689EF6D16FEBF80410280B323
F02BD6A726EBA19D288B30376787DCCC4197F3E95CBE949EF4B833D951CE840F
1F0F037DDBED1DA53DAC2D1E354118C14F4D27F1890A7406C5CC8B9E8C4D75D7
49E9F8D63C2A9F50B06FFD7A2D3A786E14C0F626A419B2F8AC69352D3E3D4BC4
20ECCE3D36136463E4E64855B0216736A5BA9D0E950D788643BDAF8651F6FAC5
344878F0F207712A3114A9C6D97F67238B5A4EE84563172731C175E7ACB31D26
4F8288DE6C041B9E70DE3F5ECED3278DE310879EDC4C895D0E949B77FA1AAC44
52EE1E9AAAE4C087B9F30BF816005CD886B55AB44FC3E99FAB64AB4A3DE2EF91
AD278EC54549F5047612CE0B311AD1771234EDD3A335AABE0E0856308747CA85
AA1BD93538C37C48D945B4C92D559E70FA9FCE47F94FD8CBFEF0515A62DB27BD
0C58942182AB7AE45221207CDC3C7D5365CEF6C69EA563298CEDA345525FD4FC
89C694F5BDA0BC4C8E47466DD7825E288BCA657709C9762FB4649983E134F450
B11BECF0494FE22D15FE92D8698599638571128E10DACC02506D7569300D17BD
E9A2010BEECE1F5029F72A92DF78F527C5C26B9FE1E25A515493726C031D14A8
DA5A51A55A9862CA1C8FCF02BC3951F031481C7120C3E25E116D1E46EE96E69F
C19F62B755EC956D80B572EDBB7275A56FD333FDD6825DCC8E4FBECA36D6F8E8
668CC07ADA73125FD22073756CCDAEAD48A35B9C3768B5EEC2E92F15DFD1AEC0
9EF656FBEFD5548C48E8086E88F3D41F14EE325CF64895343EDF53C92D7326A9
165278A7515B5702E24284032F5B274091578A18B49E4E186B4B78FE0C099221
AB40F2671E9DCE3E1C0EBE6D80D6D2507A8DA856287492A542DD2335568D2F87
DE0423E419F3129599AA2F6FD738FB5BFF61507AE0CBA57DD1295B258BAA0A33
4214EE7A3714968491730CC85A5D733044D6473F50A684D87EDE2DFB940A1A24
F3E77B5F7ABCBA1EDF466D3DEF1311EE505CD214B5BE2D4DD247FBC1E200897A
0AD631D2E0DA63388809ECC9C8E6BA563E0AC2D73D65B26375ED3AB8C77C4ACE
E8176C04D2F11263F252B16D3FC972E7657CFE39B37B6D67CFB17D520D0AF2A1
EAF82854E67EB05EE6F0277D86020D3BB8602B8DC7849B41E5EA2F9F516E6787
74B89E682DF6366544E0B3FF6A85F1F3B2EE7071D23D342602440048B1934DC5
DE5C3E9176D3473B22D76877CBCFD6F322B2169BAFAB7034F01018FC66517F1A
683ACC0E61131FD16E42CF0394B6974AAF6B4F5B38BE5C4D279A7260AE07A19F
8A1F95F4E63DC9FF090868B467BF7DF140AED2353EAC1D8FA0E926302EF4850D
7D0E332300E131CB7DA4A11D13C43EBA7555751DA6992A60905D93C19DCA1621
DCE1E805AF071441E9F4C0261E165126E3C02E4171C6399F41606521F0B535C6
6B4946BB839B24E18E37E72D710F6C782E3298C0CD1632DA0E4BD5039D5152C1
8BCAE05C08D7269FD49FFAAD963C890BA2A0FEE6072DDD0C6DBE8D3915BB438C
E219B04AE244CD3F6545062399E86184F6EA999D9FA515C007470A7BA1694504
C96BF7169953892024A0EB84A516061F918A31C571C35D81F3DEB19E7E794553
FEB26F95AF203B3B8CDCD3E37A5BF13D49D7E142CE866DB303E4EA0495078A62
236A14EB687F5C84E101B522F35BC83C01EECF43C49216CDC91E3DAE905C6B19
92738F2805D69B7795791AF99F35863176B44D07EE05DABAB8F5681A819CA643
C60D848FF6156B914FC1E85CA56F0055ABCEA13791B2C4337DEC4E391FD45721
82658763641336AE118DCB9F9D13FD469D382F8AD08F73A82E2B453C944B834B
4194A4D791F756EEF1FE6D02A67C93CEBAB9D6800E7F5F69ACE8397264014742
710DE7B71FA9849C91E91BC9DB9EF3E14F32D58162775E4F5B02E9AE2555981B
CFDC1B8A6625D4996983AEE6A86792FF4888781A6935D7F1E5C09F3F71F2F7F5
AC10BF5C44753AAF5D837B6A2D09BBB64608C8045F8783A4F3BE5E6C2D9EE2B2
1AE7BFFB38C2C8D0366EA076EF12390D590DF7281D2D5E8CB9D00DC70844E0BD
C048113158FD2651C6DA546533E1E097ADD00566D292DBBA2B34879868C0A41F
36149A7E04A2FC1D8D3D626060ECE6B252F055CFE1597E6DA01F87EE42CDD430
B43E39F9308332B7A221161426C4E73610AFBE66079D3F2AC47400CCC6BDD7C2
B5A8C29D9CA288380A1728A30B0DD146071615E6504A6C8515DE20FC75F2DF5F
8C2BC3A5CAAAD1466B76AEE8E14A141A52D94660B7E6352B01A57931D66FD0F1
E4EF1E184E8C2040EAF94CF4BA24FD95794A87368138815E9A8A1316E5C9A0C8
3AD91D9FB3D3A5BFDE45A6F76BDB11687FCB4D1D8619A5BA433F2F04EF177343
6F7C6ED16040EBBDC32D836854750E422787C58F407E927699529259CAA16FCF
EE573B1C5C67A4024658CE2EDBFE7C1D80625A40D71E03A18BDBD7BD6E7F47D2
A1F30A78B45A619FE2D7C26A41B37D462A7B2FDC37A8102F7FC85CE42DCDE595
9FA6C98A98455D1EAD5A43BBE507CAEC8176BCB0105C4FD5D75D9489F285A412
54D032D7148B9DBEA9D62724B437C8325F18DAEF1755DE0337D730BA2038E046
DA6031E445F889CD9CB93DEDD2E95B31D6A1A1DD5A99A5FBADCF8E863AC2D1A3
6E64C3A44FEED27695F52E7BDF64D8DA7A2EC7B0AA013E24ABCDEC0A856660BE
2E55EAFBD3CB9F0BB6DF64DF10BA61259222A4F23C29C64AF809311EDDF1AA4E
9FE299A30CA2FCF815C2C52EFDA8305EE318A5913884BC081F33CB005DA05859
592CE5BC01BEA21F19025157FB5FAF014EF62F3D2A3DD3A0B3369005E3CC2239
88AB668AA3B3F1C03FF50E321A6C680FAC70BA78370170902AFAD417112A068A
7F375F0B76138181C8A83BCE2B9718A5DB84CCCF461032D377C3F8A52BFD2B0D
73A298F3BD13D6BA2661A50200A8342E1469912B5DC8E50EC3DAF57749A925E0
BC765A1A24931D2B64C99FE8E3B42676E74AC20966BACF06F881A7BFEA7C7400
BA7909FE468A5146D1B787E581A25F537EAF81F2ABB7444E5993A7F4706DB41E
9274EEC7A16D275BABBF0E1A6A9DBB3A35E4A12F4992F70CACD5454AAD30E430
DCA903425AEC385EE0D77716838CFE8D67D79459F2B004C9CE6202D303951F50
F80D3100C4F844B11A8FF7E097AD3FBD9D91773DBDA7BCABECFC00B4212CED62
71CCFE02867ED9ABD7F3F12D83695EDEB559C2679B05EBAB718CBC3CF3D6E34B
DC978A8BE4D85C8F0AAB881158E533AE158799C862C9BDC3A2B16014275309AA
FEE6BB935196CB981C7A102ACBA3F0230FB71BC40D60C69E67C4B9081168BCED
E0C6E328D7FA0E9ADF5D942000E321F6FED00F5D5875604B2DB3A9035BD60DE6
A5E417EB162E092658E4E6AC04600F1D9E0C551F74FCC19336103DA6A4400F58
0134A4F03101761D3A68F9623A4588D9E65D604EA2DEF6447AA57465A900EA66
279B6B1BE6A39FC0971734B3D47FAEA9466B3679639F186CC4AEA1F67BD67D2E
92B476EB82F0A0CC98330273B57211E5081EB0A6BD3A729F80FF94029D622FF2
ACCC93187A2D85B24FB52C36612D05C21DB73047BE04848870653E24B9183349
3EEDD79BF25B181AE1A829F076795927B1315989AC464447C416FC35F82ADCF0
A5F9147DE2987386157263DE921E4F2251D39A57B62126349ABB4916F9CF4EC5
4D29A0B9E93E14B766CA8ABEB6DBA4100AF38CEC46CFE5E3F6D506BED2C7F181
68ABB9347D401620CEDB0A5894469974E6A7E1DD458999AD1DCEFD61D475EC12
451F7B9EAC17AB85B1CC8E6652256E6E0BB22EC8CD48D81CF29085E8F49B1263
0B3EE0BC3CF6D067119C4592AC2F2BA029D8207A50117E0857F24FD10C6C1DFC
91DE5007A991FEF2590F559786604BA6E1663FD02D1E1D46812D934D815A01C1
2660961761E491A9B56937CFB904B9A774CCD4D61AAD97AA05E997D2FBC30A1D
605662925850B9E606A21DE1F47BC4CCDE87BF0D9DED0002DA888DE03EC2DB76
369597345D774B68B6A46D3AA74329509C09DD79DF946F821D791F396FC8598E
50D1EBAE9133CE40E2ED44415D568484F5E7E9611B517950E29D3A19229E0F27
EC7E77981D0DFA681D3678F711AA2CF2FD90BCABA4EF9BD8AB03FD01A262D387
2BF4F9F971F04921E540BFD8F8620EE569599E9A9B703F5451984C8F9210E9C4
ECD21B236424453EFD648F1B02B67846054D73B08E30A120D85812760265E441
1B2C78C3F50AF7CF2D1538B3302AF6853E5EF8009600E27F1FA46B56355930F7
81A74CFF4BD78C5E9E8D5BB2BCC60DF9146E08836B0E85A05CB8C607F74F84FF
176C960F90750C0F2D3B1AFB6E9D0A18792E84318167598FCB7F1D174B2E94A7
F80246F4CC8FFB89F465FE03A622839448247D408013C5AFCF78EC8C878566A3
9A5D15229FCDB226EC4130A9304BAEF70A260EF22D7CB8E7BC03A0FAFA64951B
61206C2FAACC8C6EB57615098FF299F6967B7B72CBA3AC1C1F7623DFDAA31112
729BE7C216235B3E8B656D809B993ABB224F31E5B9E83BE9CDFA1C1AFD3AF935
0EACAAA8C3932CB4979A9F14B955D213A1E7EDF50D22B1CA757B8964163395E7
98CA31E9E155814BC16221ECCD01B376A1B7CAFBE3989AF3F538CF0D6FCFE4C0
5C80C49034D13EA14B3AE7940BADE0D89128766072E48BECB034F5B6C1D801A8
E1778DAE833D56B94E058D1C19937825CA18338725F946C312B28A26918A0DC8
FB6F384B9CD79E18B6AE58FC783671F8868A81AB02413A277B9C4B2F914F1D14
EDB32169349142CD1675A9D08FB606FB78AB73D294A882072E033DF2A805FB97
274259A66874D2BD01A2E9324D5E6F3D503F3C9D965837DBDE3694101DD61735
95FB81004CB4D8D9034DC195A9543154E020E547B77AB0DD2009A9379E3924A7
5558CC6D7F3719A9429823F083D8EF9E157567538F6512C97E62E0823D105FFA
49D59CB669CD68985E472328B8F5FE814FC2599BAA2696DDC249097FB80FFA36
6ADEE4BD513B1AACE41853C5F377CACA8616749D75C7704166B2C89DAA12A956
513735269ED51FF32A85CC86EC72DCCE9F2F4C1262A94FBC8E542445660041E9
2B1038F6BBCD836D1668B85BE456F4FDA49C656C57E17EFE5215D2E97E97BEB6
C593677426C6D0E9869FEE81FCE7E09A005F17863E5718EA658ED402F9961419
AF3CE9F6F9D76FDAA33B1A9B5E71DB1DD934370B16C380CA25CEF22BFDAAE0A7
C80B3070A874184050A728C5BF451430C53F2889EDA5C96057B34087F81008D1
BEDCB604A2EA0661B96E2851B5A9923E52A0A569C6C2F13785935BDBDDA33618
B78DBC70A30F29CC0CDF22C3F14830361C8115DCB0EB88DC7864A8BDD2567979
51A2338B4394A3A0E35EA4157D3165425CB30ABD3A1E50EEC9C3C172E6FE615B
51864B34188E03FD399BD5E81C1A2C806C7B49A1E14670B7441324329C509E20
551D48EE4A4DD94D56C375945F75398630B526987907C8B444B7E7DC48337861
B12877C17A0006803E2F05CA3AB0CD17E5DADA99113C8540F661815B235B1B64
43DE0D5A4F0514CD05C467F05AD8EE3D6587640F5CC8203C7331FB8CB9AE1435
72154DC6388B62E7BCB5C50A1C1FC14A0FBC12AD3D9EF3C48422CA3E01532AD1
C1064A7EDCB5B6F54300B6E76CCFD2D3BFB1023EE03BA9F1BC28D515667BC689
CB2FC1729DD9663AEF6B6A7DCFF860C3F81AADEF9B66291D6D21AB780A3D8983
09C7C3D20DC9562CCC2014464A096AAF56181E91D0AF9A6EAEAB50495E94E2E2
46C90CCE49BBAC05E4E46821457498023FE7A0A34BEDAE79A7539554FAE697EA
13C451BA05137300C8FCF6FAFB8E081FC5002FAE8F93AF77D97B207AAADF134F
41717F6B8802E58D01EE519ED1159C00BF64F5721D516B1A22AE3E19FBF6FC16
E5879F4DBD2325B000A6AA5E28330B5036394C19242EA6A9293E6098E23F8756
5090969E57450B9CF2700A034DB93D8CADD372D2B6C5CB4489DF9CBE51FD2D46
AAF97B7E38DE7C917825E4635A621EEC91301D6F8F9E885632132FBD3B89AC12
17524DBF7145B7C8FD52577A7B47EDA57889E5EBF3B7B8DC77CEAF4B088734E7
EBF216A6EE79233FE86A5ABC8EFFE75269B44DAAA80E49C16C8AEB2DC10E27C6
CAA197904BF4FE1A22CFF933E538A01FC2378916423B366071DC919D6C50524C
E8B24764D050C0EEE06D2BC0976C8992C652264927743A55803F83CDA2D7D133
01E33364A430C0AA86876B327A49AAB863559A59D4BB8C122B49E3E433409D15
A7CE24DD0C15B16C9C1E96F5DEB61F2E522FBDF3C52548DEDD80FF847D416C79
0A8E2647CA374188C7A708FF59908F819B4E76BF206B0418863494799AB93D78
CD0DEBA5642F2866FEB29BCDC758071838AF50F66B95BBDE9D3B3F1AFEF8A548
F7F15F02AF05BE0EF587AB37DA101E8D9CB68E22F17EE1CA8433C899EFCA5905
8620D20FA2AC27C913B8A3A398B920B57295A330CDCCCF826E4756ACC7EEE0AC
E99EDE98DEF39C1E325272278757606879100E0FB547D1AC16F4B8695373D5EA
DA8265690B0044985ABD6D01915A184EF265A031282BFAE0894B45117BB0FB68
3FE698C4C99B2306A63566E4E2E574A39F28EF11840D68F0ADF43F9CB8CCBF3D
9CFC300184257F2DD2F3987102F0C9D806535CC136845ADB464CB57B22F022D9
0730ABBDDC3D9ECEE2F49FEE582F4ED29C83C9A2AD2F2CBBD1A07E44DF4DCD65
AEA3E9ADBDA8B11589543196FB8FA22C28C373D3448E0F19BE69B1E23768AFE8
EE32B30757C374B0F3967FD9A17391B11B5D7C17162BA1A99642F4B1C7650630
C5D2076E3FDA5E9D97E45834FEC5FBA5CFCC0057DC00863E670F7C570B205131
19A844D47E5C18B4B4BEB72DF03045D4E0ECC2D0DB427E8EAFB9020CC042D095
AC5E994A7681A44C98405CCF54EC17B8674D22307106BCB1951D2AFB2DCACE4D
50CDF28E7BCE016458B8F41AA784AF50B6F2A10673088A9B15F981EE2189F924
369CA356870AA67F5ED464853677170EE1A71C71C8CFEF51E7B2283861D5CE11
5E0AED54074004E30507FCDA204B126D5CF9F2915415784D200A0A48273F0BB8
F6C14CCAA668F7137A0C34BD27EB92A645ABC61FAFB3AFD71617C19C9270E740
5614C454EDD951517D262EDBEF6C767D53401F388FD0DF67A10B68E3D9FA4992
BEAED28AD94A97AEDADF50B54CE2DC59D32BB91C6E0A0B1E284B5DB8E20690F8
0B927A12716EFE293A51442C55FED9BC3104B7D326BEF43FC3D0E84F397F911C
4BA1CEA838209B392B10A8EE884B53439EC4235636E9A76D0835CFB91437CF84
77DD9E626887B40863919D50B0A23646F019E97B0887676EEC75E443EC314ABF
87F3E9B5C6654B4CAC386AE80180FCF93F9F24ADA546A5F02EBD702C63FB0DDC
E855303F2BE52CDF07A818D97972E5C6E32417B55017DE8EBDD7E558A7DA0B3F
2B7519FD8259D6D27B904FB816A455D8D80768457B1B911BDC8640E4A9DEE159
6B6F0E30928A02E27E9ED8CCE0CFFE6E0DEACD7342780E7F522377C5F109CC6C
11E08CF0E7D6241BC6518999BFEDE31564BBE1B4C581A4EB1A6DDACC96E5CF58
DCCEC38580F7A899DD4FC7F3304F98B4A66743C9403F9426AC694E2BD7E8706C
BC871298F384871D3FC5F18335D6616B1FEFE59C295DBEECD066AE39A3A57A06
F604AC0B04ACDA9672FFF32777824EE085E5DA3E555939A3CF870525D66D90B7
2B8B1C12E534BC31B4C8A25FEAD2340D3C5BF86DF892218E51F33812530FFA8B
CDAB88E78673DE7EA37794E3D4F3C30D7D4F7EB2DBF775F65011FEA13A7EDCFA
EA9D1738F33F3313C18201285B2F5A3C67549D7C388591377ACB73C21C0CBA19
9D2F6A78B0C2D33C8DBB1F193DADC2931C1744FA59454020833C093FAC91EAAD
62F7D9E78D483E368DDA0B21620DB180142F5245292128BD156C9B3A0A940664
E96DE0F81E451D58FBAE31CCA688011F15C03B4501692187D66B2A457E253E40
538A4CD5B2A93A1AB7F53CE7DFCD1B43C3DF09A38C76D3217AFDBF53E2E4650C
A0043F6D67473A1001A3A0F7A5FD373DE8DFDD26D93214B50A363AA9BC120684
AD5F207B925A62EE3024150639C17AD57BC3613A3C03334F925601DF1348D48E
48D9063457FA666B23CEE565C9CA208BA3627BB3EEF6BF10CAC5B4DDA50CC01B
1C5E274DD2A3201F3134871A825170B320447ED044048832E72774F535D8F0F5
EE32070A3326C15A5887B3CCE265D1B9F8FD1E74329214194EDAF90AC33C8E8E
0A7C99E5562CE31D0A8B8DA49F2352B89F503CAD6548D0F2F0482F0CDAE804B3
B516F3DCF11B96C2D119AF2AB84BBF7DA4165FB1C7D453817EFA6136AF8E5864
D8C8853607C351845D61A53E463FF0848F3FBEE331237AA615753F9BCEC74EE0
BCC405AD0A000A7AA438CDAF438CB9F4CF1AE54B8413480D419F4693760E08AA
6E65A632F7C27598538244E5D8A3285C85C3B316EAF3DF1F726CEA7704977012
F02BF545439F0011E567F4B774B590B31EC2C802A641FB02959F27E223DC704E
77A9917FD9DBDADEAA5C63AC7D3AEB738B17CEC6B82F4C8A6056BB18F8C52BC9
E35585F636AA7620CC6B87B543BB5338F24FE202A0017C0105B0BB5FBEC3C7E9
16891FDB0ED6E6B0CA1EC96D187C16D15ED57D0B62FDF7DEC15F30AAB8456FBF
CCC853808E0E42EE89560C6D83D4762A8BE36761AD0CE7530F9F832ECC46018B
E71F4A5CF060DBDAB7F8161AE499F66C4525504167FB3E91EAAC3F669435FDD4
F0CFFB4A979657DA95A38F22EB86B7E1E10B6A14B92F325FE09554CF68AD0E31
8F490ABCC064DFD2EA49AEC727496D824A6E1CEC66C351E3AF42F427E86F16A9
16B2FB15120E42FDAF7E8751C581B75E90777354D141E1D3ADDB65CA54E95E38
CFDADF8BE35FC6A102BAD482354A8D39B79E6740344AB1673F9E63CF9AB8E09C
72D8664391508549B2B18FF6C2FB5B5BCEA3AC7D98C399C12C16D85A81C09A0C
40E246CDA16792E7ED09EE0AE121BC18E70D60667806492E0CDD3B9524E0CB06
11CA17921B5FF94970F457F2CDD61FBE5A99A63D9720CE90BB4380DDEAD391BF
8347E5020B91C88FD1EEA639960C88FBCFF942308630C7BD80CF13EC6E6C40DF
BB70A3AD0E78C5B5099B39FFDF882F3093796BFF2741A295B20FAFA55E3572FD
F15F338805C5AC2624DB64A02A796C8D750304E9FC350E86A30C83DE82A240F4
782A6230ACECE1F36EBE6F511993EC5BA6D5FADB80F2C3A3561A9B833BE27127
E1C4BB90C43C27E5699CA9C0EE21DE4B1349121A6D4490929132A33784D2B0F0
A85CF68B23F459222FC654938B1EC6A482BE556D7A49C65A2B1A9CCC6587F9A7
5D3221BCA3E9D4B61B6A2C9887A5E28267C80C7AC5C4AEDEBE3DD91FD6BB7623
3A2B5DC04A461F90538ADA6538F2DC4AE61BA50AE0481DE0415E8340BADB4F99
FBD5F2A4159EBEF95D42B4315EB454FDFE5B3A17E10DE7A2A4339CE6833F4234
19FCB599AE9591782795EE6F9100A3DA7DD4B7FDA546511A01B3ED95D736691E
B2DC1E3200ACBE3FDBB18DD2FCE36A58CD7BAC26D043CB8DFFD3330C32D011AC
B0005C696CD9D4FC3FCB1B484E66491E6EB330C211B11D72CEF4334A5F8ADA32
42118A91B65ACA882FFA7E7B566BCA9833124BA3A887A2A1077C9C5DC14E13C1
3CD835D40D283A085F678D18466D636992EE8479C1253E71DF33DAA1C16D270B
4DADFAC490782DF1D84F9BCD3E0C30CDE3B1F9D180ADBC3D25E60E1C9CD7D0F2
A6711B4157FD151CBC662A7354291C00BD1044CE37F1708B759C9457FD9DC98B
BD44B373A1606BC079F323047193BD7A2C0C6F0D876D831AA514A2E3EFEDE150
9154A47B6B18BF00039356A568DEAD673C0A9881D293CC96668C75B4DC1B79D1
2D1F33051B1A6604F8592B8B820B99D577A7847F7C74742215AE645B8BF2F938
86E67F696B4427B7A47FB1C0603E21341C304C95EF08F0114582C20D70EDAE30
06C88FDE4D2320548C1CAF87E1F5EDA687A5E05B1ACECFEA8ABB4E1D9B22655B
32F6A267AE36FB097BDA4BDAADF06CDB0D9586DC1F927321283D1CC22197B359
26FDA5547BD2B0D0179AA40B6D5DC23F5ED6BF9A802200AA9ADFFC2F1C50DE9A
718677BB021E46565DB20B7C4FE4742BFAA59F102B941121C86B41898E888117
ABC1B37C299F7A6109C3109F117FFE52CAAB5F1EC097F81255E592C1AB0CB6C4
802E5266392771B2B562C1BF3540E40EE7B0936D32B8AB7F7DF71CB0D611E18A
1B71A87D810AC3FFEF5976ED119ACE64BD0FF741407A9C506B687C54F3572A5E
37AB795E13EE5CB825326AE8EEC44230DDBBC3FBED0397E61B8E1BD69CF349EF
B539C1F904286AD853D6B8EADE3115F8DF11F94756DF9A3A9D4F041F0BEA0E6A
A13D1CD9A596FF482E4468A00A406A07EB8A5857A5BF25EFE87D508C03B48106
79EF48C13DBCE520C20E577D4DED551FED5B8B1470D5C8E5B43A269C5A973D02
5F05D1F960312FA6D0E2BA4DD4813540221A3E2D507AB663CB1380FF20CB4375
1AE6757423BC894169688DA97B0A4A5579CD7AEF6FE7458AACD6B4C472DC0691
DCB274C91F82CC6FA55B3AC8B8538459AC97D8212836989EB691C6AF186B9198
AC677FA60B2B187AACDFD035B7E4FA61AE09A07A03011CF75629C77796D6B83F
2ADB647EDE648D948229E7EDE1CF09D58EC2376CC274C79F2D768C3C7EC07EDA
E75E1A8504A739281E95BD21E3E776D992F14B81EA865425096E29AB8B0AA220
6F4C523D518AF56950E9F0C27CBDC2B4A621F162F4D2B1B4BA36F4624BDD4D15
38FDA32BAC8D25BF1C9DBE78F5AAA3676B15D074D7FA49DBA14569A11CF275B4
958660D5D61E8EBF0F4B47CBA826E9148184BA18E4611201B5910C466E1B0BAB
9B67876280CF987C7B8E67E23994C752CC593C7BC83E9BF2CB897B46D6C0CF4A
43DB296AD8069466A1B3D42D0CE33CA846C5D596AEBC918A30C336274DC69EF2
D63E0BEF4803811E7DAB18AF64BD8E8DE51F4793510D5994A6075FFE206D7800
EFF5B5EDEDDADDEF225C0BDE5658D8691124455014E3E4551A946BA92D57AC15
5E4D13569E20FD357DDF5D445D3B47FBCCF1DE775579F5CAC1232E4235534B63
90EDC2EE2B540BD2E3DCC33597BCACD8D4B247E752CFF8BA56EED1FC5BBE871A
17075F85976F9F44149776288EBCB36372980DE4F1B315231BA851F9D4AE16F3
A95E651ABA0AB0CAF5BF0D32BB19F361420EC472C8D7E66A4420178127B7DD5B
280FFFABCF9C2AF8D37B8F8D2BAC9B23A49ECFE1823431E43B9E6A2B62588D25
57289CEC0A01ED6A23EB6A19252EAA28732C0DD2E8772084706CD79A6C743261
6BDF34BBD6C7C3D5B9CDFE167FBBA9DE0A087DDCE841274B969E1383E4B0AC25
35BAE6B6F2278DC472E88BAC0E18C2B93FC881006924C5BF24883ABA736C288B
8DF35C21BC4B232AFED96E5C7C032BCC5AB24A06C058C50FC9313FD1D12BD193
4C3911316220DD26D93214B50A3D82F0D086E0630E360136BA4C9CE17319CC2E
CC68C80E470E51B7213917FC116E396156539510BAC71BAB56CA549CBB2DD66D
B27745ABE3D1505D4AB7CBD05357513D7018323B62A5A63196B5F81AF29BCCA6
9CB23E3EDE402F49920076C64D9ACB52A3432C3D3984F13D33C7123FA3B334E1
961AE265B55911E40577A1156EA815E150DE070B8712C34ACFA66E2982E27858
D55511E614530A153E3A3EF3666D95AC0AC56C9B1AA09EA306AD4C2E6D1514B5
2FC71AEC1836F38F56DE485539935F9D5F7E685C44C7E263002D3984C3CDE2A1
1BC2B653B6BA78A8448AA4AC702CD6EB5138BDBFAC1581D5D79922578A095F43
A20BDB91831D9626D90D26D777C99C0ABCC780517ED0F940EDA8394A39403DBE
ECA6CEAEAFF161DEE4BD513B1AACE41853C5F377CACA8616749FEE8AB5CE8BCB
4C69B8871E28465B7E04303D1E4CA9D32478B9D5D79CEBEE80A104B17F7387C1
2541AB49A3158792EE76839FF425D34964EC9832C24C1EA76ED2D92F094766D0
1E617ED706F6B026C1033BE8AA19953122CA9152AE31930D84A55190C7717349
2E5BE635242D69549C2DC29F24F34A80DD0087A7662A950AD65E5C0B180DD6A6
D62F26F08DB6672CB1FBE7A2321238D27D4DCE6A913CF1BFAF636ACDCDD5506A
00090A973AC05EC627211A10245BAE9EAAEDC6323BD29DC4CAAA81ACAF609B9A
ED5C59C9896576470589D64CD431B07439A97818BB56BDCC7D41471C7DF619D8
C3E624176A09CE7879A5835F6BB7657CF2A20076DFD729729C387BC4242571E9
3F15E8F120B9F2BED70056BE2E3E837815282924A53545AF7F52ED14C88AF4BE
2CC596B632A6DFA87DB6B99D35CF775021476446F9DDE00C132A743B0D9FD71B
0C5CF7FFF3D8D80AA3C3EF83DB4B9D2BB37FFBF0C718ED34DF82AEFBBB9B7FBA
FCAED8EC415EA9803C4E4902575679589C83053D7E272CD37586B7DA8C5737D6
84677C77BAEF88BA9807196952061C705E8B709FCFC18662C3C13552BD88BC1F
04F8D932E45D3B20A0F5A5257DA2921A79F43C297ED7AAA874720A137955CC0A
6DD7B90FD88F1EEE833271DD9D078A5376B1F57900360AE5C8638C9D7D5789B4
208ADD07ACC5EE6EBBFE6BF3EC231338E4D942E4E74794731974D14EE3E265DC
647D4A305D878800B4B332343F2A9CC22E950ED2A092506F6501011BBF5E0C9B
099A38501F23261A0372C6F83E50313B4A78271A6722DB446FAC61E7FD13C210
C04E95AE3DCD78F2024799251105E062FF908B5B59F8C13C46EC5A65FB784C93
E930A7C1DE898BD7B724E344EA56CA83B2571B8D318875DC85B6869DEF4CAE26
AAC25D9B9E4A874A6C257723C91760CA2142BEF2B686CEC585609D7A691F0F2B
6ADF5E9B397CD277E21543160FB0D4398AAEE5697501FCF4A78FC90EC1F6C50A
00C950D5661E2D424D05EB665664DA9E58A0ADE8C5262FAE8CE5561A341CD5D4
1C2844B11B0E47440AFDBFA4464551427219E0E2F56E7B262B752EBA18B636C1
488ABB28502AC578E6B3742B2897A6768791024AA39C88D403A9F59F5C3C8AFF
A53F7853F134FAB24DCA5E2DB388D1E4EF7FF594AE5FEF6C3741587F638339D5
242CA54E89D18ECA1ED37C106C7BE484EABF536901C70D584E3BADB2235A49E6
1B6CEEC74941D87759CB1079DDDA218B39392B60E8F305EA8C1A0818C09BE1E3
E60185286496D052BFA0F2AB99689F1280B3746877771AF0C5D1839B5DB33E1D
3A16C147A93505F1243D1329E742678F39DA331C7ECC4DCFC57078B650D17B9E
F95468CD1EC11C63CFCE0A263CDACAABBAED4423431E1EFD5E043AD646679A7A
46E705958E24E5AD41B8C6495DAD144F2E458549A8DA2FBDF3A0BD9E94AE33DE
FA55C4B4C9D998A8589C5CCB00B12170627E5F255A87AB278721E9BE25BD4AB0
E54453C16955DD25F2CA8E728175B5D23D500CABED3C22BB01F086FA52E216B4
7091DB283397C425BE21C54C87637B7173DCF6A03319BF4702EE51D15B144101
0E6BF1D359BC5DE5516BF2D7A853C4993A0F3897C9536D11D1DF42A04B6FB466
D0E1B6EC2904E78B96A86C6909B64C93491337ECD3BE7394D4B75AB30451B2C6
61F559C5F28E2C82046D5CD51736020D042B4E694B50983C4E74C194CB2CA47D
3F8A6F01A2D3F49EDC8CC0E2FD4F6070143454F0535086CEAD196CFC2ECEB79B
7069776DC5A441BD8C5DA8C30D90EB567194747823E19F3A3904EAEEB687FB5A
D70F764EAB52FD86C7A9EF59A89A6A921678DD757F5643C2C85B59BE1B0020E8
8B2EB610E5B65F1996B4A04CF00401B75299A41492C4085ECF79481B79CE028D
5382CE886BE245BF5688C232D2B236C7155884C30E640FEAEA6F0ECF699EE828
AEFE91DC8988E43EA7817F708026DE5F3DE261D5165E440B1848E533648AD6DE
95AE5F8D975509A9DE80D4BC65CA364E62E44BE4AB58EB108A6CCC0078643A78
E6567E352D7DBD51B099045A161E038DF0B98EA509DA1BF854E03B5CE7FFDE73
995AF6469610FFCABA5D320149946F36F2B9ED15E518F158759900C63FCADEEC
A74991348991062225B17BCAA28FFDFDDB179560C9DF5FE0E3BC00BFD3E7DAA2
71A527E27A42FD01B7ECAFC15B03C95AF60ADB33D581F6982995D895F3164E2A
29FBB0CDDB3EFDF1260D270C4DAD938B11358F35DAB829F205D1D07D3E93BBB3
A5EDBEC336CE7926F7BC36D21E23F087CBD1238DB52BDB2DC6A762FD4578F7DD
161FBAFECAD7471C82471F7A6210DAF340FF145FC561F7345DAAD6DC3F5BD3AA
71D6828CF9052BBB26C21612F44F6B86ADF5C1CB17F5C2D5223AEBEE888A6DF0
DF5B3D39476CF32EECB1B33C5F1D50F4C2D10B6B2C9FA1657974D680E0F9B118
55A72511DB441C2DE661745FFAE29D25E4BB57419E5B61090C5BE9CCE8ADD5DF
24AEE7AE8FB82BB6F99A432A7C724070B620F06862D43B338D02082DD9DEF885
DCAF94CCF9F087CE94523025EF03A2DE8364B15EFE20816E25D6B211960EE9F8
76DB0835A82450AA0B3DC308F087437508306EB75C8FF2848119692ECB7E3109
5F5A61FF69C60BCF6270E277AFE9AD26CA782F8D5C5D5EDD4735CD18BECBF468
E6FFB0046D0455E00EF19B144D67DD4D58A0F3D29024B798C449241F0A2636C7
2E022B2FC6B5DFC7852A7F83B55A40B7B4A1B9F18E9C38CECA7F0F850A27B4F0
BFAB91B3DD3B86CEB5021F1E2DA72C7F1EE8327A554E2B9E07180738952F22F3
22E4F5C4C9E472ED6D113178BB8EAB2B149A0A649D8A5F91CF145E4C2C546083
057CEF7ED42EC53CDA72258B664F267F2AD527D0C14B7288E20E310177110CDC
A81139D601AECFE97428227FB879523F67E0BBAAF4A3A00DA115DE9E65BB3F6E
7EF47E40B55000CE2EB68F835D46D49F9D13ED82A2D1791C14211F759B3396D8
09B63D63E528F3BD8687CDC6FD0611C38B26E0A68A61B0D389EE4337E6851A30
44DAB034C132C9A508F42C46879D64F6602C06F923BA0450657F1ACECA99BE1D
DF71DE26346D196C49AA76AB41B9D971BDA63072FC68469A8509EF0D56F1D949
F6D010021764322A6C5E6F2C143F940F69987048A2F7BCD76FD67CB7807F1A77
53AD414E833A9275DC0E73F977C925118B5428B58DDAC54CC3C86C638C863E94
7515A7CD6801F2CA05D2C6FCA94C3A57E0FD8351557AF659E6E20581EEBDA936
06020915700BA050B684ADB4B6238B0ABF3A750A34818B9AFE475E1810CDF400
9EEB151CAF9FD267E9A39319F9B8F08384D665C23C7100F23AE2FFF3401B6D59
755776FC66F7E92EC00560C5EC00CE0343C862DB67CB670FFD71C655DF620C28
D927B07C50429306EABAEEC91CEAA08A4801A6B95D60881227DDB3C967432839
EECC52FE7A2EECADBAD018BD5D60B4D3E988CA162716221F58C31EA2438FC0AC
053B555F04C8C162A5CC7F3A5984BAF992B5FD4027C064C940C9C62E324127F8
39081812B3F2A5D000CB3C826CFC3DA1A3A8F8E12062C5D140E947018931BCD5
C5B65AE27B687C76EE108C2975C087A8A6A098F14D5A38415CFAED952DF3980A
1A6028D96AE11699AA03E623F2A8403F0772C0C8C4AE791248624C0B77F53C23
23D0367D7FD972B780A936C4A334D67C94CD6AE5BFE345B3036B264835B49014
DD8F1F4CC89CD136A6DB87D21674F3F94444689BAA4F4F340B04994A8218A94F
F2324A8803D851838C2CE8F7EE2A6C5293F0CEFADFF929EC20DC073A9DB03B2F
552F02DC90F07181C7178EA68AF004BF621E7FCA5424C3BA329A153193011754
4A89C8DF9126CC58981CEAB36452ECD8E5F282720FFB56F723A64E471D88F23F
0652C42FB1DE13FD9B7DD610C31AECAA80D9DD7F35CC8370A229175787B7E761
5EB7FA12E41259BD3A1C37F58AF58EFF7A23728AE72A7F17A13C3BBE3EFFF771
BDD3399DCA468E18448CF63F234321C19839617EC6183D766028D4542E74E1FD
225EC9A14C0772B65022025B74E3696997EE8ABEA499DF03E90F842A1C0DC823
82DCB9D3996F84109B9FA9D2D555E3A19F31D97685776E54F8C49BF2872B86B0
5A5391B12104ACEDD5C445C15D863AE5FAE61FE1D7A1B81C2087B2AE61700CF3
6F851181CC957B989C68DD72083C5B6389D4818F6FA348F1B590C02982373D87
D792ADBCD17370C79FE7E5A1CA2844FD3924D5CC89B490259BC48C80DA7D98DB
46E16E3DD49AF5106A44083C5576D18AA3069E5CB81C911CE15A90499C237F98
38E24EF16B7D2909BAE28C8872B9D39F0BA1435910DD69DE15591546D03DE431
40039B35464588E1949C8C2E13A85DA8CE7B00B9FE9BF6D96CD492790F90E0A6
FEC5D99811994AC0EC580BEA05DF34D59637BE1D994F590C8FCFC16C3527497B
D4EBD50DA2CB7AADBCBA1D79E4159988727BF45B3B482EDCF499CF746E7EBE6F
6E9D1B094D7CE507F4D7E387695810C8BA2F5CCF87678F915A28AECE444C45F7
50D4DC4695C714E522ABBAA95B794D758328D77862A9BC40C4174CE5FD843346
D88795DAB7ADD0E69EC46CDE4E649603547EF168D8DE09EC03CEB2F53F474BEC
CD98D283A6457CA83FABF66662BB3658D26ED8BDE69FD69A86C7A958B8B93F85
FA031FBDD5813C83A274FA8672822CFE566B0ADE7046E01880054A2458CB0A24
FCCE4FA28B02D82350E45030FD02003E6500B693AC4327DC71E8CE6B8026B182
960ACE7D9DDC4A7066D51D4CA476BAD13152278DA9250696A6CB1DD88C50B2A0
51866C0517CE6B315F54D494C4604ED3F332883B561B6B80DB2AD9A9D7521786
841BD569D842FAD82F55A46022EB70ED3CF81B888210725AF80457C08DA9E071
110AF9DF938C54B5FDC1A79BC6716C2710275768F666B60B5369EDF05D606646
F96A6C6C2CF055B31CFA7E426EE2F969D7707A0DF5EEE7404361E7D7513CAA10
19091A1D0CD01BC46B83454D8F2E75CFA341D8D045D8DA27CFC25ADDF06A2C6B
C763F857977F115827E411948B4D6D0D035D36DEC38167659987A2AD80CE8432
9D3963A576878F99407708C1084DF0359B732D924EAA80B8EBEB5F793E1CE3E9
D63CE8FEB1EEB1D5B62DF10DBCFE6FD9A9C396E478D8F030875DFE1841F77E5D
BF1874BBA83A2A7FDF7ED5470E1DDA73E9E7AFC486601E81FF792FF18937770A
B9C47E8EE4B1F58C2A20CC1EA080FFCB3CBB587D1D2B64A7A97569766E10BEB5
071AEE8CD65BAB0D87D1BA1A0A9B1F8DB4C60EEB7C17806AE521FC11CBA24AB3
FD37890A6DC6DEF4A8B26C9AAA28AE0212C07EA70320ACD2CC2AEAE809C75CD5
2ED20A23ED525068D70B0E2BF3DF192D3D46EBBD01A4DFE5B0090A84941BCFE9
E5EAD3BD302028BF0F7404E1A4CC4BBC2A6AA9B91EA4459E16B54E8A5B00045E
D9E3C8EF690EF0462539D0FAA460BE9048C4C6FF231C1D8CF777C6A99C5E9840
07B9D68CD5A6DB696407366E3251682CCB8DF042957733A1BB86CF54E6205303
6C5CDB4ED1BAE17C40639A937F7477224AE185D0D5041F287D0A0DB1D351E0F3
063A0FA115C90FB482BE400FDF5CB29BBBFE79154897372633DC703492463B5B
6459CBF96E810F8713BCECBD8897D5BCB61CC601BA808A68C0578BC55E018B37
B1C1E3EC097D7DAEF67331FBE8614D61BA04899E5FBB528AA5CA424D3BDF1D62
FF441155841A24FB7DE5FE7FD493511B46CF9A7706A07868AD6ECC09942DFD4B
8DE0E1142ABBCD8A53C33295AF3BDC5F6FB0AA429F61C564FF421DD138BC87B4
4C467E356DDCC2E1BC6B181CB6E5A4AA1DB5F7A46341253E0D4B869F859346CA
339EAA07353B07B64495E13276D0A8E8674E3D22148FAE9D00EB554744578B8E
D8C2FD807E1944401BE025F0EDC677FCFC2B91B3D274DD3B57B5BC68DEBE6DE8
B86CB1591F45F34F6667A0EB7BE2E4EA052C1C38256AC95EAAF244240E20A5CD
977E234633269B2D210106005A32C4C755AD8B2BC6065437A2F86242CF585AAE
725C2E68BD9384FBC580A6B949A68E6E621A6B045DF1C1140DEA4A893F99DFDB
D545F5ED24CD246EFC1D60A6AF2E980E71FA6DA63549ADC95B7ACAA61C8AF32F
4406D2BCE5D752A1E5AB421B15DC0FC9A536401A5632BBF733B01CEF7FDE6E33
B33404D5D0A53386EDBE1240DC51808FAF87EFBA59E1F0B72B8E45CA95D20763
AF899321D8A4A95527217265E0B5833838DCEAF1443D8E9B803198737B140037
6E3F8A78D6F5DDB0BAE6DA5B5721E2B80792277F187222A15629FEC211512B20
F62E1F68E32C530D461850EADB5AA988087EBC19674A658345F9B1DC4830A3A1
3EB8E2E1854DD15C45C1E52B0EB774F03B475A5F4CCB8EB6C112C15B32EC39FD
3E2F535B7E79D2B26985F2B24DF1F86C092105B7CC9B70C9661D91805A5D552D
EE09EA467C2213D44F4D4970BFE53402787A1FDCB1CB277EBAA474AF44026587
BA76B30C42D04DCD678EA8ABBD1A9476808C91AEBD48C46E940266756A113524
C77C7230CAF662587D6D2C7C98896B88120AD8B10C2F52833E98968CAA3BA68C
F84E6EFFACB0606DBE9B12127A0D957BC5640E1580057B12A604E33F5CA045CB
BB4C1824257CA37E3BCCD11D70F72CA11916B77BA687CE74304818C6804207C3
DDCE6CA1306715E7560CC541929039E5B5F5F4DC18C684DC7F93E691A2B42C56
C4678314EDC10701EE5A54B5C6A10E44C356ADDBAF484D5BDA21A9B786614CD0
45B45BC8710DD98F9748648B10B29675C3BD97CF332F5E0C47C316A5A5FD50E6
E50FAB3281F8CF11E05A6E348066116A0503246FACB923920A0BB9BC156B1C42
FAE1162E75C0A8CA25B7FBD0AB392B2329F266E2C310E78D4926EA7003514ADC
5F36C62BECBBA3B3F21BE8A50F00F79759D96766E0F9DB7890CC59157D427666
AF482ACA51908E89E8D5AFBA26CD84367604B9B01EE2DB9CE19265D9B732E0FA
750E8B45C65DF1483443B83434B435098FE85570F66784E51452DFC56E04B4BC
64E6F0D7E7E3C72765022A6268BA343E79D6AEDA88C1675694AD3F5F87D7A724
5EC4462DB1C8F831E50FE9773E9DB87EAE2383FAAB55C5E8CA7EB0E8A8481CC3
C39D44AF70D7C764A40EC381F9BB9ADC7BC1DB9950E59595BCA34140AF866B80
7F2B5F6600B39A9943C9FBD081A7419D47B9F5374025CFBF1533E67646FD25F9
B916228396BDB4FD20E4E5946C8AE448DBEFA58B46E0FC1D94DDD78C28CD4D04
27096A9C48B9D2796CDE909FF8EB9AED469EF565901B39B802994A0F6BEFC9E7
09C6874FE0971F3903B8DB80BF3B6F5DD062D58BC8A5A92F4F49D45DC0B44C94
6C76CF60C52FC5DB8810626868703C6B1A314B96D5CEE762EFA47BF84AF5563A
C0CB252D41BBE0398927B49B9E11E86CA26766CE2F9F86032AACCED21633FD4C
5F5EE10D9643F93E75B13C287327546048245197FEE6A15F65FAEEE398422C5B
4D09CD552E02D135D85BDA9D3F7057C106A806E31F86154128FF1A72ABDE1E99
E28130E48B1546363BED0AC298153F6ED296D14723198747E75F82C1CC5FA3EA
D07E23860F3FD420EE32CD6A19D442EB630528702F9A91E8BFE6D2AD9AEE21D2
F041EA97930D5D1339E414ED8F01D391959DA0B0339EAF3DD68FB6950670F6AC
D5E631FFC805CF2409A1AD0864A2C717D7C4273B7F103CA0198E8F603760F6AF
E5D68BE4D71D256D91D6C112EE28D10A6D3B19870288443EC461BA8EE3905937
FEB36C0DF04646ED261D9E878976493446BDE5378004EDF2FD449054DF9EDAEF
CDAE439BF1B3029B92F0094B82A0C6CFCD8804F59B1DC4B0F6CF366B2138064A
A847291A0E842C805D2447A1FFBB17DCDC38DEC3D64368B015A542F2ABA45C51
F9C3E4260A99C04FF7A5CA33FF9E738C884729CD5A2BA5A9797B87240E656B7C
635A9AAF75280879838EAE2CCBD99DF158B8F49CED60D472C28EF154AA3097DC
9C4B1BF8FBCBADA5D2D068B9D379FEEEA859B607ED8E4A42BD01B45D1B15AA3C
3E308D9677C1A40E6A57554C8FA833ECFFC8ECCB0590DABB37ECD53B1194C544
04760CBED2B17DBDBC77FEAFA68EFB5F0067027A7C077CDCF69CCBD43C9640C9
D156F2074177CDC1C0B07E65298DDD282985C83BB3037EEC71C844F9BFE00EE2
3196F772E926ED4F2D48911C2503F748CB6A833F5F2A2FE20F041FB38C989C43
D134845D1E4EFAF6CF82438CEE2DDF4027B4BBA21C035ABBDE5767CAF53A9092
7205CD6FE938365F582EBA10617FFA88DC8EE11D67E88CBB2D51C398504E9D37
AA577DFC4DF1C341D459DDD71DA1B03F60A5AA882CD332AC92EE270608A704E5
57CC83D6DA66EC14BD5DD7653494E12E09BBAB97563836CC2A1FD66B325CD020
BAB0E1E0A8447430997782320CA8B141A6FBEF02F834FF8F39976399401A78EB
F1B2837A698E65515034DF22E9749B62BBB741A43246D464A75C22A6E2D9A311
A88F22091818448DC82641C811244E97B5E06A1EEF3546104761D33C7B808146
34A6C24A2DDFD00493FF90DC78DCE0D0C8F07BB43C8B2C1629E95C96205F4FCF
093AE33410B1D3CD88F4DBED1FAE4712841FC9947D8AD4920E281E0369A98785
981D54656E8008ED967BC0546F3152FD34155EB1FDF45AD1B5BFB756101B9550
F3EBE3BAFA308C466CC686455AD1F8690C4B87828C0D861E9510952F4271CC12
A12536BDBC4DC93CFBE95C232B1A9B8F34861E96C4E82074D511B0B4AE00D811
5EB5083C98D4E7EE41A4AA76DFFD284350ADE39C0565D0E56DD54569C164AD1D
FFCB62AE348A654FA96D2C1C83E3BBBF308ED14EAEE3C11A509666761253597D
8719D4C493DB8DB00B56417C48FDB55098B722D56B7C98F28A1144563F8E233A
225D9792CF816E98945BE2AEA082B040D2449A0D587F820173E306FA8D6F6C9F
F1B0AB88CA0833E67A10F3AE62C8BB03C44CE9E6928851C900134A7E82DBFC70
E68DC83321666253343E7C9E1803B29164A2F990036A946038C84DEE9C047698
ADD030D18EE14F44174EB2A8C05B00640B7422D8663C52385E7FFF6EBEBD6368
D2E6911C9E6073726D86ED681E2CEC0B423954B253E6F89A720A686DDDA6B68E
0EB40C6CB512E7E3F0B6FE6D3625A7B2B4092E53C34BFC0FA828D067A4FAB800
7D2BE8A0CEBF075A503CCB5C29D32AB92CFA3149656FAC33FB9DC958CCC2C379
6D24367A214289F0127AAE24721E9D937C0F5034041A51E9A57DDE77D9B8477E
A817D3969F9334BF58447C299C59E22160F6D2225B7841C28D1B368333462811
B25CA6F0CD1060041B1DCB4D98385CD715D008D2C4E4940C74EF24B3EB453F7D
84DA4CA52BE74F97B269066DE4E4C7D7B1F584F267F858E2D05A96A18889D035
03F425B331CB8B3B27961BC9EE675629A935EFA43D06D1147CA057C4875AE10E
F1ADDA67B2BF38D870D8C1E0A9ECAE7B15B54F7838A97BA4A4895A8078DB2537
4CA7D008AAE2ADC4F872F2FFE769FCCEB2C9C484B461E87B46196ED5F6BFE544
8E5129F1B6CC53DE4339D19E6A4867070611CA5CD6602687CD611D4BA67BA4BB
757A6D80A66D035CDEA2A27048E102DAF2979807BFB043C75ABA14649C61E33B
E78416D1B0BFC935A2F306481833020A3A424D639462CF9FCEE533661DE20008
029E2077587A03AFD1C61484DA412BF1F76D94B1662C722F6028F5A02A78733E
F87278D18A9342E1FCD19824836B21DA91ADD16FDF174AB27F1E6CADF61D2020
9EDA31A73050175902AE71DC2EF0B4C2BE48EE021F99F0BABE35B7E220722171
6E48F5062A63F465A7D2DD708207EBF64B25861C1D632F91DEF66CE07E939E9E
64AF26BE8ECB3986C1A28633AD38C9D904EF8511459D7D18D66A690F006C1BDE
15478627F5FBEE630084A3B3377F9587BC76BC59C0BCCC4DDEE21F179C955EB1
A116F82C23EC53EF449A51344BBE0DA281A58F1CD1788C15A474882880C69A23
22AC42DF25524D2F2F71A040544AA1CB1A132F88DFB14B0D6BBBFAF41FFE5518
4644D12CC50D1089E4825717ECADD9EF6CD900E589073E8CD8A7A5C478F9743E
153E9D6E031703BD0E7BFB303A876BBA13063F19E4BBBB899289470080D6666D
6DC5860532CA3DE6D0C95D42439572A23121C91413B2C75BF96252B7AEC34146
09A8423D46DB358C48553DA5F6285FF15B0978B72AC7511C8D69EE7C05C8649C
9C3A76408D6C78ED63673B2536F126C49D5EFE84D92CBA91506F4DAE93262E63
CF1CE6D70691DA727794182FF2A5FE83C57253FE17F5D7E1864B8D3BA1F442BF
B119C622A6031A08A7E15994B7BC70E2543ECA69A8243D32583FF6B48EF58677
B741EA4EEF0533FC826DC9B05E59690E2BBD3E77237CE4B924A36D6F517FDC78
86E217DEEFBD4651A2355473F42D0B57A8E262C83C327FAF43F3D7E8B69A449A
5997C57B4A4E2C1E355700E315FE7FDCA59E8C0DBE1A79ABC8BBD14E16DFFF5A
2A66C917F7B239C154B4D6D5B80C236D7F8A53647180E12E208749C0D93BFC83
0F8920A0EE0B64AB86A7FC556839865265A604A57259DF0E779DFC83702B90E7
2F731E3D82F0DD7EDC0E16D6F8C6FDDDFE6C3BA9BE0069C1A26A76F58D44AFAF
26BA0DEB85114A334D3ED78993138FA61949AA99DBE9851F17E46AADDFFB2151
73CE639829A5EDD66A5BA4DC813D5B4B4A171E1E4BA99A84C581442DE33A0EF3
2C40879663BBBDAB5FE537BFE6278C0CC0CFBD9CBDB5BC2C56FE0F980E911362
671FFE486F22D69D1ADCEF5515355D3EDA0925121FEE5E9DC2611782DD0971BB
EFC7E125C830A747EBBE7281353742384AFC17FEFEF0C9CB66163169E2E72BE9
172649E0B7D24B4EF1A2264C0CC872CA7B147B865A287A3A4B5C6C4DD39E884C
52A15920788AB22B095A693D4183E8BEF922E58E7CCF71B0287B9C5FEAB1DB5C
A799E8F2B627A0FED4BAE6019026B387DA89A3E7F8CC32241926DF301B43CAAD
B6770A3438A896B961EABB6B4919D47F44F12A9ACB612EEBF90E0C8AB0E7286D
11AEEA7D9211C722FDBB6CB4E4EC4964E05BBBCB5AEE369A838815ADC86F39DE
0EAE15E5045E9189459C50D4CD8271F23AC351AD876F7269017AD8EF2CB4FAB8
6230513D6B38BC6E5CFDFBC63DEE63691723EC87DECDEF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBD8BA7F054894F66DE1613AEFDF6D2C77AC001102A0
94A99CE647DF4C4C6CE1A7277FC848B39681531D3F8FECD47FF1EDD5B3CF4321
2B32FE804A11F6D76801BD5F2DC59354F4AA227006F97D796A5982FFAB3B471F
1187318913D940B5B7DAD2172DF1816D46A9FFAF8C077A7B727E6E7B9E427C94
EA7EACB0E431EB4276D6883579A7ED352738AD7E57BD11B89D67C4A1BCCDF08D
F33908E6BED58BE4EF071A9F8F8639682E6E7F043BCF250FC5195E02D81FD4EF
1EC67464E6D2CE3F3F75742A06D66C9E72D7CFFC32061D63D174B1A293460051
DA59D0708FB5E6F400469FE2227D126AA8317DA3CC28FAE21C4D4A60AE55C853
71FC39C8BCA5DCCFA45FB2578337771A93B1617F5419CBF89D2FCCF53FF8496A
2F09540CD2E6BACA74151E5CB66BCC1F03B3C9BA42AF2F157AF42FDB1930D18B
1F2033DF50F61ECB986B1525001E64CFD5D0474EA22D69564FD4E82BFB949356
37F6D5E4612D2E019908A2BD371AE4DA568C7C21E83D0FA04C337BD3C49BB923
B4BDFF5BC6A4BB7D31EFCD46CE259C2547F15E963BD57A5FDDECDA8A08DFEB68
B3FA060A82C12FC09CBD176E2B3760A6B2BF72B24E75D32BCED887E8C72ACB86
1E9F83ED5618D85CA392193666A13B68DBF806B6E3266E18C7DEF475BD7A8B3F
303D3CEFBDD62CD8717D1E8903EC64F2CC4BC2C75BA5B453B6FA866A1701589D
901C10BB383C6DCEA8EF8D69FEF91E21A654779148D0E4444B6D8A582793B950
256F25B56825790847CFD378A1E69998D69F343C34675845D310618269E8C0C2
D7CE6E566504719E6C3FBD8434092F51366C75C1B8D5574188C5D94631157FDC
1EF603B7D72566E278AC5BEA341DD3919F2541518F30D02BF421869297295869
115C0543E196D6D9EACA56E7E1B0F4999CDE075358AFD5CD62634B7271B22F1E
51604F2D3BD77C5AC2A95EF40B1DFB079D5955A393C6FC3BD3A7EC8E8FBD1E42
2F224844AFF9AA7F757A5BA5769767252FACD2E45F020204879F62E0531DA5E1
F903CFA2E7E5CBA789C63AAABF817C399433AE80CE79F4033AA4E4A7DFAE12BB
2DEDAB0672ABFB93BCD2A72B35842AF2A6CF8564FA539BEB492D8547D92FB949
EBCC7827EBF718080B57E1325E86E5F9DE61F96988D529AE144FE3EDF6E48B9A
B7689C1872C6725DE0D0E0BD404A119B80ED8109A2B05A1FB4F0261C1095C6E9
9EF82892F19DE252CC2BB5D70F90D1122DD36F251160A77D42023348A349847A
B61BB581E75242E4C5F0364EB6948BDE086B3FE0B5B9EEA29EEB896602B27D88
CE83FEF9C3A407BE0DAD7BCA233A7D21CF8EE1DB9B71066B8FB9A638B481E0D8
2045751976CE0E766EED25CEEA3A458BD35B073D5F1AC0DE66D0B05A9F13DD59
63C613C56239EB148B25F2346B0F56DAD42A7DED10C483F53475007F00EF2005
566BAB9535BCEABAECF09348E2F2D43D99E9EB63A014EDCB7AA609C43C02EBC8
4AED0CA0451E5D8AB3B19DCCF734C4B6A045E729B2394A980D47733E5C7C7C92
963BCD093C7A8C2E90C8249B9E520CEEF7DF96C224230BFB70477A58FD2ADAA0
90FE6A24FDCA02B5B8FBBD93331D78FF32AB9F4CCA8945EED5E1E2D6599511ED
D1D69E0E7E7CF8258686F194C21DF5D5067DB5A1D6149A6589324AE89285F524
F54081B86249F044565783E893F7FF1CBB01467E23ED42257A27FE0AC2C7F091
CD14D89FA8C302E39BA8FCC905FB73200CD0E66C00FF2E10DA7F6F68D9C9EFC0
9F71C63FBFEF40EB82EB3F57CEB7D205B26B34218DD5317B41CFD13554EB8F37
D8E688640F366A918283B297AB68E3A09243AFBE4711398E56602451495611A6
764E10333102F70727110E55AFDC09FAADDC230B6CE973B19EB9A6BE50571EFA
75D9918AE3A90D54186B26312C0A492BD49AA7ABA384197DA3C915E9733EC268
94C6B0FC4516A9DBFCE9C29A64360B02A455A9149F878382FEC05B128C547495
322B78AEE43426A07F54287A40D57196CA2403F8BE205E5B12C802BDDD3CA406
53DA246B973F3CD369EC670CABF975894FFA03883486DE2083047422EEF98622
29709075DF11778D9DEB46D05A5CEB4D92DB654678CC9A3CB5E4720060C4DEF4
55DFCAB58977CDA919CA86EAF0E9EA338B2E808A195EAD96B40DE302CCE1BDB6
DFA36D05F3548DFFF106B7ED10808FC259C6F4473FFD630D05E7BBA10A340E94
328D15D184C5ADB74E93FE87E3B4D7A90B2A4AE35A4D65C18346F571A919E0D1
6A5C22722F09AF321327373BF97CDA72C184C514332B695206A8A5AFF0A154B0
A757BEA29A3BD6F4EDEDF1C80CBB6EE01D4F3A45C1C4AA6F0536104DBC58F789
513C306CE1AD787971AD959C81143FDF179AAE932FD6AA2CA1E60A87BA48D090
EA479C5F8E9D6356E89AE139BB1AE91B5B4094EBE8F39682A9353E96F106E71E
3C4B038DB988718EC464E0E18B643FC2B4F3FA7769DB414649B94426280FA3C8
085037A2FE4693A2B9B3E6E309E0AFC3D4C77683C768166FC3DCF522EE43B23D
F1F3A9B58AFD084439EC6C77997EEA26D31D2BAB351DC8A00EA098EE101273F7
7609D225975F1A186B257078A7ED779E3D9C4903ACBCBF0029B8C7B6CF7D2EAA
BC3FF061B9DD6AF82BEF46F384CCABC27C33544CC77111B00E486F9FE79815D4
1C58DCE0076686837B4A93A25194AD4D1033E7AA3D32E3EF9EA5E8CA5023439E
CCE27A1442B094F3FE8B51B341628537ECD6F22EAE4A9CEDA244F921CCAF4C6D
56F6CBFE0A5CF148A200958B77BFB53D0BCB1200B31AE146E504180EB98040FB
A46377C72D9E237EEA47B1D6D6AC9F15C4556EA67881E9AEC335F6B5DE8C0031
7AC6EE983987246EB765952E7702A9DF56BE4A481437C4260CE492C02A138B18
769AAFD4A303CE84852AF383D756447BDB6911F8FB523D158B4F1CAD00C04BA1
39246C05753FFC4DC9E05599D2F55342608E0F6D544D92DE3B1ECA5D3BEA2968
CDF1CA6C63D7A774F8DAFD20C2FE7B4C2CAE4AC8CDFB2DB5439EDFD0667DC444
D6065152CE0A04DB2B09AEF06648AD35659573BC504F493DD01511DD52EED8E7
F49CD63505E5AAB0AC7F4A8B8D6D8B6B5D5B8346A8A6194688C6884418C2E636
2616D02CF31590E75D615EDBA74E31CC377558E376646C76AE7950F08EDF9287
3233EA0637C60CC7FBF93CC946D421B421FB4FD35E11F0EFAD3050E68B2F5BB5
D65461B684A0B340806B34BD68FCFDED1ADD3E2FAA088867E9C17D53EE9AFEE0
D36C32805A253CFEB20EFD4532F533E8D4E9CDDE32F121AAAF7D56AE4FA0F952
1E5171333366BBB63745D6AFEA4AE7BA3359AC1D017979602FDE78F8739A9E0B
EFD4CF9DB0F7ACF7FEABD61EAD6A46E173D03B6CED2F107CA00D0752C1DBADB6
657DCEFB254DBE1728C340A65E36711CE80A7142045E5CEEBD1BA73CF413F5B6
49E7BBA32CFA12A6F5ABCB55D2BF53ADE604F5BAD977A97F5C50FF92C9755BC0
041577D54646A7253497C716AD2358AE18EF0BFB01B0A77189D865CB06D51F30
C10173C147DDA87BC8D355C9CACE193AF4A245759BEAA2F089BE249905D4C102
DFC5A692B63A84864CAF933326ABB47907EF857768FA828986D1C31614420302
5806340E77FD5589D5B59FA8828075EBAB2C3C08F82D4C916BEDF3E36BEA6C08
05C9CC79360801C1CDF622E99CE46FC7D759D4299F4FC9241B22ADDA935A7876
8495F4A0872C8F68D03B664C335355B09DFC98C33F37E0080D8B12B256913E52
D0CB5E177226EB16D8E1AF7338C0E9456D4AA23E399123D5175E19ED39D42394
136419187874775B6F29ECB307DF72667AA8D53BC397F9935EAA4240AC015DF0
C59F9C2C5337146A06890ADEBBC097A9100D2134CAD938E5F91DC0EF38A0E069
1CBC11F8FEC118F0FC216345F5EE273DD04DE260D94722A7B69EA1BE414FBC6B
2BC890A9E6ADDD475CAF795651A8B4AEEED92410414798C0113FA5F0328A6CD7
A85440D6DD0F833F88C56317269C920CF368F1C65979BE8A96E6923ECFCA03F3
DE0BC5351FD42BB5CC22BC42FF13EBBD0D06E50A568A8D9E0D604E86349B60E6
A18BC3044E2A89689C867D7B28D5145BFA19200E4A1BDB12C2B9B8920FC239F9
7E12B6E31532AE16EBB4F8760A550EE4F0C8C7C42C5BE57752FAF9B77FE7085A
2F358180A3A235F013EBCBFF296C0CBB2716DFCE9E34040E2AFF50BE0242730D
FD17C2F05B57B6D2502CF08284CA9B3C26A5A0C6D98AF167692B55299470EEB9
8FCE1FEC9D31E66B824F2F7798E443F64A2773BA7ABB37108EEB25F6A2027EB2
3DE8F34CACFA98DFA54676F40665BEA7F34D5CB91AE7D909E2C8C85FB907BA10
07F188592F0A8212003B09BB6C65EF7D41CD8C340AE786B24EFF373CAF8AE438
EB03B5405ED1B9D1BCA24B975DAC52652176B234D6994EE25025538AC31B946C
4A8FFECCA09ADA2D26C28668CA17D21C17C7EB7C123AC8C0F4CA8CAAEBFD84A7
0D93D784A89AED6A9BDE43B426C5E17582FB88C242E4E8F90A0BBCC5801C78AA
31E4240F13E5A12D9F6EE5ADAB0D3D8B8169FFAB5071280EFC3E6BB803965A5C
9B172FC9AB6FB9662BF0DDDEB2CCBFA80AC69BABCA7A3E39257773F03424F581
1B53C23B4BFD002A4BC3232163C65DF1C5D3C63EA4B4E55BAAA032CA6A6C6F8D
5032BD0F8197DEFEE461134BDE0DCBEAA201549DB414D2F5FBB050674B53071D
F5A0DA68A11043DBCE9951FF6B038CAADCB7681DE25865DD638680188E87C0A2
851E71F5DD768AFE15ECA11967F47316170A909C04542C2612AE51DF9B3D0654
FB87DD6009C90FDBD289CC70456A878C782BA6D48AEE80E17953AAC7FDD231EF
5B4C7610419879ED9336B304A414BCBF2ED9C72A36A46FE57511F5431782DBEF
78DC32951F69E7155E6CCED5B7C809BCFFA3A71EF23D21FD72D09F4029058F5B
2712A90EBAA962D733EA6B2FBF9A1BCE4E4070722700A96D4DFD1E629A7FAB88
AE9103F9CA4A898920210D1E308D1EA42C0BCBF43D20D13F54F0F6F9B1D4E5E8
71AB1D2FA79EAFE5533A949984A6F1086256FB83412B78BC5DE64C387F3AE3D8
45D6D1EDF0BCCC43CD289656760F26603C0376D8E13FE274EFE7C8FB38C5B06D
7857FB38C388F96143888C8BFCB4BA4E2B82DC8BBD5C914D78A13C9052DFCE63
82850017B12CE4D55D0D0EEA0397C46FEA9B6EC08C1916D52E34624766DB71CD
39F61B3059A4FFBA96FBF72CBD3CE298B5D040810758B1008F585FD03F9A74E5
C394D0DAB1A316F3A95E651ABA0AB0CAF5BF0D32BB19F361415EE87D3C38F886
A237207209695871546C0A7B151848639B54565A74DB79029416C49D3CB47377
A99EB96662D804B8E40667A67A07608BCA52E624006CE6889A64960C84235B58
E0BBD553D9457C1A974B8C3031E8E24E4F91E4FE65CF559232744251431B5958
314C319614DA56D71DF858E34B6D27E108C7822BE4025C7B6B755D70C25E2F5A
EC5B3EFAA8BA532BD69AAA72570BD149B96495E1C27B8F6888B23EEA2F5A6C8A
782EDC020063F2585850CA8195A4F9C870D2748EF9720F95E9EE1DA39ADD28ED
A14B5FF1DF5A8AD87222C54BA8DAFAE21E15FA6BDFB4C1D0D803B794510B30E8
B26670A01E6C9AC62B23E03259AD01BDCF13F0603A46295102B060F9DB82AC24
5B5134D5C278F0853C05B432498DCCE33C38842223DE23A6509EC4EFA5119E6B
BEC196EF0D1212BAB7F5AED1AC4936BA7593CE55415D294747D332A7D3F1B16D
748F971DD948462950918E59B8D7AE0C367F083F6561C90B14D2A9ABB0E86BAA
9057A34DB9AC0484F0C033369FAFF49BBE499A6F717AD291BB0ED43A035D81A0
5BDD021509A8EEF409D848D0F6CA1AC24947C31261DFDA9A6A7A1BC4BF5B6A96
DFA78EE665F8F45846939FA4F4D1C99603AEEFD122BA2256A995E8559ACAD834
5DAD2D995F2012B6FB8BABC1D13DB4783C306AEABAE9397F2A5132D864DA2FBE
3658D26EC30EAAAAF1C7C2E6A51B72B52460BBC642590C55B5D83E17A2EF9DA7
95ABEE16B149EDC642CA8ABD38D2820C4B916D25B7930A9C69CE477629C1E0C0
8D25A6164FAA374E3CB68CBEA43EF3575D1ABCE1D7C6187B1A429577D5D9E48E
1BE994C9BD54AF68E2154AD1F63873237D15237591432122B9D5B8788ACEE98E
790F96B56B11B7BA7988BF49CCF9179ECE8F5DE4B4277C685A3A9A518706989C
4FC0D581C1C74E05B312533A61A18BA0E86A45C63F0DF55137D56AD6920187A6
0A5D45A0357FA897B8373366E025FCF862934E31F83CA9BC695F782AE9F50100
F19785C6C87985AAAB643C6284618171FF1A2EC94D287FC1065AE88E593C75BC
8E7444595F43DDBD597BAA0DA4D319200574EBB504DF41015FBB5B407A2FDEE4
FC68358059074427C6D84E9287C0DF50638628CC566A2502E166C0C9B9BD92BB
1936BA9BA2801FF2CF676AA4AA66596EE9612300906E8E778ADB07689D0EC300
D44560B7AB263AD038999606EA42719A6D330EA13317073CD44B144C96497AD5
B32D7B882DACE9CB49D3C53B04CFFAC01293728806E484721BE2D7DD6C96C0F0
55920C3AE701AF248B5A33F220F314180BA4C6D40F4193C3F95F50B320492355
F1BB5E20055A0B3799151344922AB95ADD734EBF0C288B3201D21B3811DC17D2
431F97DF6E53D9B21BD6B3F495A02177A9418186157A174B289C6686069BBAC9
FB77DC7CBABB02A71B03303FEF4A5026A2F016F169E7C98310BBA39C67704FEE
97E81539FE7DE0E5D3272530AC5E90D7EA359B70EB25B2CF67595AF41114C04D
EFB32AB56AA0119DF1A5E240AEA9E42993BAA42FADD53CC02EC96851B46A1345
CB40B73BA735716CF3A44A7B87F9642C685FAA4D47FBA6D8B59DB5A62C6F6EE2
8C006A15D64DC1EB4A5A6D0C557E223B4C788DBC632CBF640BE1A6F7C38A75BD
D4E211F03682D53DAB01648FEBB2CAC5F7A1B9FAFBE669F134A0B4A0117EE5A4
71F261727D599AF98436A0B7B8F42F89184EDC17D3034EF4238600A1D8E38E09
5556EC649B570F81871BD05B68870AA4CCB1269CC8781D7AED41EC5F89DB5513
0C2607EA9DDEE5455C79F3262A15A8A435E130519E91213B94AD7621B8FE161B
418ED18AA53535D12BE5C6AAB51AC8D09947DE3D2582DB33ACB769B615D70D22
A88D5903480EAB1BDC36EF38A745EFBF4C811385CDC9BD557EB878E485206152
51DCA7C0F33E7157A936A585EFB1ADC7ADB57A5704727F357EB8C8EB210CF477
CB927BD77255445C4FFFA03C29C01795111596A7354B6420234104BE34BA4340
2E298DEF3FB862F9A95BB47A901A9DAB5239F3A8CD2DA60F28E7522A601851E3
BA81C5FD1D3845652D45AE429F610F23B06137712A7CF0FE77AED015F7189AEA
83A758BD9A9654735A04803D83DD7EC1151896860B7A320147C8F465753B6609
96C59D106F44BA75287714443015C1EDF38051D6A838B681E1D466E82267EAF6
8823BFD2BAFE8EA3EF4D66E5B65BA99C7FE8251B828BDBA63A77A753EF0DD134
1F740BA38042BF910EE4798D534C893D523EB78052CB61AF21C158E3B6B552C6
781F772DB1231E55B234A9E4B65DCA448184D6E203956226C8C1BAF571339DA4
72E92EA03F82716161E0930307095FD062D11B7E902CA5FAC215E326213B1821
E01148A4252DD04325ABC637C7F9E190DB198B1D52B891D688B78CE5BE501A5A
5AD9643AEE3829ADA791400F9CFA92AF58B3EDA56652EEC7CB4BEACE0FF9AE58
9DA0BD109BDDDE6769767DB5C2489DD0F7E5D0101CAE549F1EEB1FE8C13BF818
9C163070FDB9A528420F573C373285B8FDD2DB3EE3354F06A53E74F00A53F441
1172B282FF67ED587D4922A08367C5F8EE3E84ED2EF0384CCE9BEE9E55B657F3
786F5620456C963AA8A7DBA62AE8690C6B5BF4DCCBC08C071C88DC859A60D98E
22653A231B7AABD4DA6599F518A74F8F6779EFF6B90C292C152AEF556E40A371
4680576377A48059E6ECEEB4E1430CCBA940D41B8C04563596EC4CF652F1FDA3
93E86E18C6E9DA08AAC82D0F27131B2C2B4C3A3243CE6EA4E95EAED6984D189D
DF9C29C8C8E23B1526661655EC0E4254F01963DA7F490CBC4BD135A3BD67DA94
8659597DF99346B24B80CB5891B5BB30BEEBD82B677A99819A46B50E51BF6B66
CBDB66DCA64BCF82C547CE1E54C7741DADA5895195C89A2CCD010BC3CF998F45
F89F0ED5730FD8DD68D722D13A5FAA8A1AA52DAC76C607CE483AA519762238B8
6E5B7D8010B505F83645C339E33A07FF6E85C6E2FFF0DF4CF7E14F72C2F8B9FC
6A21F15C186C061A4EAE0783123CC702BA578E0D7F638CEB3223D04D09772A59
EBF150D0E6AA2F437AB1E0F6C9E10E5C109A9936E9C787B34E6FF1528406F248
36BB6907872E104B87597F5ECBDCAE69E08F1BFE1DDB1815D29E490816CB197A
02FE441651605B9CA5E923150AAB3E87FEEC1C15002D0C20AC5D3FBAD6A043A5
D99BCC67537BEE93CBDF7584CDB7496CBA3BD002BE30F61DC8E9E2E355C05722
A9CA9335D375541089CF3AB3029E31BA011EB3FBCC801BCE5D6813FA3D0567A7
5F80431D05A9FBECFB8364BC8BB7D4B10AA4F00CAB2AD7ACA1D2E25F739057AE
5C6B5F15AF3E640EFDD824E7C71AD6A3ACA61B7267B8C9099C14DC98B2013151
2B0356027DE72F61EA8210F8F66B8C2673824A2BE301BD285FD1AB9412AC6F61
0C8105845F12818CC466C672C090205DF19ED33E5199DC416DEDB5C53F20417D
9FCB6EB4CC37792F03B6887A21D59350EBAB29B499C30FA5E25A047E45CBCC86
7CF4C02FFE298E26DD372E35F37882B2B5FE9D03476691EDAA19DD8B2A920DF3
E73DCF39C65020DDA0BE0C05C80DD94FC24E06B786AF95E9EC65F8E944400BB8
79D45CE67EAC603C1C8F54A4B5A4E2A2CE9E74F61A25FE854638359741F90CDC
C24FA37B6568C9A57E7B274960F9C5F929C8ACF33F1DCE75ED74E0D23A5ADA8A
5000F37B726BFAAD14A67F37D87DA10C03486C10AAC172CCEFC9C9625F8400B9
041810095C85461F0B9D676E550BDC32FCE824D6275ABB9A516027A9F3D8AD5C
1809922E99DF6B70125A8A39D7D9BE23C1864752A302B7B4DE628B210A86E5BD
DE2E5DC7EA0F8287182F9F1F6F40E8DE316D9271847C89225C958C7AAF1DF0CC
73E8DC3A6E5ADF4234D75889FA4C791F299AD6511C85BE520EE7021038D11162
3032CA20C108B716D5DA666BE59FE14907B0A746D3303AF4D2B59B435F3A43D9
F0CB3A0763F20D84BEE478149F8B53364C64D5463579E6C2A82ED0596E266C48
FB8DD0B41BC4C2DDD89C5731E5DA62B81E75FBF9EBABC0215D4CCECEA6FBB872
7AC5F32DFDB144F057D13B421C52AD90DD3F541A9D3316722B901AC8FBDA45FF
7F741D89E80C884681D5DAD29E6AF39A9919FF7B0CC5D36983B97C7CC4E92C12
1A05D03CC3BF7E9C0B72E12E03D4C3AE15BB568FBE70DBE607B8ECA12177C7CD
98C0B9696A6D6812C6BB0AEA2B98E5E8AD40D6C48C2CECC58B4B0CB14313B8B8
89CDD17AEC5DBE4E2FDD91495E1C65FE62BFB3A5B2E992A8BC3D86DCB94DFC20
5280E49C699562ADB17448068F514FDB11A2B8102BA3AAFCDA2FC7E16EC39C55
4B1EC75DD89D639CA2A26D59A5653E1DED8713C1678491A6E5FB5143084B268B
29897C147013EB3B09CE25A53B1CB92CB9AE8BA6D06164EE0B8DB32F5AC6DA8E
033FF3EDA3FBC4EB639D244301AA6F1409F50E51535A3EC3C93C49C72E0176E1
2FD6A852228D3C4AE52D001BE93F44E990E3ADC4BCCA4F916835C72A1C95BF08
2F21D6155E285626379752EAE14D7715B5C89CCE325E42A3A78ED92B609CEBC3
315ED906C8D0C317785D3316994DE4231204EA3DECC5CF8F153F62249BD8B601
4F192257176143E6FECDE716FAF00A333AECB1F931B26525D173F04834B8BD54
1503BFF8085EBD8263EB80663C24865CEABB810245B9F1A91D4A99BDC3EAFC5E
1F292CD26D6A2EC99344FF4B019485623B7A3DFF1A92340E5E59BB68DD231A93
3817168828B95915366FD9D4FC3F4CEB73912C9B4471CC7FF4A8DE7936CB2F55
DEE274A819B97A3F23DF6B9D30ECB1BAF4B00C8F009DBFA99E2E7F62FE3943DA
DF182D1588F5C3CE6FA7917DDFE923EF6B6E5863C613C56239EB148B25F2346B
0F56DAD42A78EC64C3F26285778C35752639E1A77F12506C02F1A6DC7E08706A
6529E8EC4075D24EB05A3E95CFE230D0493939C4BABEDCD664B57F8BA9389377
9BBEFEEAC2D7AE01CE4F6A758A7F6B6E306064C9CE5C12217C64925AACEB2842
2B0DF8A4E24787A47887394B2B294D008648779B698E7A6435697D8DCBD4F167
F3D6FE965B8484B246C10A9340EC29A5F40544414C1DD16FA1E84776BFB65952
EB915DB0DF651C3BBF15AD24AD877949E9D5A5056D77888AB8A26CA0604CA5D5
7456CA8D38C42D55EAAE420BEC750F65F3C536C45CCF48CA297980C68340D26D
1E261AC9DC4A4088A9E3D179C28CFAE1F2BD4CC376B3B72C4D27CCB158D93717
52A549C48F7C5AE906D03E3950382C76644422AE2A46E7AB730E5F3B70E3F800
6AC20FA445CAAF562F0E2D418460C2C6B6B6513CA3BAEC98D3253C8224F96F4A
508E6EF9A56945234CBDACC39EE591381152783F029C3DC429AB427ED44EC883
6B9FC308C555F071154FEB894398564CE464C21C2204B9AE58F6E12B3ECE2134
C73225B9471338F012EBCA6C39DA7D5B73A213EC2C4A446F273DD22AF15B2986
76DFD31CB0235F9E8EB90EC3155E1E303170D6D3BA1BA409457D5EA3E798BAC9
0AD23405B567E19721295C4076C880CBA6C738705B5D303F56C19528739B12A9
FE1C46EC73C84A91ADB0B42F0D6EC33585F10C4CB449958327A4E03446BD8D4D
DB4B22F1A582585F3C8535A3660E391E8DACAB3F519B3042CA4A120AD2BB50CF
79C08E0EA41CA80FAEE142DE5CCE387E745EEB8E97EC27EC6EB490F2ED542995
249835EA904AF9AA8F1CB7038B6F34889D8E8692697E7B86C7F66873F3BA5CE1
AE7C9108B526ECDC0ADE5B1FAE2A7A1269788377F390E706152E42A5B269DB23
EA2AA1B3533B1C3EE94BE869217DE65E3F1ECE43354FFCEF287AE60E7EB7504A
31AF3D7A4C266A0650C8B7061566CEE3BED37291E7B83171DEEACE0AE6D1F3D1
7801782754883A7295F54C760849939713B266E0A5A1E9C29160086FD7EE8D50
F3F41289F48FEBB9162DBAF5278C5B4211D58D5B30AF9B79DEC0E4A4BC6673CE
E8D7EFFCD4773B32753EE13DB065BD87797AD29CDFEB80FB8F73146C5021510C
A8F93AB359B105824C0097E8B79D1D976C0B575002FE0B35A704808D7B087892
8BC794C01251E0E964B94A888FDB4E9A14291AF16E3C80DC2BD056649724858D
3FE6FAACCA41B49784A6C1C3E3A78D96D34ACDC7551591DE86E41BD36764FB01
559F9B8A738A7C70E4EB6AD127A7E9AD0EE58C61C22FE5E17A192682D65B53B8
158EFB2F63BBB7EE2D502CC637F59639001AD4F5AC2C266050FAB1C5652C48AF
B492D64FA2D4024116B5BA12FB73170B7EF67853BDFF8612AA2DBE1D15A7F510
698A7B67126F04D84716AC1439DF470DD105B40417F38DDAA8983919AF9D905D
EB44EAA6C6EA986CBFDFB44304A89475C3DE9F52E1B52E0D7920BEE4A0333AE2
0C8CB226F1BD3C70AFBFC3C0886337502763FE080D39A569444465B7D48E6CE4
F3EE1C9CD9B65D8545035655A82CE2C54926DDAABA13AC74F9006BE1F57BC418
37A24BBD39AFEA353FC173266DF5AE8CA4DF727B3F95E1747F029DE974C93E7F
92E48DAD284B9150A41074E6495A3C34E502C78421090CE6723D3C2A1524B388
9A268836EC2ECECF74BD96A2FD5BE78BC3ED82A7630C25FEAA33599B04F7641B
C266117DEBDB079588DD850D9DC3E8B17FCED82E187C1071581A43C86866252E
7DBFDB627638779EE0BC4B8D95461A828B20956A922E2757402F957C61758EDA
E4EEFD5A7B4B89C0FD29D711B36542DC9C1243C8096D8F8BE5876B4FB01BE72B
A6E310304907427C26D6816D5D83291C3BFB37AE424572909145A0C22C18C189
254E4062D79CE1362B6AE20BA9AA6BA6E3A1DF540FC68680513AF123A58715D6
014D2CC8FB2AEED8B1FC35F60C3B1BD43465D8BF6E5044BE5327875E409DF15D
DDDB891B3D7AC6D79565A4FD7DDA0CC8615BBE615803EE80E421A32860335D0C
09F3F6CF3E543EC5BA5C1ACAB4C8D5DBE24457FD44E96228E2CB7EEF09BA7CF2
09F72968FF0F0E42F4A5659052BEF5175C5012696F3A7D28FCDD1BF62480DC24
186EBBB899F1F24B8F6A47F3E6C726875BC7B666B1FAC4459124722809BCE2F2
ACE8A844DDF7D7626D36A99F2116964291676194310E33E05FD6FF960420E387
9B8A6C79FE207DDC4BD38AE8E129BE2F690F766B5CDB5D5DEA510B5E235C5712
7D118E0EE3E998E86F0FA422D3B6D927B968C9D0917653285A0120393868E8A1
30BDA1F8BA02DE051B617FA899E3FB8440F4320B3FC6A0D9F2A0C37EC251BD45
1A01A993B6641E47FA74F8FD6D5DDB09B17D8767825A48C2CF004C2B2FB52044
0F93CDACCC7B2CAC67CD2A00CE50261937EF45B9C0EBEB596C293AB716CF9E0A
386F9168D7637222F4E8E1CBD2C125B94E589B8228C33A9A6D9A6FB800949392
9890D95537F41DC59452868F7C28F965F6909BEACC86AEFCDE4598F221F33CBA
C032431AB22A25876FE06F4428B9434461F8F4C00530B15164604B5216B68E79
D6A52EB7563A267356A4B11A02E492270D877A8EC2F9986D57BFB27007B295CB
175BCC5ADB66904AF8B70B4130F3E573514916CD02F4869375E09ECFB8CB474B
ECCD98D17D28DEFCC71B7801FA971C2261BB3D56C1594C1EDF5D094B2DDA212B
B76492CED7AD7EFAD4055B960C885675EF0E4838C16E8977A37CE2DF3BD08606
69A462FC236671EA9337F630A1A72AD90488E7546BCAC28887C9DDC78897E014
CEE78AFF2A1DF396D3CE0964C8562583051D03EA4D9E561ED90AA5386999DFE1
65AD21E1C08C8D1F200B8447A1C02B8BDEAFBDE5B563228F5F31BA0E22B5FBE1
E9C14A720334D778F6EE0091485CE15F804FBF8C024C5ADEF6BD33B14D6A9FC8
EF7159A602FFADBE8B214EDCD9D4A308E8E0A54FADE838AED9CDD9D66CB7491B
9AEE1223B53009453CEFB531A020F9D3F6B5FB8D0D5DA711739CAE9F8C56B080
6E3F47C0BE04CDF8462AA17BEA131069571D89766A62EFE985D3BF266B069757
DB15A45A6B41EECC1B6D7E44600CC28357FA1188FD26A14DCAF47D6E793BE34C
38E5EF536D5ED13780232D39CB1CA838F31C20EB4DE0DA71774615EDB31D76B3
A09D7278A3D748CC032A4420453A2F57296339439072E2CFB07F26C9CCFADFAD
CA0EE208554E31D39612441CE5393F7E6788010B8CC8F60DCA626D4710D8E3C8
63B504D9A7DD34C4C8B1CD2E4664FEF01E773A723E268AC2FC6E51EE898137B8
92649FB4DE2F761EE47A903AFC22BF1575B7A93D55DEC5A7BCF394FD92E01122
D50A30923E2E1651183E681FCFBBC911F00BF2209F9CEFF208F83AE57DACE28D
82016519512D4D2F13A54C8FFB914FEC26173CB9677DF0CC6BE1C4D7C41539C0
068F3837DA90528DA819D0262935271EE86922AC04FBEEB7F5F338B89710BE95
C51EC18246BF07AC5F2262842D0686E42F7AAD92192AA948054B65763F49489C
F38F7BEC72518D35E2345D836F9031A15515D5ABA3066E194E206506237796F6
62601F445B28E1DDD9B0ED2D562724E192EE93C47A0EA8908E25A596408F2B93
522A6A8C40693659100FCF538559116230DBD4BFF31D917FAD8E77F295B9F0A0
2E866621D3DA532597BF1C62408A5F6787E2F3221CE1607E93B1351282046F4B
7777718372F657C1870E87CF57C7F06C3211AC72EA793F4CB63095FCDA6625B6
9A636292670D255BE8FA965458310091F0289EBB4899151FB81EF1D2860E5BD6
ED5F5BB716151F13E353E4CE70F1AE6FBF2C4F9F73D09FC9D4355DE905743494
D8962E1B621A95793909C46DF5807CE41A857EE6554E147E88B8A6FB40F7A3A6
203C157B0169AF1707E9BB56725E96A65AD2DE4D3A16CC92DCC5684387E77002
281E050A654BA318C4535926D906019B974ABA38CEE780E228280134A7A193AF
41E760DA3A993AE4870326DA521E34E87AB73FF53BBE970B126E422F16C0CE71
0D36FA8926946C5767D4AAD3BED46A6915655D636A658C6068A57C14F8652335
390548A8C92E090E5BB90420397CA3A4CB0FB662DB565A4E161252E53906BBB6
D0109A07ADF5646C9AFBE993AF802E5A25067B49FF01E88C1B727612875A8714
F202DA2BD828EEFEE1E6B11F5A16F83CB0DEFF6DCAA49984B4424195E7275C51
E879365C3844894A190C176283555E228334643707924C29C674571FB16CCEDE
46FA853BF76E75B363A05551DB2815A88C8518488FD3E1C1A15C1E18F23CA566
3675C0526DC5247D2394DBCC7E3E4B094194D085935A167D7A6F255376F98082
DC0F6DCCC4AE131447A3E489FFD03244A86FC42AD1F9F2213024883166EEF22C
F978B8E45E8E64839B2E3A340B919016AD2C0BD61D75D3224B90859DDBB3CE2F
B32C89D669854BD25C970481C36ED704C1891BEFEB67AC54965960B0D60ADD37
2006CCABA2EF6FB08A46D269167656ED02837BE2D5BB6D1176B85261316031A1
DCC416194D970FEF8555AC68128B0D6A5A0AF12B17908CF96112EDE4F291E2A5
EBF179710A4B6C46D84D6375370B81B5B6A3E64EF023CDC28A9D27C71E4015E9
0EE6A7B08AEC90D1048D7A375E89DA6BBF505625675D241EEFF01772B06D18AF
005E14960D82A4725B55D0B334AB82B15D5606736C08E6DB1F59257560E7D913
77FC8DCE8C6FC0EBDF4C9000EEB0A718CB331572D1BBE8FEE8E1E96167CD6B46
C4613A93C51682C0DD958A48EB05D8548D43612B6E870123D018123813FBD45F
B4CCFF7F78080BB828DE522DB39641A6C63DA93633E1602A5540BF05A7CD211C
121B4CE9E8411307B79EF3A7FD4FD9962B9609050E0CEBD39A45D20FA2B2CF9A
389BA3E508226AD3941F835D83B1A5A7133EF129DDB2A311216944956F5DA72E
94C3DFB5793F85E7FF8BF0D1FDAB75850FBF7190A76E923A24E3F0D6C5168497
73C088476C19A27E8D24D72C436BA839A0E24540E47D8C9EB87C096D6BC2E1D4
C581097D083E4AC133A0618B06FD830B4D5B36A09DF69D417E047EA4754555D5
FF424F62BA7F55ED1611BAF23B54E6862E89C7F9BB9B3462A8AA58658B4AB512
53EC5A93A16BF492DB3A2C414C184BA479B4AB5E740FD7749FF3F05A026FA485
CB1FFD26B371C84AE8F89CDFDB2B8D52369BC1CA62661B7C57660B7C24504D16
D93EBF535557561E6A22B5FDD7E15566054D57FC3B9A714A7FF3B0F54AF80450
5CC0CBEAF7F7513D16E213CE384BAF55B67F5614294F3F0E051158FF63E42F40
F7E7C2074C26F286A96DCB8E2037B9228A6C495ABACEAB2F8FC28E0C2144182F
DEE1578081C3A54B6D321D54A0493EC728C37CCE97F705F6BDFED203090C1A4E
E5D0671FC3E6F29DD53C04FE4E4B2D7BB18294E9341A9EB14728BDBD19E73433
D438E8B01E40DDC7F8AED4CE4DA32C608306455B333F5D97EEE8E8F5B302E235
0A3382D17718340C2BBBC6BCE0B23DCE485801B5B5447A39560935FF72BCDD7F
76DCEA80A6A7FB2F6119538F8F43FE186DD21727C6FF92E5F11177FD28D4AB76
53BF9CE92C23120AE0A07B213D46FC82E0CD2344ECCEA01F2DCC425422053719
A185C27727C26C6080612CC4AF93C045858E58496B7BB20C744C6F1572EC1771
E024F2F64A237C31E468F28B07DC0978DEE0675A5CB7B67174A223C957AD16D7
EEAE3A94FEB414B1055B64E1E31093709DFF4A3BA9C8AF0F0B142EAB325D14EA
08807CFA1B81D98FAEABA2A71E27589FE992FBAF84EAB731274FED73A7A5101A
6D9688AB8E47AE160C1D0228FCF1FF7D26E18A73E45921D86D163B65F5CD319A
7444CE28E2BF303C8328B742D7262E55765D2207A5A72357210C15009D7C39A5
BC46A78162918F187E76D48CA0BE2D9D69A20A4F6920846CCAACFC1B7FFABA74
238D7CE71C5274E5DB102C212E7C63319F0EA7B07897C9628270286600989093
9C532198971ABBAE29E7073F4E3E93FFE4B267478D57984AC2BF8D9A3E86679D
5087801C0A467A7824B89001148A163E2E06B6B805779F1177F55A501D879C44
39D3EE1C298FDFF7BB9BE7F92DC0658D8A8AB901410452472818E32CD97DA4DA
DE6FC308CF947CD07B8B06132EC9B0F4FA0573AEEA665B2A3339D98ADF34C320
B14143BBA00D4AEA3415DFD0519843C28D01C85DE57C2B0E2084B0B312282129
93E0548AD36709EE2E8BE25788B7782C8A87641490257E4BB969B541B936F4E8
2F2B5F5D5CD016C5D42FF6E78771AD74FBA1CA55FF8919687BED44AEA78DC50E
DFBF06F89B98C05D0FD9DFAB36CD91BFE698DF151F10C89609C6502892F4CCEF
CA87B0F91CFD8FFBC0837DD38256D1E7163D59CD651110529B71E8C56B9B33F0
D7989ACD167D6AB39F7549EDF61D7245CD55609451314F84F37AD2ED03208635
D0D5E8DBC8014CD6A89C1869124121D8B5BDD2F35AC35DAB60C4C6A4A5C730C2
6F191336720271BB53AD11F3E5003522F4A04B85565C8345BF77977B6651E5CA
F652418824F73134A10AC34E90DF493F792373E654AC392C1B066E7099EE1DFB
0657F97BF11D69FD0870048500940F5F334D51A022AD819EF23DEDF9DCD3C44C
DD5A57F71BD12B072E1EB2746FF8DD437C7730183CD3AD4F1F35F346BA7FD643
AAEED4C3B5DE78E2B5D081D64BAC58E962DDEE9439D50B285E8BF6BB1346C81E
B9889782F245C308D6B503D08FB4F4B2DD055081786A3243848FD257260D843F
806D24AF171EA5144F0C517A52E7B09B9E45330BFFECEB8F0C443E2C73D04BA1
D27DF585F3320C7751425F27005EF73E20FE9CEAD8DD37F555507271FF733A32
1120F67D3ACCC14BACF11C87239A146914B1D5A8D4852DA6FE0C5022FF079B23
92B7CDBC87A3BD59D334D8ED2EB893428C3DEC3378EA4F7B4F28A5CA8E54C786
C4416E17E956F33AB4D645AE0E53A201E9C9FD1650E8C393116945E86AC397A6
62928CEB9AFD04A3478E34FA5539603DD63D6D9F24B1929033507B3C282D2451
E13B5F341EC8D363B9DD9306391E3FDE03A45CE6491259F7899630F44B0A1B0B
1A390ED7D8811105B9966461C4A9953BEC852BA80D225F71C756674C5798563B
76C5D0A3B28E438EEDEE3B21CC8D160FAD3AA1D11C1BCC721427B345179842AC
445ABB9FA698B0B150D1D1B83B63B8F04FADB86B2853C7947EB980EA1E868C46
4E3199706DE33D5CFADA62B417AB1CC194B619F2A640743045F911D7C34404E7
7F0978725BCB66803D716BCF781CD2C77726A60E85A05974F1766317208E7F28
3CFB6E7395DE67CB79C27C1D6EB55F35CB61FFCC84BBC5885771B4B4437CF3C3
C3584386E0853AB0457867B5AA16CB0E956F1F9DDDB9C7E9D5BE54368447CC5F
393945117F1FB6B5E2CD4D243C3E0697C119C2F9255A8ABEF2B299D5613AD295
B1DC7E230083389A29AA8CDAFF1D96DCF8C42BFB6F502F08A0244B3EF7DE684D
E47665E2A4DEB95E8FE186847B19B3BBC7D809D149A44ACD88B7B3D76AE6F2AB
A6654F9EC21B2CD0E3650F3AF1E7F91CD10E43FFB33EFF03377BB23732843202
C28761E67DB7F37EBCCB62BE9C248B720F99F35E219569C90054E1A6936122F7
2E3FDE1544481761DF5134DC523BC687539E9CE63C24F25527A7CF1325704B4C
F93EDE44DBE5A00043CC75F884CD484B26CD9536E9DF88EA480EE0B83E6E7456
9CD843CA06
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
51E90E6B486A56AEE781DEE294415E7836ED20F9AFEF2592832E8F5BD0C1FF95
E5623F95933C1BAD394692F64A5B8133647AC37770F136BECE156F7FCD7A4D9F
18FE05E87D7469C4FF0FC927501E9028FCD5593D6546A9D962C3C1F75CA1B396
70A44E6D901AF532FEA512C3F0506676C569901E11D25D8A78F34E8EF7EB59F0
4585E2A6ACCDF4356F831A160FBD1B6EE530E332938BC6B31E4AD86C3C9EB719
8F9741A9D0BC2B89D59C24055ECEEE4E80904F1CF854FE240328F6493A6A242F
62EF32CA81A2041BE6C4F8150CA36D0B37F7BA284A49E4DF9B196E9B6C6FA4B7
723A49B38400688391B2E31986D385BA0DCD0C6AFCECA423C805F0966D3F5699
085080E8FC9A14ED7F8ABBF3825CAC6293DFF6BAD81B5A0A6F29AD6694ADEFBD
2DFF96610C8526C17A44CDD63239F48042FE9D02470FA6CD9AB6071AAD222394
672BD29820B119078ABB982AF1FA32FB2D221D9716AC3D4CE0439AD51CA05D02
8B8FFB7043853688E3AA3162D4B534249B0DCBDF763DCBEA0791D837DAC94609
57708625D0FEC72EF0333EE774E0AA147C50B6DA14F53765437537177F30C804
FA9048731516E16044587A364E5DE399DB70162FFE24454D9EA6A16339FD6A95
C3F461EB2B133EE0E4027A34721EBF9426F0B6A0995FA30B50E6710A39D16712
1F2EE337BA85ED49D86A5B668EF6CB732ED31BF812A6D83A68683D07E37FE59E
6D8F4A95221FFA9FD3D5CCC67F835A307680719FBCC991C071AB039FA29165B5
38A8BDC93D400EC95660140B72936F085874E5F9340D25ED5EF2746D4D033400
9F8F71C4C90A6A0EDD35A1086B85406CC4B6AA0931F1F17FE0D882FB8C6330A3
0AFEA3906D8EC9017EA920E00A5BF781258F49FF48762D19151B8B93EB3E5A43
EF201EC086244B3925AC7ACD06CC4E0320152D56A72ECE235D0ADE725EBF15DF
1A7D74D8D0D03CFC7223A383D4EBE24EC20B368397FCF84BC0AF17078CC55DE4
2A06700D1AB8E72AB888E47391412407E10C4A4F9DE926385E9AA193A3486B5D
D4F26057EB4CD1DEC3545B8A2B482365A382E72FC967630971BC01DC56F7FE67
A29D8C7CB141921BA40B7A875CE9AC11FA54E490867BB9E14D3A618ABB0C3B5B
440DA51D1BC808BD295197548661341C849E2F4B935260E4D6114131410D5776
5892DA066B2F8E208D5E7F5F13B4126192FE55C8D16BFBC79C836E4CA03976B5
E5C6190A4935721A3A25F9B0D3EE73D6E82CE7F45E03015795FA9079A4462F3C
7A38C6FCFD622379319B671F56691C8299C8C9BA822F86979F67036C1B143FF9
2C26414F7F281366334C7EE09941F9ED7234137CCCEA65FA711EC7EDFC33391A
B62250D7F6E292731C7374214ED29C83C9A2AD2F2CBBD1A07E44DF4DCD65A884
1B6693C40A95C5061ABC597FFD50AC3F036BF0783A2D700AEF861619AF1B9FD8
46643CC18D86E3EB5D9A4E38C348201578146A03AA51CC215ADA37B4AC9272CC
BF81509A5C4F020EC37AE2049EA3D1235BB295028A8E8F27981F79D83EB8AE31
CE2CBCD287DE8A1592EB6D371130CBE4F748903150D0924765B1D2D2E33B4824
692E85E9000141EE5B103D0C9889F56B16B197DB3F151649AE9421DBEDD445A0
400CA380F054C33BDB295291227FCD173A25863F040D16D3078998B6AE4B1F43
29D053B230B3485F99FCCBE19B1974E7E3565A912A65492ABD0352745B632571
8AF7EA47A6CAF9F67A367AD560E2A89F75F3EB31BCF8E2D77A1AC5582BE89D12
8B26302488317E211D0DBB8166BC45AE15C26FDBFB5A0412180150409F711CB3
A50C3C91643A8E9699963E85D9913A21F06F84AC866281A032BD71495556B2CB
4C6D801C6BE04CDE3FC303EAE11BC6AA5B3C3D81DD390F68436DC9F84B81FC64
6BA90ED590FDD690E130D255C004C157AC52DEC4B927843E01B1DB7C6054000B
C2B7B3C6499898E8EC865766B4C6A0018835AA3DD33A469161582A5897367A99
18BF12ACAA9B901C593ED2D489857558878850E737BFA50C01C37391FDE9D748
C8699CD003AD4E08475A8E668485BD07B60885285CC01B43C52F5C88CA00CA1D
AD558C1A39BC15F2C406DD7B4C069F185DD0CE22E495799CE4797A760A3DD640
012D108ECD01222A5CEB4FEF82F497856B7881BCE8E27F4FB1EC2805E1C56020
DE3062BA9F1FD4DE5AB3F44DF5121308F919F594B2392D716E0A09022918E301
1E1E54A9DEF9CE77546D9439FFCB4C2EADE01F1DC119C09A0CE284E7CF42CE42
80F594D475968A50A13843ED5564F72166461823EFC219DD8B77973CB6BF83B5
497FF39DB970C20664115964903BF471B2E4B8E94D2D8BE7CC550E0D431E3A98
035DCDF03524D881DE8DF6DDDCDE439E2D50DCB64F163C070AED9751303104AA
F4E1281C454B418B3673D31EAA8AE51D1752AF932C8D17B01004F33F8E08D3CF
22CBF904E4ECAC6EABDE91A97E58742889790F2CDF510557F4F2522EC53D6601
250490BD7D32779187E423832E52B10B8F8A0A1326CBEAC6C590DC9C87729508
158F7504C8EB8090679A03CE90E2E7865918C24F5D67C764A7DFD06C7EF7B297
1B652B4BCEE0C1B754A67D020F7BC106B40142C79CE5E8D1180A6C00AE25CD69
B34820B44304A89475C8C3CA34925E2751A71B9AA89648773AD8B08B31D080FF
24E58AD4B8224C70E304E71A1D5F612252A81968B81113C97A52C815135F951E
46423D70F8B0AEA4A4D8799BC17A9DFAB35E301DE79A06978BD6AC447CCE6897
55CFEE11E4F1C452C4B8E5450878024A3CBA9DC4A23A7FDB6B9559B20C3AA77B
92EF29B1E846118AFBFBDB7BA6E9043A8DBB9E5D58DA16D3D24B402F506291B1
8D2115195A10C45C290B8331410F1DCFAC752200BAA22C2E1F0420327418DB0F
5E3923467C05D2F57FCF0845C1AE0596846332E5FB95EEB51255F0BBF9838306
8F1C02B3B2D45FCE20E4F2A119ADD0A8D9D4D0EA741747F29C61D1D0AD48A82E
DB68975581397C455859B78C38A1B75DD571FE59DD8E940F48BBE05BEF1FBD1E
11530A523AA3EDA345BB3244676914A674BE9113EC640477A65F78E8A0D7E86B
5505B99DEFB92AFF6551BBE82FD77B4516E25ADA2271D2543AD95E1E0CE17652
49C5B41166F6E058EE4523F9BA2A475AC8E1F0B63B670D795CAC842D0A31DBD4
24A1C6FE77C016E19415229961FEE51A93770F48749685A5121F9FD0A73C39EE
E0F425108529468B1BE6DCF2EA07D80E163FDECEED684F302C221EFB3A7EA319
86A9B8EEB3F9B419675584BECFEFAA6FEB987470CBDCB2E42C04E3ED3DA52C1C
67C2096832E83149C38638F730722C5EC0B0EA185C37F170433392C8930BD954
C29319FCF53B2041531AC5C12CD1C5CA1FEE46039799BAB1D6B99D6DF9D538B0
C7BBB6D1CD3D56DD3F967012DF37335A9E3882FE98C1933B7D906D3BFFE7B605
CD2D29851CC69BC520B2FD210D683917F11722908FC96F255C8E4C736546755E
76A2927843B2F5BAE5767B7B363872C0F0125B49A8CDF6C995523065269DCF14
80CDFA71034C79B9E2E5215F1C8AB164BE9E741C3E03AB9EB668E5FF1754A821
E79EDC9659AECA0877B280AC94BA589676AAC87AF39D160F1C260850C5052A1A
75C73FE98E183653484E7E8A132763F63714B2A6BD6CF81D0BDC60ED94F75B48
5E6E0E141E194C190E6C42C710017B1C76FFB29E30BB0422421290040DFB5651
76F6C97D46FAB167885D15650412FDB9AC02E701CA4270B47768F76D3D3E28B4
0D3955F2957983587B8F72660D5A304BF583C132D9ACE5DB35BE958FCB242CB7
3EBD2A320B38BBED1BE02AC50855B92756B07DDF69CDEA1FF75950CFFDC4875E
4B83C31DCED20F02C44D6D8815F7F5B867DE4010F443E8CFD411BE8E42D4B107
335B78207B6CE16FF1576600F138A94C73FC58A3939698C886710E368594BFFC
04C7F2DDC1B19AC7CB8227430562D2B3C0BBFD5986525AF9615EB2E76E6F8B1D
53E31A8DD812EF7077B8FA5B0B208F4F0C823FE8A395AAB27E73B2A8A8D7E042
3553D9FA3F59048FD295D7A3034BD0EFB0AFCEBECA917E25626C59DEC242C956
CAFA4742E7BEC78BC36F774694A17630D41B7B620921AF7D63522C452093DB42
31D39CA582782EE804CEC84E8734BAAD3F7DD4F42C691DAA85EC4C4EAB90A44E
243D7766BB4F6F2AC454F5BCA90F1C4EC2C43DD042970908D61E896557C5D491
CD3DB99D69CFA1291D7921AE4C93B6357F0AEB3073CEEB5632AF3BF484B52E64
3BA2CC396BA47EA5E363F60AB26FC8966A28A400D68B8823227A3879412434C4
8AA355F27B3F6785829B7502AFAC6124220C280E7377D27542FE47B288C86A8C
1590B3C5BBEC36409B4E28948D362EA5B9FD0B39F2BC5B6F77F4A0CEDA68279F
A9CDD72ACA874B66AE65CA9A5281CE4DDC8BE961F35061B43FF6DF1D5C6F38B1
E1E32E3757D29531E5FC0D82E3C7A158B3083638F43F373ACE6F9ED34CC79C44
C9C6E0967AE6BC55D398662F5EE2960A35AE866D12256F204940EDD8809D94DF
DB59931D705C7CED77BF35A0C7CE8EB2A8D918E9EC124E5A355BB7F924228C09
21C2300AD797B14E99BA4D13F79652B119DC8BBD7316407477340054B79342D9
E2DE4CA0AC1EA8D721083208D7699ACAD8F837F3214F4F214DFD133F8192E196
52A045870857DC6B06502F610A2354923D705DF0DE767AE3878DFFC5E1710311
150931AED37B71F352CCEF192ACB8494FC5D557DC137A904C96E859B59A29F51
E4A98BE8FE4A3FFCFA947F9D7FA8CFE1313D783C2BC083FD2D643C86207EEC90
EF1042DA4A2F1D8CE9F941A21DA20D369D7499D3E190493012611DA9E54AAA3A
42D79BA2632DDB8B26B827F6E45D14DD80F3D202268BCA6953DA92A25ED95EB8
E3E305E9B35A2390E5D04C4D839AF3AA782D1D6B7ECA0285C7AB14FB9BBB3161
40D1BE7F071792998B18CEFCAA367F548020D1E44337C5BC5DC4CA7AA426B145
A1478AB13A3E53D1F0D35A4764FD3FD20D9C4176D5ACFBF625A80BF2A047234D
017200333CC07F49CFE7A8E43EFA5E6E28EEDC6F7C1C75FB1E0D4BABBC6606B1
DFED014A091DC952E23DE69B9C8F56A984A4660F22D3A2861CDBFEE4CFB0C649
686F05A5CA5CCDA000EA7E9EA944138C5411D1126E7853E6376B022695445B95
94792BDF922E45225CB429E34BCD3F7D922007B1DE09FB02920466AE4C6E3652
4ADE8ED697D9F368D927AF22752746417F88A3AD150963637481050ED9EF7AAB
3C4213DB20CD3B6DB73A764309509FB6B9086959550027B87A0F07D77D69ECFF
30B192E7A2F38FC0101F17185E95A7C2542E271677CF043843AC9611EE9F6ED7
D7361F8FD7D4644C15E1F237835CB5ACF60BA72DE774592CC400645FF68B189F
894A6550AA382A759F185C3972FFB1AA55087A661566C6ECBB7011BCBE6F9AB8
34ECB4EA74E5F546F646AD31A9E80120579A17EC0CF408C2825F673BD94BC9E9
6C84E03F22C9C62FE8C724C13AA7585240742DE48953195536AE6A6EB1C9C20C
6CE357667ED20AC05DA571C5599F89C29816C67ACF82AAC166E22B420D52FC88
F4420CFEBEC8E9F77FEB379544260E67CE887617E2035F15CEACC449B808CFCC
21F14CC384C1C8E3ECB1CD759E02FB9DAC64EDF35EE62366BD56EE58F548CBCC
6A3B60E897906704E49C953012103D50C11306E39A48B2DA623DA30121ABE544
23C8BDB11B3D7253A225360650BFBD8434092F5136683FDBDCFE59B5B96B9AC1
146B1BB79879360490EC0DC686B4A5C0A922112381C573C14131352911A8E502
EBD27E0497DD7A35274C47E121DC08808F4B3E81F77D66B5EE5CB9517AF1F842
6A6927E3C3E853E2FEA88C772C68FC7952288973A1161C9360D93A26BD00C572
73C7FF82279C872915C7253EBA016BF0B8F39144577FA2D828F2C8562C85694C
FBDD8D30D2E088EA3F19BD28393D87A01C348E7186369A5DEC2B5353AB2CF6C5
22A8BFDFFDACBAC4233631308D99E9F45B099DD953FD287BC2FC539D3C560135
0E23DC7F4F675EE4C14C3867A048F2DE8149571FEFBCB6A699D04482EB18C0E5
DC0A84FD539CD8C059894E27F0B5CC539DB7E24A9FB0C87D3819B318CD3A83CB
386C420D073AEBCF1CF11973FE8F7B9CAE2A1D3F047ED183A031142936935DC4
9AF8A908094C406EB4574643B9372388E33B52752CACF70A793CDF8DB01750C6
727DE4A08DE38A0BA66535B19093DA0177CAB77B83B13CBE73020B94C1152BF7
EF2047E4DAF520190115C7E339BA3F4796DDD5472EDB350885ABA3C73F1D4A9A
F4E20CD5C0C9C20EF6325506A0D92DF798FE51579EC5C3EBD316A9976E426A75
38C6706D29DF0BCA295C846272F1FBF49A9631C09E8235C6FAFBFD9818F06FCF
D5299FF9855D1E480F9FE91C1AF969E9B3CAB67C8F9062C2A194863B9ADF9D82
443FE0DFE3C33A60F8B73656C411D9A77FE028FBD9E4182ACCCC95EBD96FD007
773CA0CB893A76FC60334B43338895F3EA6613C24B94E5ECE96B960D05B6CA64
C2564BD1502C02F0E15DFECF39F9AC6B1C21A00DFEF402FE317FAB42E32C9BC5
94141820DC1A9821878BBE8490F57E53F5FC6A5B91EA857C4BD638623FB25013
F998D833498477C8242EEEDB39D3A4663A09B3C5D8293EE067250BDDE99E7767
08087992137C95C8320C361E061DAF17DBBF27066BF097F4ACF4DF91A4204D06
CED78BECC1C3F5056BDA950F064EAB0594BD994BA52B3E141B182E15F75B08A2
9AF223906819F8F8EDCAA3573EA87687CC113B9309107093BB4DDA4526D06A35
A0D394DDCC81333957BB1D690B77257CB47DBE9B8A3BD006267DED469C64A1F5
AC6C70DE555DE8FC94DCBC1CA5136753451F75F060510342163F0D95C8E603F6
DD62676B420E0A9817C506C8B9D7A9C93F0EA2444B1543113E69F47405B95403
EBD38F721EE6328EBE3DB577383ECD7E725381FC92D284E6C7F427B40D67939C
4B20FB3949E44D94AC39E8027352984B2624925CBEE74A1FBCBA0225518CE8F3
DFAC57A0FD878DB9AB32D743D9A1DBD506B1DD6DFFC184DC0454EC85DA80EED3
E72D803879CDCC4D2A9836B9FCAB8F130CC94AA23AAE6CCD6E54DB5DA1E88709
3289CE8852B50FD388442271699CD9BFAF1106120FF3217EF2220FBF861CC724
8F4AD38D69204E905210174A8695BBF88379F4138CD4498A70B19A2347E83708
0047B98005BF250E918D653E9FB661BFEE5FE1CC6EC15CFA71301D51FA54B17C
FFD239B908CCDBDD0FE4AA2722A944EF21FAA6F3C47FF9D123C26B868299F01B
A053101B9461F4C1B49B48B94474AEDB25664EEC3008AD794F8D326CD3094CC3
1833BCECF69EE482CE7D42DEE7BF7424E22A1879FFDEBD5063222244DA451D2F
5706F4D5E397EA4E7243AA1B2539C3722D739E021B5F6AC4E076F411120003B2
704312A330860C0C28BFDDB658A5815979889CFE605C4B2198CEA62E15073FAB
F988EACFAD27188F352E8967E1E34FC25CBF3FB26754E216C18E73E61D7CA437
E8206426CA47A3C57FCB28FC11EFDE9B8C7ED85C9BF4415189A989AAB131B19A
1536B2565EA86C8CDD859E7475DB36713579F32393D4C6FEF76B826F1DCB9DAD
9050F0112E2D44BDDCD9AE24A2CC91A8FFCE4EF4252C1A7F0A8B7D014957FAEE
6F528EBF2F053AFC14B2996976070CCF0E247467320DB6EB5FAE6FA51F6BD009
A5E53402786166B52D3B2DDEAE6DC31CAB053774C930D8A03D1D5BC07243DC3A
19ACFEAD3022A0B437711E8E543A15E9F1652D96EE55520C89F1B61A1D0AAB34
5A3742AAE19D673E406B00B7445FD5D641C73AF7B791235FE9BE7BF852EC0551
DDDB1E57C47E00904174EE1343FB973C6C54A05231BB3EFE75B64321D3377F36
419EB1F0E93E19697F58247232BA4921B364CAAEA82C91DD7F42A730D2845BF5
E882B91F2F520F2483A9E6C7B5EAA741360DF66CFD7AC3EAA2943C0F95D8BF38
CAE8116F6DB0BAFBB60F78A2626F6C901987236C972057DEF6449B1FDE2669E8
4772248FE3C61596A530BA7E263E2B540FD96AF3F8AEA6CFCF064901A61E3EF9
53882F094DA35293F6253D4B9EDEEC9050EB0669E503A1EAD0FD2D63E430E814
4A08DDD136970E531D0E57B37EB8A2F75F05E476917D3944EAFFEC27B6CF9C04
E94ED59F0A6FEF4AAB9BEC6B48A9C37C885A9D05350C683679B065EDD16B9447
7FDF68D295FE739A2B3C2A04263E971278EC65A475AF4E7F522C0B890674B0A5
45889CD4D6B6A1ACB829E667D37F90543F9326A05C975734ED3E8603020E8CBC
71BF2168BE0DE25CCED6F27FF33ACB54F0947013B37DF427E9AD7A9F1189F538
2C9A9461D497B9F19DD2FA92C91067BF2C04CC7B3BACEAAA9EB02066A492481C
9AB81B1730C7F28137AC0806A8BC38C573203C0FB2CB8CFFDCEB4DDDFFB4611E
04D9E5E28D517C0F7AEE9EAAD0517AEC114183C3B1FE1F6A7D695F68A97E5E93
DFF138BBD745F701B26B273704AF5EFBC8EF6F35E62D02BDA7E803F7745E7E97
8D66697170F3AB391163A903AF5C0E25FBBA5BEA92208CFB1D4B2F980FF0F53B
35FF8CB6D727084FE16848CF3FC5DD2E88BEB88AEB3893508DF47D2DBEEA468B
BE43197ADC7AAA56BD9DA1265DF870BC5307E0D5E728CA781F7AF79020F02B8B
9365B733D87595A215C7B59E6BDFDB760EEFEAC061B2C036FB9103F854FEDFDD
F26D0BBAEB26D1B1827CD079BBB668C5D19916DC7FF1F522286057E138015615
41F77F0E4A489D7A138D9AF557A28388F80B0C2D3703F8A148FE67507EBEB906
269EF69186C48F2F39A20FB42FF6CC86F53B7F1D2545E9FACD322693F94BD5B4
1891D646AC6343B71922BC9474D0094D74D5092243D2E2B34A0BD8EAE264F740
91CDF7B0247901EBA8C4D0C62D87A656D0E62A7510075ABEF905E8FA521F1C11
DA904C43132E1DAB4FB2DE5CB4AA814CA0DD22B2E469CC6FC33B8E8B11C0E04C
822DFB19848F1FB5D12AC1339083ED6A04DA8496B59464C4D558F15D8B8CC577
8C062585E100F24DD56743347FE3EE6D197AAF31880C4BAE1C5FB74025EF5FAF
473885D4AF6BEA47D6B0A5C8FA81FF7BD0256D6B5B7FFD0612A89E2411A984A7
7AA7F35277DBA35CCC684676ADB658005A116FD8B231DF0DCD4CF32A6DF4DDCA
ECE1950759BEBC35A4609E3D41D5BB9F86A9C47E649902142457DA96A0283DEB
AA27EC6E6AD98EEDC3BE4EF3579C6C0111C09B7D6CE6FF6DD7B482C08FFDCC1B
CF6535E30E71FAE05154687140BCFD51F9E881120344442960F0C325C6C70E70
20A99F85CF189AB97A601FC985EAD9A35EF5D80849C5E26DFD80E63A294719E9
9F29F81255E698EE78F1BCCB6008C45ECEE8CA11DAA39B6531FE5588F1689222
77E0581EBA7C868BECF9CA510B47596223F2FF5B5218B206FE6B056015C1FF83
796C9F8F9267B8053A2A2F8578C323B78883EE20ADA89EC52685EB93319171D6
22F382E779170D32C06741DC62D8F46DDACC75EF6905D3E8CD5CEB5AB0C86B30
5D0E415B943FC788FA6D843AA13298B3CCBEC45904FF8B9F6BC4C4C1F4E3DF94
C2214FCC5FA24D4932479E48E7E8509D92745D40DFBB64E9895DEAD0CD2650E0
6DB0C69D627099211B5FA5BA414B2101ADA059CCBAEB843CD41ABB5E8E2F9BDB
56A39B0BC95451552B0ACF50B7AC30BF7A34ED4432FFA73BFC4A4EC708902AE5
04B7974D3E6419A3251E293289F8072D97CF60735246DDF4CC942F4B9C2FBC2B
9A84A54BE37C21EEDB8E248A93AB9974D37348977429E0801F49E9A57F4E1539
B00FE01EE50DD8D21C5C8F374F06C7E883272014DCBFAB1646AC80AF7C824491
4FD502AEF1F6F53B82CADCFDDEC74AA72AD9117A7251E4EF96AEFE83A6E66BD3
095F8902097B396EC3D3CA1528246D62D61CF886D47EE134E2BA982EC5D80761
DFB0F20318B0B4ABC8E8FCE4D19DBA257BE272636BE5760F2D29DB2D797159E9
9EE9D87211A9241D3DAC963DE59CE1E71DD58D0139CEC65F59EBD386953984C5
F9BE4CE0741996E971A955961D9FAB6F147C348277A459940778F370878BB13F
C0665DA22921CB28FBBD425A2322CBF659DF84DC27B11B307414F662FC750BBD
19F3DDC54F3D9A8ABD7295F451C283AC8FF78F9F0ABD4585072F8575235F808B
FBFB499779A842A5B0452A179A711E377848092DECCB9ECA044F520C25532C44
3B163F4A2E1EF5332C61623DCCAA776AC2A48041A369EEFD31109D26B6FD0AA5
178ECA900F675F96F94EB6DD86048F1CF5C798CC3F8CD8CD85CB3F7A3962ADF2
4D8685D4A626196492D22B2474AEA4ACBA2B6C5C54024194C8304EA08D9C1D00
4F8ABF1716F9DC509D70F65183C0DD929C1A024A7111D9A6815CC867BDF8F8CA
3760952E5A058132E135899980119BA7AB291E1F440BD867218A278C0E54B5C2
6B126237024431328D961B4094ED90D38FC6ACD6CC4B0001BDA39390575D5ED4
978BC0A27D0FD4DC2CBF5DD32E0C27C3D2E992A3115B80EB201D4B57FED14982
7D53DC9BECF503EA4B2E854046A4DFD58143D7E93FD4820B84C8FB72576306FE
8A1928EF66527B59F013C89DAA11EFE1A57A0DCC08B5EE7F09A5CE2B0C69618E
9E25F4CE560702F12529DB38250C1F15A38887ED520559B67ECCCE4090744630
10256417ABC1FEA784C1B6CEF162734BC085900D7D4F3D6A57CF52AB0CFFFC16
33BF367C79ADE7C407BC9B2366914EED02BB23FDFE625FB085F75849AF4F70FB
E8935AE0A14518CC525EC8D73AC31DCD70EC04AC19F4FFF327B7D8189A961ED5
FBC9203F045D3E9DFEC636900403B02D92E33C2FD4EECA484AADE4A972EF86B1
C4A52B44C7890AC5573E198DB2D4F72B5312E959C49C7784F4ADE8D0DC6B9E12
C87EB05F6EC9851DCD81B3E530D4D5EDF68AA6487109A330FC50AB365C16331D
DC2696FAF30510796FA0C248F98C0675DCEB147A64843EC0E9F2627F0D9A442F
5F510BE526F67D98DE1CDF6E6A2E6C35C6E98B10BEBA590E64B2E5D7376B320E
88D1205FAC0B6AF8B46A5CBFC061C4812F52B4509154F529FC269830D2F87870
646BD5CB496A8505A99A41E98CD901661EFC964E230B40FC9A8B1988F1E9213B
76B889D249834E3C3EC430011A6DB781683EFED494334254229F2A2AC67EB1EC
475D305E31B0F2C37C3270F802BA8AEC4985D613A0FD4C6E8CCEA16FC04FFABB
71AEB4A7805CD44C629066563377C763FE9ADDBD9F35323DFE5DE8180B08D536
1C6F0399E29392BFCC693DEC50289A6328F2E2081981F1D73F4A9070A16187EB
83174F74BDEC48369810AF65BEB711B5576A5FCEE5C26A0A1AAA91EADE5A76A4
F8CCD4F9E259FFBC11BA9B2671C317B429FAB279D93CD66B9524C8A60104E92F
68683F7E701A487D3F0E3EE831F64CAE5B120F163EE1117C83B64A61F7002716
2B35F7804E1A66E8E5F568E9EE27654CF5BC56D765E2C7F620CA11DF380F9732
5D2DEB51EA2D868B905E535C30415D96FF0A3348D50AEBD602AA700BBAAC3170
D23840D88F825D8593D48DBE3FF65A50FD9F42ECC98E953BFCC905B25D0A0314
ED36A393B962113524B35B79A8EEACFAA3AAD8D28FA0ACA9509CBC393A4EB565
BC0A760A0DD4BF118B9ADE372ED1D217ED3CE631E97ADF14D9F1B2BC6E59DDE6
0A9C978572D737E8D12F094EBC9F3A025D3A0D46E63DB531961102C2BEC2DB87
EC77133CA5861F3B824FAFF795B96F3D5E37F6AA0A18E74DC17A0CDDEFE0028F
DCDE626A01BDC2568BA1FE13F9FD8156CB4E65D9BCC5D2E4F662D567B50E2863
1D2A28594E855326621881AD62A135941AA2E538FC8CBC5E946C65A4C35847F9
B6ED071BE0E1F33D193276CDAA270A13EE814AF65D28661BB29A25CEE94D1EE8
DE4EBB8504FE33C30774EC23DA8CAE38E3A1C006334D86277E804C6BA17F1B7D
810BA7902C284FCA1CB121EA39631C932BBBCC2F9BD581D96BB0E66BA995B960
984E53003085FE5F1D9477CEEF5B268CFBA9C9A44B32964ED8623D27C98D7A6D
EAC2C9C0FA9F8DF0CDE09C294CB58AB7612444953971B372BCF6E110943A34F7
D5F23BBBF34029D1B1A6D68E969FCE694F41BB6502768B5274F8896687CAC252
C3F671B2CDCD693EB3CBC2E4533117A5FB4CCA0FF22F609E4287161DFDF26337
0CB186850D045313F54EB8CFE6E260D0D57F96DD53874880AF24C98B1E532D72
393659E6510797DFC495A42B57058C464C7125FC7543C8CEA18982F3E6CF0E42
EC4E6977FF7521744D88EABD719896175C4C3FC75850F6086A2B693939D52BDE
36139112477B2101BEFFEF715C70B8A69BA2CE1B4BD538BD1D0ED5CD29964A2D
E7F34B8513FB3AE98543B13EAA834D8A5ADED1BB55489764B8CFCB0FBBCE5CCD
F456E1184BB00FD4CF3E642DBEC22ADBF0DCA4474DFDBBFB670E4BB7E18BCB3E
3CE08179969323F858D78E4943DAE728A4672CFD6A6697EE6899452E5AF45609
722310BAD876C662CD7C173EAB3DA274A19AF5C5B04A91EE2D92AA8A143513A8
788BFEA0438D70075C0D558AF4C9113115951C5793E7DCF15D799BF9E5A89F4A
19AF87AA199316F3327D73F8ED36AD96B2BDAE718E71840662D220E51E2EB502
F7C1ACA31E91F2E54536C5AD4D858074EFF956A535C83EC553EFEEB7D6F11A35
0057778F7EDEEEC3F6AF2F58DD525F7EC55E0C35557F22BA84041EF10D37F17A
569AE6397ABE664471CF398D2B0D90CE6DD281C6165533B22D014023E9AF0E74
085923BFCE705A62849BF1DFCAEF134264AD0B5A2BF333D6BC0081424B586201
C82A3E21E0F7200298A5818DF5B7EA09911793B1B118E4DD160DD87309A4DF33
A5A3888C2768B8328B34B4630C3C9F0FA49CBA31D4B2742CBA9CF602CE221118
F2D4DF3A6B1B2A6A7B61C9617129E2164C6250553E975DAD92BF6375356A3E4D
15107AAFA9DD368B5F7074ECC1B0C6E26733876D707105ED57DE6EDB1CAC93B4
76DBC607DDDA406D1B41EF137A1D50C8EED5DD62D4F28264DFD18BDFB85648AF
97FB9FC719122245D69B1E741A2BA685210837D26BE8DBD85CD65BB764764A80
A2A5C1830B8998828816AC14C9277CD9E00BF79DEF97CF0D3FE34934C7DEA78F
42BCE25878816D8AFC2423E221CB273A54180D524D09723782B04C43F69B5A67
CC644EFE1B80589529B6CE9C50627BB10A384F01E7129D4329A8E006637A7724
7686913EE79F3877929F2A0966999928C1FE33E27562C0C521575298C0039B67
B225229184E9579178EF64300900BAB21502F8393C8254C89AAA83E0EBC39FE8
1C19C1AC9D1C0659A92CEACD21E7A337DFE63680208488370A38897D34B80BB8
FF39E8648106750DCFA367257635390FA04C415A72349354151028157AC750C2
6BA7336DC51364AE3FEFBB9A78ED13E3DE9F23E2BC97E1985BA1B2C8FDD99549
EC4AAE5A60C854C7DCE0433BB51A49409CA77A3FC094DAD168DC0E1949EF3D10
272E366D8C3A573706524FF80D74BBAC323456FD31A77EA0466AAC94C4CADE6D
6D3FFE6B67B21D5492633CD49E0602BD13FF666A5422CEB140DFE3D3F7812CBD
0F2011AD93B6584F704525F8AEB53126409F2732F9809F12562A85D0AC9ADC99
EF08F14E0BA5F26814F8643E59B149B8191C4A298A53B6C48F6C103DAA0D0C5B
48188F9B2DF2CCB6766CF0A2C0F6F286055A47A279099D1EAD28CEBB947DD886
9819396628867E9F92DF73D65F102A1BE28AE38643239959834041368A8091F8
8DD38D202E2FBBB51AEB932D3A0DE325DBE0809AFC42DC2A736B8458B7480389
F35988978420CB83FFC02C68005528EDFEEEC2E029E14CF04B6E73EDC0161A06
EA5724FEB39C70AE5FA9903A006C6572AE333BB4063B8BE94AF742E033EA20BB
5B644F7B8C0A0D0F0479A0DB2E5784AD322B0A04915FB76FC8C7F0519DE01958
124F61AD526EF47258A76486ADE7239BB9051D28BC2BDF829FCE790697DE9400
C9081B581A25D387AF52D2B30F96D1A0ED96F2ECDBD16CD0AB3269AE8446B27B
BAC89A183E35FCF5EBB89D7B401036708791DEF44FBFE7B96535716426A63F96
0C2527CDB4B52695C4FD0C67FB7BB1834550A8AC195391265E8DB32D818B2028
16F75AA462063E625CEDC2A0D8E9BE2D578C032A48C4A4F746B2D1FE9AB48ECB
827D14CCE09C15043380E8EF5582A6E09ECC458C9971A363E8C5CB98851DE892
690B8E84F813
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (algos.dvi)
@start /Fa 135[51 2[51 51 51 51 2[51 51 1[51 2[51 2[51
51 51 51 1[51 29[51 5[51 51 1[51 4[51 2[51 51 3[51 1[51
51 51 51 4[51 51 51 33[{ T1Encoding ReEncodeFont }29
99.6264 /SFTT1200 rf /Fb 55[66 38[66 127[92 33[{}3 91.6562
/Fourier-Math-Symbols rf /Fc 140[81 115[{}1 90.9091 /Dingbats
rf /Fd 64[60 191[{}1 90.9091 /StandardSymL rf /Fe 72[60
149[84 33[{}2 83.6363 /Fourier-Math-Symbols rf /Ff 22[43
8[44 106[51 29 36 33 1[51 48 52 77 23 2[24 51 2[43 50
1[50 44 9[79 1[66 1[45 3[64 65 4[29 3[51 65 2[53 1[33
4[22 4[44 44 44 1[44 44 3[22 48 8[38 34[{
 TeXBase1Encoding ReEncodeFont }36 83.6363 /Utopia-Regular
rf /Fg 137[43 53 1[37 3[49 53 4[26 3[43 1[41 1[45 12[52
10[32 5[58 1[54 6[23 58[{ TeXBase1Encoding ReEncodeFont }14
83.6363 /Utopia-Bold rf /Fh 82[79 173[{}1 99.6264 /Dingbats
rf /Fi 182[24 6[44 44 13[36 51[{ TeXBase1Encoding ReEncodeFont }4
68.7422 /Utopia-Regular rf /Fk 134[43 47 2[57 31 1[37
1[54 49 2[28 2[29 2[29 42 54 40 1[51 29[61 31[49 35[{
 TeXBase1Encoding ReEncodeFont }16 91.6562 /Utopia-Italic
rf /Fl 22[47 8[48 75[42 42 25[46 45 1[46 56 32 40 36
54 56 53 57 85 26 2[27 56 48 29 47 55 45 55 48 10[58
1[57 50 2[55 1[71 3[32 3[53 4[58 3[52 52 24 24 4[49 1[49
49 49 49 42 24 1[24 52 38 32 32 5[42 22 30[56 2[{
 TeXBase1Encoding ReEncodeFont }53 91.6562 /Utopia-Regular
rf /Fn 187[148 28[53 39[{ TeXBase1Encoding ReEncodeFont }2
190.034 /Utopia-Regular rf /Fo 54[92 116[94 82 98 1[91
116 119 1[86 2[53 1[112 88 92 118 2[97 65[{
 TeXBase1Encoding ReEncodeFont }14 152.027 /Utopia-Regular
rf /Fp 22[48 115[58 34 41 40 2[54 58 87 28 2[29 1[49
31 48 55 1[55 50 10[59 1[57 51 2[60 70 2[54 2[35 1[67
1[58 3[59 6[26 1[51 51 51 51 51 51 51 51 2[26 1[26 44[{
 TeXBase1Encoding ReEncodeFont }37 91.6562 /Utopia-Bold
rf /Fq 190[70 65[{ TeXBase1Encoding ReEncodeFont }1 109.987
/Utopia-Regular rf /Fr 171[55 48 57 2[67 1[83 50 2[31
70 65 1[53 69[{ TeXBase1Encoding ReEncodeFont }10 87.9899
/Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray 1 0.55 0.1 TeXcolorrgb 3189 -343
a Fq(A)6 b Fr(L)t(G)g(O)g(R)g(I)g(T)g(H)g(M)g(E)g(S)p
0 TeXcolorgray Black 0 TeXcolorgray -118 -189 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118 -189
a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189 a -118
-189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118 -189 a -118 -189
a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a -118 330 a

 -118
330 a -118 330 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 31.12482 ] concat

 pgfs



 0 setgray
 -118 330 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 31.12482 ] concat

 pgfs



 0 setgray
 -118 330 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 438.54373 -4.48633 ] concat

 pgfs



 0 setgray
 -118 330 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 57.99763 lineto

 0.0 60.34598 1.90364 62.24963 4.25198 62.24963 curveto

 477.64397 62.24963 lineto

 479.99231 62.24963 481.89595 60.34598 481.89595 57.99763 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 57.99763 lineto

 1.41731 59.5632 2.68643 60.8323 4.25198 60.8323 curveto

 477.64397 60.8323 lineto

 479.20952 60.8323 480.47864 59.5632 480.47864 57.99763 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 409.3649 -14.642 ] concat

 pgfs


 -118
330 a

 -118 330 a -118 330 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 29.17882 10.15567 ] concat

 pgfs



 0 setgray
 -118 330 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 29.17882 10.15567 ] concat

 pgfs



 0 setgray
 -118 330 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 17.05151 lineto

 0.0 18.8519 1.45946 20.31137 3.25984 20.31137 curveto

 55.0978 20.31137 lineto

 56.89818 20.31137 58.35765 18.8519 58.35765 17.05151 curveto

 58.35765 3.25984 lineto

 58.35765 1.45946 56.89818 0.0 55.0978 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 17.05151 lineto

 1.13385 18.2257 2.08568 19.17752 3.25984 19.17752 curveto

 55.0978 19.17752 lineto

 56.27197 19.17752 57.2238 18.2257 57.2238 17.05151 curveto

 57.2238 3.25984 lineto

 57.2238 2.08568 56.27197 1.13385 55.0978 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 7.37308 ] concat

 pgfs


 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -118 330 a Fp(TP)19 b(Algo)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118 330
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 330 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 28.0284 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 0 1 TeXcolorrgb 157 354 a Fn(D)10 b Fo(I)g(FF)g(\311)g(R)g(E)g(N)g(T)
g(E)g(S)57 b(P)10 b(R)g(\311)g(S)g(E)g(N)g(TA)o(T)g(I)g(O)g(N)g(S)57
b(D)7 b Fn(')j Fo(A)g(L)d(G)j(O)p 0 TeXcolorgray 0 TeXcolorgray
-118 330 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 1890 1888 a


1890 1888 a 1890 1888 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgfsc{0 setgray}def

 0.79701 pgfw

 /pgffc{1 setgray}def

 save

 /pgfsc{0 setgray}def

 0.79701 pgfw

 /pgffc{1 setgray}def

 168.18425 155.01585 moveto

 -168.18425 155.01585 lineto

 -170.3852 155.01585 -172.16936 153.23169 -172.16936 151.03075 curveto

 -172.16936 -151.03075 lineto

 -172.16936 -153.23169 -170.3852 -155.01585 -168.18425 -155.01585 curveto

 168.18425 -155.01585 lineto

 170.3852 -155.01585 172.16936 -153.23169 172.16936 -151.03075 curveto

 172.16936 151.03075 lineto

 172.16936 153.23169 170.3852 155.01585 168.18425 155.01585 curveto

 closepath

 -172.16936 -155.01585 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -168.66284 -3.0964 ] concat

 pgfs



 0 setgray
 2008 668 a Fp(V)-6 b(ar)q(iables)19
b(:)2149 813 y Fk(x)2200 828 y Fi(A)2269 813 y Fl(est)h(de)h(type)29
b(.)15 b(.)f(.)h(.)g(.)f(.)2152 957 y Fk(y)2200 972 y
Fi(A)2268 957 y Fl(est)40 b(.)14 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)2149 1102 y Fk(x)2199 1117 y Fi(B)2268 1102 y
Fl(est)39 b(.)15 b(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)2152
1246 y Fk(y)2199 1261 y Fi(B)2268 1246 y Fl(est)39 b(.)14
b(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)2149 1391
y Fk(x)2199 1406 y Fi(I)2248 1391 y Fl(est)39 b(.)14
b(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)2152 1535
y Fk(y)2199 1550 y Fi(I)2247 1535 y Fl(est)39 b(.)15
b(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)2008 1680
y Fp(I)n(nitialisation,)k(entr\351es)g(:)2147 1824 y
Fl(S)n(aisir)28 b(.)15 b(.)g(.)f(.)h(.)f(.)2147 1969
y(S)n(aisir)28 b(.)15 b(.)g(.)f(.)h(.)f(.)2147 2113 y(S)n(aisir)28
b(.)15 b(.)g(.)f(.)h(.)f(.)2147 2258 y(S)n(aisir)28 b(.)15
b(.)g(.)f(.)h(.)f(.)2008 2402 y Fp(T)-7 b(raitement)19
b(:)2165 2546 y Fl(.)14 b(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)
f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h
(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)
2165 2691 y(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f
(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)
h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)2008
2835 y Fp(Sor)q(tie)k(:)2147 2980 y Fl(Af\002cher)39
b(.)15 b(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)2147
3124 y(Af\002cher)39 b(.)15 b(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g
(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)
h(.)1890 1888 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 3436 a Fl(V)-6 b(oici)20 b(les)g(algor)q(ithmes)e
(version)h(\223)-7 b(calculatr)q(ice)i(\224)39 b(pour)19
b(la)i(question)e Fh(\255)h Fl(:)p 0 TeXcolorgray 0 TeXcolorgray
-118 5713 a

 -118 5713 a -118 5713 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 113.63356 ] concat

 pgfs



 0 setgray
 -118 5713 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 113.63356 ] concat

 pgfs



 0 setgray
 -118
5713 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 30.21547 230.30988 ] concat

 pgfs



 0 setgray
 -118 5713 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 223.01514 lineto

 0.0 225.36348 1.90364 227.26714 4.25198 227.26714 curveto

 477.64397 227.26714 lineto

 479.99231 227.26714 481.89595 225.36348 481.89595 223.01514 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 223.01514 lineto

 1.41731 224.5807 2.68643 225.84981 4.25198 225.84981 curveto

 477.64397 225.84981 lineto

 479.20952 225.84981 480.47864 224.5807 480.47864 223.01514 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.66934 221.5978 ] concat

 pgfs


 -118 5713 a

 -118 5713 a -118 5713
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 5713 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 5713 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 14.16432 lineto

 0.0 15.96472 1.45946 17.42418 3.25984 17.42418 curveto

 45.83243 17.42418 lineto

 47.63281 17.42418 49.09227 15.96472 49.09227 14.16432 curveto

 49.09227 3.25984 lineto

 49.09227 1.45946 47.63281 0.0 45.83243 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 14.16432 lineto

 1.13385 15.3385 2.08568 16.29033 3.25984 16.29033 curveto

 45.83243 16.29033 lineto

 47.00659 16.29033 47.95842 15.3385 47.95842 14.16432 curveto

 47.95842 3.25984 lineto

 47.95842 2.08568 47.00659 1.13385 45.83243 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.9342 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray
1 TeXcolorgray -118 5713 a Fp(AL)o(GO)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -118 5713 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 5713 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 110.53716 ] concat

 pgfs



0 TeXcolorgray 0 TeXcolorgray -118 4922 a Fg(A)l(v)o(ec)e(une)g(TI)g(:)
-118 5193 y Ff(:I)n(nput)h("N)m(ombr)n(e)h(\340)e(d\351passer",A)-118
5329 y(:3000)i Fe(!)f Ff(S)-118 5464 y(:0)g Fe(!)g Ff(N)-118
5600 y(:While)g(U)p Fe(\267)p Ff(A)-118 5735 y(:1,04S+350)i
Fe(!)e Ff(S)-118 5871 y(:N+1)p Fe(!)p Ff(N)-118 6006
y(:End)-118 6142 y(:D)o(isp)57 b("On)e(d\351passer)o(a)h(la)g(somme)h
(au)f(bout)f(de)-118 6277 y(:",N,"ann\351es")p 0 TeXcolorgray
1758 6570 4 1748 v 0 TeXcolorgray 1801 4922 a Fg(A)l(v)o(ec)19
b(une)e(C)o(asio)h(:)1801 5193 y Ff("N)m(ombr)n(e)j(\340)d
(d\351passer")p Fd(\277)1801 5329 y Ff(?)p Fe(!)p Ff(A)p
Fd(\277)1801 5464 y Ff(3000)j Fe(!)d Ff(S)p Fd(\277)1801
5600 y Ff(0)i Fe(!)e Ff(N)p Fd(\277)1801 5735 y Ff(While)h(S)p
Fe(\267)p Ff(A)p Fd(\277)1801 5871 y Ff(1,04S+350)i Fe(!)e
Ff(S)p Fd(\277)1801 6006 y Ff(N+1)p Fe(!)p Ff(N)p Fd(\277)1801
6142 y Ff(WhileEnd)p Fd(\277)1801 6277 y Ff("On)f(d\351passer)o(a)h(la)
g(somme)h(au)e(bout)h(de)g(:")p Fc(s)1801 6413 y Ff(N)p
Fc(s)1801 6548 y Ff("ann\351es")p Fd(\277)p 0 TeXcolorgray
0 TeXcolorgray -118 5713 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1 0.65 0.3
TeXcolorrgb -118 5892 4016 8 v 0 TeXcolorgray -118 6013
a Fl(S)o(econde)1575 b(1/)p 0 TeXcolorgray 1921 6013
a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray Fl(3)p 0 TeXcolorgray 1970
5951 a
SDict begin H.R end
 1970 5951 a 1970 6013 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray
1611 w Fl(TP)20 b(Algo)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -8 -481 a
SDict begin H.S end
 -8
-481 a -8 -481 a
SDict begin H.R end
 -8 -481 a -8 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -481 a 0 TeXcolorgray
0 TeXcolorgray 1 0.55 0.1 TeXcolorrgb 3189 -343 a Fq(A)6
b Fr(L)t(G)g(O)g(R)g(I)g(T)g(H)g(M)g(E)g(S)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1890 865
a

 1890 865 a 1890 865 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.85 0.85 1 setrgbcolor}def

 save

 /pgffc{0.85 0.85 1 setrgbcolor}def

 168.18425 126.2933 moveto

 -168.18425 126.2933 lineto

 -170.3852 126.2933 -172.16936 124.50914 -172.16936 122.3082 curveto

 -172.16936 -122.3082 lineto

 -172.16936 -124.50914 -170.3852 -126.2933 -168.18425 -126.2933 curveto

 168.18425 -126.2933 lineto

 170.3852 -126.2933 172.16936 -124.50914 172.16936 -122.3082 curveto

 172.16936 122.3082 lineto

 172.16936 124.50914 170.3852 126.2933 168.18425 126.2933 curveto

 closepath

 -172.16936 -126.2933 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -168.66284 -3.0964 ] concat

 pgfs



 0 setgray
 1890 -15 a Fp(V)-6 b(ar)q(iables)19
b(:)1890 129 y(1.)262 b Fl(J)20 b(et)h(N)g(sont)e(entiers)h(natur)n
(els)1890 273 y Fp(2.)264 b Fk(p)27 b Fl(est)20 b(un)g(nombr)n(e)g
(r\351el)1890 418 y Fp(Entr\351e)e(:)1890 562 y(3.)262
b Fl(S)n(aisir)19 b(N)1890 707 y Fp(I)n(nitialisation)h(:)1890
851 y(4.)264 b Fk(p)27 b Fl(pr)n(end)20 b(la)g(v)o(aleur)g(1)1890
996 y Fp(T)-7 b(raitement)19 b(:)1890 1140 y(5.)262 b
Fl(P)m(our)20 b(J)g(allant)f(de)i(1)f(\340)g(N)1890 1285
y Fp(6.)500 b Fk(p)28 b Fl(pr)n(end)19 b(la)h(v)o(aleur)31
b(.)15 b(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)
h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g
(.)f(.)h(.)f(.)h(.)1890 1429 y Fp(7.)262 b Fl(F)o(in)20
b(P)m(our)1890 1574 y Fp(Sor)q(tie)e(:)1890 1718 y(8.)262
b Fl(Af\002cher)22 b Fk(p)1890 865 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0
TeXcolorgray -118 3994 a

 -118 3994 a -118 3994 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 110.1724 ] concat

 pgfs



 0 setgray
 -118
3994 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 110.1724 ] concat

 pgfs



 0 setgray
 -118 3994 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 30.21547 223.38753 ] concat

 pgfs



 0 setgray
 -118 3994 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 216.09282 lineto

 0.0 218.44116 1.90364 220.3448 4.25198 220.3448 curveto

 477.64397 220.3448 lineto

 479.99231 220.3448 481.89595 218.44116 481.89595 216.09282 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 216.09282 lineto

 1.41731 217.65837 2.68643 218.92749 4.25198 218.92749 curveto

 477.64397 218.92749 lineto

 479.20952 218.92749 480.47864 217.65837 480.47864 216.09282 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.66934 214.67545 ] concat

 pgfs


 -118 3994 a

 -118 3994
a -118 3994 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 3994 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 3994 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 14.16432 lineto

 0.0 15.96472 1.45946 17.42418 3.25984 17.42418 curveto

 45.83243 17.42418 lineto

 47.63281 17.42418 49.09227 15.96472 49.09227 14.16432 curveto

 49.09227 3.25984 lineto

 49.09227 1.45946 47.63281 0.0 45.83243 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 14.16432 lineto

 1.13385 15.3385 2.08568 16.29033 3.25984 16.29033 curveto

 45.83243 16.29033 lineto

 47.00659 16.29033 47.95842 15.3385 47.95842 14.16432 curveto

 47.95842 3.25984 lineto

 47.95842 2.08568 47.00659 1.13385 45.83243 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.9342 ] concat

 pgfs


 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -118 3994 a Fp(AL)o(GO)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118 3994
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 3994 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 107.07597 ] concat

 pgfs


 0 TeXcolorgray -118 3202 a Fp(V)-6 b(ar)q(iables)19
b(:)141 3347 y Fk(x)6 b Fl(,)26 b Fk(y)j Fl(sont)20 b(des)g(r\351els)
-118 3491 y Fp(I)n(nitialisation,)f(entr\351es)g(:)139
3635 y Fb(\241)p Fl(1)d Fb(\241)-14 b(!)18 b Fk(x)141
3780 y(x)194 3744 y Fi(3)247 3780 y Fb(\241)12 b Fl(5)r
Fk(x)24 b Fb(\241)-15 b(!)22 b Fk(y)-118 3924 y Fp(T)-7
b(raitement)19 b(:)139 4069 y Fl(T)-9 b(ant)19 b(que)26
b Fk(y)f Fb(\310)17 b Fl(3)j(F)l(air)n(e)370 4213 y(.)15
b(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h
(.)i Fb(\241)-15 b(!)19 b Fk(x)370 4358 y Fl(.)c(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)i Fb(\241)-15
b(!)22 b Fk(y)139 4502 y Fl(F)o(in)e(T)-9 b(ant)19 b(que)-118
4647 y Fp(Sor)q(tie)g(:)139 4791 y Fl(Af\002cher)h(\()r
Fk(x)f Fb(\241)12 b Fl(0,)e(01)i(;)g Fk(x)6 b Fl(\))p
0 TeXcolorgray -118 3994 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray
-118 5535 a

 -118 5535 a -118 5535 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 76.57207 ] concat

 pgfs



 0 setgray
 -118 5535 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 76.57207 ] concat

 pgfs



 0 setgray
 -118
5535 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 30.21547 156.18687 ] concat

 pgfs



 0 setgray
 -118 5535 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 148.89215 lineto

 0.0 151.2405 1.90364 153.14415 4.25198 153.14415 curveto

 477.64397 153.14415 lineto

 479.99231 153.14415 481.89595 151.2405 481.89595 148.89215 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 148.89215 lineto

 1.41731 150.45772 2.68643 151.72682 4.25198 151.72682 curveto

 477.64397 151.72682 lineto

 479.20952 151.72682 480.47864 150.45772 480.47864 148.89215 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.66934 147.4748 ] concat

 pgfs


 -118 5535 a

 -118 5535 a -118 5535
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 5535 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 5535 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 14.16432 lineto

 0.0 15.96472 1.45946 17.42418 3.25984 17.42418 curveto

 45.83243 17.42418 lineto

 47.63281 17.42418 49.09227 15.96472 49.09227 14.16432 curveto

 49.09227 3.25984 lineto

 49.09227 1.45946 47.63281 0.0 45.83243 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 14.16432 lineto

 1.13385 15.3385 2.08568 16.29033 3.25984 16.29033 curveto

 45.83243 16.29033 lineto

 47.00659 16.29033 47.95842 15.3385 47.95842 14.16432 curveto

 47.95842 3.25984 lineto

 47.95842 2.08568 47.00659 1.13385 45.83243 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.9342 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray
1 TeXcolorgray -118 5535 a Fp(AL)o(GO)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -118 5535 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 5535 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 73.47565 ] concat

 pgfs



0 TeXcolorgray -118 5003 a
SDict begin H.S end
 -118 5003 a -118 5003 a
SDict begin 17.39995 H.A end
 -118
5003 a -118 5003 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.0.-1) cvn /DEST pdfmark
end
 -118 5003 a -118 5104 a
SDict begin H.S end
 -118 5104
a -118 5104 a
SDict begin 17.39995 H.A end
 -118 5104 a -118 5104 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 -118 5104 a 2 w
Fk(#)61 b(C)7 b(a)g(l)g(c)g(u)g(l)65 b(d)s(e)f(l)9 b(a)75
b(f)14 b(a)g(c)g(t)g(o)g(r)g(i)g(e)g(l)g(l)g(e)-118 5249
y
SDict begin H.S end
 -118 5249 a -118 5249 a
SDict begin 17.39995 H.A end
 -118 5249 a -118 5249 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 -118
5249 a 6 w Fp(d)6 b(e)g(f)72 b Fl(f)14 b(a)g(c)g(t)g(o)g(r)g(i)g(e)g(l)
g(l)g(e)19 b(\()c(x)k(\))d(:)-118 5393 y
SDict begin H.S end
 -118 5393 a
-118 5393 a
SDict begin 17.39995 H.A end
 -118 5393 a -118 5393 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 -118 5393 a 436 w
Fp(i)f(f)72 b Fl(x)56 b(<)64 b(2)11 b(:)-118 5538 y
SDict begin H.S end
 -118
5538 a -118 5538 a
SDict begin 17.39995 H.A end
 -118 5538 a -118 5538 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 -118 5538
a 847 w Fp(r)5 b(e)g(t)g(u)g(r)g(n)62 b Fl(1)-118 5682
y
SDict begin H.S end
 -118 5682 a -118 5682 a
SDict begin 17.39995 H.A end
 -118 5682 a -118 5682 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 -118
5682 a 430 w Fp(e)9 b(l)g(s)g(e)23 b Fl(:)-118 5827 y
SDict begin H.S end

-118 5827 a -118 5827 a
SDict begin 17.39995 H.A end
 -118 5827 a -118 5827 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 -118
5827 a 847 w Fp(r)5 b(e)g(t)g(u)g(r)g(n)64 b Fl(x)1204
5849 y(*)1316 5827 y(f)14 b(a)g(c)g(t)g(o)g(r)g(i)g(e)g(l)g(l)g(e)19
b(\()13 b(x)8 b Fb(\241)s Fl(1)s(\))-118 5971 y
SDict begin H.S end
 -118
5971 a -118 5971 a
SDict begin 17.39995 H.A end
 -118 5971 a -118 5971 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.7) cvn /DEST pdfmark
end
 -118 5971
a 11 w Fp(s)j(t)g(r)21 b Fl(\()11 b(5)g(\))64 b(+)59
b(")20 b(!)p 462 5991 5 20 v 467 5991 40 5 v 507 5991
5 20 v 68 w(=)p 567 5991 V 572 5991 40 5 v 612 5991 5
20 v 59 w(")58 b(+)63 b Fp(s)11 b(t)g(r)21 b Fl(\()j(f)14
b(a)g(c)g(t)g(o)g(r)g(i)g(e)g(l)g(l)g(e)22 b(\()13 b(5)g(\))g(\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118 5535
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1 0.65 0.3 TeXcolorrgb -118 5892 4016
8 v 0 TeXcolorgray -118 6013 a Fl(S)o(econde)1575 b(2/)p
0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fl(3)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1611 w Fl(TP)20 b(Algo)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop gsave 1 TeXcolorgray clippath fill grestore
0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end

-126 -481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -126
-481 a 0 TeXcolorgray 0 TeXcolorgray 1 0.55 0.1 TeXcolorrgb
3189 -343 a Fq(A)6 b Fr(L)t(G)g(O)g(R)g(I)g(T)g(H)g(M)g(E)g(S)p
0 TeXcolorgray 0 TeXcolorgray -118 1010 a

 -118 1010 a
-118 1010 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 66.07697 ] concat

 pgfs



 0 setgray
 -118 1010 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 240.94797 66.07697 ] concat

 pgfs



 0 setgray
 -118 1010 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 30.21547 135.19669 ] concat

 pgfs



 0 setgray
 -118 1010 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 127.90196 lineto

 0.0 130.2503 1.90364 132.15395 4.25198 132.15395 curveto

 477.64397 132.15395 lineto

 479.99231 132.15395 481.89595 130.2503 481.89595 127.90196 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 127.90196 lineto

 1.41731 129.46751 2.68643 130.73663 4.25198 130.73663 curveto

 477.64397 130.73663 lineto

 479.20952 130.73663 480.47864 129.46751 480.47864 127.90196 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.66934 126.4846 ] concat

 pgfs


 -118
1010 a

 -118 1010 a -118 1010 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 1010 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 -118 1010
a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 14.16432 lineto

 0.0 15.96472 1.45946 17.42418 3.25984 17.42418 curveto

 45.83243 17.42418 lineto

 47.63281 17.42418 49.09227 15.96472 49.09227 14.16432 curveto

 49.09227 3.25984 lineto

 49.09227 1.45946 47.63281 0.0 45.83243 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 14.16432 lineto

 1.13385 15.3385 2.08568 16.29033 3.25984 16.29033 curveto

 45.83243 16.29033 lineto

 47.00659 16.29033 47.95842 15.3385 47.95842 14.16432 curveto

 47.95842 3.25984 lineto

 47.95842 2.08568 47.00659 1.13385 45.83243 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.9342 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -118 1010
a Fp(AL)o(GO)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-118 1010 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -118 1010 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 62.98056 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -118 577
a Fa(#)51 b(Calcul)i(de)f(la)g(factorielle)-118 722 y(def)g
(factorielle\(x\):)87 866 y(if)g(x<2:)292 1011 y(return)h(1)87
1155 y(else:)292 1300 y(return)g(x*factorielle\(x-1\))-118
1444 y(str\(5\)+"!)g(=)f("+str\(factorielle\(5\)\))p
0 TeXcolorgray -118 1010 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray
785 1440 a

 785 1440 a 785 1440 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 132.52211 11.46953 ] concat

 pgfs



 0 setgray
 785 1440 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 132.52211 11.46953 ] concat

 pgfs



 0 setgray
 785 1440
a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 30.21547 25.98181 ] concat

 pgfs



 0 setgray
 785 1440 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 18.6871 lineto

 0.0 21.03545 1.90364 22.93909 4.25198 22.93909 curveto

 260.79224 22.93909 lineto

 263.14058 22.93909 265.04424 21.03545 265.04424 18.6871 curveto

 265.04424 4.25198 lineto

 265.04424 1.90364 263.14058 0.0 260.79224 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 0.9 1 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 18.6871 lineto

 1.41731 20.25266 2.68643 21.52177 4.25198 21.52177 curveto

 260.79224 21.52177 lineto

 262.3578 21.52177 263.6269 20.25266 263.6269 18.6871 curveto

 263.6269 4.25198 lineto

 263.6269 2.68643 262.3578 1.41731 260.79224 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.66934 17.26973 ] concat

 pgfs


 785 1440 a

 785 1440 a 785 1440 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 785 1440
a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 24.54613 8.71208 ] concat

 pgfs



 0 setgray
 785 1440 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.75 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 14.16432 lineto

 0.0 15.96472 1.45946 17.42418 3.25984 17.42418 curveto

 45.83243 17.42418 lineto

 47.63281 17.42418 49.09227 15.96472 49.09227 14.16432 curveto

 49.09227 3.25984 lineto

 49.09227 1.45946 47.63281 0.0 45.83243 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.85 0 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 14.16432 lineto

 1.13385 15.3385 2.08568 16.29033 3.25984 16.29033 curveto

 45.83243 16.29033 lineto

 47.00659 16.29033 47.95842 15.3385 47.95842 14.16432 curveto

 47.95842 3.25984 lineto

 47.95842 2.08568 47.00659 1.13385 45.83243 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.9342 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray
785 1440 a Fp(AL)o(GO)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 785 1440 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 785 1440 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 9.92134 ] concat

 pgfs


 0 TeXcolorgray 0
TeXcolorgray 785 1440 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1 0.65 0.3 TeXcolorrgb
-118 5892 4016 8 v 0 TeXcolorgray -118 6013 a Fl(S)o(econde)1575
b(3/)p 0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fl(3)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.3) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1611 w Fl(TP)20 b(Algo)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
