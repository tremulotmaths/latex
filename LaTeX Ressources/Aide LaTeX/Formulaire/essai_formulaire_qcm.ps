%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: essai_formulaire_qcm.dvi
%%CreationDate: Sat Mar 21 14:34:37 2020
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Bold URWPalladioL-Bold Utopia-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o essai_formulaire_qcm.ps
%+ essai_formulaire_qcm.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.03.21:1534
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 [/_objdef{pdfDocEncoding}/type/dict/OBJ pdfmark[{pdfDocEncoding}<</Type/Encoding/Differences[24/breve/caron/circumflex/dotaccent/hungarumlaut/ogonek/ring/tilde
39/quotesingle 96/grave 128/bullet/dagger/daggerdbl/ellipsis/emdash/endash/florin/fraction/guilsinglleft/guilsinglright/minus/perthousand/quotedblbase/quotedblleft/quotedblright/quoteleft/quoteright/quotesinglbase/trademark/fi/fl/Lslash/OE/Scaron/Ydieresis/Zcaron/dotlessi/lslash/oe/scaron/zcaron
164/currency 166/brokenbar 168/dieresis/copyright/ordfeminine 172/logicalnot/.notdef/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
183/periodcentered/cedilla/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters
192/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]>>/PUT
pdfmark[/_objdef{ZaDb}/type/dict/OBJ pdfmark[{ZaDb}<</Type/Font/Subtype/Type1/Name/ZaDb/BaseFont/ZapfDingbats>>/PUT
pdfmark[/_objdef{Helv}/type/dict/OBJ pdfmark[{Helv}<</Type/Font/Subtype/Type1/Name/Helv/BaseFont/Helvetica/Encoding{pdfDocEncoding}>>/PUT
pdfmark[/_objdef{aform}/type/dict/OBJ pdfmark[/_objdef{afields}/type/array/OBJ
pdfmark[/_objdef{corder}/type/array/OBJ pdfmark{[/BBox[0 0 100 100]/_objdef{Check}/BP
pdfmark 1 0 0 setrgbcolor/ZapfDingbats 80 selectfont 20 20 moveto(4)show[/EP
pdfmark[/BBox[0 0 100 100]/_objdef{Cross}/BP pdfmark 1 0 0 setrgbcolor/ZapfDingbats
80 selectfont 20 20 moveto(8)show[/EP pdfmark[/BBox[0 0 250 100]/_objdef{Submit}/BP
pdfmark 0.6 setgray 0 0 250 100 rectfill 1 setgray 2 2 moveto 2 98
lineto 248 98 lineto 246 96 lineto 4 96 lineto 4 4 lineto fill 0.34
setgray 248 98 moveto 248 2 lineto 2 2 lineto 4 4 lineto 246 4 lineto
246 96 lineto fill/Helvetica 76 selectfont 0 setgray 8 22.5 moveto(Submit)show[/EP
pdfmark[/BBox[0 0 250 100]/_objdef{SubmitP}/BP pdfmark 0.6 setgray
0 0 250 100 rectfill 0.34 setgray 2 2 moveto 2 98 lineto 248 98 lineto
246 96 lineto 4 96 lineto 4 4 lineto fill 1 setgray 248 98 moveto 248
2 lineto 2 2 lineto 4 4 lineto 246 4 lineto 246 96 lineto fill/Helvetica
76 selectfont 0 setgray 10 20.5 moveto(Submit)show[/EP pdfmark} ?pdfmark[{aform}<</Fields{afields}/DR<</Font<</ZaDb{ZaDb}/Helv{Helv}>>>>/DA(/Helv 10 Tf 0 g)/CO{corder}/NeedAppearances
true>>/PUT pdfmark[{Catalog}<</AcroForm{aform}>>/PUT pdfmark

 [/_objdef{pdfDocEncoding}/type/dict/OBJ pdfmark[{pdfDocEncoding}<</Type/Encoding/Differences[24/breve/caron/circumflex/dotaccent/hungarumlaut/ogonek/ring/tilde
39/quotesingle 96/grave 128/bullet/dagger/daggerdbl/ellipsis/emdash/endash/florin/fraction/guilsinglleft/guilsinglright/minus/perthousand/quotedblbase/quotedblleft/quotedblright/quoteleft/quoteright/quotesinglbase/trademark/fi/fl/Lslash/OE/Scaron/Ydieresis/Zcaron/dotlessi/lslash/oe/scaron/zcaron
164/currency 166/brokenbar 168/dieresis/copyright/ordfeminine 172/logicalnot/.notdef/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
183/periodcentered/cedilla/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters
192/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]>>/PUT
pdfmark[/_objdef{ZaDb}/type/dict/OBJ pdfmark[{ZaDb}<</Type/Font/Subtype/Type1/Name/ZaDb/BaseFont/ZapfDingbats>>/PUT
pdfmark[/_objdef{Helv}/type/dict/OBJ pdfmark[{Helv}<</Type/Font/Subtype/Type1/Name/Helv/BaseFont/Helvetica/Encoding{pdfDocEncoding}>>/PUT
pdfmark[/_objdef{aform}/type/dict/OBJ pdfmark[/_objdef{afields}/type/array/OBJ
pdfmark[/_objdef{corder}/type/array/OBJ pdfmark{[/BBox[0 0 100 100]/_objdef{Check}/BP
pdfmark 1 0 0 setrgbcolor/ZapfDingbats 80 selectfont 20 20 moveto(4)show[/EP
pdfmark[/BBox[0 0 100 100]/_objdef{Cross}/BP pdfmark 1 0 0 setrgbcolor/ZapfDingbats
80 selectfont 20 20 moveto(8)show[/EP pdfmark[/BBox[0 0 250 100]/_objdef{Submit}/BP
pdfmark 0.6 setgray 0 0 250 100 rectfill 1 setgray 2 2 moveto 2 98
lineto 248 98 lineto 246 96 lineto 4 96 lineto 4 4 lineto fill 0.34
setgray 248 98 moveto 248 2 lineto 2 2 lineto 4 4 lineto 246 4 lineto
246 96 lineto fill/Helvetica 76 selectfont 0 setgray 8 22.5 moveto(Submit)show[/EP
pdfmark[/BBox[0 0 250 100]/_objdef{SubmitP}/BP pdfmark 0.6 setgray
0 0 250 100 rectfill 0.34 setgray 2 2 moveto 2 98 lineto 248 98 lineto
246 96 lineto 4 96 lineto 4 4 lineto fill 1 setgray 248 98 moveto 248
2 lineto 2 2 lineto 4 4 lineto 246 4 lineto 246 96 lineto fill/Helvetica
76 selectfont 0 setgray 10 20.5 moveto(Submit)show[/EP pdfmark} ?pdfmark[{aform}<</Fields{afields}/DR<</Font<</ZaDb{ZaDb}/Helv{Helv}>>>>/DA(/Helv 10 Tf 0 g)/CO{corder}/NeedAppearances
true>>/PUT pdfmark[{Catalog}<</AcroForm{aform}>>/PUT pdfmark

 [/_objdef{pdfDocEncoding}/type/dict/OBJ pdfmark[{pdfDocEncoding}<</Type/Encoding/Differences[24/breve/caron/circumflex/dotaccent/hungarumlaut/ogonek/ring/tilde
39/quotesingle 96/grave 128/bullet/dagger/daggerdbl/ellipsis/emdash/endash/florin/fraction/guilsinglleft/guilsinglright/minus/perthousand/quotedblbase/quotedblleft/quotedblright/quoteleft/quoteright/quotesinglbase/trademark/fi/fl/Lslash/OE/Scaron/Ydieresis/Zcaron/dotlessi/lslash/oe/scaron/zcaron
164/currency 166/brokenbar 168/dieresis/copyright/ordfeminine 172/logicalnot/.notdef/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
183/periodcentered/cedilla/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters
192/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]>>/PUT
pdfmark[/_objdef{ZaDb}/type/dict/OBJ pdfmark[{ZaDb}<</Type/Font/Subtype/Type1/Name/ZaDb/BaseFont/ZapfDingbats>>/PUT
pdfmark[/_objdef{Helv}/type/dict/OBJ pdfmark[{Helv}<</Type/Font/Subtype/Type1/Name/Helv/BaseFont/Helvetica/Encoding{pdfDocEncoding}>>/PUT
pdfmark[/_objdef{aform}/type/dict/OBJ pdfmark[/_objdef{afields}/type/array/OBJ
pdfmark[/_objdef{corder}/type/array/OBJ pdfmark{[/BBox[0 0 100 100]/_objdef{Check}/BP
pdfmark 1 0 0 setrgbcolor/ZapfDingbats 80 selectfont 20 20 moveto(4)show[/EP
pdfmark[/BBox[0 0 100 100]/_objdef{Cross}/BP pdfmark 1 0 0 setrgbcolor/ZapfDingbats
80 selectfont 20 20 moveto(8)show[/EP pdfmark[/BBox[0 0 250 100]/_objdef{Submit}/BP
pdfmark 0.6 setgray 0 0 250 100 rectfill 1 setgray 2 2 moveto 2 98
lineto 248 98 lineto 246 96 lineto 4 96 lineto 4 4 lineto fill 0.34
setgray 248 98 moveto 248 2 lineto 2 2 lineto 4 4 lineto 246 4 lineto
246 96 lineto fill/Helvetica 76 selectfont 0 setgray 8 22.5 moveto(Submit)show[/EP
pdfmark[/BBox[0 0 250 100]/_objdef{SubmitP}/BP pdfmark 0.6 setgray
0 0 250 100 rectfill 0.34 setgray 2 2 moveto 2 98 lineto 248 98 lineto
246 96 lineto 4 96 lineto 4 4 lineto fill 1 setgray 248 98 moveto 248
2 lineto 2 2 lineto 4 4 lineto 246 4 lineto 246 96 lineto fill/Helvetica
76 selectfont 0 setgray 10 20.5 moveto(Submit)show[/EP pdfmark} ?pdfmark[{aform}<</Fields{afields}/DR<</Font<</ZaDb{ZaDb}/Helv{Helv}>>>>/DA(/Helv 10 Tf 0 g)/CO{corder}/NeedAppearances
true>>/PUT pdfmark[{Catalog}<</AcroForm{aform}>>/PUT pdfmark

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F6000BF098AE401F14F4BB6F5D1DAF0A3F095107D502476C
356175D567B8BE8693B835B72F954CD3441DABE19A98E24A387E512ECA045018
B639B7303812DA28297D223CC2C4B14CBC8C49FC0FCBC63957299DF52CB8DDE8
0D46AEB4C348603F4053F4F57A3AC797C2AC09ACDBCF4AACC746314C6D526359
165382C75D64B1710A88AEF979E5268D7DC5054261F00FE1085817109C44A9F7
AEF02EB8C8BF99E560FAFF09B9F02FBF83D191769EFCB5C9D08C65D2ECD98292
157E49D0438F8BAF92878B4223DD8BF6A3D467F9A6AD2AB3BF6C3781E3FDE594
8A46842851BBFA7C6F2939A0396D0582FF538CBBBA762B19EFA5B6483F26C231
610AB978946E45FF7BF4D17303FA824381BC7BE23AAAF086448C37F4A4453F76
4249010D39A9B60E2834919F5216BA54C7A51A0CD7EBE52F18EEC78153E9C553
3E2AC5484FB0E9D57D8B4018B525F88B80A192FE559B1B62CB959A199B5769EF
2EEEE736787E42E1D7A32827ED7ABE64E316537FFBB98551973A84F095F8B4E3
50E9F1826EAF14A6187A62AC71C54D29F5E292BF690D53426B19E2271088995B
E297487ADB1C9E4DF21EC925492E5B20ABE6A0B2A14A3135A8907D05FAB4DA62
F0F3E2C2AAF32AA714FC764ED77E589A60E0DCCF6D4340DFFD4601D33368667D
1EEA5EBF495AD981F82E17458FABB585127952F4A4BB54012C6E004C69D6F86C
C41BE0BA787E92485CE8050E32989F01CCF94C6EE2F25B274E7024F9C692C5A5
75977FEDD0B784379775E7A9DF19BB8446D706DFD850AFE600FF7AE7347CBED1
437CE9690211847B04FBE05790450C519E239DE1340670398319CCA9A7F95C1D
61A5E075920B4A1956F7200EAE8FA10D15BFFD4125BBFF821A178802CD413F5F
4F670FF0BE39AE8EA2AFD342651E0F0E0B31B60237CE032409B176DE1183536A
3AD35E6D1BE4ECBF02ED8D5E8B14A98F79FE7FBF43CAB52B6243B3AD7FD31B26
7DD0E5CACEB09CA07B7CA8E327EB92C084926870D23DB4B69F814A6E0D802DA9
60A0B46592AE7310903768362FEBF30516B9B922079E8C73D86970D3BCD0E4B6
1E67C66C8EDB9387706DAA7AEB24D5218313044111A78FD50EB70E019165AB26
198523B43A94FF3B1E94B569132BB3CDA70EEE8C7E7C399B81B075FF919BF7AA
D455D68E66C361674624B80EF471C773F850503538F9EB68432B6611917F7543
DA5938BF923A40DE3DF580E2FF4DD33C15DA6BE2D4218296F2F3ACC9E9055CDA
51A93A0F087B713F6589F9918A8E8AF0E919A3AD39BA3E8DBCBB4DD502825B60
1512B5642977E822E63320A2F4B6CBC9650493FFA4E57907DA4A2F1D8CE9F945
E64AF3FC17D909652A412E84ACE951C6A8EE82D4C426C0524DE73D829B4B072D
D452223A55C9E9AB838AFEECDC0B9877A290175A9902D7209B6153EA88A79729
5DF6E0CB7D06948D0851E003A9BE85315F65F18480884ADDD83852B1E134E105
2932BC6AC99EF357B29A1619C6D86622432A488CD00B196F6617BAE9C11350BE
EDA282A1650FFF6D89CDB5AC5FEED5FB5B629CAD8E550CB6C95EA569B6CAE123
89B1A302D3FB47BAFBF92202F1ED1535B7D20AF1751A73E34FE1FECC661C0667
A9CD302F60C98B26492559C6AE5C6337C6B57DCA4BB93B61420F553FB24087CD
57016BD78E48A83C4C31E6D07A9FA89752322D7FED243B45A3FE33424541BD75
C013CB9DB27CB44A96EAEC410E2B377F6B5610EAE5AF438047D9DA1EB8B69450
8AA469419AC94925E1B197F8CEAD85823D1575D04F9AA82E7F6904C885E16A83
20A3DE7CCADCBA5BBF1E7BDB118221EE4288D61C5990E6093296827534175B02
57B07AA5A03BB4CC81656513984E42F1A135B117D63C889AFF0FD6F9A13906DE
10AA8349C322209BCD3CFB0D674A4F7B3A2C84882F165148E2A7451675B8F0D8
8DE1F4E07F185AF33E1C34B285FFF050660F51605A452D3BFCCCA48259A09C4C
04DB55353F893CDF885451F86A39D5F55D3ED810D347876293A1ADECDC45723D
B25F3BAE8CA211C66CFE94AF4EB7F1BD9FBE2740204CFBE42943B064EC546636
44747140AA6CD2C520C92AF8BF1ADFDCE80E3F072D85542665F384699AE8B7CA
D0B49EFF13FD1CC36B61A03794F32DF68DBF6959B6E2454177A81345F25665CA
EB1608E2208C05973F17B9A4588D4B58DB7B2358EBC0358734FF006F5E6EF5C5
F79302F86E4AC34EACA8EB78BD25148FCC3812807DE3E8A90951912BC9AFE30D
DDFC52D999CF3F22C24157EFD12E9B1B85D2AE39054441DEAF65A2A4B88A3DBB
3D55F0BAB67B8CE53BF5BC1C7B2043836EF46A599838C5EC11DA41F19B209C6B
8978FB2104534108B49CDD48561DE0ACA1B60FD474A3BE1E974E0F025A8F07C2
E39FBBAA9F7CE59375526189641875C811365C73358E62902B304B5D06FE662E
C1F5C5C77E4CE55576AF696DC7A0660CC2B0814FFD646A4EAFCC962513DA78CE
C044B54DD169C6BDE899ECAB7F4B4A1455CF2FD7B0EF44FA6446A858691E8858
436E4DC86EAFD6F9E6DCF40DB527316AEA7FADD466D5B7723A673B65D23741D9
34528F7F17FA86443420FE244FC60FD6DF14438C72FC04CE9D5DB916A4727A80
86962E5146B30C92939BE24C3AE4A566EA80C49B5AFA347CFC9FEB3E5CAC9728
10186782D541C27426AFD10AC680D48715419BA1C60D85BF0C56FCB131F75ED0
F5A09185B9AFD9BF390BB8FC5054DDE7574028247317FB109AFAF835F6322DFC
DC1311765588C1B3C26A19C439ABB8FE5B58730654655A8B1171EC4336122936
9735C2229AC14C8FA08F66570FFC435D2D40E41CA448F1A2A7A301526D1409F5
0EE418F274BA8726973BDA75735F681FC660DF11868110087320F134651DB422
E2CF38229F2E50A5B8DA53507A388DE743015F06CA5583D63469430CFE08ED50
859170B4CA392FAF6BF7798E9ACDA7EFF0445C53FD00F8E2C46B4CA55E0FD41B
45FA208FDBAA54809E994ED3977A871AB56592FB0395E78E963A0F5D0C5BA4AF
799EB1552080A2360BD535256ECDC390B11815F8533B2B6D42AE905C6B199273
8BEF05D84C5DF69A347451F3EFA021E2F49359244D0B397F655A60D119F21605
39A2A7A59B6623F07A3502D84946D12CC34586822376F40EE3CFC2AD47AACCB2
CF2AE6321DDDA78FA4AE4EFDB0A7BA50552271020B0F32C81E37437B857619F0
BD15B654AD9C30ED8DF04A8961D7B54DAEA1B7C3D1906E28157237FC958B948E
D3C8F689460D57FDC0F4A6562E181A77F5F142B39CE7FCB478428E004A6F2F81
BA6E7961CE932F3BDD95CCB58374ECB00385A86AFABBDDD7FF85285CFE4B73A2
C3E17FBD506081DE6A26FAA393F4DB1EF76BFF7438D3950595893988B4B04079
1D67BBE788FD5182DA2335BBFC49FE05A3CF549097963E9ECE3C73DDC0689890
276188EC0EB344E5D2C11E6053A3C983853F5F925F43FC71C3A395D9F53F6B6D
CE39B7882556FD11A088B9AAFC009834B3B51D6F2E20757CA37AFCBF380F77DC
8B7962C7065959E797BC3C0265D82C9C1877DDCF1BAFA86A47C82FE6FA959B67
D3C039A064EB9DCA54E4EA8422B6E2806206612BC77E20E79BB89D991AD12ACB
FCE2BFE16EFDE6DC491715430C8552DCD405D445AA34BC2EAEC1D621492AD40A
EA1F88493AF36FB9A32FE8D716312BB687AA3E9DC487962473062049365B425B
02E9D82F4D14AF09719C82246C7F9AD5DA06C4D789D6459510B9C7E3AB0CCEEE
1063F75501A5AE0FD80AAC1E5C554000A47E877B3A477B4BD9CE2F71C73142AB
AEB51D021C4A3429B3B61C2C8036F67A4DEE38599DB21D162765BF1FE8AF1E4E
777C31DA784C44A28C1A5AF2D9D93E25BBD8E100749B38E1AC8446657F9795AC
6AC4306F1305ADA294B8874E01691F3633A7848FD9CA452453C8258B6D1C3CD5
7457D31071956A96D7AA980AFDE0CA2A036F6698E3A879D00F03232621B9E86A
55E07B024DB9E0D51CD606B30E39D3719C0D690C525D05E195963FA5EBCBC863
598EB30470BA75701FC77B5C6D7843E22ADB1B7390B1BF9FF25E5BD7228BC089
735A59A49690631557257BA4C8238678529D1E49D3987DE5A6EB5592F50CBE10
220A0BB80EDFCB032D2FC6BD54FD44E96228E2CB7C0B112E1B66AE45AB3726CD
9E420F128772FDDAB871208C797FB074A28C02D1BD76F1DB1510FA14A5545C61
96DDFBD4B14A93F3FF6ED9E056739D6597FD4A946767D08DE08815840FE3260C
36B053EB6AA32E84F0FA5EC4BB5E2FE05AB248BDAAA692563B2B8707B2C0BF15
6B6EA628A5A39C7D667A4C09020A483928FFC979472AADA588D008A67F8C1272
B4B24DE0A3A861D6D6AF07C5573991685E7147AFD43403CE8211CA2785E04EF0
E31DF209CDDCBFD6063379D9963FC18B014184DCCE27DC1C93A50B232A8254B0
0683DC20215D1BA52215E20A62E18CB518CB63F18648D193B18CB836516C9C1E
23EE4051FCD85007E977F4DEE558D56E17F7D06AE2153436D892FE8D7940DE3D
4FD234996D4478EE0D94437978DE1CB0C684C95581355CD86B964D234DBF0BBB
3E73558561839D7F33A4CE3EDA258CBA3C13CFDEE45C2EDF2EFB584ADF8FB0C0
ABC55E08BF17941D1B86CA745945D246F83D866B8CC7AB76EE17ADF0F3D47C60
0AF60C7359331530D9880FC66196E14BFCBD4AAA58A00EAAC6131940025CE243
1E28C3293F5AED198365B6C87CBB3C562FFECBC0A09369D0C84588E46AD9858D
E2F8CD8F21B4A6D423AFAC1A9A7F05266A0CF683C0D785BCC025E1C59E72AFD4
ACCE376A48C70C2229F8E6C6C3C349692C5537F8E5596DD3303A1B2E9C9097E1
C032512E819FFE925C54BCD4AF028BE3C3F66FB13808C36FEAECD80F3B0D1292
834D8A63528AB71D2D5727DD54F457E9F09364B1D9CC4311D47BA5F52517DCE3
C59C556E5207E716A84D613696AAC4AA3ED5C9BA3386E051BBC1F5C98A5C5AB8
2B4111C6CC2103F379240357C0AF60DAF7111078FA69FC30A18C53617D046259
EA79899721DDE2FA03948AB7F29711F4335BF3A316640E382B62C435BDEF2827
0F07786C8C1149082D805DB8A976A540F89B5C7F37EDEB41ECC83895DF7DC9BE
C731AD52CD53D1039FB41555DE485539935F9D5F7E685C44C7E263002D398752
9BDF87FCE614CD3229B5836092959BF18F27DCAA92FF22B2AA0F40B531BA4517
B18332CC44B826A024CE890FF765B4485E9D91A2FBE40D773F6335426B69719C
E8478D80DD39C2382994EB7B3E2A2915E0454FBE2250583EC5BA5C99CB7AFE5A
8701B58B320496C007477DAE6EEAE1F7F959365E6642FBDD83503D108C164411
0E7302A8A2643009F7C21A2212CC9CA7119AEC4B45112ECDA618A73BA4F6BDA4
B8DD3380C5439C24F6980B83C29BA81D429067B66D3BD167A542ED2E49F7436D
AB01EC23F3B861C4425168DD086A8EB0BF07967974328C943B6286D645D0EF8A
81BA63F4C6FD98141A83C20C855FFC7BF4304713A6F5E6DE01C922A9B6DD406B
EFA48FA62A078F4F16B1B19F848987C5EA5210F279DEEB0D257A6FC4EEA41F9E
C90324A66674D660128B3D1B426B8ACF222C195830A1B8925505FD81C25A3F2F
04EFAF60A20510C3E59FEC69C3B04749DA36AC8F65099D5D926AE5C673508E9A
28945C70B4CA9F3FD3DC3DC8F61EE206882486E84A6D87A73172D9E9727DA561
ADB6006EF4F9B2B88B24D2A7E6AC2248E86AD678C8D1E5B9EF8C1406979BF743
11BA6EE94C945DE1D4BD53E95751A22DC1C00CC46D0477983A112982BD584A22
16A564384E3C0015E617A5536383555F5D93DE256BAC0AEB0A22D602FACEC94B
27E8E5091D8636F4ED78DAF502D940AE9284B599C63F2F5C74CD8E580F4C9CD8
596346985527A212C90AF628489EE48347452C3A6401E15BC7252F9326416647
B9E1860F4434C49A513811A6517DBDCF1F649B3D5019D3DF1463EF2788E40E16
407433FCA8B192D0F6BFDAEBBCF0B792F28C39F889A684F4098F2A536C00BA88
ECA4E77AF69A9B5C2F36D58AE151FAC0D79F9DB3B46BE0D2F039ABDEF02D75E2
FC0A949E10AD3333175ED97268F5361B844EF204E240BF65130AB438C06EE048
AB6B4E5B7B38C7D9DC544694E26DB544181E89C691AE81BB33FEFA191D8A4E83
102BB3D72CE4930155B095FDEDB24D5D52117FE414336D0D78DFEA264D0A9167
A99DEE994A9C666E929DD2CC36EFB4E69ECA96F9F578ED9C7F1BED3D482352EE
713F9A898B651D7E92227EA6F60CE7A8E6EDE9A47DA6148E09B6946DF422E848
DD1A668109880B99D9CA7FC85A2D03F0BB02B86D5239CD82EE7FC82ADA13FC44
A1E5F556B5B7EDD0B753B868069C7DA7550ECAAA8F5119098C9E2A518A3ED2E2
9F88169F359C58F5315DD83EA858CDC794F8CEDE9BE85DAC8549355B2C66E25E
A5E819CC19FCB2212B020C352731CF1D820C1D64D768673F28F439814D2E390B
7EE0AE45AACEE504C1718405E77D7D639CEF16BDB4CCBD9815681B60629AC2C2
BDF80F65F95ED3DD6B1B79EC33B5A942DC44932F687E11D73BD68CC73BD6943A
5537184A782E29E3A9DADFF4046A22DAD19B24BBA6C14365DA14A38AC63F5BEE
429ECFB9858BA0204579C92EBB6A7F215898597173E8D246E0712D80934A703D
3D96C17490D062E95210611201023F7840EC1816313959F3E52BB558A4F76A0B
354D612D4D03F1237655EBE372C505A3CCC5B90F9934CDC241D225D2DAF5B782
6CFED6AF1F0BAE7AE33BD55C97BA2C7B56CCED610E710C9FA619EB888B8B8C52
2D5180F6746526DDAF7FA82E77E4B516A714E1B3CEC9F2DE7421A38D6FA9DC34
4F4C56CE0146FFA53B6010BF37E16245794ADC8F14D4AE2208F1C1EF6846DBC0
0C0F17D72D3717ACB31FE3EF7F02918C210EE5958D14D2CBDC01D3589446F592
79D2B465364FCE06FD683D7777196D7111980D5362236ABA3E12ADBB2EBB66CA
1F22E64B11D86EE8D413C9BC3121B2D91ED83E71BE153B4D0E1605B3761D1616
4A0A5F1D6454D0B1E18026CC08A08498B41866C829D33A783CA8FAAF6FE892EA
1932062211DFFDD127B60C777FAF4147A05EF1FD433FD8BF77D7799E07959CFB
B2174D7091BD4D274FD4284F197599277AE88D044EF5A480985977A4F2CA9A27
116E788F3546F0557F97784FBE00622C36D240C5D96ECC90B12E2F6201C7B35D
C8851C7EEEFF539E3EF357F7A86D1EFEE79FF87DFBC5B77EE386D9C2503E2CAF
9CE248980E678A59DAB86CE74744BC424AFAAAE00665BC0F82FBF9EE5D387200
04E4B72644983B1A5F85BB4BF55DDB69E9BBED3C9E9AB29AA4D0AC102C2A0F50
127C05D8E62BA917E3284D54C4FBE71F3C5EA416446F4C6B3113F0359B2682EF
F63B429382980F182A9C5B4E86CDA6AE2322254DA28A9004DC26AE8529859914
199BDAA5B9ADD239EA3F168DBA3D542C841542BC1FE9CAE473811ACAEE0E2BAC
23BDC532DCD9EEEE0F6BE7E0FF57D582969AB5B50B8D544A14EDBBE30CCB5F92
C99F9EF3E771BAAAAD1D9DEC58666771E209F85D29FFBE2530FD81C511E03F16
515E3F6B701EF8C168B54A983F80DC9024501DBE3E377CF1E9A97A0A54B8BA10
B508BBD861ABDAEF63270BE2B18E92984075F675603FFCD7CC0703721864D3D0
9C917A499D576B035FF2CB6DF142D5AD955956B3BE61FE3A4658BA90CED192FB
4A20EC9E62EB4BA0B891F3B37E0F7FBD6D982AD878B8885D6C0FB70D4E7A69E4
933AE39EC9090485F228F092D6E1C77801511428666A75BC0AB860AB48EC5BCE
22143EC7A7CCF6E01F8BA55902C2DF16622A25D3217ED093C549535F6D327F84
A1DE035BEDC2A7595CF83E921AFC4028F57BD0B06E456CCC68832F513E2360F5
C9ECE5F23D7160AD0C19C63EC362FDDFD809BEF5D312EBAAC692D083D475A875
3FBC15FD103B8659C9570138DD526FD10381E3A526388749FCF325A4DDECD08E
DC8BCB4C69B800629BE084772A359FB2DF0AD94DD68619D142AF661F7670D4C4
58861A20074C2A48DEA77D614066B6C475190F96AEDC7FFD0548FC36118867D1
80B21DC63FADF09AFE275D145C8CCCFAA2BE05DC543B55F37DB8EB6AC5E3DB45
EA21CFF14751F3EBA27244ED2AA3361549B1AE2D1D2BA02ECFAF236B8E39D949
0DFC7A58EBD6BFF3DBC9351630650CCE1DE3E9699931D3DB44F27E48CB498F4A
7AB94136C2003C6D07229D61855AC05F794D3F7E98FEA99D5BF8F9C6158A4FCC
8BE39B2FFCE8A35B7DE70FD7136328DDB01A6AB15D1F7D6C936AC6C257302A17
A6407C1EDD818E3E0395AAE453CBBBAD11FA1F1D8EAAD2295AAEFF84EAAB93BC
E662062D122EA621777041DC438E60EB09C545859F011EB6040A19FB3855615C
E69C62F403527662499EA3FCC24AC51254F7128350242A225C7C3E542B9F9833
A1E35EF14AA63B12703B67D4E55214879E2E340162023BB7FAA4259A32EF38BE
C31FBCFBAA637D2CE33D4EEBC2EC4ABD9B796889F01A007A4ED8CFF9BD03C6F5
334521B880F3663AC6EF21FAA0CEE46DEFA449EE694D32C0F16B8E762ADA78DF
DC215159A8DE78A0A6716657F7AB9BD366B12F6E97FB45C84B9029AF09ABB1BF
50B733A2FB19A603ECB42F11D464546F58029F567438B97137797C5E250AD510
418FF169EE4D657CD723847793C80FC6726396B23FF65D28D29FD6E37DA1E1D1
863B6C6EC2CD975545F83F1ACDE1633120D164D7FC707242A8135295400682BF
221BC798FDB477388A57DA21037EA796CEA9B65E6BCE653FBC3C4132541AE93D
F5E212668F41F34831EDB69A60149BE810DE313BE5AEBF2495DED4A46A561757
1FB7A07D38A9E24821DB2E368859E98D56214898B78CB5F864B2DEEC047247A3
32BB583027062E32065143B072E9768666359F2932DB27644A34BFA6F5B740C0
0EE93BC79640E428F8061774E9ABBFB1ED2F71998B0D76F92B15FF13A44E9108
602B7C0105407169B5F6765782562A11BD4B70A2768FC2DBBFD8977ADEC0B70C
4AC1434B232F9A93139D3DC2E442981203470A34CE74DAD5A8435C970D7F3EC7
8BA3ADC66475A9B3E3D904B66EEC60CEE02AA5081B915F18AA3ABB0AE0561561
FEB00619EF2E67189FFC62997AC9B6BC71843EE74BA948DB3EB99C928CF67C37
C8F9C20A199C2A23EE4EA9F09A0DE30FA6BDB5331C2AD3C3D1FD1EEB98AF6A7D
675FE4BA42888614FB8A9D5038068E047E22B6991EE0A1481771D0247C377128
EE39192C2E45F7F4B97BD3E3EED49C6ACEA05F9071EDE58D669C905434EE383E
03EA8AA663C888A97190CF1A4475B8291F693ABF03C400DE474CD749F2F9A9CC
9B1224C623CE6F4CE78D5BF949D8C9327898AFDDA45205CC55B977069897D013
1791868D42A8BED7D8ECC1DE3F005680752255D9DE790927EC3D2012E40249B6
424CF0C26670D0CD2FC875EC46BF671DD19D1ABA710F0D05228DB963624D4347
F1E55E05DC5D2E145FF22EA3719485F1428B72AF4A3B49E3715EC7458D3E4585
BC6306E52E324E00E190581DDD153638BF43A8ECD4D674F1525B7E2645FEFCDD
2751D79F582EA1094A5419DFB313FF6FD106DB1BFD25F6FBA95524729FFF8F76
666D11243490E50DB70BD676EB5ABD42ED4E02D63B1867E8C6B76F776B5938CD
B31FA45B6A9ED253D993F7EDE373D0E546F170D14925946558B670BC1C7727A3
125D1725C13A40B6FBB9B91CB42582D319B7A33BACC38151126508245D461067
1D3923B22F80AF1AAF7361E440D2CBB0B946F79180E3C9FA895EE6FC37510371
6526670D260BE69F654B8D759A6D8A52E853A8F3EDC0C69433604EF214712F00
1558070105F9C5344878CF94AB802D9F5284203EBDFCE95CAB7311551424A4BF
87BA93CB5B0486FE5F9565AF7E61650297957E81CA5859E68444DBA35FBD9EA5
DB8BE3410F0708BB3E487C137245046EA67E5317B133DFBA5A3E652F26FE321C
631EF329C6584BD23C0C06626853C90F5D6D3BC6C1733E89AC369070B3EEC077
613C7179F4251E98778DB1A2A01506427FEF687CFACAB3BCD6697C72849D8C0F
42F3E625198005583B2BE6C7C5BDB2877A71A4F560DD95ED83FF1DEFF81C11CB
45C02DFE3C8CA81681DB38686EF45DD9C4D76669A43F6F312278CBE2275F8BD5
395DCD56611F447663C03DCA7B26560B82E8D219F6861034BDFE1C0A22D28DF6
84D940D9FCF5503C277DCCF933DDE2EB20080A63616B894D3B3E3328BD42EA08
23F8BF6F7B02B5D05413D2069FE6FD58D20939FA88CD2ECD47ACA83ECCE10060
6C0C46333C5424CB7724829205116DAA22104BDD47FC8F1476909062F88BB7B3
0F8725FF0AD84870E4CB3D1DF657E929CB881EF759E531C0BDC4F186D8241B5A
21BE6D8092AA2E248A6906E9E6BC229D63D96BE01DD08C6BA62D726B8388CDAC
2C3ABAC322EA775571B9126FCBF132ACE4ECB65B63497145637C4921FE539E4B
D15E8F826EF2CD6FAA32136FA1417AB217E8B494A67C957B49B8187CA33C3129
76040390CC6DB549BCEFA011AF17376338FC90595B850860CABAE9AF5389E4D5
6517E1A9D2C72DF5CBBB9217A54F002A0A6621BD68991FE7874CA19128B1AC50
9B58169EBE062BE839C1F9D338CC17E17E0CA0DFDA2CAF9B56C6F696F87CC193
C835C60C0CDED943DA551E4DBCFC95A78316944F6FB13F60FF0EB4604356804C
06ABECB4F247F92F46697EA0492EBBC2D0E72EE4424BF092D1ABA356F58CAF4F
D748D3AF31FB4F9088C8FF0160FEB5FAD58C121FAA517AA841419555F2D683CE
217DC03A7D5F3595F7858E17DBBAE5448E514417FAE2BACE120CB3A3058E0A13
7911C6407EDE56024131A5265BD61424AA21B8E18C5C5B051F270C8B92398E30
1CE87C90B1B09E491C5B979AE2CCBD98B6B8F1DBADDA60C66CC4FD5FC0270BA5
CF8FD82DF3DAC59C6559274CDF3B1E073A873AA43D303F9745F5A779685FE0EB
1671D003242BEBF0FC2517F638C3FD1C495AF58FF8863A1F60414B39E6837470
324795007691A8DEFD1559C30E01C8B27C1CDF04116D3411A7976AE5626DEB79
F0EB8AFD8E312D719C504F797E88CDA7BC450FD1F9F4CE82ED63944D8F3983DA
6C8F6851B0FA2E7214B0C0F04736F1E939C6DCB58968CAB7AE5C430B65E23931
6309EE927BCB4A3CD42FDFA837A09F0C71D43F3AD97E7699B0D9E2092C31968B
97ECED8B7824A6C59FB229B10DEAB6F35E1471FD65B757F72174928D48DF691C
FCA4C9492597ACED772C748B81372B43EF59F73ED401E1F6C4EA97A60FE40726
8E749F303D7385E884187F2BC1359F64FDC4817EDFCD0A5FE74E6494BAE60902
C2CCA7AA0C10EBCBB6D7FD1E9166E874829A2F904116622528D5460A40F7D6A4
663A09B3C5D8293EE067250BDDE99E77670935161FEA210A01C60EE153A0B746
526918E11E7AA9C92CEBD19BD4C453759F55607FE0D4B0F4CAEE6F11F8E88CA8
861B0BAEEBE24997F7B41B158B0D6A1B05688B15CF4D65DB27C12FF69FEFE27A
8C65E5A1EB77AFDB240DC22B6DC1B80D8B5AC6ED82A7638BA5CB9F038E5A87E0
86943E517C755FCF5B5B32CC7160B940836C08DBA30570259653C198D7C462E7
A20E6175EBDF306EDB63E781642B9D7D42D4954D998FEAE330C44FF1CB9B7D52
7ECD9864ED2D5C234119A43AD505B7584E6107086772F4BE1C88DE2BB999F2EF
6088F915CE504A1700444E6DAB6B79158622F37FD5FCA446EC587829E52B0226
5080DD9C152B67938588E301FED768A1C9FCC9A5283919C95EFB4E196340D32C
F191443B37EA59FFD76F4904177DD2CA6430B5EEF8F8E4496C3E7DE2537FF6D3
833BAD7278930BF6D08368E2181C9631F746509B89943E7865A36EB34DD11860
75A03DAEA51CA9E77C45E9608990711E812D659A281C2853245CB99911A1EFBF
5B0A008E5DD424FF6F1C5C1A515316A9AF349D8D89EE69F967F3ED00D01BC4E0
6E885356032E24054472C41012655311BDAF861394ED682BD24CA753DA427F30
DB44FB32FBABE850F26EE2738B6BC1C6573183BD5CF2C969C77AAAFF310421A0
B89314E8AE0B17E6BF38660F5CBB9907C7791A7F9FED88BDB31A8646DEB04A22
E647FE68B5C82E71203124A14BCEE0C1B754A676A112D4F7A8774A6878D4E217
4003409F7327962802903DF1464437A5C8939C47A4F0BBF5D8A3228F41815998
EA35DFB6113D7A47A730A8E129B5CFBC6677F11BA63EF0CDD6BB7FCEC260FC9C
1536A6FCA9D574718B99D7CDCE5866DDF423F8607242B033163562A54144C1A0
4D68FEF26FD5BAF7DB274F80169F95BA0ABF56044FC26C08DF6A9E410135D41E
D9B1FFEE5CDA5D9DB570E70B8E61B2DBD586577E431141B5286A431B730A1E4A
219C25598FE2A2577774BB19B0222EDD6A84E899347659CDD1604BF062EC5F4A
82FA9EEF7DC1A855952A59D9DAFF4E2ABE2C453757CBFA65E5D5570CF7E34EED
43C2116344A5E5FF08835FADE0C33C6B8A0F4A0AF2CB411E8486743E3E9315E3
7554E1DE4159E3B754235F3CDE2BEC211B6A2385AF5D574F1D4B739CBB10C0CF
8888B84B8A8D92880A6DEBF409E2EA8827A12F573BF61952E8B51460AF60CF8F
28B0F587F2ED7405FCDF8F97F3F24DDEA9299E86036C7F932B68F27106A3B1C3
47E23ED31824673757F8A60AD400D0F6C217889F07513EDA36A6D05B3B30AA55
2F35874470DF68DD0EE0549F40C6E2F69286C624557CC03DB856A72088758872
289536AC6909EA289E549D4103C6BEDBBF123C9F14159C1C629A345FAC73E3F5
B321A37F119FD83EE7B3160B745DE1403EDCE07FD55604D9BB920CB959B59D0E
208C8CC8FAB85C6E546A075042A6ED04E9CC0C3DE1CE3AD2DDC03E96F5D4403E
2E0130828438A8E9F9AE6320FF3E983C2F611C141913BC4C797EB8EFA280F059
7F6DFCBA6E67CB0FDA90A4FA37B23578714FDA4EB470357ED7357352FFCB13A0
80108F343C50920F2B47028C192890A5E1CBFD2917977AEAD0D3B1245437563A
4C509E77C23FD1EF8DC1113C5DC3FD07E05D3DDE1B4E551F1523068E06D48F49
645DE95785E24A7C43AFCA292BD91CB6F7C2039ED6098F511B1FC4B017F2B545
C24EDE45F9DA0D53A5819DACA153089A29910F4A9FF2AAA681153E0DBE8BFC34
6E6A8DB24F8D440F060AABDCFF7B1735BF63074E43742C2BDCA3B1822D89AEB5
96304E5CFB08E53BF784F5DCC84431402A8213440751ACEE85B1F5E238ACAB83
F3B6AEE8DE1885CDE2A5E6B8D497FC330097CFA0677B7D3A44CBFE95460EC116
FA71F4E842D2BAD58941CE386736124309434DB02BAD62586AA4A850222F925B
4995264B3FC1E690818F5D533BB6914C1ECA3093AC6040325D62FFC825E40E5C
DEA86D05110F468F48B86CC4165A89348FCA15A105E65B3CA3BD098A4C69D6A6
FE6C972EE311C21E9CFE8A0C3A330B63D058713341491F0822F1790BDBD9D4D8
C05B66E741BD92CDD44038E368DA538A8DD3037DCFCE4A9B064B5017079082C2
AE6ECC67A42B733637B1C4F38C06C3C6FEA2E05C4F0268DE09D530EBA94293DB
5327F320683C18B8070595902E9689AEB364F8F0D42615AA8314B4A6F04223FB
7B4C6D9044712645F7530AA45CC1F617DD42FD5517E80DD1AEBA4E00BF0FA918
27338B057342AE83C8AB02DE19F1F5C7AE7945B06784507E13765A63278D4D09
77C9D8F0862D10836C9764011A9F8F8622563885EBF3877B7F38789B0CEA1585
DC3A6D9CDDF4D9805CC5158009252AAD1E4F71575E6A6968B5D233F50C7BC590
1F4F9AAA82BD80C81830DCC9783F4510E3A89A0A3C044837770410403AC493F1
F44810571295D47DF63A48537D1C32F839D4D2E344F961C0860399654521E3DE
00D7970F74F498E769BD652A5E72047650A6AE13951418AFCC9F24F23B6EDA54
8FCEAEEDCEC356B6CB517DA3B13618A9616FE787605B1F6BA58B644C1D7E1117
2BAC6C040AD18CCDE829AE6FFC57C35447657953413B8603BA734AE1E53DC855
E1FC30D28489E314F897BE613AEC179E1C746C9F1D5A6EDE292076649C230959
25535B264AF484053D62B9BFA62A7FBE05BBCAE1897729EE3338208951740BDC
2AB694FDBAF4104E4243661AD30D09290A2EE8AC22D9526CDB386E7F7D2C4B13
21E3D9DE84982B1847B14F0A3A26CB21C6DF76B6FC699772FB7D706B3F862CD3
E1A178A75DCDCD89D1C000D07F90DA6A79F088AB9E23757D6D6205C9EC229E83
386E3C08EDFAA16B23C48F99033C51CD06E81387D75F73D7B21CC9F2FBC726B2
D7B0FB3446125D18AAB8DC46F6EF21531A053ACB26B9CD93EE7CC659F6CAC5C4
5ACAB448AC3E7600F4B344AB9E93614B7EB08E58E858C41836416D6467ECC9DC
94E07CF84E20D15661CD3819D5BBDFCFA1B8796527EEE9ED560B22DFF2D10322
7C4E80BEA51359B2C86CC2069D34EF5D922F3505535269B0B752E99F1E8729E4
938A375DC37D09270EA86BD1A1B2F7BFAFB5BD4884CAAD109963CF7AF02CB999
E2B253CE1F26912D480027E9A0DE652453ACE0DE1DC16F79B5F35329B5B10609
839B343A848F61F2E754F6A785E7A9F7B354A8CBD6D483B51B33B062991DE46B
AE0E79D7D3D23C62FB4845586449E0805BED4F0E20B9DDDE924354AE7C19D31B
55FF81797AC2F8B0BA104D222710697509D589FAB34E36AF78106B7FF13C3570
B4247F5E18D18C89E74219E7AE1545072FCAAFAFD1EF95742C98D8B41691E4E8
6D05A3BD4F2D95CD2ABE4A7B6EEA6DEFC79F98C88D066FF4FF723251133F1C40
3266FA05004B51EDFF8E56873E738A7DBF177FCCEE2E609DA3074BB6369223F0
8257459D47F3D57A7EDA2580A897E9067805BC83572F03A9A18B6C5CE243CC52
A792522490A1EB8B6E68F360836E5F672837E4380B57F1A8BDAD0CEF81334747
D7FCCADCE8AE31AD27B40CE6B17242954861C294A90AB9E1AE314FD5137C0BC5
0D72DF5F637CF0AF26070ADF50AC97769F0DAC7F188170237B8B0BD30DB1B576
CD5CB68BC546F090D8B54EADC4730A2DE657212F7FE0E76B52DFC4C237DB7F2E
958C9BDE4D3991CB655BEF674DC1534794E3C8AC1702D6AB17442E6517267E91
89F5290184D7C521A52ADCE4F6DAC673AC34FB4FF8596FB22465760F5668AA7B
CD85BF377C79E7B97B725E77DB00F12B5EF3C8649995AB908A7B859AB798B506
404C9AECF21EE0FC2B1F4A2E49BF127C013428FAC34605BC6AEA1CA1B3EA2A9F
13A392E04D3D58E6745AD62B2DE1F058A4E2C95A371C63823C0D34784B6464CC
64FCD31F6DB33F37777D645999A7ED34F5CC6FD32B23050579A24775CD869A8F
0B830B279CDEEAF8FB5B9735E441F1D749C69E2E13EC1CD421B2B9359FEB0B82
F8924EE21E7D1CBD264D86DE3729FCB761C7ED63D2EADC3CB92D25A0A2930E0A
3546823CDE6974060BE3FE1EA0B6E77D71E0C525DEA215F6F44E4AE4DF46B26C
D664DD17CC2C7408778D99330B51A44E790BD3780ECEBD6215727D79DCB8B1CF
7728D6DBC461509B07F9519F748856E1020186C485687CEFC555B92FB55B16C6
97A8E4024C52EB4C26EF2786979F44F63C969617DDA0CAA289BF0D54D56661E0
9884C47260BD9CE74406AF348776E8DDA3385C92A92745CBECBE95D93B07C0CF
AC8B0D515F642EE4AF9E2A4255F1DB99393AC33DAF8B9506CE664CCC9F678D18
1266BCDA0B2C8FD5708257F7E9DFD5AD0E3D8CDA3AC5CBA6BB2904AC7CA4EA28
F95CF13407B15A1A381FAB837AE3A52BF1DDBD2852DF1B93A8F82E0C135056E0
86AE797FA1DA9B27C375A3D1CB931A757DFAEAC8613EE001307235C6A27C9140
3F850607DAC6BAD81105A165837ACDC352C99B2968E3734AB772CCC4F378C47C
25C2DC8A1884F2B5A71D08C9DC44B131B54B7ED6134972481E6EE9D0EF1617B2
502D9F1A9530183C0D6B5ADE944D75366AB84EF9ED6F8D5906502B529461944B
9AABD346C105B813ED03C44887549CE54E305B0BB760ABA9E8D702E6E5280ABD
6678C30DB0FF955946A85F157F09C5610AD0A5E7751A893FCAF9E4449D626D4E
8FD161777FC279F9004B9DEB25C8732A5A315345A619D1FE4A1CA914AD2830D4
266E0612519BA609029ED76DA859C3083CA0D7275E0874838B64F1B235F5130A
5F0C0E3DFCCB9A8F61086ABA0A91A69CCF60C72F293C413BBA3822B6EF9A6A7D
4C54FF5F8CC650650FC0802CC699C1FC3A7FC64DDD9CA1363AEB396E1C5FBC12
96690494D1ACB7749E5E43BB979F46D5D4C0BF16899CC389BC9C951A694AB951
2155F7530EF15AD7ED0640DCF159A6D5F412BBEA8830A0D09B906BC8442C140F
69A8BFAD0F46F12FD0166BACC478635FAAFE3CE405B45276FA2E12E5EE04BDF4
B38DB3033FB12C2EA5D43E21BCC38C2B7DA9D9E989803B96811D3A6E9D09EFA6
B393D7FE5669974E7442BB01BE2AA69EC414A7584953AC547BF26F73ACE4CF58
6C3A941E691EE1769EBB09A55F31E5AAD4197B446A2D1F369406ABA78420846D
03C9F4F05C19EE1AFEEF5FE89032F6AB853F1A13377ACFDA0E8BECE9AEB4E0AF
D14D3EA2018C9E7D68448E0F2325D0CE01687729432B250B5C40956163DA281D
C4826C199E2DAD638A5FC77AD21C9E80DF4BE60005DC57555CDADC17BDCF93BB
E50D24720D1B19E7846D7B44C533B6124BEAB9B82E18BBC15BB7E95B33EFA6C9
EFC2A24B5048A3DAABAE2760A1155A3964B3EB0218F8F8C21E5028239BD651AE
A1C24BA03C8C9C7B55DD8F27988C1FC71C4ECD2330A4DAE1164EB958E5C5BB55
5FDE6AB34918021374432A91B4C26C7908AAF8C037B7DC70E276BA3C1C78DD8D
1D62871262B7963C635A192D45A7738699AEADA6E5AABE275DE5CB7DAA2C67C4
4F9B49AE0A2FA7BECA20CF91084C271DD8B701A148
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FED3400A84E6
8FA8EAAAEB4173E0ADEAA16353A2CD596FF2176C20207D0A7ECEC04E7D67371B
FA8C1A43E63ECFDDAC997867EB021731334D4094833FAE2FDECFF5AFC8BF2E7B
A12221EC01667D2F93B5ACBCEEB4BE7298EF4FBA46D9A3B40DACFBED48C823AB
2EC9F5B7BB957F6F2E34212A72336D6DAAB732B3EC3376BD946A10F3802AF740
BD9C765861A95092B7CED26EF1639E13E5FF22026C6F2643128B9155F977871C
C6674518AF3DB235C5B5A7046D3B734AB72279B090B19D66C9CE3D5F6EB1C5D7
524C125C86A63F7AF293C25C7F64567C9D80D1829D7FE5F45647ED6B99C6DA1A
AE5E32E4F150EBD1B0EF59DE775553D9DD5A9F5AD85C0BC79F65939B07A2614A
73E6CD0A8650EDD6F2F992CD5354D18730FCD42C30B95AA1BB44B6BDCB3B2976
2CACDEE383614D564D3EB1A4DD9D4C46B9DBCA62613AFF8C32B8224C48E5BDC0
2294CDD1896E3E2EB3E464225F241CECC4E8C63CA5F6CC3571D1011B0AF3CB69
8730F542F14B0140956714F9E17000CA41142147ED46E67410144A520F7F66B6
4A927F0A67BB50BE7B8B2E5F4F1DB0BB2D0B9A365F6A749D3E72C03007F1B062
6F3B6FCDE016EC757883083D7F28ED9666476E21C3FCBDFC242BA22DE7F3485B
361FF22160C50700F1DBAC1F9BD167FCB36205F5C3579801427AEC3B50F4D99B
48E8F29169E04E1631C16076ACF45774D55679792EE1E4182ACCCC95EBEBB930
31AA1FAEE78BA610AF85E4F3CEEE61BD96095821D9B1E85677D2C9EFA0457F1B
420AA61EDADDD60410CDF5CA46C02299F25E5BA83C69FFE8C0BEE3B551BBE007
2CCCFF25E5E1FD98697E21F7AD3CF2FB3897152B7E9F7C4C31416B47F2E20574
57A2BAF74DA634A429F9D0B473306C93AF6603E7BE95D2B9E8B9F50EFE02A941
98A79746DA2FF180A3D7E8EA917D96B6B1C07E4B12A77A599FA31ED82CC4A183
ED86D278180D66D97CE9B52FE4269E731333107A831FBE6A6CAF1BB6D934295D
DA32D0F0C3A0A0F4E99A1944B2F2B4E977E7C99ECD5BF3BDB75A27CEE1E7B75A
2C332D7F0A2D13ACAB1D2AB8A513F22AE32E572F6642EA9543DD8F6F4034C6B6
541B4EC431221376C52ADCEB4B8797973FF896483931516397053840C0109C32
5E5820D3C9EF826C2CABEFD3F90240610A27244970757F3C25CFC3E853E2FEAA
6BFF7DC04EF40B1690BA902B26EF0FEEA4D008B69895AC6B9BECF2190F31C568
C908C2A31E6042DBCDB81458C756F9CFD8FDE80E495150D14546AD2314D026ED
2B1674DD4546756FF8D79D108816E9072BCDD8841B986B3D714BFD49F6DBF030
6CED94DE945B5A67DAB6BC7E59ED22D13CFDF599DD43370E6F28DB5DE1087E29
5820DD78AA19FF23F80B188F9969CE4D13F0E4C6A24F299EFE32DBF5035ABCB1
8BD682234879B24534B4CFD3C77A50DFC84CAAFD32AA716301301AF68A512D18
AE3897CF65C8389617F534EC699BB12C33F7E08AE8B8511F987E96279E3AE01F
FE68E34547E71CED5A6EC51FD6C3C5A6F475A4B0FCE5CF6A6877852C65EAB4DE
668AC382B53765C19B4218DA3D841B0C33A32E983E07BFCD447294B1F96ED4AC
5B1BAF7B88821E81258E0B7CA284D2D5316999D9BB1FDBB75BC2AE106C22C73A
0EED657D7F91790777E7D8B1EBAFB0ED4E6CB8B656BB0015D7D80E0A79468ECE
32F5EFCE7F45A38E88BDCB7DE042AA827FE25755A808670251980807F8BF5112
4D286E04C5E4AF642A7BE20500304968F44AB6F5977D1D2471B5642E457D0BE4
06066F05E4C6BB5C98826F55898CADE887047A1128E0AB55B30AB07EED26EC0A
FF52F658087D5C67D702AEBF0B8B81DF9A6609219685284FE6A4E39C4EE44BE4
AB58EEBD2AC384DF5F2653C608EEC35BD40A5C4A15437D15AC05689904112329
CA1F65E78BED84F9194BFE13F58D0A5B2A7C04E54A06590D542DAE443FA5805E
DA613947ADEB628060D180D9309F26FC26FAE653EA11648528B8E8C0F3DC1144
957CE05C0D2D2C9E14BEBFEED880C0B50E191365973D37358301DDA95A8569FF
9662B29E516AA2E8FAC4576131C02D847D0A2374DD0D772CA350B5D3618F3906
DFEB9692D54948F2C738853726F25EBA7A3834763875F27412806037F4DD786B
4CD73225E9FD4EEBC10ED49DA8BA0547D4BFBD0A544DEDDFB4CBD7126082DC95
F51865630E9CB15412D87BA4F26F71D325E9A9D69C22F1F52D586DDD0811B373
D5B43CEF3E211EDF42A0292BE0BCD11675B1C3056699F1EDEFF7F3432D1A3591
2D79F7A4852EC576B8B197A9A6DB8094A45F7192436F093D9125BDBFEF2969D3
CDE2F42CFCDD62694BFDAC3E01A37DA199F76318321844272921C4A6D46502CC
C5BE14C1643C89F9703357AC4BE04B4B3C553A9D3FA7C7612CE52815250A472B
8DC7C588F3FADBA3C5F91146D045F3C5D5CB3E7541626E0699A141F6F4AE1AC9
1793F0254037EAC872D5998FCA8687674673692CE6C1E789276862A62B2B4CCC
EAA8C1FA887EF65595B67ECBA01F813A9678108178F33EC5516DAACE18F7B182
FBD0D0A7551372F78817D52F165FE6FA9343C144A726004B7ABFA556543EABD0
4129789079E9EA4FE64EA87FD6E64BBA672C3E6A26B4F74A844D1A9F70EE29B0
69A97BDE7AF2209A9F760CD10D6FF12D01742E9AAFACF2CFCAF0517858C28A24
F93F3A3B8F968B1440C691B1FA7176E0CE92270D872068985A9D0245D994C854
FE52CA748C5AC92CA48A162C8A7DF21FC21CBED006BB1A6EACC2F90CA8E188B4
B08412EC053B76295C62743C6E640BF62620A76D230496B60AD8836B98F8CF2E
F19ED497CD01C3AEEB1AB32F5C93A198B5A109CA9D14EB30F6F4C1B85C7C5E07
4A0442E910EE2D7511DB1D70576C69420C33679135012B5ED6C2DCBC742C4B8E
A64508AF6897483A26FFE842E222CA480F1F22089A38079692312519392BDDAD
D3D4F7BD5C89F7E958B584298DC6830F31E28956F567351C971695F0EF665B90
5F4B03D3D574FCAB5C5252FC52EF6EC557C8B6642DA14B5EB2AAE536ED2CC807
62960AA8CFEB282301A4E342028B149A4C77988345E379567069E9C9B740B38B
D45B3751ECFB9CA3BE196363DCEFD2F3B25180F0945C4EE82559C1B8BB8AF0DF
E853171B0D1612A3DFA5264D6B6437127C96CF569C85F742828DBD3A572B5C21
DFF08EA7AC18066B6C6E0E2C5C0822AD4ACC38A6480F55E661930900A78F07A5
578BA7BE6D9C5EA81A9FDC83AC5354BDC6F812AD00A931626533380BECD9A771
58110E3D1E9DFDBE26D4E14F95B195119EEA940D61091B4EB202F442D570A744
863FD8EA705890890AC5BC2F0A068C70DB5D2226F3FAD2BE387F0BBF649A5EFC
7BF136C8ECE84D25919DC41B93A262E824E5DDBE10E438D292F8AFC9B59C4B43
A4D5ADA81C5EC47F92F95E3333FA6D055225E01432DE58D373297150A1BD2554
2746ADFAE256888C96655EA1F11B8FE226AE94AEDA6C5911D9A0E6336E34F7C9
DB89474563B87923D523CFF87D0A87D9C2A2B7B81C93E91804815203BED8972A
2E4B94BDB2FC07702E1AA1EFEB414F26C049CC42A107DB8F52DC35DEB4063864
7AB388A00644A0BC0B30A59B8F4BB59B10F138A032C862BAC2A178469D984799
D1322C7866BB5C576DCE2F0AB9A32BE31098FE9808DA0D740091D4E94F8F3B52
2DADD168624E8BB426FFDE5BBC3AF8BC507362EEFDE29089DC7C41F969BBAE2F
2C4EC20520513461CCA12DCDDA91AD70AD7F40F2E194843F949E12E7034BBB7D
60CF3280BE66063A676691C787824D9AA630D84AB9618A4CA77B4A52C94DFCA0
4E61EAE9EA1D2D3FC0EFB7198E7EFFFF551F92788E115C8BDA5D887A2EA2B271
D1984A15CBCDBF1C0D52FDDEF16EA54F168EE0A3E6CB51C84D206A39CF54EF1A
D7B0F79C011D24CAA651C884C93B635FD4F65E42C78F98AB86CB0F19B56B3C73
4C26E1E51282269E539F88C7F70041807BB0B3A622D585A52A3E5A8C0BC49986
4234CB5C2DE196808B6EBEAF8CF4B502B53687CE22BCA9E54691CE50C02D8166
EBFA0AC8DE33D4E0215D5201E4B6579B5BCF07AC8B45C2A83664140E70CA62DC
B3153FDE7ED1107EBD32D2B3818E7FA41C0527DE436726C968C235A8FFDD668B
DF76A5F4744AF3E7010D7F679E2F62A0A3EE957973BBD4D71B748F6814D30835
8B39E31E89612A9F8E6CF58C86CF5774AFEE62D14FA45EB205EEA6A60D9DFCBC
3099ABCB5670BB97832A05A92D139A80ECA6D61BE7D20CA221758CD0F2E5E007
E243BC3270D1D797D8A63194586DD11A01AAFC2970B318B68EB2062D13EE9D94
501A974B8C3031E3FFEDCBDAF3A9F80AF982F9653F2DEFA6365ABB158D6D855F
B59561573AA857702B2A8F48F563EDA3F739266D191C0EDE4B8C30E1F06EC82B
82F60534847BA94962E8ABADFF0E32780B9B5BA9968923919D295CD3DA706ACE
345FAF18AC8EAEEB99B34D37764CCA28A466731CE6F6DFB56EBE39D3DE9B6F1F
6205F3D166F2445E020BA8B2341DC7260579C7DDA09A0A30BEA55773FE4972A4
69663EF42F3F6CBE5A045D10F02F7196B71934637196442F092626A434FDAA22
29EEC078C2116A4D36295BE3F30E5E12C20120B99667816FAFDD247E06D97891
27D2DD734788B0FF585B561BD3EEEAC3E8BB95BD1C6596BC5DDEE6343F980BA1
679515F00D8A162CFD5E33681FDC9534159E66AB7D8607B409619E79F242CF52
E618AC0DAE41400C869BD1A8259D0976FBAA6F873209E891522403F158C4BAFB
2E3EFC4BC51F799C91963C74D2DFA073993BF29C73EB3A2863D86A564B1370D7
CBAE9BBA72E85FC6D0B0DB4C85BA58AAA7E2ED8742C4F6CB06BC580BD2DC3E1C
D422C605740A89A3593E56F5A6832B515A582606F548F063A5A77E2E99DEA746
FBB2686DE62E17237E4FBBB9D830D62F1F1107DE81D480A4783C079292886EAC
DFF794D45A2F63B54EAA475F71061B6AD9D9E76457C4D49918CB669F032CAADF
C4026966B4E05F14021486C461CD3C023951C59F3E09157F87CA9762F00A7EE3
6053FF5EDE1812D9D439D455AD21617837E2BF45A9DA7EF415B3AED5544B06AD
48DAD5E377C2F375CAD13A90441BBCA8D23F22A09282A6548E395B9FAA0B9939
BE70A2E4C253455EC973934DCE0AEFBE740984B87822F0539104681B5E615A83
47C5D61A0A9AC4D5A59E02997BEE74A9D343E2DEAB2AFA3ABE148223B258CAC9
57848EC71F18EF403DC6E913E04ED663EA38CCA2280A3B5AEBCCA1B9F25531D8
EC2A58A9A0C6621C19B92742E65D77FEA98598691A2526662FF0B6783E357B71
B8BC744BFF04114BA3649B6A4C253CDCE59227298AE3C4699DCF429D4E3BEFAD
5330704B1770F18847A4F36170E28EF54200582060391D13C26A48ADCAA0D269
06E838F7245B13471A56542C19212C8817C584E4D11A7D7C92E8A04A84CDDCB4
5DAE50450012E63D32A7E1C7694748E9BC31ED076F53210AA7C754F6B5F0E514
FD3C1B723B51CD174453373E230D56FBB30A68000F2D897A19043CE44821DDA2
9B3FA00E1F4368474917AB426C1AEDCC561A931453471FDB4E4C922CC6FDC4EC
8FB4B0E5EE13E0B0DABD6831450629A241793BC023B66829312C93BCF850CD3A
58C31B7F331DAC2062990E04188F4C940B6B8A851534C2BFD09624BD9A18C85C
1D21F022B32BFC199714C3629512C6A5711DAF0A3F09510A5929F51DB528E721
A82CDB96BECCB78F5992D8639FC3B6DBAAB01F70AD75964352EC3A9B7CE3129B
8FC87B571B2F814748345434CBE4C7780FCDA769F89286E12CB1BF0FBDBFC95A
B9A9A60531DDDB6287E8416FCBD763DD18BB72DA3E4A72C2213C883B65919980
9801367EE33E4475F5C88E1641F90F9916E189C7232F5FD9CF99D2DBF1827E00
EDAFEA21A84A8FA55F455ED41BCB085CC60E295524876CCE4290F7629CC41AFF
7700001FC838E8843F5B2D5D6FBC1B72FFDAA5926EA5679791D474BC0B7939D4
3C0AA387BEFD9BBE004C358FE71DD4239B8B1730244930052FCEEF93AE3AB974
0C261AD4ED24E83D21202783DEF88E7D5E0326B58BECD547D0B2CEE72323E531
42FF6442DD52B43E376617B3C75F93CD8D9565305EF1001F84DE922D69EEF7C5
593A7FBE0018B685A34C3C85CEDAABD9BCE6C12E9BB5C75BD053588563850206
DAEFE33E4C6725EEDEA56D4AAC54ACC206DC00F5B58A70D546BDE99255756D87
31DB8E02835E748597CD52F41C780BAD637C4D7583506E2F8D5707F95831BF9C
8B8A7E4BFE41314FA52F035B2E397BABF7B88E15ADC5910375CCBF35FB62EF47
C8FE125E02A019EC65DFBCE7680B0111E044A9FFE6D42B465D1046A05F51C7BA
3ADEC697B0245433FF9862E3081AFC04E432E449307B9A074DA1502E53FA022D
BB59C1801926FA0AFC22A8A6C6C627488ECE138720949C7503E1301FB1AB1AE4
7128F8F9A6B3BDE5DCAE6339633FEA124D53A2D5106DDE81F0D614A5B6E08B07
1117DCD762DE4EB87107C2684A3B1EB922D31EC568D06A0B4EF2F9A8AA404031
770BCE2FB5827F8405764FBE768554E6DA2BE02AD7D4C23A4B146C1704927028
9587A9F4BBBEE7CCC7F6D609349568B1477B6CD19BFB88CF8480C73240ECC165
063F3D7BEFA85E1AD23215E42709141BD0BB482F8A5B460FDFA45CE858F6CA6C
BD62F6E05ABE2FAC6D10D66329632DAE57553FB363687B32F72510B27AB099A4
7E19E36BE28EA44BA45A32A5B3632BDB7416DECCCE451F1E7C490E4B76053614
6B90C3979DFDB7BEC5464C7C043140F593A9BEBDB78140B5B614D4EFB59E6684
8E16401B5A70D1ADEB62BA8750534D533C8D4E97BB510AE3F75E8E67CD48EDDD
25AFFDE220C5A30C9916EA588AA8EA72223051299C8DC41C97B0BF64CFF8C4E2
8C9E06E7441B2ED2FE4D0EEC9E5192EAA746C4AD12C3146745FF6603AD6C4CEA
C3CF6BD478C572B84E4282C5FC3537146C6B36B58F4487C0DDF3732B95949D95
7A579A0A7C150342CD689CA7A534E0362592ABFBD3D0C08B8C7653E292CA0A13
E15C370563EA2DC1F5DC10EB0DD59EB53B94A7880931DA86BBFAFA13291C2831
2DDCB7FFB35DC547147A002B84058A6B27BF3542F5E9C96EF590F53492F25041
F0B897F679B49DFAFC8C084FFD0297AE705623D7456CF1545B7515635B0E1CB3
65E16C5800D3D730F0AA1705210A3A651775FE3C1246D1C490156BCF1B37EA0B
2EAABF2D5A66880A0A26C57C4E4885BEB1C94192908C14B95B4F19C15A1E65DE
23749A6389004B4193144D6262F4EE49C61DC3EE41784C9F972E046128362BFC
A614EDA3C941F81B118A9C38B483AF7CF2ECEC977EBFEF3B51E8FCF89273ED18
FF356B6FD8081C3B666DB4DF20C1459E37839C7CCBD763A3578589A939A0B997
9F9C74979529441BEF8CF9684177F867B67B37AF86DC4942244643620F1CC5E7
99B3728AF84EFC055FEDFE35E212DFB593015CF7A5ACEDFA75591BFFFA879E38
B6B717522068F1E0CEBFB106550CE965AF63272CD78E9D2AF01E2010E3632B54
847F78CAAA3E6A51754188E718B1C068ABEC0AC5013EBFE197DC953E399BDC47
B39E0ABC0A6BFC1221C318102487A13336F742AC8300AF341E92446E39E4D60D
543C0750D7195150FBD83377EB3A7789141CFE611787B82B95BB60A2351D9BBA
62EE86C30D0A51D96C615B3A79CC5F7ED4B32979DDF6258BC6BBB54B958E5783
36E8B9F17A5F78501190E9608F848E17FF0BAD9F71AA374A6008BB5DDF66D7DB
D2F0E38BF5D3B8BECC7A0E178367C863177B661742E160C80799179CE0CB713A
E6E362ADB9A370228BDD72D2BE129DBB04112140552E12805EE74420394CC886
2D8BCA3AEB5789F09D532FF5C6D0728ACD7F15B6C6036B78F502238CEEEB6012
D3492AECF525103C6D4A4A49F2347594967B44C2AB5B6E22B801EF926799A7A1
2B0E973CFBC821946711859CEDC24D287C9EEBB4250B3B4DEB2A3B6E760D89B4
B8E897B8A153D2DA6A878CDB944C13402BC5C2F642BEFC915442C161F75B6CA0
D9B4B4F8C5780A48023F15602A346C1667513D2D66EEE0D3B3A1473AC32F6EE3
673E5F513AB81A675CBCA8C8DC539CB860BE31C79006826C952579C98C38EE81
DFBB75D728F5706C28DB50351C9CDEF2F3E3970285D2F58A72B303D9AE7D1AC5
C75DEA9B7BE5944000DFFC74E04E3FFE577D552DA9636DD76F4A293F1014BAF8
3463F15AE52C85E195600204DAF8629511327E4EDE664B65320A63F998444613
3B2B3A2FF662BA338A66810170AD48B6FAB1037FB0997B367483D2C8C0D44E61
11CEE2E9A7621413A13E707E88CBC5B2CBBB2642E6E29259311EC5C03037B06D
D775397C844678989C902067EC814CCC3453E1CDEFB73A9DE9BF792C13B4BCCD
131AC7EF914D2074FBD661C1D2677F77D4430A609D337439B474B24450175C98
CB559929FD0D5E8A13520FA7BDB2C711E3B3251DFA881069F00BA6008BDDB01D
403CC40C5F2BE9257F972A7F5A8E1ECA63FC9A5ED285837271FAF6CC611FB61E
28AEE723ACFF1EE3598216E0FC82CE45E88669617792E6EA624E7391D81F3591
168B4C0F5C38C938C40446E70F07D571C4D1D4E8FE352EEC55F29D01C54D0424
957D2EC6DD15E5CD9EFB21F1E35CBA6432734F825BE200DF044772467320C4F6
DAC1C64E480784E049708F69AD3E9E773BE816F3E12413C03B942F204809A4B6
203AB5FA7389F4F66A5A5AC5A2F4015C4887EBDB74469D12099904480EDCCFC7
97C487BC02BAEF3FDC22467A680FEDBB1C02E21DBA40941B9E66398898AF43B5
16651DE5CC6C35511ABC869432C6AE3809D7AA9B4D6F4370D24FC47D43857430
8F239051DB08F751F220ECCC2440EFE2D494D5BEB32197BF52B989DD185DFABA
C4C210B944334CA5F336B3BAC97AFC9599AA0F452D028F4FCB89B11876C1DB3A
6B32B70C9CC4B27DA28E97CCA8A883187D5C6AFFF4C00C1E197DD410D5F1996E
9BB66724E1F838DA790FF3BF23A13C2B1B69EEB75950F9106F2BA29200EF97D6
20DFFCD216CFF0DB2E60B9053B0C71F73866E38EAFB72E249AB2DC31E7A96580
7EA75DE120EE0DD51BC38093EF9DD5062FA35EDA346E927271617DCA696B409D
79539ECE65CAAD81B406E0401285D6645237F385326947F4B53D2B14FD50B4CE
F4398D2D2BE7E7A3134AE7729569F2DEF33F9469903A4319D244F00164BCFE66
25EE4F63BA5204206BADBC625AEE204D7B477C79B5143E241B01A588399B10A9
D7BB681D355B88AC132D54A5A98864DFB95D395EAF67165B8292EAC86870E95A
6E2CA6CB6868AB239B55E3295839C5D49EF09E8D938B244EDB76DF5622999671
85E0519FB0B6C5BDEEBB9554D34547816955434A523A580D97CC9E7A0AD30AA6
2480636B595CCD064AAEC9046A0BF72B68B2C84DB4416000A82B7A78B66DD737
8D78D36E3071F631A523CDEF3329DA1D2427F462E1B0834FEE97D7DC3783A048
D871AC6F3464517ED20118DA8DA309FDF7AF81630306D67E0AAD0DAB78243E1B
814CE64585A1164A287A8C8C869CE3BAB8C4891D68A761DA5BB9B7400DD215C4
961B4BF5DB2BC3064F6A82A22458292350583EBAA36E82660BA7BE222FEC51C5
8D0E6FEC997100444BE945E826B26DE65E3075FB61518F4446469758D8DE5177
013854B10911605F872456B8F50454793F9F56BA5DB7FCB6081B9F3129D1B5EB
155884C30E653849CF84E83D2CF5B41E84F1DAFA5F2E2EA2E47BAE8645E1B256
6A1FF654A9C7C34BECF48CD9726CF2A49D426DDB9F9AFAC453F01520EAD132A6
9E350E84241DF40A43C489FFC702276681AF7D03B31878FBB1F73E41AE286C35
D513E6E1B82614FA1BA15276039A09CE60CDB0103439C6C0F2D5F535AE93682E
855B1BDD6CE955627282CC6DA72A3CC8C866B77F225EB04390858BFF70300B09
AF84A4770CF1BF95BA94FE7D78285C2350088D00C56A764DA04DF4C42D75D661
F33430B0CF56859103CB5CEC8C32538603DFE21AF0CABC4387BE9CE93DEE5AF9
E6B42E886E05FD0EAEB026BEB5B1B2ED69589587A48B075147431109B826A3F2
3AEBD548E10C71A937596710EBC919F8CB892CD8541D4066FFB88BA2EE4ED424
6CA01559A62CB3D24FA21C2C7A8B1473B0210D26014CDA35ABE007EAEF071AE0
1994A1D2DB43091DD4F243C92BA6B174DE56645F5A8D84FB1C177AED502F9F05
4D68CB91DE65CC015AE1633C8085ECF572713053E9222838472960976840CEDF
B38717C0D90AB406A2F62CD9027E5A7B4D123C2234F273E1C58A786564ABF1C6
ECDA857DEF70511DAB360BFEABF563ECB5AF94AE88F4A6FE4FE745496C138F62
A8B873A7339DEE670AD4769B9E763F69F5F53EC26B1C2D41FB10A63104AD5F9C
F990CCBB01C6ECBE840DB687466532AF71DBDA671CCABE69652A7A0E48CD62CE
CDED13D52174ED5C933E8C8525F88E6CE4826618615BC140A5DA1DC8B1827C57
18D640FDAC4491E1CD4F338FD5EA7685488691EF21286FD15A93FF6A0468C6D0
6CC08809C7282771FC2472E305CCD5C02D01067C2EAB98755B42EC5AE851FD96
4ABF5A25BA4E06718041B73BF71108884A8DCBE0D0E6218801EAFB019F326E85
A8CC96393F39A2B7BCCB72D6E2DD788C45B1719B1A803034812BE363D7F6245C
0559045C91E1147873400FE01EBAF6D30AB02F5B055EDD207C35BC17DA0E6140
A7546723FCDEFA5F696E72D24C3581F7F1AD0593E79935F5D721EBE79A621F82
B68CE886DFCCC2331FB098E7281C0A7FE832B127443BF8B61DE393C3F3334854
C5A3B55E42F03C66DCAC04885CC7705F46B58C81065A6869DD7A19F5C3A3C48C
4EE6544EEE1B5FE71CA51E9D753E404C2F2B60BF5BD53F55D086CFEE08A679BA
E54B4E5F84D18147590E054B70E3F30CBA57981EAE5CADEF307DF903CED6F077
94B1D853251462B586C8275B27CEB7AFD708B24D34BD832406A8BC38C573235D
BBE35D527F40F2E194844E76B625836C94F281B5E5EA3517A2D91CCCBBB8753F
92B3E0CDA5D26523B84F7EB994F73B5E091A7C7480ABD73CBB882068CCE35AC7
9FB0FEDD28953286A517B34F61D25F8D98F11AB0AAC69A4B23389C486ED49BB9
62E530F12DF76F3ECD5AF018E01518738F7E6B887898261117EDC211226EB3AA
96B727C43D12D4FDAEB0748EE2742CD8B38D39D064D14ECC6032B34976A681B4
05A0A13E318FE1325E5001BFA070830EA0C3BC5E0E3FCB33B97A2FB9666B0D37
81575F581131A70B9A92E46CEBEFC410FFD79512E7CD009AA2C7F449DDC0C57C
898389AB5DEB81FD8A4F73E9939EDFCDC202544F6DDA0D21ABBBB7705A43DA49
15B928A50C449A08D25C664BFB83114908277ACA24AD513EAA1CCE09E88297F5
79F2198C005568E9DB05F35C26DF7585BE3F53DC05352D7A68E2E1DE838BFF26
4A3C930E0401D20ABEE67F675948FA33776844613D1075FC6DB73520395B5A1C
49568639211D51637503A6265C8CA46F29F6D9990CC5130EC9F6DECB1A2EBC50
E20C17F1C278ED94B3C2AD1A9046778ECB44D95A845824C872D6B5CCE3E77859
B417C719F61AC76B5DE0F19B8E1DD73F646B4A877F4C334C27A09EF714E4BFE0
D7A1352D7D4274677B103477A5ECEB33AE15F8406C71B2405522123900F1EACF
0056E01D93EB51BB2A1044B616C6A5AE051F9FD2151F83B2286B6F0DFC26A600
CB272F79AE07698A0018620539FAF6AEBCC31E48ADB3D9C7183B8EC192360878
D62CF4712371A1FC201267E825C3F5D1A08FCC2DFFD2DED749E87135DFECD341
D45C249533277FD8F9B93A877CF541BCB6857C598BE6C799AC0D70D2DAF56407
77C30476CF9BD3003F266A9278D849F5E1671B066C2A51F550B6569D052BA9E8
23B29DE32EA6B940596E02251EEDA8600201AFC3754F50875D73AC81C68EBC2B
8D9E9906F4B5E57FE4B7035C3CF00E04542DE83914234E64423B9D418C4403A0
583D4B12003ED61FBE2EF02182297C5262ACAA578F3921C8B79B20990536E070
A58988992B1EBC6837AFBF9E5C34B978482F9041012AD781066C37459250D860
882388EE25E1D6B414166280459027A3723BC597196C01E3D0F1265517D9ACA0
526AAA65C66CFCC6ED8239419A88D5B289B760B6851EA1A9D31C01577A0026C7
929C83D319E05A4AF2145FA0FC5673FBD1F0E09303F8F6B667E52E6B34B5457E
6E48141D58E82D248A206E80EDC58A90848CCB64BE12367732A1DC87E9352A8C
A1EDC755E0E4F433A0A25549721103667E88138D473DCBFDA85739A5A4871795
5DD0CB5C9B7DBCAFD9B53928CB0BB9346C6757B039D2D408B56CE03452944AEF
2FCBF65E4BF33E2E11E74A1A29DC16D7FC12AA69BBC23F9C6C4B24E6F6EB124E
A79268341ECC241EF24EF966C5A5312C2FC5CE113984C8FE3AD9613A6CE706DB
90796FB0CD95E2E3A0E24D23BC1467EF2FC0E98A2BB28E5933E2F6E50D3582A1
9FBA472FC26DE2508F959496B4F14BA25B31A60806B4B2A944138C5413B4CC65
6855D21A5C6AF7938C4047AAD5C3F6C5EC6854EF71F481A573D5F32FDB51A3C3
F0BDD210D114AD8C53F94E7A96D94F58B4AFC190BC7F8100D7CDEDAF39B136A7
6040565700042247AF21C17A201E21DB8536E3222C1A8AD02518FDD3B8EEDDBC
1A862DB2E8CD879E560C8AE7D28290D506ED9038D0003EB270467FFD513C93C7
EB2528CC27536DED72B06A268E2CCF04AE41933D354C8A5ADD40676AFDB5AF9D
449AFBAF0D44CA09C30A0010221A6885AC98C2829BE4C19AE5004F572982A3D5
78BCF9BD20F1A830F4BB0C7537498A96E02483622772A15DCBDE0DE2048AB8D2
1D2A2D498732CCC1DCCA5CFA4EAC829F163C971B30C200B6F19078F0309AC5FB
77B8B91BCDE84BFE2A5B6FF56522ED026FBE17F82EAE4477AA5D8FAC3086DFF2
F1F4E852D9A06829F358F962BA73A69CF9E628AD40640D22F8303E38D6ED7B07
B779B469C3EEF739C60C8DD63970A3593A5C058269E5CCC158F592654B83D271
105F375EEB75856898BE8B48B4F31F7AF58069314923D0EB7EC98D79CC7D50AD
ED366BD57798F0153EA3E6E48AA532F34E9561470B8E21D06FBB1C0360423C38
6C44C8220131C732B028FE1A0154E69F01142A9B67185FDEC6AEDC1B46D56563
CEB0B2EF856FEE9AF324AB4A4AC716ECA6C553D116EF2CC905C38B8D6D8538CF
E76A5A5E74943664BE11A4CDB6C5337429210C71A7DBE80EB17F49EDC13DFA64
6F80776FFDD5F454CE9BC054B0527537A60AD556E8DCD574615AF31753C83AB5
BD93CDAE96DC9293B00CA3BC5D8F0D003EDA0B6F99DCBDA90CEADFF9343A876E
17BF7C86B689DF7249EC52CE93B0BA6152F80615EB44CBB1C299343D1361997B
36C6E5EE38438E09CEA905DECC6232BE5A9D61BA59CCC33301AFB6ED302977E6
E6B633FBBA5890BF37794EB43DE0D0150CFACE7E33F31FA18B24D2C415106407
715A81D1AFE73BB332BDDD0C5D296C160F4AE31CE7C4C5C7429CAB79DDD03384
B53D7FFC075AF958EA76D684BC4890B1BFA50E5582B8A292692BF7531676E71C
05354F0513C1F9C2B16420FFD4CAC2DB92B984B866FA4A18B3092FBD9B1B65FF
66F935EC2A92421774A3A2A754967139DCD62E855D3B4CBF9C7567AB5FDF2A92
990FD71FB214F2E6D8C6B7CAE8131CE0C40F977F76263E1784534C1F36D962AB
48150D5C9DA4919D92CEDFCF8F30CC741122C5FB9A05EE7B5A89408B4B027801
80FED05B4DBF89E2B22532FF0E929E982AA485BFBEEB16056ABF646D25C4A9B9
89DE5867BDB637380A2813117802037109FBAA2A14A32B2D543EBAA36E82660B
A718E999632F0A99FAE19702B9E360AEA5DB5BC1850860CC9072EF846AFC2032
3EBD36719056ACAF558E89B5570520485CAF42290CC598E4A40C406491B4917B
E088251FC16A7ADA21926434EEA2CEE3CAB960A663253F9FE19C10BBB88EAD04
38474C00E6614126B5A2ACDBABD697FCDEB49C00992146AD04BB7B5DE48A5A10
E8D264610AA4B17641442EB18880EE17B317108280D8DF30733C738A7FD857AA
9B561214EC35FBB48BB6DD989164DC1685FC98ADD44640348FF4F8B7801D6C63
7E81418621CF5A142A206CD3B960DE0E463E5C45DE165865D7B40C4A12368894
2F3300A1D0DE1091FA41AED1E6DFD0A99F6D33CD6ACE19C23FCB0E3BBB380697
676C8539FC7E9BC6FEECA799884F5A8106A1CEE33BB65C6F4A663759102E0D81
5E91E961BDCF19D0F6AE8E90B226F5D824D10D630B469E64E163664E01840DD1
F4EB9F3D774D37B475E8B15915C5BC942640DBECD7A3CD1A36337550859A3E91
761FB8C64C2B15F6A85F1169D9884A71339DD34587E6AA0C7D62C41726418EE9
946D974583C005804A4CE40A54896B71D8F7C18B928A3FBAFE8F52045B8894E7
935ED552AAB09467BF9B52B1ABF0A72C7E3F9BF9921B1D4E1BB39805F6164CEE
26404A1A0B2049D6EAF0B445B1803E3C1EF42D93F67C713989DA3DC05899650A
A3D84620D29E407D0D9E9BEC298FF23590730B5441C62F3838E412D7B7631E0D
21ECB9FAC8477155A15C8BD5E2DE23DE3DB7D9AC0CFBB65F72D5CFD34776D6B3
382D1919C99194C874459359B1C6AEEBC787449E7A8A0B26E611857A54E193E5
4FA281BB1694396E779DCEE7799DD6536D64CA0096C06D52578CE8493FA99896
A719013BB7543EAC464516808AE10140833E81D2B0451E16E5AD7C478E5B7AC3
3F428ED84D46A69644C722D035A049F9B67D8A174BE38049D3DA930E8320FD18
9CBB3B9F1BD4DFBCA55361F757F5901E43F02551D85E74264445B9C962469C66
61CD73211822029DBB04A07D1755DF09FCC03E2B128AC263AA3C3F7F896655D9
3EE99C369AF0C21035CBE6F75EDB07CB946CADB5E6098793EF74599199BBB0D2
2FD5E6E871BA10C55DF09CB1C3187E26A8F39083C7678B5E90C2A47003A2C10B
B2CA96A7BB008E0A12EE6FD9EFEAF8CB559004317F63583E7BBD085BB199A800
BBA9D771F20ECC539B1350E68F5EFB8273FEE5C20367FC317F469850B8913A69
EE82440BBAC796D0A25B8CACCA7002457F1A6AD87DF360ADA22BD7C2C0256959
BE6ABB717590B34CFE9C01E8DCE30DDE6563B1D0CD943A9FE84FD3FB3A93B995
21D662C5C5BF1F1A335212040E5F0053DD967F199DBCE844B39FD49D715702D6
3BF32D50452AFA6248A91D9052A29B160893ADEF83F4DA46B58951DA31584D07
14CB52D00D03AF24D415E9669476CA2DF166CB44226C0C2A0AAEC5EB6A15CDE8
D599ACD83A99C17E1315DCF87FFCAE2A748FC87FAC1B3C012779BD1E71842805
C4CF72B22711A629A94C32EDCCB25E052198DFA9276E8C6BD6AADD455B57B48D
3A2E2FA85BE9161C1354A98FC502C16BE3AB13E24A0BAAB05C9882C5672D361E
6F413E3F11A9A43BBF2AD98445B1DAED41C76D67BFA7BE5BE18D333155454C13
9D577962876C374C958AD082242D0E5F90C68D1516583AD15171E3A881458AB5
69029B44C59102DE7B8B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B38A74E29B9E7D4BEF828A51B13E71DF2C
C78DC0518AD29137C8DC053AD6D86747DC82DFD3366CBFCD581044AE5B23B88A
25842ED0050BE19E7F538EDAF1128614873F52B8FE20E16DEF21E3D2FB51713F
DB39D6C3E8B60AC7B4A83F38D6C3283AA890E5C5D4462D0CDA1D49DEB5221D7D
759291FD43C594074033868359A9CB523210CF1A2479FCCC7401AC1BBBA29A0C
F8449C165FECC03856CB08DA710B6DE98A17CA615483CEDBDBD9C2F47D84B562
1745DBAEB9560610DAA89F9D6EE68F8DFD8D0E136CF2B9B44D86E9064DDBA73D
4AD2AECB1F576EE1254970C70643BAACDEE7682FACB396AF64E102AD05E9141A
2A2B04760E9C6C61639B9E43B6D719F2431580556CCDFEF253C0B613B9BCFAD5
ACE01883440C3C61D2BF098A3823E734AAC86926CEEBD235D1F3E05CA0A67A4F
22C2D72A793CE08FC5937B4D7FC5E77105598B3AB259EEE0DA4D7517CF10172A
9CF549FC86FE3C79A1FE96E5ECBD1897E78765DAB8AF93587203554CB8008AB9
1561F7B489D2FA6D444F54CAFFB3F32607B0397165B14A92BE18683BC31EF660
5F4FF9BA5338BFD5864400194937B828D9D86E7EE72A083EDF44B4052C7AEAE5
A717188A7D376D56E0B4B1D432021A9EFA4307A08F209486B3CFFA939A4665B5
D627D9F3CB0E7863E79A95347529021C91088B5CB39D4D7BEA45FA317109628C
36BFA67F70119F8B0F33E0121A2675BFB153B298D913AB360F36F5B0D2D35C14
07D8477DF59218976FF8B593578363822DDBEBFD3DEDD4C85EE513D30E78D7EE
3049FBDB14785F6BBF58F94228342617ABB13A9B5471010ED8F4F0D421F534BA
4ED43A400DC83E5BC791CEC297C9D191C81636CF41463721C0668DEA8C652EAA
A1BA512AC17DF0F573E959DD1D97765E4884A28B53644B297150A1BD25541599
DD68E0DAE771A39EF4DEBD57A5044367C4D4679DCFC50A59E19BB710C9654E86
87CC471A1EC72ACB861E9F83EA374AE44B076AD4A7A5BDFEF661DB12A5A5B775
04404F416A7707C4F897456B01E4678FDB35670D6FDF33CC35F4EE541349015E
FB730C0FC37425534A3DA84172FCC1592C876A83CF48D6A33EDCF9D044F530C1
963A224327B6223806B8C5799479C0B57C88F77651B6B1FA8B4FFCBCD6D24784
8CEE1E28367037135C80EC09DBEBF0C9E9553B3535E17C8882EFA22A4C713D96
3F9A227141F26557B683947D5391476F7003EF0839495390FAFB10EBDBDE40B1
0F2281C8F813550F09015EB684FF405F52CE07C6CF45CCEEFCB7C512232E0B86
8F7AED09C4FBBC7765C609346D8C9109DED70DEA25D684BAE83A805F7D11083B
10F7613C59139D62E8CF2264C6E6879648256634352707B1BA6A2A259E73A094
481460B561C27A38835B1A04314222939FD61B9A7B9FA7B3877858BB9AA29EBC
2AAB1E6072FD56AEF80805A155A88CD9DFF36D86FE57A4135D831C4778CD4852
1EA555A3A3EAE974F801ED404A743E1FBFF1C53A0314487BC47D3B89066A22AB
057C7C2D07AA24ADD034CF569EF13A1F4919B7434048E9D876A3002C11152226
C2D9AF9BCDD859EAD89A331B23E0502648831AC8827A7FA555E05BCD48A8A131
8F631C7FE335A29367992A1E529FD4B293F3ADCAE7FA5F064E14C51A3FE3F947
D5F4CE1A763A17317438256E6113ABCB5B075EADFDA34A9FB3E5635D875E6A31
7C4C34C80FA783FE545209AE8BAC0D03994677C6EE0CF661AE82DB7EC78EFD77
5F8EBF87C9A4E731F01E997307913E8EF45C69F4AADB7A3FD95950DC2707802F
B9CF0D93839AE1C95056C35B2B7F787D92AE8801E146FA5117A1BED7405F8451
49CF85F6A03B695AC0137EC4F2F09A746FB1A55007FC60C1D04AD4AAC6A1F4F8
0349AF8DA87EF6AF7FF30AF4FB6D00E863B27DF4F2DEB0B0F65A04692C6647FA
B361182AD107762088DB6402C304EE8EC4C464EC59730B3BD6CC6052AA2C8134
185D2FD7009EE2DD94C933DE738E5833EF129061E597B52FD656D9A0ADDA45A3
97B84FACD60C4BFB2A1C147FB5FC1264D5723CE6831DE08A061E6DCDFAA7981A
92FF976C5B7F17D11A10DD2E56FAC7B25C6CA4081CEDEB5896A01360B9C2062E
1D40216A146529DEF62BF16E8294741BD70DF5E239A83D52905B409DF113285E
0E0DE4D31DBF97872D7E48BDB97A113D62C4B6B43417E32561EAD1AF652E422D
ABDA01E89BBA972E845349A683ED2A64874D04624065B25C661F2DBC5C50C97A
63F7FBAF39D5E8D18A56D8A703B4F469068B96F0C1A498B8DC67B9CA6867E652
C64C47885F4105DAD26AE2153436D892FE8D7940DE3D4FD234996D43479B40B3
761D8D15862B75DB12A24DBBBDA5659326BAC6D6AA170363BD8FA398748183EB
2C6D080320F9A81BB12E40292FCBCD73A9CB5904A2D37206987142680C64788F
6BE145D99F70574393F75493D159DB4035A37C5FFD482DEEE14EDB793BF0C98B
9A9FA7590A8A2072E14E264E580EE5745FE8EF42BC914784E19337A215135C96
6C537C6FAE7E68338575D415EBB5D4B02241AB3B157321839EB857878C3F2FA4
4C3FCB27623F0936B1E4B9CD9158D7537BBCBEBAEC94F1D190103A19529EF672
218763144F446EAE5197758E0458C527D0408E3D527131FCDEFB8BC7DE665C5F
47775A67C6A81009D3C81A01DA76329F29654EF5E4BD8A5B897FC70C0C112530
98CDBB0B7C07173B2FAC2C9808E14D1718F12942279587E25614F8541FF7E243
AA4DFFD3E15BA200A8E5F1A7DD8829E6C75123998FF6C47BF25B05C8D0309FAD
046ED9CE093F651CCB6F530354AEBABE2CBDA2AC99B7F119E470A70DF3D8A0BE
F04D5F6EF0A7DA1C532139A6DA38FCF89E9062ECCE310D87384A4863D4E5CD22
08915F105BA9BFB193030B73E8744E561C6618348CBAE03FF814407BC4058112
3BF1FCB22979721579FA422968EA82C601010A08D25FD770342C720E92784C5E
70210C1948BA567E75298B6811683707DE018C4D208BBDB2C711E3BBBDB357EB
D412A00E3247B07CD92669BA10A8E42E3E3C750565DE4228990E597E21CE11B7
812E89A181499573627C26114DD82157993333227904D8DD0DA50044DD3CEDD8
32CE36967509626BB2CB635FCF6641C7A197428F3F75B728D87600E8E775BB3E
BEEF2C97B4830988D92C18178DAAEA19A2D965A8BBEC222D4A35D3BB0AB14C9F
C66858D3738EA82E682238CEE78AFB0997E30E10B12E08719DA8BBC28C141CB8
1B6C9B6FEBD489C0E4B2B60A271B585DF66D4ABCA8EDC0BA0C3CBF690D5A6D70
EAEFF2DCF0078B463C6A9CF46174834EAF468188F85935EAF72CF826CF931083
B723769371B2366BCDF8B6E7DC9B82F160FF9F72DE5B21987C4D89484EE1BDBE
056026C8C1E059E227BABB15DB9C5117227E44CA8EE79FAB1ADFD0B95E347700
315E85675A81A0E885B6D6504FB3AAE548DA4F15D889F41C13A2C3F021F57315
33BEFE67747181FCA1D77116531564BA32C9A812466C68C4F61D42362FF73F83
8209A249087BFCC6F293085CB54812D8E81B0A3E38EA362277C7562AD5161859
5AB6D2AFEB03C466EB0DBC2E9C405F7326FB6FCBEEC037C665272359F22CD473
EC3B8308B94D9CC39C8F087A77A8B5F8CEFCC8ED24A0D895539C05869D915695
F9B928214F641D24740E0CFD58F97A954D5DF055CFE15E67F3D25F93DFF138BB
D745F701B26B273704AF5EF8A25DD3260A21045B474F5374D80D74E8EFF35D7D
B074CF6317B5E0B81EB0BCACA79E647628E8EE8C15FC043D21EF5E341FE631A9
252EEA258E096AFE70E806BCFCD4977CCD8C45FEFEBB1E5752F9A5C90863C06D
07C34BEA41F5A14A7D47CCAD33571E160590FD4811B87FF5A92CFEA476BDE4FC
976074C03F5AF5E709F6A56BB819B554AC7254747CF9848933D4355629B72074
26AA903C42FFCC1CBDAE2D823189D158A149F9312050C8AF749676BC0F1106F6
2A30E1FBAEC50F70C8A55FD3214F7C9906E081B8C8CCD24B4F33B77E60BDC6AC
67591C8AB679B4C628C92AF392F2DC54827C99017BABB53223DB28D4FDC5C2E8
651EB58CD9A51ECAF0A95A71B13E1EDCE9D1B2A6BD6CB1CE9830EA7A9F1AD203
796616AD93D31072A4AA972BC1D9511B1C96F6E74637262D4593F1B7E133F3CE
656EA3127675947BB74123E11F4488DAE02A46ADB112A5C09FE173C3E5A2B357
EBD412A00E3247B07CD92669BA10A8E426A9A3D29FF4DE728380D89096E480E5
20FAC9FFA982C01CD14478399520A77AB23C7F16C7DFC8B36B5106F9A1C9F2D0
1F3620385D4B83145ACBFDEE0097F82FADCC1487CAC5CB571958BB8A5A55BA0A
223B94F3784942E4C27400E0FBB5062803C344E22A169BBA8D1319B87B3AC6B3
6D2B23677B408A3F7CADF09D8FCC07475B6E890DC4DDF57243AB565E65EE85A2
D8EEC6E2A6862F4E2C339BBB5F43BFB1535CFF9D1820E68CC90A73F8A4E9FE11
DE39F393E7D50D1A46F53CDDEC1DE90C057CE8B370887948FF0FAC092033C7B2
4A6AACC745D5C3C6BBFCDE2429EC0989A3C09E4553B37EFCAC7C89BB2E83B5CB
1CBC2F70B1A4085443934A6F45B40E3B0D6539ECDA319B068FFB6052BA17FEA2
16B4A81E38BE317D8968EBB5E40D8616BCCCF863692103251806679DD352BD68
9C0FCE5976F1E607AC630D594EBD2241633446204F755ABB0E1E775F2DADFE93
A1F55856B048341A0B83403C3741FF1CBF67436CEDBF62F55D2EE095EACDE67A
5FA40419125AB79005BF42B9817E73A240230AD5C12D653DE98E3FC72E8A2CE3
3797676042C99707E5B70D4EB11D4698BE7BE357F73807B202F3CD19E24C1231
297F0243FD9895C72B83A8BA9BAF4130F0A98775EA2A2A486B19396BFBA6BC98
2842784C178FA1B911A65546D32BD4FE16949794C2D78A968F1DC4B7506DAB4F
FA88216F3FBF947552AC5D41C6D9B23043832450F94F0F21B6370725CCF2880E
068D61F2BF683AE5A3514D103A3DB09C271C7708F7D78C26C1D302636F1F4AA9
4D669151F9E2431DA5486F6C7E238C2DF5F240C93D5EE589115090897424AA83
6C2B4F5DECD0F1265568917948E9BE703CBE46F07FD555CD86E6B6ECFCC3B8B6
DF79051836E668227E44723EB4237837C5E234255A40C82AAF61A7D3C9E115B6
91DAD9B6314C60F5672253C9B51115B5336745BB031487211503DBFF8D0F8CF2
9AECE73F663879A098FED59FA4C06EF931B3F3117D2BA92A6C66286A86539211
F10B1F253C082BB8525420B7A86920701122973255580ED96BD08267081E2966
57E7F047BFD43B4D084C9603CE508F026B2ADDAD6C0D954CE341E97F9ECCF6D8
C11C1857E1B24EABC32FE5B20E2D3CFE01B608B578E9E739FCBABCD86F261D99
ED0CE8A5ACA57765B68627213EA2B4C4BA7D1CC8919DFF187A6A58D2E81F0236
DDCDBC417DC4831E4EFC65AF3CC8C0BED602BF78B434D98F3BC0720F23CEDC5E
42A4D14D1EDBB6DA767C6CD2904F3C232F6626572DB26FA4F78DEC07D5975B8B
E614652223307EB16A7C45B1B3861D7D57BD7C73B8E5CDC418ECBA375E02AE84
420BCE77F52CBF744DC319EE18011EA6DFD45D6887B966A0115274A883E11340
1344E46BC71099E3D76D55064EFB9F8B01DC93E8F9551EBB97DA078E17FA0A86
A533722F67CCE46F8CDEF6A1668FD3EAE439306822F4782E29288AB0A0101125
787AC9463671F2D1F17FD7A9D4BD5E272DE5974AE7A1CBD30EE456C00A92BAD2
EFEF8E3D81853E01B346D9F08ECF320D1B9BA214E40C88CE49DBBCCDA695412B
CBFF2A962A9DC4B8DD8DEAA256FC5FB2E6B010AE5BFBBE7774295A600EE8A41B
D71C00AA84AD0D01988E97584157CF45F4702A1B20EA372C116E3B0337E57541
D6AA8AF04C833497F7F638371B463A5CAC6FBFBF3AC9B22F947030413B8C700E
0FFE02BBE488CAD125564FDCC48B23738C38C51037DDD271CA8159B74A9CB691
74368EF2AAC953EECF7EF22863574D6590F5545E8CCA6006164709596C3C4ABB
6F15BD9E28F0161F4220CA2E4F250B1AD234B22B8947FD5F5A16CA6EAED30961
9A27C0EED6598CD84CDD725F9AA0B32577BCDA0B2C8F3FC891B295E795E203D6
837044C77DEC3E3C6F9533E97A907B13ED794E4F789CFE3F122A2F789900138B
3B0186016DA7A3D073CF35C9CE8157247C326369ACCC0EA722FC9DFD74065616
460655633011B619E65998E5D85161662EE051A1FBF641FD8F324E2ACA549BEE
668BC55CB065355A59CC5E50FEB1639CC4D6D12862923F31B8FEAEA28B48E370
6388E9FB26015429F9173B6F38EE96B0721052784D1341CC8301CAED4D969712
B8F49B647145E6B54844DFC5BCAA14D79BADFCC0F9AB4FF7DA80F31A8EBD8AB2
6E493ABD2CE50B3BE5D63D0929900D9903AAB916EADA05D12915AEA22ED39DF9
D18B3EEB8512C172900660CDCCB3219F4982C9D634BE8B5E34EB7238692EB3AA
16E2917CF25029A6B55DCA4DB53144B77142FCC0C145407BA68A4CB2C6D2ACD6
CCB8BA6D03BF5EC2A8827E979294E4FCE0F6826F908BF9C29A73D7DCF77716A5
B5A37FF81E6042B1D090B06DE4432AAAB19E4DC9186F2CB0BBC0CE12BA8CBC2D
C505EF874F28F29A4D5FF40D0A5F5658FE258D0E268FCD322FD08D6A1FDE35D0
960B71F4F18E5C4289867ECC5F14021486C78C4469BBBE00C9891E70B91D6DA9
1F9B68A2AE149E6BD97A470EC6591FCF84832EC7E7AAEDFB1966063322AD3A0A
B21FA5B60CAD2D55EFA3349A8EA4D9B7EA3D7D2C6BB5A426C55E137D23FE6185
3FC84298A55FFF94579F8BCA796C03D9795EF24229C51E25A0D5588D9265D630
D5775370E9C13F0A66BAABABEF97AA7722E1D1CEC4EC7DBEE77B40CEE6E1A392
3AE34B82BA1AB41F7BF0E88C7F59F2E66F7E82DC5B3E46AACB55F251286E3B16
C00DF9E2E43264A361D73B6E7B423AECA40A01527622EE8C115164BD9BCB692B
3A7FFFECED7C7F8B2CA4FB1CBDECBBB7C3FBF86840369D28ED9EA220C5C2C8E7
3B23D95C573FA5FF96EB96DF67738B97CC3E7CE529180E60294E2F55F244FA81
55820BD8D496E8CF625630E738FE658DCCAE6B7E7DCAF6BBE26D62486E95F054
707C75EAA402D4E4DEB8DE95405ECDF5B7D96B6B9621F55D95528905C928391C
91CD3B60B89713F15A9958ED2474B34971916984BF9CA68E0DC988E918310000
2BC596337E27CF63A905F2E2C2F2424D401ACAFCDA24FEE03D4EF1B33FB14B1B
A257E17CF2B1CC0309047E49632AA6C775AE7C793CC443112C9A7F038AF83B9A
7F5784A380CB74C519C267232EBE29AA5B55063D1D89E0EE80DF4D30889981FC
EB802BD547B31C6A01DCB5BAA7306E06194D2196C0DC0EBA3422E9FF6A439173
FDCEEA15E74895AECB842581C3BB3F6896D72B0CD6A177834045FD664E71264F
207EDCEB6F6CD04CE89C7FABC9FDD9406E3875D44AD245F4A10F83A266D0935A
38029053773FC2B886075CAFAA40CD9544D7B4B835FA20C26E0BF40BE169B174
40CA9AF197C62072717AFE0BA6F70B7AA4E149F4FD9B13B4C0650D4A0B81934B
A0338F27F7F8477876646C0F4B1179D91F239A3C0A059DA210C5E777D703D00B
DCD463341D056A472DCD3084B0143AC59698E085927CACA804B2822AAE3FCA5D
2E789928BC0F95702A964E4DDB9636DB4598BDF81AA614AE2AE6146DF695E4CF
FC00070C1F54E1D090E3889B64335C8B5DF630198139181A98FF75DD53A5A82F
E7C5D8B7AFBF59A41C4EB692DECB3771433B47B553599FCC348AC52F4E6D1C0D
53D5B6D8CBB7F34D361C8F1D78043584B70C883745CFC14204BCFC76BD0A3CE9
9F8441B5B6FE9AED2B91601FDDA6B36A96421288D89AC6F0EED9A95C99691AF2
9816E654A05AFB1AA6C7FEF697474CBE559D5092E8F227C747D282F76E938550
83B3FCB7EC39F2F15E470997FB3A131402EAC2D6AF8A57A554C2292CA60486BC
61F59D658A87DD4F1DC47DB1025C9E72EB922E4B194428F022A5FADDF7C02E08
EE6E47316FAC512C3EA0F0669EB6B3E5154EF0A06FE6393927DC458001F45DA1
784B91F4C74C63E96B728F58143186355E912CE9218B756DDF97AA82213B3DF6
7C4111DBB7628DEDC3013E98BA2C8839CD798C8B07FF4C92DE3B1ECA5D3BE97D
447487177E13DFF10057B85EAD13458D5C30EB411C6656DD53F8E257E41F2C18
4AB46CB979195705989B0A7FB714D96F973BFD4D6090146185A81AA4F214B843
261B5EDD62F41B3ED10A48910C847B5DA3F1B2AA18B65C6336009C246505F35C
F446A209D0588080CFF5A3D067FA46C5F29A6F9386574632FACD39E92F6D12E5
ED1E26EDD1CC9305E14E8EF24F38EFBBAF3FEE9A87F8C7AC19B28B627DFBAC79
2262A4D2F53CD6045F57120BB5819982A34C4991B5DEEFFFF4DE62011818D10D
5FA9F5DE2E80DFB69985E9F6DFE0CA501E08BA472E2278AA64AA9FF80D78906A
CE661BF516DEA6B241381FE8B6C453F843B13CA3BC7416909078D95BE6DDF274
EB953F0C16D9F1FCB1542BDDF61AA9B3BFDBC3A844F8C6690466E8D71D2B9EBA
70FB888D0A851508EF3A5F5666BA4E1128680D1AD07D3EF72AE0155201DCDEBE
9637FC8BD3E97F899CAA8CCD61D7D60814F5A4BB0744340826B71BAF3D218768
5FC2B4881581DB8E1F6B793ACF6AED8090693AA01D8B1997FF2972A7A58BCE87
7C4F2BB4C7F1062F2BBF22DE946ACD4A643BCD5B19861B9663702143289AF158
BA7B2F57EB8D5467C03BCF73F5E196AB78231D5B159C638C3346BB7DA156BCC2
5A52AA418336E142D94194E5CE54F19EC5974B7255EB727B7CF04E03D6F2E5A5
B24B2888605828AFC5EC4966333B78B02DE27C7914F1C2E81647141D27CC576F
131B0E8F040538B5E7DE8084375A5B8302EC7CCD1D70821939BBD19E7AB862F5
1A833BD1FA7CE5CF28AE51FF8FA189AFC62E894083654116773DE95868A281BA
C01ACA510605270065387BE8E85B7916A079C94682E1222296F746C29009E45C
7CCB800762D33AE5DCF7A24AB83FD753A9E426991C09E938354A0FF02B1A9FCF
3F74FB64BC0DCEA70D0B3191166ED09B78B2A57BCCD2DF447E0D79362FB4E5C7
FCBF815D35B856DFAC85B4D8190281BA4CEBF15816C29A27BE5C8F0D044A7FE1
F90201720A898BC1E60A809F8EF09DA8F67A55F5DBF6C90B036F773A3565C28C
2D635A2EF3AD246F15925D0597AFD80BDC005C9FE98D71864DBB42D755385581
F33648A002571B3629F3D792FE3855F316EEEC7E59783CA32F23FCDCB4951E70
F9482D31D9995C1DBCF22DC61B3FF0810F73468300B962C5BAC982862514D637
CF7F36B580D4275497EFE8565A9B5F63D12629FC13AA906820F4C8274C1DA98E
3B005947E91060A487DF63A382E72FC967630971BC01DC56F7FE67A29D8D22A8
06EDDA167A0D12CDF741FC27B0875ED86B498D9A34F90B790D883B0C896B05D2
E05DE8F78898E721F9BC129E69802A195D26038EF320D19C8EB16F7E731BE450
CA385E1A778176A5B2946E56800425D76749F91E630BD12A603BCCEF926D1D46
120964259D293D37162BA3AAFCDA2FC7E16E8BE0432BC74A69AD4D38AFDE4EE2
18BAFFA50301B4F5124711CAE1F9174F9B6671F34CCA7B5AE871BE034322C052
85122C989442491F0AEF1E8CB0917657D9AB7D81B729A7F0E38D1A836B7AF9E1
FD36D119C8B8FD51449F12FDD58AA7D65C6F7015384EFE20C74B84241A7F5249
88F2237B7737072DE85CD024EE4EB2D72D9659D413E086FC9B08C97C73105EAD
1D89EE81C52A1E6D7F3FED8C50FBDD957C7C2588BF17DC570D439E9D214EF74A
E73544E80FF82D23394318C22B860819B17F95F1226AEC1FF295B64BF07E3FD7
A174C43D8193C5E291E3813A2C643DEB7262013C0F6DD8A3DA6DD531736D4E2D
C6CCEF532CF9118746EEA119D9B26D709951694B4E6E6DC2901ACD4009F68916
22311124BCD3B5E7638E641E7E9D63D96BE01DD08D10E8BED36ECD3B2D68A2AA
D8941F853CB8B89B768BA9B9DBD758F9E2BE98B213EA5CA9C27006073134EB33
D4763ECF19730B67068836AA145BD76F8CBCB04D7B38A5165F621E4B4F007545
62828431A9821624AFC5F3206663B8466D2C681AF408F02F81352B13A3216793
8932318908FFF4D293C45FDEDC0E0AF0DA9B52C3B73AA68174819FC52837F0EC
AFF3F15CD531E36D1B93EE25456BADC7573F5D3ABCE28B8637ED07E35BF8C8C2
AC635DFFA6A6FC5033DB95EDD034A76D32DC847E0864E06191CA664B760E9895
5B94B36FB58D6D2A93D9997F399B54A32020FB480DFDF7BF0BD348D0567FCE0F
AA8A5E64D5F6C1C3D422345683C90D9DEE76C3DCF87B4E03E37CC01217DD585C
9F9FEB27C2D8530D15D3D0D92800F965CD0D254DFB8F64D1958D36E177E13145
C804ECC77A74B59798A8AB4C865B2AF89C0E43DDBD01CE517257DC39AF183F55
51A98F338822AB0AD9A792E68EC70341FBA5CDAEA71EF36C6FB627C41BE91A47
A14141ACD537E9604E63D11F2EDE3C54BA335310614E0F2C4A86420BF6D75170
8592EDA8C789035980B6451E53C608EEC3D8458362F00E36C571F45EBCA42C58
7E8207592BFCA2FF89C0568476073DC71F7B7C3FE3212581E231B93914C115D4
948A80F04B854DFED870186012B60AE65CA72FE55497533DE11EEE3BADF6D86F
C17A36F3907EF380FBFB2699453037732F668965A371DCE48956C345CD4FD487
711861878EA0056DA41AD706B2E8F495D8DD5BFBE8F3C8348C47164C516AAC82
DF75016BE94B9253C56DC39D549089FC76A570D0CFE4D460D91E8CC506066BDF
D6D26F89E6170107707A094EA86C82B895A2FF3FFE6F5119D77CF0D7A8AD10BA
FE635B3386E362EC7E171D3E4F5DC8654FE1ABFE0430DB85CB02F4273BC8AA48
6748058B61290D5965599178CBD1C148CC24A54E62107D2AE89CDF27B0F24A4E
1E42387ECB13AFE19691DCDF0BFC25098B4CAEF62EEC94BE8394E797AE05915E
791F2E36F2EB01AB075842A595796C9060C77CDFC3849E6A2CC10A99281C8188
B2CFBD519F7C07818B5FA43E35D39435D3844D2048A086B14FBFD43F6DBE32B0
B4CA1C407BF72CF1FE827D7116F771F11766FFCDF49109A61C5CC3289354E39C
02B4C1C5229F45D2914E4749A8C762AF5BD7C4AC2AB4764D876D6CF650622A1E
AD259618720364671763A89B4E985BE73E434576F03AD3BD8695B3C1D410415C
7F76106742E97B00222AFB44A5DE3F200072D4106FC0C276C81DBCC47659295F
0825879037A6C59AF0ACEDAA02DECB960CD7BF908C5934E1E540B3E4D269888A
E82FE0397BC47CEB610EEB1C4E42774A0E978AD79FB1D3D20C28687CCBA357EC
5C2EA0707CEABD8F2AF84FBEA71F51186E9B9BDB90A1F664442DA36260EB492B
62CA59B156E7DE4BBC4F53E7448D3F5836675DAEC1CF94A6336D12177E8CC268
082F36AAF03A1AE2CA8E822A55899F61FF591563C2BC9F0C75F7E659CCD3581C
0EADD33D7665C1BCFF8147BF8594F34FAA5BDBCEDBC6EE510E69878C719B9653
602628FA139739901CC97F6450F81B74081E54C340B47CB1ACFDE97DBC30B89B
9603B8D1928BF0CD67AB719B3CB401C9A26718865C7E3DB9E306D73B6963ABF2
BC631776B782CB43BA00E4BEDECC82086D116D56152BFC73A06B84C2EF55CE42
CFC38BAA12D7FA5FDEB4D84ED42F4489339108A2159A277BB42D415C6D4470DD
BBA89A6045A9733CF1AC267993FF220C91F8BB9AFE466D87679CAE83BE9DB87D
D66320CCC83229E3FE4EF866CCC4029CD5D1200A498ACE73F12A2D9587F68AFC
4596DA63859AC97006C5D74C7C1B7DADF05F7BA746B3DC5DB587EDFF2D51919B
645AB2231BE3FBB4EF256B7156A78F61A5425FCBF27E0870B7284F844FC27438
F6062E3E625074928443A8A04FBA63797C96E5FB275F6636E5815470E700FDD8
785516EBFBA2EDE43E4779235E6C0743F81C9BAED5FACE19CDE7731A579D72CF
4502FE139D1A7E156C50A6FCCFB7200C540287D85D7D234BA1E53B9236598B5E
50FC8DEE6AE7437664A9C445547F48F8632BDBEC5AC22072DA9FDAA393B12DD3
F3238524B47161845E475CC4EFCA747CDA9169CD35E179AF1A4EC815D3ECFC40
73BB29D08DC82B4B83865CB85F6CF13A519394225D13DC588B2CBB3BB0529583
53E5610934503C71AF5294821E305C1CB7EE5415D29131FC538B2CE8D5734233
9A037BA1EBC21EB22E5141F2614C497499709141132F760DF4BF9E321069BE40
314D6F794388038B14554FA7FD6DE080C0F13383615EDAD327091FA6280A0337
329790BE8060ED5A7B95500C49212CDA5E897CA940B51528196A7E1048B1B7F0
160CC742934634E242679EB8F7AB2958B077141ABB179DE662A278A6AC2EBA88
4F65AC7E6D757E612C7128CA946251E23CC4A305FDBC2C3CB09816FC1F6D59F5
1FE1B7E73EECE63BB870862CB54FF1C15E75CB6AB4263A49ED439DF742A27F15
B96EE899E8F87338BBA49B0427EFE834971A6822E65D077F73F7C4E222FBE944
C19D6E4A39B8DABADEE40422499341F64121932B06A768B45553FC41EFDB68DF
2084ADF1F4AC2BFF6DD64280D7CE358509EBFAFF22BBA1E7284F6F79A1AFD2CC
A55A0B77AC35C488BC364EDFCC3A8FC9CBF4A61FCA773ADF304EC1FA097A3BC8
30DAB0F2824F48BD22405CD05B6E30445AA17C9CECD8A88451DA79F12DF8FA13
6998ED7A3F2BFEA2DA71A96B4DE4D59B62E1CB54D4A2F18CF8013A25490DEEDC
3E04C004823D89647056C5904BA7822480F99217A90E83038B7729AE401D5ECD
6AEEFC2E3AD0AFC1413BACD44C04A42D5000C7E6ABCB7045AD3A8F5A3B36A17D
214276A04A2A762F7A60B60A4D72E92B83B2B48C5BB4F4CF1264A1995D8E78E3
921CD04A87BEB09F38850F3733675BF38931C84E02EE3BD43E0D358445E9DF9A
E1D8EDB547B5B260BF29A62F11012861D962702190FD5ED65A96DA74D9C42447
A2AB978F56340C41D0D2E6214EA3E103A554DCD57C62BC41636B7C3FC2AB5228
664C3EE39CF5D117B542E87BD862FA67F4EC3BBD178A74128580C6A65B2F0C30
E971FC66CFB9858723E55A173A8338735FF11FF4462715B9DB69C1B89A8CBC45
DC4815B7CE110C0092724A6A20B399F8C928D77CBF59D4A234490B7AB784D65A
3173263E9F889D1DC93C4DF3558F1B37971A82E437E2A5A0B07906BED923EC8D
16367CA4136B972AE952F31BC9085C3FDFAC131095F146A4C7CB2641DD7EA63D
376B4335DBEED16C163477414FF5C2636F293B643B03A1530F764F1FE92E4EAA
5518C161875A74533BCEF70176039BE35F3AD4BDA177E2683D5C68F76B08D457
0D068AEAEEC7DFD1C49521A7B9DC24E08A696CE19A7FAD4102FF5CDAE35450DB
FE97013001757C6DB26182577F93DCDA1CE748BB43F32C14B0C44F2B95459509
CB68F31308DF58462BE25CDE37F598D4C94427BD8217091BD88DFBA857CE5C41
4A51A051E42F8FE08C387538A961D92278EEEBFA873FD978B4FA6B830EB07A0C
EB1D236931776C70117942F3F72CB32A87143B71639B53149D6729F6F7A9060E
F5C3ABCE2855A0DF63ED26793EA6E3BE7FE35626E4C0FFC049BD77712AF4358E
A455840AB822ABBA35E1B8A99AF2590B524A96B3F9861EB991A769A40968E110
686393C635E678E88D88169322979AEC0C060F89937AD651A8079D1846780232
F6D637E16B825A42ACF5799CF7B00770EFE79DD7B003B2201D2AB527C6DA11AF
63109BB50DE2C1735140DAADA1D66AA62A29862375454E59FDDF2403E2BEF68A
4E4B577D25FC11FE2F18A4E5B90216D05D8783F1102D5B3E716CFFD73B8A8DBA
E9B5CC1419A953B366D4198A7F8ED66A63CC62314E4E98BA8575EEE63A490C7F
7FA99C111BAA0C9229AB506FC872193A6823633521A2392481CAB7C163B2EBCE
670260D2B564F4E18E5888D9EE27C366014BDF9EAD1EFAC813C0674DA0C2B023
74CF066FD8F2F866E80428A8C85B2611643238B3A63E9A6B41B7801853E1583F
E8E8C8D74F30A1030B40353832AB5BB8D96BE1EA2AED9B840F5A372A35439551
B3A9FE677495E76F2290EF23CB7FE93A3F61DA82220DC41FDF483FA1D6B5ACBA
C9C08C4FC03F28646EF9BE49EEA1C70D08C552
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (essai_formulaire_qcm.dvi)
@start /Fa 22[47 110[44 1[45 1[46 56 32 40 36 2[53 57
85 26 2[27 2[29 47 1[45 1[48 10[58 1[57 50 1[70 55 70
71 87 52 5[53 2[63 1[58 6[24 49 6[49 49 49 42 24 36 45[{
 TeXBase1Encoding ReEncodeFont }37 91.6562 /Utopia-Regular
rf /Fb 22[60 115[73 40 53 47 1[73 66 73 106 1[73 1[40
3[60 73 53 73 60 15[100 2[100 7[66 20[60 4[30 44[{
 TeXBase1Encoding ReEncodeFont }21 119.552 /URWPalladioL-Bold
rf /Fc 174[101 3[121 77 8[91 17[74 3[52 45[{
 TeXBase1Encoding ReEncodeFont }6 131.985 /Utopia-Bold
rf /Fd 171[66 59 72 2[81 78 97 62 2[41 85 77 63 66 1[73
1[68 65[{ TeXBase1Encoding ReEncodeFont }14 105.588 /Utopia-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 TeXcolorgray clippath fill grestore
0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray -126 -481 a
SDict begin H.S end
 -126
-481 a -126 -481 a
SDict begin H.R end
 -126 -481 a -126 -481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -126 -481
a Black 0 TeXcolorgray Black 0 TeXcolorgray -118 -189
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -118
-189 a -118 -189 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -118 -189 a -118 -189 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -118 -189
a -118 -189 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -118 -189 a -118 -189 a
SDict begin H.S end
 -118 -189 a -118
-189 a
SDict begin 14.5 H.A end
 -118 -189 a -118 -189 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -118 -189 a -118 183 a


-118 183 a -118 183 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 40.34871 lineto

 0.0 42.69704 1.90364 44.6007 4.25198 44.6007 curveto

 477.64397 44.6007 lineto

 479.99231 44.6007 481.89595 42.69704 481.89595 40.34871 curveto

 481.89595 4.25198 lineto

 481.89595 1.90364 479.99231 0.0 477.64397 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.75687 0.04706 0.7804 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 40.34871 lineto

 1.41731 41.91426 2.68643 43.18336 4.25198 43.18336 curveto

 477.64397 43.18336 lineto

 479.20952 43.18336 480.47864 41.91426 480.47864 40.34871 curveto

 480.47864 4.25198 lineto

 480.47864 2.68643 479.20952 1.41731 477.64397 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 9.92134 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1 1 1 TeXcolorrgb 567 112 a Fc(Q)8 b(C)g(M)34
b(1)g(-)h(L)8 b Fd(E)g(S)34 b(F)8 b(O)g(N)g(C)g(T)g(I)g(O)f(N)g(S)30
b(L)7 b(O)h(G)g(A)g(R)g(I)f(T)g(H)h(M)f(E)g(S)p 0 TeXcolorgray
0 TeXcolorgray -118 183 a


 pgfr

 restore

 restore

 newpath

 restore

 pgfc


 1 0.2 0.3 0.1 TeXcolorcmyk
-336 669 a Fb(Nom,)30 b(pr\351nom)p 0 TeXcolorgray -118
875 a

 -118 875 a -118 875 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 1.19553 pgfw

 save

 1.19553 pgfw

 472.57004 -1.1648 moveto

 5.57913 -1.1648 lineto

 2.82796 -1.1648 0.59775 -3.395 0.59775 -6.14618 curveto

 0.59775 -26.73042 lineto

 0.59775 -29.4816 2.82796 -31.7118 5.57913 -31.7118 curveto

 472.57004 -31.7118 lineto

 475.32123 -31.7118 477.55142 -29.4816 477.55142 -26.73042 curveto

 477.55142 -6.14618 lineto

 477.55142 -3.395 475.32123 -1.1648 472.57004 -1.1648 curveto

 closepath

 0.59775 -31.7118 moveto

 pgfstr

 restore

 save

 [1.0 0.0 0.0 1.0 4.10426 -19.53471 ] concat

 pgfs


 -118 875 a
 0 setgray
 -118 875 a 0 TeXcolorgray
21 x Fa(P)o(r\351nom)19 b(:)p 0 TeXcolorgray 278 896
a
SDict begin H.S end
 278 896 a 0 TeXcolorgray 0 TeXcolorgray 1593 751 a
SDict begin H.R end

1593 751 a 1593 896 a
SDict begin [/_objdef{text1} /Subtype/Widget/F 4/P{ThisPage}/T(name)/FT/Tx/Q
0/BS<</W 1 /S /S>>/MK<</BC[1 0 0]/BG[1 1 1]>>/DA(/Helv 10 Tf 0 0 0 rg)/DV()/V()
H.B /ANN pdfmark end
 1593 896 a 0 TeXcolorgray 1593
896 a
SDict begin [ {afields}{text1} /APPEND pdfmark end
 1593 896 a 21 w Fa(NOM)h(:)p 0 TeXcolorgray 1907
896 a
SDict begin H.S end
 1907 896 a 0 TeXcolorgray 0 TeXcolorgray 3222 751
a
SDict begin H.R end
 3222 751 a 3222 896 a
SDict begin [/_objdef{text2} /Subtype/Widget/F 4/P{ThisPage}/T(surname)/FT/Tx/Q
0/BS<</W 1 /S /S>>/MK<</BC[1 0 0]/BG[1 1 1]>>/DA(/Helv 10 Tf 0 0 0 rg)/DV()/V()
H.B /ANN pdfmark end
 3222 896 a 0 TeXcolorgray 3222
896 a
SDict begin [ {afields}{text2} /APPEND pdfmark end
 3222 896 a 0 TeXcolorgray -118 875 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1 0.2 0.3 0.1
TeXcolorcmyk -336 1474 a Fb(Question)29 b(1)p 0 TeXcolorgray
-118 1779 a Fa(La)21 b(fonction)e(ln)h(est)p 0 TeXcolorgray
638 1779 a
SDict begin H.S end
 638 1779 a 0 TeXcolorgray 0 TeXcolorgray 1654
1635 a
SDict begin H.R end
 1654 1635 a 1654 1779 a
SDict begin [/_objdef{list3} /Subtype/Widget/F 4/P{ThisPage}/T(niveau1)/FT/Ch/Ff
917504/Q 0/BS<</W 1/S/S>>/MK<</BC[1 0 0]/BG[1 1 1]>>/DA(/Helv 10 Tf 0 0 0 rg)/Opt[(d\351rivable sur ]0;+[)(d\351rivable sur R)]/DV(d\351rivable sur R)/V(d\351rivable sur R)
H.B /ANN pdfmark end
 1654 1779 a 0 TeXcolorgray
1654 1779 a
SDict begin [ {afields}{list3} /APPEND pdfmark end
 1654 1779 a -118 1932 a Fa(S)o(ex)g(:)h(M)o(ale)p
0 TeXcolorgray 314 1932 a
SDict begin H.S end
 314 1932 a 0 TeXcolorgray 0
TeXcolorgray 459 1788 a
SDict begin H.R end
 459 1788 a 459 1932 a
SDict begin [/_objdef{radio4} /Subtype/Widget/F 4/P{ThisPage}/T(sex)/FT/Btn/Ff
49152/H/P/BS<</W 1/S/S>>/MK<</BC[1 0 0]/BG[1 1 1]/CA(H)>>/DA(/ZaDb 10 Tf 0 0 0 rg)/V/Male/DV/Male/AP
<</N <</Male {Check}>> >> H.B /ANN pdfmark end
 459 1932
a 0 TeXcolorgray 479 1932 a
SDict begin [ {afields}{radio4} /APPEND pdfmark end
 479 1932 a Fa(F)m(emale)p
0 TeXcolorgray 802 1932 a
SDict begin H.S end
 802 1932 a 0 TeXcolorgray 0
TeXcolorgray 947 1788 a
SDict begin H.R end
 947 1788 a 947 1932 a
SDict begin [ /Subtype/Widget/F 4/P{ThisPage}/T(sex)/FT/Btn/Ff 49152/H/P/BS<</W
1/S/S>>/MK<</BC[1 0 0]/BG[1 1 1]/CA(H)>>/DA(/ZaDb 10 Tf 0 0 0 rg)/V/Male/DV/Male/AP
<</N <</Female {Check}>> >> H.B /ANN pdfmark end
 947 1932
a 0 TeXcolorgray 1 0.2 0.3 0.1 TeXcolorcmyk -336 2262
a Fb(Feedback)p 0 TeXcolorgray -118 2505 a Fa(V)-6 b(ous)20
b(avez)g(tr)o(ouv\351)g(ce)h(QCM.)12 b(.)g(.)-118 2576
y

 -118 2576 a -118 2576 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 1.19553 pgfw

 save

 1.19553 pgfw

 472.57004 -1.1648 moveto

 5.57913 -1.1648 lineto

 2.82796 -1.1648 0.59775 -3.395 0.59775 -6.14618 curveto

 0.59775 -20.59137 lineto

 0.59775 -23.34256 2.82796 -25.57275 5.57913 -25.57275 curveto

 472.57004 -25.57275 lineto

 475.32123 -25.57275 477.55142 -23.34256 477.55142 -20.59137 curveto

 477.55142 -6.14618 lineto

 477.55142 -3.395 475.32123 -1.1648 472.57004 -1.1648 curveto

 closepath

 0.59775 -25.57275 moveto

 pgfstr

 restore

 save

 [1.0 0.0 0.0 1.0 4.10426 -16.4652 ] concat

 pgfs


 -118 2576 a
 0 setgray
 -118 2576 a 0 TeXcolorgray
46 x Fa(N)n(iveau)20 b(:)p 0 TeXcolorgray 240 2622 a
SDict begin H.S end

240 2622 a 0 TeXcolorgray 0 TeXcolorgray 1137 2478 a
SDict begin H.R end

1137 2478 a 1137 2622 a
SDict begin [/_objdef{list5} /Subtype/Widget/F 4/P{ThisPage}/T(niveau)/FT/Ch/Ff
917504/Q 0/BS<</W 1/S/S>>/MK<</BC[1 0 0]/BG[1 1 1]>>/DA(/Helv 10 Tf 0 0 0 rg)/Opt[(Tr\350s facile)(Facile)(Un peu compliqu\351)(Tr\350s compliqu\351)]/DV(Tr\350s facile)/V(Tr\350s facile)
H.B /ANN pdfmark end
 1137 2622 a 0 TeXcolorgray 1137
2622 a
SDict begin [ {afields}{list5} /APPEND pdfmark end
 1137 2622 a 0 TeXcolorgray -118 2576 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
-118 5892 4016 2 v -118 6013 a Fa(T)o(S)g(2)1753 b(1/)p
0 TeXcolorgray 1921 6013 a
SDict begin H.S end
 1921 6013 a 0 TeXcolorgray
Fa(1)p 0 TeXcolorgray 1970 5951 a
SDict begin H.R end
 1970 5951 a 1970 6013
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (page.1) cvn H.B /ANN pdfmark end
 1970 6013 a 0 TeXcolorgray 1216 w Fa(Ann\351e)21 b(2019-2020)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
